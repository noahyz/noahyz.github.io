import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-D1zlwylF.js";const t={};function h(k,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h2 id="inotify详解" tabindex="-1"><a class="header-anchor" href="#inotify详解"><span>Inotify详解</span></a></h2><p>inotify 可以用来监控文件或者目录的变化，确定这些被监控的对象是否发生特定的事件。</p><h3 id="一、如何使用" tabindex="-1"><a class="header-anchor" href="#一、如何使用"><span>一、如何使用</span></a></h3><p>使用 inotify API 关键步骤如下：</p><ul><li>使用 <code>inotify_init()</code> 来创建一个 inotify 实例。系统调用会返回一个文件描述符</li><li>使用 <code>inotify_add_watch()</code> 来添加文件项到监控列表，通知内核自己感兴趣的文件以及事件。每个监控项都由路径名和相关联的位掩码组成。掩码指定了需要对路径监控的具体事件。返回一个监控描述符，用于后面的操作。此系统调用也可以执行相反的删除操作，将之前添加的监控项从 inotify 实例中删除。</li><li>要获得事件通知，需要对 inotify 文件描述符执行 read 操作，成功时返回一个或多个 inotify_event 结构体，每个结构体包含了一个文件的一个事件的详细信息</li><li>完成监控时，需要关闭 inotify 文件描述符。这样做会自动删除该 inotify 实例的所有监控项</li></ul><p>注意：</p><ol><li>inotify 机制可以监控文件和目录。当监控一个目录时，程序可以得到目录本身、以及目录下所有文件的事件通知。</li><li>inotify 机制不是递归的，如果程序想要监控整个目录树的事件，必须对目录树中的每个目录都调用 <code>inotify_add_watch()</code></li><li>inotify 文件描述符可以使用 <code>select()、poll()、epoll()</code> 来进行监控，从 Linux 2.6.25 开始，还可以使用信号驱动 IO。如果有事件可读，这些接口就会报告 inotify 文件描述符可读。</li><li>inotify 对于 sysfs、procfs 文件系统支持的不够，只支持一部分事件</li></ol><h3 id="二、api-说明" tabindex="-1"><a class="header-anchor" href="#二、api-说明"><span>二、API 说明</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int inotify_init(void);</span></span>
<span class="line"><span>int inotify_init1(int flags);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>inotify_init()</code> 成功时返回一个文件描述符，在随后的操作中使用这个句柄来访问 inotify 实例。<code>inotify_init(flags)</code> 提供一个额外的 flags 参数，可以用来修改系统调用的行为。flags 支持两个标志，IN_CLOEXEC 标志通知内核为新的文件描述符启用 close-on-exec 标志（FD_CLOEXEC）。另一个标志是 IN_NONBLOCK 标志，通知内核为底层文件描述符启用 O_NONBLOCK 标志，以后的读操作都将是非阻塞的。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int inotify_add_watch(int fd, const char* pathname, uint32_t mask);</span></span>
<span class="line"><span>// 成功返回监控描述符，出错返回 -1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>添加或者删除一个监控项</p><ul><li><p>fd 参数是 inotify 实例的文件描述符</p></li><li><p>pathname 参数指定要创建或修改监控项对应的文件，调用方必须对该文件具有读取权限（文件权限检查只会执行一次，也就是调用inotify_add_watch() 期间，只要监控项一直存在，调用方就会持续地收到文件通知，即使文件权限已经改变，调用方不再拥有文件的读取权限）</p></li><li><p>mask 参数是位掩码，指定要监控的事件。</p><p>如果 pathname 之前没有添加到 fd 描述符的监控列表，则 inotify_add_watch 会创建一个新的监控项，将其添加到监控列表中，并返回这个新创建的非负的监控描述符。在单个 inotify 实例内部，所有的监控描述符都是唯一的</p><p>如果 pathname 之前已经添加到 fd 描述符的监控列表，则 inotify_add_watch 会修改 pathname 相应的现有的监控项的掩码，并返回该监控项的监控描述符。</p></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int inotify_rm_watch(int fd, uint32_t wd);</span></span>
<span class="line"><span>成功返回 0，出错返回 -1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>从 fd 指定的 inotify 实例中删除 wd 指定的监控项。wd 是一个监控描述符，之前调用 inotify_add_watch 时得到。</p><h4 id="inotify-事件" tabindex="-1"><a class="header-anchor" href="#inotify-事件"><span>inotify 事件</span></a></h4><p>inotify 事件较多，如下只列出几个常用的位掩码</p><ul><li>IN_CREATE：监控目录下创建了文件/目录</li><li>IN_DELETE：监控目录下删除了文件/目录</li><li>IN_MODIFY：文件被修改</li></ul><h4 id="读取-inotify-事件" tabindex="-1"><a class="header-anchor" href="#读取-inotify-事件"><span>读取 inotify 事件</span></a></h4><p>在监控列表注册好项目后，程序可以通过 read 读取 inotify 文件描述符，从而确定相关的文件事件。如果暂时还没有事件发生，read()会阻塞直到某个事件发生（除非对文件描述符设置了O_NONBLOCK状态标志，这时如果没有事件发生，read()会立即失败，并返回EAGAIN错误）。</p><p>当事件发生后，每次 read 调用将返回一个缓冲区，包含一个或多个以下类型的结构体：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>struct inotify_event {</span></span>
<span class="line"><span>    int wd; /* 事件发生的监控描述符 */</span></span>
<span class="line"><span>    uint32_t mask; /* 所发生事件的位掩码 */</span></span>
<span class="line"><span>    uint32_t cookie; /* 相关事件的Cookie（rename()） */</span></span>
<span class="line"><span>    uint32_t len; /* name域的大小 */</span></span>
<span class="line"><span>    char name[]; /* null终止的可选文件名 */</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>wd域告诉我们事件发生的监控描述符，它的值也就是之前某次调用inotify_add_watch()返回的描述符。当应用通过同一个inotify文件描述符监控多个文件或目录时，wd域就非常有用。应用根据wd的值可以确定发生事件的特定文件或目录（应用必须自己维护监控描述符映射到路径的数据结构）。</li><li>mask 返回描述事件的位掩码。也就是我们的 inotify 事件。</li><li>cookie域用来绑定相关的事件到一起，目前这个域仅用于文件被重命名。当文件被重命名时，会对文件原来的目录触发一个IN_MOVED_FROM事件，然后对文件的新目录触发一个IN_MOVED_TO事件（如果文件只是改变名字，并不改变目录，则上面两个事件都发生在同一个目录上）。这两个事件的cookie域将是相同的唯一值，应用可以通过这个值来关联这两个事件。</li><li>当监控对象是目录，当目录下的某个文件触发事件时，name域返回null终止的字符串，用于标识该文件。如果监控对象本身触发了事件，则name域未使用，同时len域的值为0。</li><li>len域用来指示name域中分配的字节数。这个域是必要的，因为当read()读取到多个inotify_event结构体时，前一个name域存储的字符串到下一个inotify_event结构体之间可能会存在额外的填充字节（参考图19-2）。所以单个inotify事件的大小实际上是sizeof(struct inotify_event) + len。</li><li>如果传递给read()的缓冲区太小，无法存储下一个inotify_event结构体，则read()会以EINVAL错误失败。我们需要确保提供给 read 的缓冲区足够大，至少能够保存一个事件：：大小至少为(sizeof(struct inotify_event) + NAME_MAX + 1)字节，其中NAME_MAX是文件名的最大长度，最后再加上一个null终止字节</li></ul><h3 id="三、demo-演示" tabindex="-1"><a class="header-anchor" href="#三、demo-演示"><span>三、demo 演示</span></a></h3><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;sys/inotify.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;stdlib.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;limits.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;string.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;errno.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> BUF_LEN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(struct inotify_event) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> NAME_MAX </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> display_inotify_event</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> inotify_event</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> event</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;wd = </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%2d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">wd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;cookie = </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%4d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;mask = &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mask</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> IN_CREATE) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;IN_CREATE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mask</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> IN_DELETE) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;IN_DELETE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mask</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> IN_MODIFY) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;IN_MODIFY&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">len</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot; name = </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">char*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> argv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (argc </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> strcmp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;--help&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pathname...</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> inotify_fd </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> inotify_init1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(IN_CLOEXEC);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (inotify_fd </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;inotify_init failed, err: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">strerror</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(errno));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> argc; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">i) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> wd </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> inotify_add_watch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(inotify_fd, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[i], IN_ALL_EVENTS);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (wd </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">            printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;inotify_add_watch failed, err: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">strerror</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(errno));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            continue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;watching </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> using wd </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[i], wd);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> buf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[BUF_LEN];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (;;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> event_num </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(inotify_fd, buf, BUF_LEN);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (event_num </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">            printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;read from inotify fd return 0, err: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">strerror</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(errno));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (event_num </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">            printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;read failed, err: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">strerror</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(errno));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;read </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> bytes from inotify fd</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, event_num);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> buf; p </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> buf </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> event_num;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> inotify_event</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> event</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> inotify_event</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)p;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">            display_inotify_event</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(event);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            p </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">+=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(struct inotify_event) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> event</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、监控上限配置" tabindex="-1"><a class="header-anchor" href="#四、监控上限配置"><span>四、监控上限配置</span></a></h3><p>inotify 事件队列需要使用内核内存。因此内核对 inotify 机制设置了一些限制。root 用户可以通过 <code>/proc/sys/fs/inotify</code> 目录下的三个文件来配置这些限制：</p><ul><li>max_queued_events：调用inotify_init系统调用时，这个值可以设置新创建的inotify实例的事件队列的最大事件数量限制。如果达到了这个限制，就会触发IN_Q_OVERFLOW事件，并丢弃后面其余的事件。溢出事件的wd域的值总是-1。</li><li>max_user_instances：每个实际用户ID能够创建的inotify实例的上限</li><li>max_user_watchers：每个实际用户ID能够创建的监控项的上限</li></ul><p>这三个值的默认值为：16384、128、8192</p><h3 id="五、与多路复用-io-联合使用" tabindex="-1"><a class="header-anchor" href="#五、与多路复用-io-联合使用"><span>五、与多路复用 IO 联合使用</span></a></h3><p>如上的 demo 中我们看到 inotify 接口的文件描述符支持阻塞和非阻塞模式，默认我们使用 read 是阻塞的。虽然 inotify 本身是异步通知的。如果我们有多个inotify 文件描述符呢？我们就无法在一个线程中去处理他们。</p><p>所以我们可以使用 select、poll、epoll 这些多路复用 IO 来帮助我们监听多个描述符的可读、可写状态。不需要为每个描述符创建独立的线程进行阻塞读取，避免资源浪费。</p><h3 id="六、其他" tabindex="-1"><a class="header-anchor" href="#六、其他"><span>六、其他</span></a></h3><p>inotify_add_watch 报错 “No space left on device” 问题：<a href="https://askubuntu.com/questions/1088272/inotify-add-watch-failed-no-space-left-on-device" target="_blank" rel="noopener noreferrer">https://askubuntu.com/questions/1088272/inotify-add-watch-failed-no-space-left-on-device</a></p>`,34)]))}const d=s(t,[["render",h],["__file","7.Inotify详解.html.vue"]]),r=JSON.parse('{"path":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/7.Inotify%E8%AF%A6%E8%A7%A3.html","title":"7.Inotify详解","lang":"zh-CN","frontmatter":{"title":"7.Inotify详解","description":"Inotify详解 inotify 可以用来监控文件或者目录的变化，确定这些被监控的对象是否发生特定的事件。 一、如何使用 使用 inotify API 关键步骤如下： 使用 inotify_init() 来创建一个 inotify 实例。系统调用会返回一个文件描述符 使用 inotify_add_watch() 来添加文件项到监控列表，通知内核自己感...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/7.Inotify%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"7.Inotify详解"}],["meta",{"property":"og:description","content":"Inotify详解 inotify 可以用来监控文件或者目录的变化，确定这些被监控的对象是否发生特定的事件。 一、如何使用 使用 inotify API 关键步骤如下： 使用 inotify_init() 来创建一个 inotify 实例。系统调用会返回一个文件描述符 使用 inotify_add_watch() 来添加文件项到监控列表，通知内核自己感..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"7.Inotify详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"Inotify详解","slug":"inotify详解","link":"#inotify详解","children":[{"level":3,"title":"一、如何使用","slug":"一、如何使用","link":"#一、如何使用","children":[]},{"level":3,"title":"二、API 说明","slug":"二、api-说明","link":"#二、api-说明","children":[]},{"level":3,"title":"三、demo 演示","slug":"三、demo-演示","link":"#三、demo-演示","children":[]},{"level":3,"title":"四、监控上限配置","slug":"四、监控上限配置","link":"#四、监控上限配置","children":[]},{"level":3,"title":"五、与多路复用 IO 联合使用","slug":"五、与多路复用-io-联合使用","link":"#五、与多路复用-io-联合使用","children":[]},{"level":3,"title":"六、其他","slug":"六、其他","link":"#六、其他","children":[]}]}],"git":{},"readingTime":{"minutes":7.66,"words":2299},"filePathRelative":"操作系统/文件管理/内核原理/7.Inotify详解.md","excerpt":"<h2>Inotify详解</h2>\\n<p>inotify 可以用来监控文件或者目录的变化，确定这些被监控的对象是否发生特定的事件。</p>\\n<h3>一、如何使用</h3>\\n<p>使用 inotify API 关键步骤如下：</p>\\n<ul>\\n<li>使用 <code>inotify_init()</code> 来创建一个 inotify 实例。系统调用会返回一个文件描述符</li>\\n<li>使用 <code>inotify_add_watch()</code> 来添加文件项到监控列表，通知内核自己感兴趣的文件以及事件。每个监控项都由路径名和相关联的位掩码组成。掩码指定了需要对路径监控的具体事件。返回一个监控描述符，用于后面的操作。此系统调用也可以执行相反的删除操作，将之前添加的监控项从 inotify 实例中删除。</li>\\n<li>要获得事件通知，需要对 inotify 文件描述符执行 read 操作，成功时返回一个或多个 inotify_event 结构体，每个结构体包含了一个文件的一个事件的详细信息</li>\\n<li>完成监控时，需要关闭 inotify 文件描述符。这样做会自动删除该 inotify 实例的所有监控项</li>\\n</ul>","autoDesc":true}');export{d as comp,r as data};
