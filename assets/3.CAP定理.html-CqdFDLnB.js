import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as i,o as l}from"./app-D1zlwylF.js";const a={};function n(c,t){return l(),o("div",null,t[0]||(t[0]=[i("<p>CAP定理指出在一个异步的网络环境中，对于一个分布式读写存储系统来说，只能满足以下三项中的两项，而不可能满足全部三项。</p><ul><li>一致性（<code>Consistency</code>）：客户端访问所有节点，返回的都是同一份最新的数据。线性一致性，读操作会返回最近一次写操作的结果。</li><li>可用性（<code>Availability</code>）：每次请求都能获取非错误的响应，但不保证获取的数据是最新数据。</li><li>分区容错性（<code>Partition Tolerance</code>）：节点之间由于网络分区而导致消息丢失的情况下，系统仍能继续正常运行。</li></ul><p>对于一个分布式系统来说，节点之间是通过网络通信的，只要有网络，必然出现消息延迟或丢失，网络分区故障是必然发生的，所以分区容忍性是一个基本的要求。因此分布式系统分为2类，即 CP 或 AP。</p><p>也有一些其他观点认为：</p><ul><li>其实由于网络分区很少发生，那么系统不存在网络分区的时候，可用性和一致性都可以满足。只有在网络分区时，才需要在一致性和可用性之间做出选择。</li><li>系统在正常运行过程中，网络延迟会存在。而 CAP 定理的经典解释是忽略网络延迟的，但在实际中延迟和分区紧密相关。系统在出现网络延迟时，如果选择放弃处理请求，则相当于降低了可用性；反之，如果选择继续处理请求，由于延迟存在，则会降低系统的一致性。系统需要在网络延迟时做出权衡。</li></ul><p>后来，又延伸出 BASE（<code>Basically Available, Soft State, Eventually Consistent</code>）定理。即：基本可用、软状态和最终一致性。</p><p>其中软状态和最终一致性主要指：存在网络分区的情况下，为了高可用性，舍弃强一致性，选择一致性更弱的最终一致性。</p><p>最终一致性：当客户端更新某个数据时，可能因为网络分区或延迟，导致数据没有即时同步到所有节点，系统中存在旧数据。此时系统依然允许继续读写数据，但在最终某个时刻，系统保证这个更新操作一定会同步到所有节点。</p>",8)]))}const s=e(a,[["render",n],["__file","3.CAP定理.html.vue"]]),d=JSON.parse('{"path":"/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%9E%8B/3.CAP%E5%AE%9A%E7%90%86.html","title":"3.CAP定理","lang":"zh-CN","frontmatter":{"title":"3.CAP定理","description":"CAP定理指出在一个异步的网络环境中，对于一个分布式读写存储系统来说，只能满足以下三项中的两项，而不可能满足全部三项。 一致性（Consistency）：客户端访问所有节点，返回的都是同一份最新的数据。线性一致性，读操作会返回最近一次写操作的结果。 可用性（Availability）：每次请求都能获取非错误的响应，但不保证获取的数据是最新数据。 分区容...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%9E%8B/3.CAP%E5%AE%9A%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"3.CAP定理"}],["meta",{"property":"og:description","content":"CAP定理指出在一个异步的网络环境中，对于一个分布式读写存储系统来说，只能满足以下三项中的两项，而不可能满足全部三项。 一致性（Consistency）：客户端访问所有节点，返回的都是同一份最新的数据。线性一致性，读操作会返回最近一次写操作的结果。 可用性（Availability）：每次请求都能获取非错误的响应，但不保证获取的数据是最新数据。 分区容..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.CAP定理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":2.06,"words":618},"filePathRelative":"分布式/分布式模型/3.CAP定理.md","excerpt":"<p>CAP定理指出在一个异步的网络环境中，对于一个分布式读写存储系统来说，只能满足以下三项中的两项，而不可能满足全部三项。</p>\\n<ul>\\n<li>一致性（<code>Consistency</code>）：客户端访问所有节点，返回的都是同一份最新的数据。线性一致性，读操作会返回最近一次写操作的结果。</li>\\n<li>可用性（<code>Availability</code>）：每次请求都能获取非错误的响应，但不保证获取的数据是最新数据。</li>\\n<li>分区容错性（<code>Partition Tolerance</code>）：节点之间由于网络分区而导致消息丢失的情况下，系统仍能继续正常运行。</li>\\n</ul>","autoDesc":true}');export{s as comp,d as data};
