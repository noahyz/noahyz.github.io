import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as s,o as l}from"./app-D1zlwylF.js";const t="/assets/%E7%BA%BF%E6%80%A7%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8-BKeiOC_Z.png",i="/assets/%E7%A9%BA%E9%97%B2%E9%93%BE%E8%A1%A8%E5%88%86%E9%85%8D%E5%99%A8-xxsrlKTj.png",r="/assets/%E9%9A%94%E7%A6%BB%E9%80%82%E5%BA%94-DcBFg3xw.png",o="/assets/%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D-AX6DH9gM.png",p="/assets/%E5%A0%86%E5%8C%BA%E7%9A%84%E7%BA%BF%E6%80%A7%E5%86%85%E5%AD%98-XnB13TYs.png",c="/assets/%E4%BA%8C%E7%BB%B4%E7%A8%80%E7%96%8F%E5%86%85%E5%AD%98-CU_9L37P.png",d="/assets/%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%E7%9A%84%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2-CB_POUtI.png",h="/assets/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80-D5fg6yMZ.png",m={};function u(g,e){return l(),n("div",null,e[0]||(e[0]=[s('<h2 id="内存管理的基础" tabindex="-1"><a class="header-anchor" href="#内存管理的基础"><span>内存管理的基础</span></a></h2><p>程序中的数据和变量都会被分配到程序所在的虚拟内存中，内存空间包括两个重要区域：栈区、堆区。</p><ul><li>函数调用的参数、返回值以及局部变量大都会被分配到栈上，这部分内存会由编译器进行管理</li><li>堆中的对象由内存分配器分配并由垃圾收集器回收，或者程序员自己管理（c/c++）</li></ul><p>内存管理一般包含：用户程序（mutator）、内存分配器（allocator）、垃圾收集器（collector）。当用户程序申请内存时，会通过内存分配器申请新内存，而分配器会负责从堆中初始化相应内存区域。</p><h3 id="一、内存分配器的分配方法" tabindex="-1"><a class="header-anchor" href="#一、内存分配器的分配方法"><span>一、内存分配器的分配方法</span></a></h3><p>一般包括两种分配方法：线性分配器、空闲链表分配器</p><h4 id="_1-线性分配器" tabindex="-1"><a class="header-anchor" href="#_1-线性分配器"><span>1. 线性分配器</span></a></h4><p>线性分配器只需要在内存中维护一个指向内存特定位置的指针，如果用户程序向分配器申请内存，分配器只需要检查剩余空闲内存、返回分配的内存区域并修改指针在内存中位置即可。</p><img src="'+t+'" style="zoom:50%;"><ul><li>优点：较快的执行速度、较低的实现复杂度</li><li>缺点：无法在内存被释放时复用内存</li></ul><p>因此需要与合适的垃圾回收算法配合使用。垃圾回收算法可以通过“复制”的方式整理存活对象的碎片，定期合并空闲内存。这样就能提升效率。但是 c/c++ 这种直接暴露指针的语言无法使用该策略。</p><h4 id="_2-空闲链表分配器" tabindex="-1"><a class="header-anchor" href="#_2-空闲链表分配器"><span>2. 空闲链表分配器</span></a></h4><p>内部会维护一个类似于链表的数据结构，当用户程序申请内存时，空闲链表分配器会依次遍历空闲内存块，找到足够大的内存，然后申请新资源并修改链表</p><img src="'+i+'" style="zoom:50%;"><ul><li>优点：可以重新利用回收的资源</li><li>缺点：分配内存时需要遍历链表，事件复杂度为 O(n)</li></ul><p>空闲链表内存分配器可以选择不同的策略在链表的内存块中进行选择：</p><ul><li>首次适应（First-Fit）：从链表头开始遍历，选择第一个大小大于申请内存的内存块</li><li>循环首次适应（Next-Fit）：从上次遍历的结束位置开始遍历，选择第一个大小大于申请内存的内存块</li><li>最优适应（Best-Fit）：从链表头遍历整个链表，选择最合适的内存块</li><li>隔离适应（Segregated-Fit）：将内存分割成多个链表，每个链表中的内存块大小相同，申请内存时先找到满足条件的链表，再从链表中选择合适的内存块</li></ul><p>Go 语言使用的内存分配策略和 “隔离适应” 类似。如下</p><img src="'+r+'" style="zoom:50%;"><p>隔离适应策略会将内存分割成由4、8、16、32 字节的内存块组成的链表，当我们向内存分配器申请 8 个字节的内存时，会在如上第二行找到满足条件的空闲内存块并返回。隔离适应的分配策略减少了需要遍历的内存块数量，提高了内存分配效率。</p><h3 id="二、go语言内存分配器的分级分配" tabindex="-1"><a class="header-anchor" href="#二、go语言内存分配器的分级分配"><span>二、Go语言内存分配器的分级分配</span></a></h3><p>Go语言的内存分配器借鉴 TCMalloc（thread-caching malloc）（线程缓存分配）的设计实现高速内存分配，核心理念是使用多级缓存将对象根据大小分类，并按照类别实施不同的分配策略</p><p>Go 语言运行时会根据对象的大小将对象分为：微对象 <code>(0, 16B)</code> 、小对象 <code>(16B, 32KB]</code> 、大对象<code>(32KB, +∞)</code> 。对不同的级别的对象分别管理，TCMalloc 和 Go 语言运行时分配器会引入线程缓存（thread cache）、中心缓存（central cache）、页堆（page heap）3 个组件分级管理内存。</p><img src="'+o+'" style="zoom:50%;"><ul><li>线程缓存属于每一个独立的线程，它能够满足线程上绝大多数内存分配需求。而且不涉及多线程，不需要加锁</li><li>当线程缓存不能满足需求时，运行时会使用中心缓存作为补充解决小对象的内存分配</li><li>再遇到 32KB 以上的对象时，直接选择页堆分配大内存</li></ul><h3 id="三、go-语言的虚拟内存布局" tabindex="-1"><a class="header-anchor" href="#三、go-语言的虚拟内存布局"><span>三、Go 语言的虚拟内存布局</span></a></h3><p>Go 1.10 以前的版本堆区的内存空间都是连续的，Go 1.11 后使用稀疏的堆内存空间替代了连续内存。</p><h4 id="_1-线性内存" tabindex="-1"><a class="header-anchor" href="#_1-线性内存"><span>1. 线性内存</span></a></h4><p>Go 1.10 启动时会初始化整片虚拟内存区域，分为3个区域，spans区（512MB）、bitmap区（16GB） 和 arena区（512GB），这些内存并不是真正存在的物理内存，而是虚拟内存。</p><img src="'+p+`" style="zoom:50%;"><ul><li><code>spans</code> 区域存储了指向内存管理单元 runtime.mspan 的指针，每个内存单元会管理几页的内存空间，每页大小为 8KB</li><li><code>bitmap</code> 用于标识 <code>arena</code> 区域中的那些地址保存了对象，位图中的每个字节都会表示堆区中的 32 字节是否空闲</li><li><code>arena</code> 区域是真正的堆区，运行时会将 8KB 看做一页，这些内存页中存储了所有在堆上初始化的对象</li></ul><p>对于任意一个地址，我们都可以根据 <code>arena</code> 的基地址计算该地址所在的页数并通过 <code>spans</code> 数组获得管理该片内存的管理单元 runtime.mspan，<code>spans</code> 数组中多个连续的位置可能对应同一个 runtime.mspan 结构。</p><p>Go 语言在垃圾回收时会根据指针的地址判断对象是否在堆中，并通过上一段中介绍的过程找到管理该对象的 runtime.mspan。这些都建立在<strong>堆区的内存是连续的</strong>这一假设上。这种设计虽然简单并且方便，但是在 C 和 Go 混合使用时会导致程序崩溃：</p><ol><li>分配的内存地址会发生冲突，导致堆的初始化和扩容失败</li><li>没有被预留的大块内存可能会被分配给 C 语言的二进制，导致扩容后的堆不连续</li></ol><p>线性的堆内存需要预留大块的内存空间，但是申请大块的内存空间而不使用是不切实际的，不预留内存空间却会在特殊场景下造成程序崩溃。虽然连续内存的实现比较简单，但是这些问题也没有办法忽略。</p><h4 id="_2-稀疏内存" tabindex="-1"><a class="header-anchor" href="#_2-稀疏内存"><span>2. 稀疏内存</span></a></h4><p>运行时使用二维 <code>runtime.heapArena</code> 数组管理所有内存，每个单元都会管理 64MB 的内存空间</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>type heapArena struct {</span></span>
<span class="line"><span>	bitmap       [heapArenaBitmapBytes]byte</span></span>
<span class="line"><span>	spans        [pagesPerArena]*mspan</span></span>
<span class="line"><span>	pageInUse    [pagesPerArena / 8]uint8</span></span>
<span class="line"><span>	pageMarks    [pagesPerArena / 8]uint8</span></span>
<span class="line"><span>	pageSpecials [pagesPerArena / 8]uint8</span></span>
<span class="line"><span>	checkmarks   *checkmarksMap</span></span>
<span class="line"><span>	zeroedBase   uintptr</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同平台和架构的二维数组大小可能完全不同，Go 语言服务在 Linux 的 x86_64 架构上，二维数组的一维大小会是1，而二维大小是 4194304（<code>2^22</code>），因为每一个指针占8 个字节，所以元信息的总大小为 32MB（<code>4194304 * 8 = 32MB</code>），由于每个 <code>runtime.heapArena</code> 都会管理 64MB 的内存，因此整个堆区最多可以管理 256TB 的内存（<code>4194304 * 64M = 256TB</code>）。</p><img src="`+c+'" style="zoom:50%;"><h3 id="四、go语言的地址空间" tabindex="-1"><a class="header-anchor" href="#四、go语言的地址空间"><span>四、Go语言的地址空间</span></a></h3><p>因为所有的内存最终都是要从操作系统中申请的，所以 Go 语言的运行时构建了操作系统的内存管理抽象层，该抽象层将运行时管理的地址空间分成以下四种状态：</p><ul><li>None：内存没有被保留或者映射，是地址空间的默认状态</li><li>Reserved：运行时持有该地址空间，但是访问该内存会导致错误</li><li>Prepared：内存被保留，一般没有对应的物理内存访问该片内存的行为是未定义的可以快速转换到 <code>Ready</code> 状态</li><li>Ready：可以被安全访问</li></ul><p>每个不同的操作系统都会包含一组用于管理内存的特定方法，这些方法可以让内存地址空间在不同的状态之间转换，如下：</p><img src="'+d+'" style="zoom:50%;"><p>Go语言运行时中的状态转换方法</p><ul><li><a href="https://draveness.me/golang/tree/runtime.sysAlloc" target="_blank" rel="noopener noreferrer"><code>runtime.sysAlloc</code></a> 会从操作系统中获取一大块可用的内存空间，可能为几百 KB 或者几 MB；</li><li><a href="https://draveness.me/golang/tree/runtime.sysFree" target="_blank" rel="noopener noreferrer"><code>runtime.sysFree</code></a> 会在程序发生内存不足（Out-of Memory，OOM）时调用并无条件地返回内存；</li><li><a href="https://draveness.me/golang/tree/runtime.sysReserve" target="_blank" rel="noopener noreferrer"><code>runtime.sysReserve</code></a> 会保留操作系统中的一片内存区域，访问这片内存会触发异常；</li><li><a href="https://draveness.me/golang/tree/runtime.sysMap" target="_blank" rel="noopener noreferrer"><code>runtime.sysMap</code></a> 保证内存区域可以快速转换至就绪状态；</li><li><a href="https://draveness.me/golang/tree/runtime.sysUsed" target="_blank" rel="noopener noreferrer"><code>runtime.sysUsed</code></a> 通知操作系统应用程序需要使用该内存区域，保证内存区域可以安全访问；</li><li><a href="https://draveness.me/golang/tree/runtime.sysUnused" target="_blank" rel="noopener noreferrer"><code>runtime.sysUnused</code></a> 通知操作系统虚拟内存对应的物理内存已经不再需要，可以重用物理内存；</li><li><a href="https://draveness.me/golang/tree/runtime.sysFault" target="_blank" rel="noopener noreferrer"><code>runtime.sysFault</code></a> 将内存区域转换成保留状态，主要用于运行时的调试；</li></ul><p>运行时使用 Linux 提供的 <code>mmap</code>、<code>munmap</code> 和 <code>madvise</code> 等系统调用实现了操作系统的内存管理抽象层，抹平了不同操作系统的差异，为运行时提供了更加方便的接口</p><h2 id="内存管理的实现" tabindex="-1"><a class="header-anchor" href="#内存管理的实现"><span>内存管理的实现</span></a></h2><p>Go 语言内存分配器有几个重要组件：内存管理单元（runtime.mspan）、线程缓存（runtime.mcache）、中心缓存（runtime.mcentral）、页堆（runtime.mheap）。Go语言程序会在启动时初始化内存布局</p><img src="'+h+'" alt="s" style="zoom:50%;"><ul><li>每一个处理器都会分配一个线程缓存 runtime.mcache 用来处理微对象和小对象的分配，他们会持有内存管理单元 runtime.mspan 。每个类型的内存管理单元都会管理特定大小的对象</li><li>当内存管理单元中不存在空闲对象时，他们会从 runtime.mheap 持有的 134 个中心缓存 runtime.mcentral 中获取新的内存单元。中心缓存属于全局的堆结构体 runtime.mheap，它会从操作系统中申请内存</li><li>在 amd64 架构的 linux 操作系统上，runtime.mheap 会持有 4194304 个 runtime.heapArena ，每个 runtime.heapArena 会管理 64MB 内存，单个 Go 语言程序的内存上限也就是 256 TB</li></ul><h3 id="一、内存管理单元" tabindex="-1"><a class="header-anchor" href="#一、内存管理单元"><span>一、内存管理单元</span></a></h3><p>runtime.mspan 是 Go语言内存管理的基本单元，该结构中包含 next 和 prev 两个指针字段，分别指向前一个和后一个 runtime.mspan 。Go 运行时会使用 runtime.mSpanList 存储双向链表的头节点和尾节点并在线程缓存以及中心缓存中使用。</p><p>每个 runtime.mspan 都管理 N 个大小为 8KB 的页。当结构体管理的内存不足时，运行时会以页为单位向堆申请内存。</p><p>runtime.spanClass 是 runtime.mspan 的跨度类，它决定了内存管理单元中存储的对象大小和个数。Go语言的内存管理模块中一共包含 67 种跨度类，每一种跨度类都会存储特定大小的对象，并且包含特定数量的页数以及对象，所有数据都会被预先计算好并存储在 runtime.class_to_size 和 runtime.class_to_allocnpages 等变量中</p><h3 id="二、线程缓存" tabindex="-1"><a class="header-anchor" href="#二、线程缓存"><span>二、线程缓存</span></a></h3><p>runtime.mcache 是 Go 语言中的线程缓存，它会与线程上的处理器一一绑定，主要用来缓存用户程序申请的微小对象。每一个线程缓存都持有 <code>68*2</code> 个 runtime.mspan。</p><p>线程缓存在刚刚被初始化时不包含 runtime.mspan，只有在用户程序申请内存时，才会从上一级组件获取新的 runtime.mspan 满足内存分配的需求。</p><h3 id="三、中心缓存" tabindex="-1"><a class="header-anchor" href="#三、中心缓存"><span>三、中心缓存</span></a></h3><p>runtime.mcentral 是内存分配器的中心缓存，访问中心缓存中的内存管理单元需要使用互斥锁。runtime.mcentral 会分别存储包含空闲对象和不包含空闲对象的内存管理单元。</p><h3 id="四、页堆" tabindex="-1"><a class="header-anchor" href="#四、页堆"><span>四、页堆</span></a></h3><p>runtime.mheap 是内存分配的核心结构体，Go 语言程序会将其作为全局变量存储，而堆中初始化的所有对象都由该结构体统一管理。该结构体中包含两组非常重要的字段，一个是全局的中心缓存列表 central，另一个是管理堆区内存区域的 arenas</p><p>页堆中包含一个长度为 136 的 runtime.mcentral 数组，其中 68 个为跨度类需要 scan 的中心缓存，另外 68 个是 noscan 的中心缓存。另外，Go 语言所有的内存空间都由二维矩阵 runtime.heapArena 管理，这个二维矩阵以稀疏内存形式管理，管理的内存是不连续的。</p><h3 id="五、分配内存逻辑" tabindex="-1"><a class="header-anchor" href="#五、分配内存逻辑"><span>五、分配内存逻辑</span></a></h3><p>运行时会根据对象大小执行不同的分配逻辑，</p><ul><li>微对象<code>(0, 16B)</code>：先使用微型分配器，再依次尝试线程缓存、中心缓存和堆中分配内存</li><li>小对象 <code>[16B, 32KB]</code>：依次尝试线程缓存、中心缓存和堆中分配内存</li><li>大对象 <code>(32KB, +∞)</code>：直接在堆中分配内存</li></ul><h4 id="_1-微对象" tabindex="-1"><a class="header-anchor" href="#_1-微对象"><span>1. 微对象</span></a></h4><p>Go 语言运行时将小于 16 字节的对象划分为微对象，它会使用线程缓存上的微分配器提高微对象分配的性能，我们主要使用它来分配较小的字符串以及逃逸的临时变量。微分配器可以将多个较小的内存分配请求合入同一个内存块中，只有当内存块中的所有对象都需要被回收时，整片内存才可能被回收</p><h4 id="_2-小对象" tabindex="-1"><a class="header-anchor" href="#_2-小对象"><span>2. 小对象</span></a></h4><p>小对象是指大小为 16 字节到 32,768 字节的对象以及所有小于 16 字节的指针类型的对象，小对象的分配可以被分成以下的三个步骤：</p><ol><li>确定分配对象的大小以及跨度类 <code>runtime.spanClass</code></li><li>从线程缓存、中心缓存或者堆中获取内存管理单元并从内存管理单元找到空闲的内存空间；</li><li>清空空闲内存中的所有数据</li></ol><h4 id="_3-大对象" tabindex="-1"><a class="header-anchor" href="#_3-大对象"><span>3. 大对象</span></a></h4><p>运行时对于大于 32KB 的大对象会单独处理，直接调用 <code>runtime.mcache.allocLarge</code>分配大片内存，它会计算分配该对象所需要的页数，它按照 8KB 的倍数在堆上申请内存。</p>',74)]))}const B=a(m,[["render",u],["__file","8.内存管理.html.vue"]]),_=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/8.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html","title":"8.内存管理","lang":"zh-CN","frontmatter":{"title":"8.内存管理","date":"2023-01-19T11:11:41.000Z","tags":["go"],"description":"内存管理的基础 程序中的数据和变量都会被分配到程序所在的虚拟内存中，内存空间包括两个重要区域：栈区、堆区。 函数调用的参数、返回值以及局部变量大都会被分配到栈上，这部分内存会由编译器进行管理 堆中的对象由内存分配器分配并由垃圾收集器回收，或者程序员自己管理（c/c++） 内存管理一般包含：用户程序（mutator）、内存分配器（allocator）、垃...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/8.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"8.内存管理"}],["meta",{"property":"og:description","content":"内存管理的基础 程序中的数据和变量都会被分配到程序所在的虚拟内存中，内存空间包括两个重要区域：栈区、堆区。 函数调用的参数、返回值以及局部变量大都会被分配到栈上，这部分内存会由编译器进行管理 堆中的对象由内存分配器分配并由垃圾收集器回收，或者程序员自己管理（c/c++） 内存管理一般包含：用户程序（mutator）、内存分配器（allocator）、垃..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8.内存管理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"内存管理的基础","slug":"内存管理的基础","link":"#内存管理的基础","children":[{"level":3,"title":"一、内存分配器的分配方法","slug":"一、内存分配器的分配方法","link":"#一、内存分配器的分配方法","children":[]},{"level":3,"title":"二、Go语言内存分配器的分级分配","slug":"二、go语言内存分配器的分级分配","link":"#二、go语言内存分配器的分级分配","children":[]},{"level":3,"title":"三、Go 语言的虚拟内存布局","slug":"三、go-语言的虚拟内存布局","link":"#三、go-语言的虚拟内存布局","children":[]},{"level":3,"title":"四、Go语言的地址空间","slug":"四、go语言的地址空间","link":"#四、go语言的地址空间","children":[]}]},{"level":2,"title":"内存管理的实现","slug":"内存管理的实现","link":"#内存管理的实现","children":[{"level":3,"title":"一、内存管理单元","slug":"一、内存管理单元","link":"#一、内存管理单元","children":[]},{"level":3,"title":"二、线程缓存","slug":"二、线程缓存","link":"#二、线程缓存","children":[]},{"level":3,"title":"三、中心缓存","slug":"三、中心缓存","link":"#三、中心缓存","children":[]},{"level":3,"title":"四、页堆","slug":"四、页堆","link":"#四、页堆","children":[]},{"level":3,"title":"五、分配内存逻辑","slug":"五、分配内存逻辑","link":"#五、分配内存逻辑","children":[]}]}],"git":{},"readingTime":{"minutes":12.26,"words":3679},"filePathRelative":"编程语言/go语言/底层实现/8.内存管理.md","localizedDate":"2023年1月19日","excerpt":"<h2>内存管理的基础</h2>\\n<p>程序中的数据和变量都会被分配到程序所在的虚拟内存中，内存空间包括两个重要区域：栈区、堆区。</p>\\n<ul>\\n<li>函数调用的参数、返回值以及局部变量大都会被分配到栈上，这部分内存会由编译器进行管理</li>\\n<li>堆中的对象由内存分配器分配并由垃圾收集器回收，或者程序员自己管理（c/c++）</li>\\n</ul>\\n<p>内存管理一般包含：用户程序（mutator）、内存分配器（allocator）、垃圾收集器（collector）。当用户程序申请内存时，会通过内存分配器申请新内存，而分配器会负责从堆中初始化相应内存区域。</p>\\n<h3>一、内存分配器的分配方法</h3>","autoDesc":true}');export{B as comp,_ as data};
