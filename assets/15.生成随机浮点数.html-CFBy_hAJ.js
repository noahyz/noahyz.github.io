import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-D1zlwylF.js";const e={};function l(h,i){return t(),a("div",null,i[0]||(i[0]=[n(`<h2 id="获取随机数" tabindex="-1"><a class="header-anchor" href="#获取随机数"><span>获取随机数</span></a></h2><h3 id="一、c-11-方式" tabindex="-1"><a class="header-anchor" href="#一、c-11-方式"><span>一、C++11 方式</span></a></h3><ul><li>random_device 对象，他为随机引擎种子生成不确定的随机位，这对于避免产生相同的数字序列非常重要</li><li>random engine：生成随机的 bit 流。</li><li>distribution：生成满足用户需求的随机数</li></ul><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::random_device rd;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">default_random_engine</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> eng</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">rd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">uniform_int_distribution</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">distr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">i) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">	std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> distr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(eng) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>uniform_int_distribution</code>：均匀分布模板类，类名字中的 int 不代表整形，而是表示整数。因为他是一个模板类，可以用 int、long、short 等整数类型来实例化。</p><p>注意：随机数的范围是左闭右闭，也就是 <code>[ ]</code></p><p>如果 <code>uniform_int_distribution</code> 使用了无参构造函数，那么其随机数的范围是：<code>[0, numberic_limits&lt;type&gt;::max()]</code>。也就是最大值为对应实例化类型所能表示的最大值</p></li><li><p><code>uniform_real_distribution&lt;T&gt;</code> ：表示浮点数模板类，可以用 float、double 来实例化。</p><p>注意：随机数的范围是左闭右开，也就是 <code>[ )</code></p><p>对于 <code>uniform_real_distribution</code> 的无参构造函数，则是 <code>[0, 1)</code></p></li></ul><h3 id="二、c-语言的-random" tabindex="-1"><a class="header-anchor" href="#二、c-语言的-random"><span>二、C 语言的 random</span></a></h3><ul><li>使用 <code>srand</code> 生成种子，一般使用 <code>time(NULL)</code> 为参数</li><li>调用 rand 生成随机数</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>srand(time(NULL));</span></span>
<span class="line"><span>for (int i = 0; i &lt; 10; ++i) {</span></span>
<span class="line"><span>		std::cout &lt;&lt; rand() % 100 &lt;&lt; &quot; &quot;;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>rand_r</code> 来生成随机数</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># 每次使用 rand_r 的时候需要传给该函数一个随机数种子的指针</span></span>
<span class="line"><span>int rand_r(unsigned int *seedp);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>unsigned int local_seed = time(NULL);</span></span>
<span class="line"><span>for () {</span></span>
<span class="line"><span>		x = rand_r(&amp;local_seed) / xxx;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)]))}const k=s(e,[["render",l],["__file","15.生成随机浮点数.html.vue"]]),r=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/15.%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%B5%AE%E7%82%B9%E6%95%B0.html","title":"15.生成随机浮点数","lang":"zh-CN","frontmatter":{"title":"15.生成随机浮点数","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"获取随机数 一、C++11 方式 random_device 对象，他为随机引擎种子生成不确定的随机位，这对于避免产生相同的数字序列非常重要 random engine：生成随机的 bit 流。 distribution：生成满足用户需求的随机数 uniform_int_distribution：均匀分布模板类，类名字中的 int 不代表整形，而是表示...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/15.%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%B5%AE%E7%82%B9%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"15.生成随机浮点数"}],["meta",{"property":"og:description","content":"获取随机数 一、C++11 方式 random_device 对象，他为随机引擎种子生成不确定的随机位，这对于避免产生相同的数字序列非常重要 random engine：生成随机的 bit 流。 distribution：生成满足用户需求的随机数 uniform_int_distribution：均匀分布模板类，类名字中的 int 不代表整形，而是表示..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"15.生成随机浮点数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"获取随机数","slug":"获取随机数","link":"#获取随机数","children":[{"level":3,"title":"一、C++11 方式","slug":"一、c-11-方式","link":"#一、c-11-方式","children":[]},{"level":3,"title":"二、C 语言的 random","slug":"二、c-语言的-random","link":"#二、c-语言的-random","children":[]}]}],"git":{},"readingTime":{"minutes":1.23,"words":369},"filePathRelative":"编程语言/c++语言/编码技巧/15.生成随机浮点数.md","localizedDate":"2023年1月19日","excerpt":"<h2>获取随机数</h2>\\n<h3>一、C++11 方式</h3>\\n<ul>\\n<li>random_device 对象，他为随机引擎种子生成不确定的随机位，这对于避免产生相同的数字序列非常重要</li>\\n<li>random engine：生成随机的 bit 流。</li>\\n<li>distribution：生成满足用户需求的随机数</li>\\n</ul>\\n<div class=\\"language-c++ line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c++\\" data-title=\\"c++\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#ABB2BF\\">std</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">::random_device rd;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#ABB2BF\\">std</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">::</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\\">default_random_engine</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> eng</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">rd</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">());</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#ABB2BF\\">std</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">::</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\\">uniform_int_distribution</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&gt; </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">distr</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">100</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">for</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> (</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> i </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">=</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> 0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">; i </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">&lt;</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> 10</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">; </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">++</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">i) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#ABB2BF\\">\\tstd</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">::cout </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">&lt;&lt;</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> distr</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(eng) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">&lt;&lt;</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> \\" \\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{k as comp,r as data};
