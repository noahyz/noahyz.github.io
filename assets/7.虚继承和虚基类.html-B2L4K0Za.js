import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-D1zlwylF.js";const t="/assets/%E8%99%9A%E7%BB%A7%E6%89%BF-sF76FqXv.png",l={};function p(c,s){return n(),a("div",null,s[0]||(s[0]=[e(`<p>C++ 中多继承很容易产生<strong>命名冲突</strong>，也就是说基类和继承类中如果有同名变量，编译器不知道选用哪一个，就会产生歧义。</p><p>而且继承类对象还保留了基类的成员，但大多数情况下，这些成员是多余的，很容易造成<strong>数据冗余</strong>。</p><p>而且还会造成菱形继承中问题。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>class A { int m_a; };</span></span>
<span class="line"><span>class B : public A { int m_b; }</span></span>
<span class="line"><span>class C : public A { int m_c; }</span></span>
<span class="line"><span>class D : public B, public C { int m_d; }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类 D 的对象，当访问 <code>m_a</code> 时，不知道访问的是类 B 的还是访问的是类 C 的 <code>m_a</code>。造成歧义。</p><p>为了解决多继承时的命名冲突和冗余数据问题，因此 C++ 提出了虚继承，使得派生类中只保留一份间接基类的成员。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>class A { int m_a; };</span></span>
<span class="line"><span>class B : virtual public A { int m_b; }</span></span>
<span class="line"><span>class C : virtual public A { int m_c; }</span></span>
<span class="line"><span>class D : public B, public C { }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在继承方式前面加上 <code>virtual</code> 关键字就是虚继承。</p><p>这样对于菱形继承，派生类 D 就只保留了一份成员变量 <code>m_a</code>，直接访问就不会再有歧义了。</p><p>虚继承的目的就是让某个类做出声明，承诺愿意共享它的基类。其中，这个被共享的基类就称为虚基类（Virtual Base Class）。</p><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>虚派生只影响从指定了虚基类的派生类中进一步派生出来的类，他不会影响派生类本身。</p><p>由于多继承经常会出现二义性问题，必须十分小心。因此我们不提倡在程序中使用多继承，只有在比较简单和不易出现二义性的情况或实在必要时才使用多继承，能用单一继承解决的问题就不要使用多继承。也正是这个原因，C++ 之后的很多面向对象的编程语言，例如 Java、C#、PHP 等，都不支持多继承。</p>',13)]))}const o=i(l,[["render",p],["__file","7.虚继承和虚基类.html.vue"]]),m=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/7.%E8%99%9A%E7%BB%A7%E6%89%BF%E5%92%8C%E8%99%9A%E5%9F%BA%E7%B1%BB.html","title":"7.虚继承和虚基类","lang":"zh-CN","frontmatter":{"title":"7.虚继承和虚基类","description":"C++ 中多继承很容易产生命名冲突，也就是说基类和继承类中如果有同名变量，编译器不知道选用哪一个，就会产生歧义。 而且继承类对象还保留了基类的成员，但大多数情况下，这些成员是多余的，很容易造成数据冗余。 而且还会造成菱形继承中问题。 类 D 的对象，当访问 m_a 时，不知道访问的是类 B 的还是访问的是类 C 的 m_a。造成歧义。 为了解决多继承时...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/7.%E8%99%9A%E7%BB%A7%E6%89%BF%E5%92%8C%E8%99%9A%E5%9F%BA%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"7.虚继承和虚基类"}],["meta",{"property":"og:description","content":"C++ 中多继承很容易产生命名冲突，也就是说基类和继承类中如果有同名变量，编译器不知道选用哪一个，就会产生歧义。 而且继承类对象还保留了基类的成员，但大多数情况下，这些成员是多余的，很容易造成数据冗余。 而且还会造成菱形继承中问题。 类 D 的对象，当访问 m_a 时，不知道访问的是类 B 的还是访问的是类 C 的 m_a。造成歧义。 为了解决多继承时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"7.虚继承和虚基类\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":1.67,"words":502},"filePathRelative":"编程语言/c++语言/基础语法/7.虚继承和虚基类.md","excerpt":"<p>C++ 中多继承很容易产生<strong>命名冲突</strong>，也就是说基类和继承类中如果有同名变量，编译器不知道选用哪一个，就会产生歧义。</p>\\n<p>而且继承类对象还保留了基类的成员，但大多数情况下，这些成员是多余的，很容易造成<strong>数据冗余</strong>。</p>\\n<p>而且还会造成菱形继承中问题。</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>class A { int m_a; };</span></span>\\n<span class=\\"line\\"><span>class B : public A { int m_b; }</span></span>\\n<span class=\\"line\\"><span>class C : public A { int m_c; }</span></span>\\n<span class=\\"line\\"><span>class D : public B, public C { int m_d; }</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,m as data};
