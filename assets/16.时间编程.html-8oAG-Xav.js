import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,o as a}from"./app-D1zlwylF.js";const l={};function t(p,s){return a(),n("div",null,s[0]||(s[0]=[e(`<h2 id="linux-下-c-c-的时间编程" tabindex="-1"><a class="header-anchor" href="#linux-下-c-c-的时间编程"><span>Linux 下 C/C++ 的时间编程</span></a></h2><h3 id="一、linux-下时间类型" tabindex="-1"><a class="header-anchor" href="#一、linux-下时间类型"><span>一、Linux 下时间类型</span></a></h3><ul><li><p>real time：日历时间。对于 Linux 中，这个时间的起点是 1970年1月1日00点，Linux 上以此为起点的均为 UTC 时间。</p><p>格林威治时间（Greenwich Mean Time，GMT）也被称为世界标准的时间（Coordinated Universal Time，UTC）。UTC 和 GMT 两者是同一概念的时间。区别在于 UTC 是天文学上的概念，而 GMT 是基于一个原子钟。</p><p>GMT 是中央时区，北京在东8区，相差8小时，所以 <code>北京时间 = GMT时间 + 8小时</code></p><p><strong>注意：会受到修改系统时间的命令/api 或者 ntp 服务的影响，导致时间出现跳跃</strong></p></li><li><p>monotonic time：单调时间。意为不能被设置和影响的时间，它可以提供精确的时间信息，不会出现时间跳跃。单调时间的起点 posix 标准并没有明确指定，但在 Linux 上是以系统启动的时间为起点的。虽然说单调时钟的时间是稳定的，但它会被 adjtime 函数和 ntp 服务影响，同时当系统挂起或休眠时计时会被暂停。</p></li></ul><h3 id="二、linux-下时间格式" tabindex="-1"><a class="header-anchor" href="#二、linux-下时间格式"><span>二、Linux 下时间格式</span></a></h3><h4 id="_1-time-t-时间类型" tabindex="-1"><a class="header-anchor" href="#_1-time-t-时间类型"><span>1. time_t 时间类型</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#ifndef __TIME_T</span></span>
<span class="line"><span>#define __TIME_T</span></span>
<span class="line"><span>typedef long time_t</span></span>
<span class="line"><span>#endif</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>time_t 是一个长整型，其值表示从 UTC 时间（1970年1月1日00时00分00秒）到当前时刻的秒数。由于 time_t 类型长度限制，它所表示的时间不能晚于 2038年1月19日03时14分07秒（UTC）。</p><h4 id="_2-struct-tm-时间类型" tabindex="-1"><a class="header-anchor" href="#_2-struct-tm-时间类型"><span>2. struct tm 时间类型</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#include &lt;time.h&gt;</span></span>
<span class="line"><span>struct tm {</span></span>
<span class="line"><span>        int tm_sec;         // 秒，取值为 [0, 59]</span></span>
<span class="line"><span>        int tm_min;         // 分，取值为 [0, 59]</span></span>
<span class="line"><span>        int tm_hour;        // 时，取值为 [0, 23]</span></span>
<span class="line"><span>        int tm_mday;        // 日期，取值为 [1, 31]</span></span>
<span class="line"><span>        int tm_mon;         // 月份，取值为 [0, 11]</span></span>
<span class="line"><span>        int tm_year;        // 年份，其值为 1900 年至今的年数</span></span>
<span class="line"><span>        int tm_wday;        // 星期，取值为 [0, 6], 0 代表星期天，1 代表星期一，以此类推</span></span>
<span class="line"><span>        int tm_yday;        // 从年的1月1日开始的天数，取值为 [0, 365], 0 代表1月1日</span></span>
<span class="line"><span>        int tm_isdst;       // 夏令时标识符，使用夏令时，tm_isdst为正；不使用夏令时，tm_isdst为0；不了解情况时，tm_isdst为负</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-struct-timeval-时间类型" tabindex="-1"><a class="header-anchor" href="#_3-struct-timeval-时间类型"><span>3. struct timeval 时间类型</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#include &lt;sys/time.h&gt;</span></span>
<span class="line"><span>struct timeval {</span></span>
<span class="line"><span>    time_t      tv_sec;     /* seconds：秒 */</span></span>
<span class="line"><span>    suseconds_t tv_usec;    /* microseconds：微妙 */</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tv_sec 是 time_t 时间类型，其值表示从 UTC 时间 1970年1月1日00时00分00秒到当前时刻的秒数</p><h4 id="_4-struct-timespec-时间类型" tabindex="-1"><a class="header-anchor" href="#_4-struct-timespec-时间类型"><span>4. struct timespec 时间类型</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>typedef long time_t;</span></span>
<span class="line"><span>struct timespec {</span></span>
<span class="line"><span>    time_t   tv_sec;     /* seconds：秒 */</span></span>
<span class="line"><span>    long     tv_nsec;    /* microseconds：纳妙 */</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它是POSIX.4 标准定义的时间结构，精确度到纳秒，一般由 <code>clock_gettime(clockid_t, struct timespec *)</code> 获取特定时钟的时间。常用如下4种时钟：</p><ul><li>CLOCK_REALTIME 系统当前时间，从1970年1月1日算起</li><li>CLOCK_MONOTONIC 系统的启动时间，不能被设置</li><li>CLOCK_PROCESS_CPUTIME_ID 本进程运行时间</li><li>CLOCK_THREAD_CPUTIME_ID 本线程运行时间</li></ul><h3 id="三、linux-时间编程接口" tabindex="-1"><a class="header-anchor" href="#三、linux-时间编程接口"><span>三、Linux 时间编程接口</span></a></h3><h4 id="_1-time-函数" tabindex="-1"><a class="header-anchor" href="#_1-time-函数"><span>1. time() 函数</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#include &lt;time.h&gt;</span></span>
<span class="line"><span>time_t time(time_t *tloc);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>说明：该函数用于获取日历时间，即从 1970年1月1日00点到现在所经历的秒数。</li><li>参数：参数 tloc 通常设置为 NULL，若 tloc 不为空，time() 函数也会将返回值存到 tloc 中。</li><li>返回值：函数执行成功返回秒数，失败则返回 <code>(time_t)-1</code> ，错误原因存在 errno</li></ul><h4 id="_2-时间转换函数-gmtime-、localtime-、ctime-、asctime-、mktime" tabindex="-1"><a class="header-anchor" href="#_2-时间转换函数-gmtime-、localtime-、ctime-、asctime-、mktime"><span>2. 时间转换函数 gmtime()、localtime()、ctime()、asctime()、mktime()</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#include &lt;time.h&gt;</span></span>
<span class="line"><span>struct tm *gmtime(const time_t *timep);</span></span>
<span class="line"><span>struct tm *gmtime_r(const time_t *timep, struct tm *result);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>struct tm *localtime(const time_t *timep);</span></span>
<span class="line"><span>struct tm *localtime_r(const time_t *timep, struct tm *result);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>char *ctime(const time_t *timep);</span></span>
<span class="line"><span>char *ctime_r(const time_t *timep, char *buf);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>char *asctime (const struct tm *__tp)</span></span>
<span class="line"><span>char *asctime_r(const struct tm *tm, char *buf);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>time_t mktime (struct tm *__tp);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>gmtime 函数将 time_t 类型的日历时间转换成 struct tm 结构体表示的<strong>格林威治时间</strong></li><li>localtime 函数将 time_t 类型的日历时间转换成 struct tm 结构体表示的<strong>本地时区时间</strong></li><li>ctime 函数将 time_t 类型的日志时间转换为本地时区时间的字符串形式</li><li>asctime 函数将 struct tm 结构体转换为字符串形式</li><li>mktime 函数将 struct tm 结构体转换为从 1970年1月1日00时00分00秒至今的 GMT 时间经过的秒数</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>time_t t = time(nullptr);</span></span>
<span class="line"><span>std::cout &lt;&lt; t &lt;&lt; std::endl;</span></span>
<span class="line"><span>// 本地时区时间</span></span>
<span class="line"><span>struct tm* t2 = localtime(&amp;t);</span></span>
<span class="line"><span>std::cout &lt;&lt; &quot;Local hour: &quot; &lt;&lt;  t2-&gt;tm_hour &lt;&lt; std::endl;</span></span>
<span class="line"><span>// 格林威治时间</span></span>
<span class="line"><span>struct tm* t3 = gmtime(&amp;t);</span></span>
<span class="line"><span>std::cout &lt;&lt; &quot;UTC hour: &quot; &lt;&lt; t3-&gt;tm_hour &lt;&lt; std::endl;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-时间比较函数-difftime" tabindex="-1"><a class="header-anchor" href="#_3-时间比较函数-difftime"><span>3. 时间比较函数 difftime()</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>double difftime (time_t __time1, time_t __time0)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>比较两个时间是是否相同，并返回之间相差的秒数</p><h4 id="_4-gettimeofday-、settimeofday" tabindex="-1"><a class="header-anchor" href="#_4-gettimeofday-、settimeofday"><span>4. gettimeofday()、settimeofday()</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int gettimeofday (struct timeval *__restrict __tv, void *__restrict __tz) </span></span>
<span class="line"><span>int settimeofday (const struct timeval *__tv, const struct timezone *__tz)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>gettimeofday 函数用于获取 UTC 时间1970年1月1日00时00分00秒到当前时刻的时间差，并将此时间存入 struct timeval 结构体中，当地时区信息则放到 tz 中。在 Linux 中 glibc 并未支持 tz，因此未使用 tz。成功返回 0，否则返回 -1，错误码存于 errno 中</li><li>settimeofday 函数设置当前时间。成功返回0，否则返回-1。只有 root 权限才能修改。</li></ul><h4 id="_5-strftime" tabindex="-1"><a class="header-anchor" href="#_5-strftime"><span>5. strftime()</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>size_t strftime (char *__restrict __s, size_t __maxsize, const char *__restrict __format,</span></span>
<span class="line"><span>			const struct tm *__restrict __tp)</span></span>
<span class="line"><span>char *strptime (const char *__restrict __s, const char *__restrict __fmt, struct tm *__tp)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>strftime 函数将参数 struct tm 结构的时间，按照 format 所指定的字符串格式做转换，转换后的字符串内容复制到参数 s 所指向的字符串数组中，该字符串的最大长度由 maxsize 所控制。返回值为复制到参数 s 所指的字符串数组的总字符数，不包括字符串结束符。</li><li>strptime 函数将一个字符串格式时间解释成为 struct tm 格式结构的时间</li></ul><h4 id="_6-获取精确时间-timespec-get-、clock-gettime" tabindex="-1"><a class="header-anchor" href="#_6-获取精确时间-timespec-get-、clock-gettime"><span>6. 获取精确时间 timespec_get()、clock_gettime()</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int timespec_get (struct timespec *__ts, int __base)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int clock_gettime (clockid_t __clock_id, struct timespec *__tp)</span></span>
<span class="line"><span># define CLOCK_REALTIME			0    // 日历时间，UTC</span></span>
<span class="line"><span># define CLOCK_MONOTONIC		1    // 单调时钟时间，从系统启动开始计算</span></span>
<span class="line"><span># define CLOCK_BOOTTIME			7    // 类似单调时钟时间，但是包含了系统休眠时经过的时间</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取时间，可以精确到纳秒级别。</p><ul><li>timespec_get 函数，参数 base 目前只定义了 <code>TIME_UTC</code>，所以还无法直接获取其他时区的时间值</li><li>clock_gettime 函数，它不仅能获得自<code>1970/1/1</code> 开始的时间，还可以自定义 clock 的类型以便获取不同的时间值。在需要获取高精度的时间值时应该优先考虑使用它。</li></ul><h3 id="四、linux-时间编程简单总结" tabindex="-1"><a class="header-anchor" href="#四、linux-时间编程简单总结"><span>四、Linux 时间编程简单总结</span></a></h3><p>struct timeval 结构和 struct timespec 结构都无法处理时区。Linux 处理时区的手段有以下两种：</p><ul><li>函数自定义参数和返回值使用 Local time 还是 UTC time</li><li>系统根据环境变量 TZ 以及配置文件 <code>/etc/localtime</code> 等改变本地时间（Local time）</li></ul><p>因此在处理时间的时候一定要注意，当前处理的时间是本地时间还是 UTC 时间。</p><h3 id="五、c-中-chrono-库" tabindex="-1"><a class="header-anchor" href="#五、c-中-chrono-库"><span>五、C++ 中 chrono 库</span></a></h3><p>C++11 中 chrono 库包含了三种类型的时钟</p><ul><li>system_clock：系统时钟。可能会被调整</li><li>steady_clock：单调时钟，不会被调整</li><li>high_resolution_clock：拥有可用的最短滴答周期的时钟。</li></ul><p>这三个时钟类有一些共同的成员，如下：</p><ul><li>now()：静态成员函数，返回当前时间，类型为<code>clock::time_point</code></li><li>time_point：成员类型，当前时钟的时间点类型</li><li>duration：成员类型，时钟的时长类型</li><li>rep：成员类型，时钟的 tick 类型，等同于 <code>clock::duration::rep</code></li><li>period：成员类型，时钟的单位，等同于<code>clock::duration::period</code></li><li>is_steady：静态成员类型，是否是稳定时钟，对于 steady_clock 来说该值一定是 true</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="六、linux-休眠编程接口" tabindex="-1"><a class="header-anchor" href="#六、linux-休眠编程接口"><span>六、Linux 休眠编程接口</span></a></h3><h4 id="_1-sleep-、usleep" tabindex="-1"><a class="header-anchor" href="#_1-sleep-、usleep"><span>1. sleep()、usleep()</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#include &lt;unistd.h&gt;</span></span>
<span class="line"><span>unsigned int sleep(unsigned int seconds);</span></span>
<span class="line"><span>int usleep(useconds_t usec);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>sleep 函数使程序休眠直到 seconds 秒之后才被唤醒。函数返回 0 表示 seconds 时间到了，或返回剩余的秒数</li><li>usleep 函数使程序休眠 usec 微妙之后才被唤醒。休眠时间会比实际时间略长。成功返回0，失败返回 -1。该函数可以被信号唤醒，同时返回 EINTER。</li></ul><h3 id="七、linux-定时器编程接口" tabindex="-1"><a class="header-anchor" href="#七、linux-定时器编程接口"><span>七、Linux 定时器编程接口</span></a></h3><p>Linux 应用程序为我们的每一个进程提供了一个定时闹钟 alarm，当定时器指定的时间到时，系统会向调用进程发送SIGALARM 信号，如果忽略或者不捕获此信号，则其默认动作是终止调用该 alarm 函数的进程；当然也可以通过 signal() 函数向系统注册一个自己的定时闹钟处理函数。</p><h4 id="_1-alarm" tabindex="-1"><a class="header-anchor" href="#_1-alarm"><span>1. alarm()</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>unsigned int alarm(unsigned int seconds);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>alarm 函数向系统设定一个闹钟，并在闹钟时间到时内核向该进程发送SIGALRM信号</li></ul><p>需要注意：</p><ul><li>一个进程只能有一个alarm闹钟；</li><li>闹钟时间到了后，若不再次调用alarm()，将不会有新的闹钟产生；</li><li>任何以seconds非0的调用，都将重新更新闹钟定时时间，并返回上一个闹钟剩余时间；若为第一次设置闹钟，则返回0；以seconds为0的调用，表示取消以前的闹钟，并将剩余时间返回。</li><li>在Linux系统中提到，sleep()有可能是使用alarm()来实现的，因此，在一个进程中同时使用alarm()和sleep()并不明智。</li></ul><h4 id="_2-setitimer" tabindex="-1"><a class="header-anchor" href="#_2-setitimer"><span>2. setitimer()</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int getitimer(int which, struct itimerval *curr_value);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int setitimer(int which, const struct itimerval *new_value, struct itimerval *old_value);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>which 的取值如下：</span></span>
<span class="line"><span>ITIMER_REAL：以系统真实的时间来计算，它会送出SIGALRM信号；</span></span>
<span class="line"><span>ITIMER_PROF：以该进程在用户态下和内核态下所费时间来计算，它送出SIGPROF信号；</span></span>
<span class="line"><span>ITIMER_VIRTUAL：以该进程在用户态下花费的时间来计算，它送出SIGVTALRM信号；</span></span>
<span class="line"><span></span></span>
<span class="line"><span>itimerval 结构如下：</span></span>
<span class="line"><span>struct itimerval {</span></span>
<span class="line"><span>    struct timeval it_interval; /* next value */</span></span>
<span class="line"><span>    struct timeval it_value;    /* current value */</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>struct timeval {</span></span>
<span class="line"><span>    long tv_sec;                /* seconds */</span></span>
<span class="line"><span>    long tv_usec;               /* microseconds */</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Linux 为每个进程提供了三个独立的计时器，每个计时器在不同的时域中递减。当任何一个定时器到点了，都会向进程发送一个信号，并且重启计时器。</p><ul><li><p>getitimer() 函数获取 ITIMER_REAL、ITIMER_PROF 和 ITIMER_VIRTUAL 三个定时器中的一个时间信息，并保存到 curr_value 指向的对象中</p></li><li><p>setitimer() 函数，定时器为 ITIMER_REAL、ITIMER_PROF 和 ITIMER_VIRTUAL 中的一个；定时时间为 new_value；如果 old_value 非空，则将老的时间信息保存到该对象中。成功返回 0，失败返回 -1。</p><p>其中 itimerval 结构中，it_value 变量用于设置计时器的计时时间，为 0 表示禁止；it_interval 变量用于设置当计时器到时需要重置的时间，从而实现循环计时。也就是说，计时器从 it_value 开始递减，当递减到 0 时，向进程发送一个信号，并重置定时器为 it_interval，如此循环，从而实现循环闹钟的功能。</p></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>void sig_func(int signo)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    printf(&quot;Catch a signal.\\n&quot;);</span></span>
<span class="line"><span>    static int realCnt = 0;</span></span>
<span class="line"><span>    static int virtualCnt = 0;</span></span>
<span class="line"><span>    switch(signo)</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        case SIGALRM:</span></span>
<span class="line"><span>            printf(&quot;The %d times:SIGALRM\\n&quot;,realCnt++);</span></span>
<span class="line"><span>            break;</span></span>
<span class="line"><span>        case SIGVTALRM:</span></span>
<span class="line"><span>            printf(&quot;The %d times:SIGVTALRM\\n&quot;,virtualCnt++);</span></span>
<span class="line"><span>            break;</span></span>
<span class="line"><span>        default:</span></span>
<span class="line"><span>            break;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void test_time_06() {</span></span>
<span class="line"><span>    signal(SIGALRM, sig_func);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    struct itimerval v1;</span></span>
<span class="line"><span>    struct itimerval v2;</span></span>
<span class="line"><span>    v1.it_interval.tv_sec = 1;</span></span>
<span class="line"><span>    v1.it_interval.tv_usec = 0;</span></span>
<span class="line"><span>    v1.it_value.tv_sec = 3;</span></span>
<span class="line"><span>    v1.it_value.tv_usec = 0;</span></span>
<span class="line"><span>    int res = setitimer(ITIMER_REAL, &amp;v1, &amp;v2);</span></span>
<span class="line"><span>    if (res &lt; 0) {</span></span>
<span class="line"><span>        std::cout &lt;&lt; &quot;setitimer failed, errno: &quot; &lt;&lt; errno &lt;&lt; &quot;, err: &quot; &lt;&lt; strerror(errno) &lt;&lt; std::endl;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    while (1) {</span></span>
<span class="line"><span>        sleep(30);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,63)]))}const r=i(l,[["render",t],["__file","16.时间编程.html.vue"]]),u=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/16.%E6%97%B6%E9%97%B4%E7%BC%96%E7%A8%8B.html","title":"16.Linux下C/C++ 的时间编程","lang":"zh-CN","frontmatter":{"title":"16.Linux下C/C++ 的时间编程","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"Linux 下 C/C++ 的时间编程 一、Linux 下时间类型 real time：日历时间。对于 Linux 中，这个时间的起点是 1970年1月1日00点，Linux 上以此为起点的均为 UTC 时间。 格林威治时间（Greenwich Mean Time，GMT）也被称为世界标准的时间（Coordinated Universal Time，U...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/16.%E6%97%B6%E9%97%B4%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"16.Linux下C/C++ 的时间编程"}],["meta",{"property":"og:description","content":"Linux 下 C/C++ 的时间编程 一、Linux 下时间类型 real time：日历时间。对于 Linux 中，这个时间的起点是 1970年1月1日00点，Linux 上以此为起点的均为 UTC 时间。 格林威治时间（Greenwich Mean Time，GMT）也被称为世界标准的时间（Coordinated Universal Time，U..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"16.Linux下C/C++ 的时间编程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"Linux 下 C/C++ 的时间编程","slug":"linux-下-c-c-的时间编程","link":"#linux-下-c-c-的时间编程","children":[{"level":3,"title":"一、Linux 下时间类型","slug":"一、linux-下时间类型","link":"#一、linux-下时间类型","children":[]},{"level":3,"title":"二、Linux 下时间格式","slug":"二、linux-下时间格式","link":"#二、linux-下时间格式","children":[]},{"level":3,"title":"三、Linux 时间编程接口","slug":"三、linux-时间编程接口","link":"#三、linux-时间编程接口","children":[]},{"level":3,"title":"四、Linux 时间编程简单总结","slug":"四、linux-时间编程简单总结","link":"#四、linux-时间编程简单总结","children":[]},{"level":3,"title":"五、C++ 中 chrono 库","slug":"五、c-中-chrono-库","link":"#五、c-中-chrono-库","children":[]},{"level":3,"title":"六、Linux 休眠编程接口","slug":"六、linux-休眠编程接口","link":"#六、linux-休眠编程接口","children":[]},{"level":3,"title":"七、Linux 定时器编程接口","slug":"七、linux-定时器编程接口","link":"#七、linux-定时器编程接口","children":[]}]}],"git":{},"readingTime":{"minutes":9.26,"words":2777},"filePathRelative":"编程语言/c++语言/编码技巧/16.时间编程.md","localizedDate":"2023年1月19日","excerpt":"<h2>Linux 下 C/C++ 的时间编程</h2>\\n<h3>一、Linux 下时间类型</h3>\\n<ul>\\n<li>\\n<p>real time：日历时间。对于 Linux 中，这个时间的起点是 1970年1月1日00点，Linux 上以此为起点的均为 UTC 时间。</p>\\n<p>格林威治时间（Greenwich Mean Time，GMT）也被称为世界标准的时间（Coordinated Universal Time，UTC）。UTC 和 GMT 两者是同一概念的时间。区别在于 UTC 是天文学上的概念，而 GMT 是基于一个原子钟。</p>\\n<p>GMT 是中央时区，北京在东8区，相差8小时，所以 <code>北京时间 = GMT时间 + 8小时</code></p>\\n<p><strong>注意：会受到修改系统时间的命令/api 或者 ntp 服务的影响，导致时间出现跳跃</strong></p>\\n</li>\\n<li>\\n<p>monotonic time：单调时间。意为不能被设置和影响的时间，它可以提供精确的时间信息，不会出现时间跳跃。单调时间的起点 posix 标准并没有明确指定，但在 Linux 上是以系统启动的时间为起点的。虽然说单调时钟的时间是稳定的，但它会被 adjtime 函数和 ntp 服务影响，同时当系统挂起或休眠时计时会被暂停。</p>\\n</li>\\n</ul>","autoDesc":true}');export{r as comp,u as data};
