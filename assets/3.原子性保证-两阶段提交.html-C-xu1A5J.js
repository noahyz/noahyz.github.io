import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as l,o as n}from"./app-D1zlwylF.js";const o="/assets/%E4%BA%8C%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4-DZfA-wr1.png",p={};function a(r,t){return n(),e("div",null,t[0]||(t[0]=[l('<p>两阶段提交（<code>Two-Phase Commit</code>，2PC）由两个阶段组成。</p><p>基本思想：先检查每个节点上的状态是否能够满足事务正确性，再进行事务操作。</p><h3 id="一、算法流程" tabindex="-1"><a class="header-anchor" href="#一、算法流程"><span>一、算法流程</span></a></h3><p>包含两个角色：协调者（<code>Coordinator</code>）和参与者（<code>Participants</code>）。</p><p>协调者负责协调算法的各个阶段。参与者负责执行事务操作。如下两个阶段。</p><ol><li><p>第一阶段：投票阶段</p><ul><li>首先协调者向所有参与者并行发送准备消息，询问参与者是否可以提交事务，并等待参与者响应。</li><li>参与者检查执行事务所需条件和资源（如权限验证、上锁等），一切都准备好后参与者执行事务的所有操作，并记录操作日志。</li><li>参与者响应协调者发起的请求。如果参与者发现事务的所有操作都执行成功，则返回一条“是”消息；如果参与者发现 “所需条件和资源” 检查失败，或者事务操作执行失败，则返回一条 “否” 消息。</li></ul></li><li><p>第二阶段：提交阶段。<br> 协调者收到所有参与者上一阶段的响应，如果所有参与者都回复 “是”，那么：</p><ul><li>协调者向所有参与者发送 “提交” 消息，指示参与者提交本次事务，等待参与者响应。</li><li>参与者收到提交消息后，正式提交事务。完成事务提交操作后，清理占用的资源，比如释放锁等。并记录操作日志。</li><li>参与者中止事务后响应协调者，协调者收到所有参与者消息后，确认事务完成。</li></ul><p>只要有一个参与者回复了 “否”，那么：</p><ul><li>协调者向所有参与者发送中止消息，指示参与者中止本次事务，等待参与者响应</li><li>参与者收到中止消息后，利用其第一阶段记录的日志回滚所执行的事务操作，并清理占用的资源</li><li>中止后参与者响应协调者，协调者收到所有参与者消息后，确认事务中止</li></ul><p>也就是说，每个参与者都有一票否决权。只有全票通过，事务才能提交。</p></li></ol><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>需要注意的是，协调者和参与者都需要将事务相关的信息写入持久化存储设备，以便能在重启后恢复事务的状态。</p><h3 id="二、异常分析" tabindex="-1"><a class="header-anchor" href="#二、异常分析"><span>二、异常分析</span></a></h3><p>每个阶段都有可能出现故障，两阶段提交协议需要一定的容错机制。</p><p><strong>第一种情况</strong>：</p><p>问题：在第一阶段，参与者在回复协调者之前发生了故障，那么协调者只能一直等待故障的参与者回复。</p><p>解决：协调者可以设置一个超时等待时间，某个参与者超时就认为投了反对票。</p><p><strong>第二种情况</strong>：</p><p>问题：在第一阶段，协调者在向参与者发送 “准备请求” 后立即发生故障。那么此时参与者将一直阻塞，直到协调者恢复正常后才能知道本次事务是要提交还是要中止。</p><p>协调者存在单点故障问题，再加上协议的阻塞性。如果此时数据库还锁定了事务相关的数据和资源，后续的事务也无法访问这些数据，可能会导致整个系统停顿。需要人工干预才能解决。</p><p>因此，可以看出两阶段提交只满足弱终止条件。也即：如果协调者发生故障，其他没有发生故障的参与者无法决定事务走向。</p><p><strong>第三种情况</strong>：</p><p>问题：在第二阶段，协调者只发送了一部分提交消息，此时发生了网络分区。导致剩下的那部分参与者没有收到提交消息。也即：只有部分参与者提交了事务。如果此时别的事务能够读取到中间结果，那么整个系统会出现数据不一致的情况。</p><p>极端情况下，在第二阶段，协调者只将消息发送给一个参与者后就宕机了，而收到这条消息的参与者也宕机了。那么此时即便选举出新的协调者，新协调者也无法做决策。因此事务要中止还是要提交，只有宕机的协调者和参与者知道。</p><ul><li>新协调者不能直接中止事务，如果宕机的参与者已经提交了，但在其他参与者上中止了，那么一旦宕机的参与者恢复，整个系统的数据将会彻底不一致。</li><li>新协调者不能强制提交事务，因此最初的消息可能是中止消息，强制提交后，宕机的参与者一旦恢复，整个系统的数据会不一致</li></ul><p>因此，两阶段提交算法存在：同步阻塞问题、单点故障问题、数据不一致问题、提交阶段不确定问题。</p>',22)]))}const E=i(p,[["render",a],["__file","3.原子性保证-两阶段提交.html.vue"]]),d=JSON.parse('{"path":"/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/3.%E5%8E%9F%E5%AD%90%E6%80%A7%E4%BF%9D%E8%AF%81-%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4.html","title":"3.原子性保证-两阶段提交","lang":"zh-CN","frontmatter":{"title":"3.原子性保证-两阶段提交","description":"两阶段提交（Two-Phase Commit，2PC）由两个阶段组成。 基本思想：先检查每个节点上的状态是否能够满足事务正确性，再进行事务操作。 一、算法流程 包含两个角色：协调者（Coordinator）和参与者（Participants）。 协调者负责协调算法的各个阶段。参与者负责执行事务操作。如下两个阶段。 第一阶段：投票阶段 首先协调者向所有参...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/3.%E5%8E%9F%E5%AD%90%E6%80%A7%E4%BF%9D%E8%AF%81-%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"3.原子性保证-两阶段提交"}],["meta",{"property":"og:description","content":"两阶段提交（Two-Phase Commit，2PC）由两个阶段组成。 基本思想：先检查每个节点上的状态是否能够满足事务正确性，再进行事务操作。 一、算法流程 包含两个角色：协调者（Coordinator）和参与者（Participants）。 协调者负责协调算法的各个阶段。参与者负责执行事务操作。如下两个阶段。 第一阶段：投票阶段 首先协调者向所有参..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.原子性保证-两阶段提交\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"一、算法流程","slug":"一、算法流程","link":"#一、算法流程","children":[]},{"level":3,"title":"二、异常分析","slug":"二、异常分析","link":"#二、异常分析","children":[]}],"git":{},"readingTime":{"minutes":4.32,"words":1295},"filePathRelative":"分布式/分布式事务/3.原子性保证-两阶段提交.md","excerpt":"<p>两阶段提交（<code>Two-Phase Commit</code>，2PC）由两个阶段组成。</p>\\n<p>基本思想：先检查每个节点上的状态是否能够满足事务正确性，再进行事务操作。</p>\\n<h3>一、算法流程</h3>\\n<p>包含两个角色：协调者（<code>Coordinator</code>）和参与者（<code>Participants</code>）。</p>\\n<p>协调者负责协调算法的各个阶段。参与者负责执行事务操作。如下两个阶段。</p>\\n<ol>\\n<li>\\n<p>第一阶段：投票阶段</p>\\n<ul>\\n<li>首先协调者向所有参与者并行发送准备消息，询问参与者是否可以提交事务，并等待参与者响应。</li>\\n<li>参与者检查执行事务所需条件和资源（如权限验证、上锁等），一切都准备好后参与者执行事务的所有操作，并记录操作日志。</li>\\n<li>参与者响应协调者发起的请求。如果参与者发现事务的所有操作都执行成功，则返回一条“是”消息；如果参与者发现 “所需条件和资源” 检查失败，或者事务操作执行失败，则返回一条 “否” 消息。</li>\\n</ul>\\n</li>\\n<li>\\n<p>第二阶段：提交阶段。<br>\\n协调者收到所有参与者上一阶段的响应，如果所有参与者都回复 “是”，那么：</p>\\n<ul>\\n<li>协调者向所有参与者发送 “提交” 消息，指示参与者提交本次事务，等待参与者响应。</li>\\n<li>参与者收到提交消息后，正式提交事务。完成事务提交操作后，清理占用的资源，比如释放锁等。并记录操作日志。</li>\\n<li>参与者中止事务后响应协调者，协调者收到所有参与者消息后，确认事务完成。</li>\\n</ul>\\n<p>只要有一个参与者回复了 “否”，那么：</p>\\n<ul>\\n<li>协调者向所有参与者发送中止消息，指示参与者中止本次事务，等待参与者响应</li>\\n<li>参与者收到中止消息后，利用其第一阶段记录的日志回滚所执行的事务操作，并清理占用的资源</li>\\n<li>中止后参与者响应协调者，协调者收到所有参与者消息后，确认事务中止</li>\\n</ul>\\n<p>也就是说，每个参与者都有一票否决权。只有全票通过，事务才能提交。</p>\\n</li>\\n</ol>","autoDesc":true}');export{E as comp,d as data};
