import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as p,o as s}from"./app-D1zlwylF.js";const o={};function a(i,e){return s(),t("div",null,e[0]||(e[0]=[p(`<h3 id="一、popen-函数" tabindex="-1"><a class="header-anchor" href="#一、popen-函数"><span>一、popen 函数</span></a></h3><p>函数定义：<code>FILE * popen( const char * command,const char * type);</code></p><p>说明：popen 会调用 fork 产生子进程，然后从子进程中调用 <code>/bin/sh -c</code> 来执行参数 command 的指令。参数 type 可使用 r 代表读取，w 代表写入。依照此 type 值，popen() 会建立管道连到子进程的标准输出设备或标准输入设备，然后返回一个文件指针。随后进程便可利用此文件指针来读取子进程的输出设备或是写入到子进程的标准输入设备中。此外，所有使用文件指针 (FILE*) 操作的函数也都可以使用，除了 fclose() 以外。</p><p>返回值：若成功则返回文件指针，否则返回NULL，错误原因存于errno中。</p><p>注意：在编写具SUID/SGID权限的程序时请尽量避免使用popen()，popen()会继承环境变量，通过环境变量可能会造成系统安全的问题</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>    FILE *fp;</span></span>
<span class="line"><span>    char buffer[80];</span></span>
<span class="line"><span>    fp = popen(&quot;cat /etc/passwd&quot;, &quot;r&quot;);</span></span>
<span class="line"><span>    fgets(buffer, sizeof(buffer), fp);</span></span>
<span class="line"><span>    printf(&quot;%s&quot;, buffer);</span></span>
<span class="line"><span>    pclose(fp);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>popen 函数的实现：</p><ol><li>使用 pipe 建立管道</li><li>使用 fork 创建子进程</li><li>在子进程中调用 exec 族函数执行命令，通过管道将结果传送给父进程</li><li>在主进程中等待子进程执行，子进程执行完成后接收其结果，返回结果的文件指针</li></ol><h3 id="二、system-函数" tabindex="-1"><a class="header-anchor" href="#二、system-函数"><span>二、system 函数</span></a></h3><p>可以使用 system 函数运行命令行命令，但是只能得到该命令行的 int 型返回值，并不能获取显示结果。例如：<code>system(ls)</code> 只能得到 0 或者 非0。</p><p>popen 和 system 系统调用的差异：<a href="https://blog.csdn.net/liuxingen/article/details/47057539" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/liuxingen/article/details/47057539</a></p>`,11)]))}const l=n(o,[["render",a],["__file","2.system和popen函数.html.vue"]]),d=JSON.parse('{"path":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/2.system%E5%92%8Cpopen%E5%87%BD%E6%95%B0.html","title":"2.system和popen函数","lang":"zh-CN","frontmatter":{"title":"2.system和popen函数","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"一、popen 函数 函数定义：FILE * popen( const char * command,const char * type); 说明：popen 会调用 fork 产生子进程，然后从子进程中调用 /bin/sh -c 来执行参数 command 的指令。参数 type 可使用 r 代表读取，w 代表写入。依照此 type 值，popen(...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/2.system%E5%92%8Cpopen%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"2.system和popen函数"}],["meta",{"property":"og:description","content":"一、popen 函数 函数定义：FILE * popen( const char * command,const char * type); 说明：popen 会调用 fork 产生子进程，然后从子进程中调用 /bin/sh -c 来执行参数 command 的指令。参数 type 可使用 r 代表读取，w 代表写入。依照此 type 值，popen(..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2.system和popen函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"一、popen 函数","slug":"一、popen-函数","link":"#一、popen-函数","children":[]},{"level":3,"title":"二、system 函数","slug":"二、system-函数","link":"#二、system-函数","children":[]}],"git":{},"readingTime":{"minutes":1.45,"words":434},"filePathRelative":"操作系统/系统编程/2.system和popen函数.md","localizedDate":"2023年1月19日","excerpt":"<h3>一、popen 函数</h3>\\n<p>函数定义：<code>FILE * popen( const char * command,const char * type);</code></p>\\n<p>说明：popen 会调用 fork 产生子进程，然后从子进程中调用 <code>/bin/sh -c</code> 来执行参数 command 的指令。参数 type 可使用 r 代表读取，w 代表写入。依照此 type 值，popen() 会建立管道连到子进程的标准输出设备或标准输入设备，然后返回一个文件指针。随后进程便可利用此文件指针来读取子进程的输出设备或是写入到子进程的标准输入设备中。此外，所有使用文件指针 (FILE*) 操作的函数也都可以使用，除了 fclose() 以外。</p>","autoDesc":true}');export{l as comp,d as data};
