import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a,o as d}from"./app-D1zlwylF.js";const n={};function o(l,t){return d(),r("div",null,t[0]||(t[0]=[a('<p>背景</p><hr><p>对于一个c/c++程序员来说，内存泄漏是一个常见的也是令人头疼的问题。已经有许多技术被研究出来以应对这个问题，比如 Smart Pointer，Garbage Collection等。Smart Pointer技术比较成熟，STL中已经包含支持Smart Pointer的class，但是它的使用似乎并不广泛，而且它也不能解决所有的问题；Garbage Collection技术在Java 中已经比较成熟，但是在c/c++领域的发展并不顺畅，虽然很早就有人思考在C++中也加入GC的支持。</p><h1 id="内存泄露的定义" tabindex="-1"><a class="header-anchor" href="#内存泄露的定义"><span>内存泄露的定义</span></a></h1><hr><h4 id="广义的内存泄露" tabindex="-1"><a class="header-anchor" href="#广义的内存泄露"><span>广义的内存泄露</span></a></h4><p>​ 广义的说，内存泄漏不仅仅包含堆内存的泄漏，还包含系统资源的泄漏(resource leak)，比如核心态HANDLE，GDI Object，SOCKET， Interface等，从根本上说这些由操作系统分配的对象也消耗内存，如果这些对象发生泄漏最终也会导致内存的泄漏。而且，某些对象消耗的是核心态内 存，这些对象严重泄漏时会导致整个操作系统不稳定。所以相比之下，系统资源的泄漏比堆内存的泄漏更为严重。</p><h4 id="狭义的内存泄露" tabindex="-1"><a class="header-anchor" href="#狭义的内存泄露"><span>狭义的内存泄露</span></a></h4><p>​ 一般我们常说的内存泄漏是指堆内存的泄漏。堆内存是指程序从堆中分配的，大小任意的（内存块的大小可以在程序运行期决定），使用完后必须显示释放的内 存。应用程序一般使用malloc，realloc，new等函数从堆中分配到一块内存，使用完后，程序必须负责相应的调用free或delete释放该 内存块，否则，这块内存就不能被再次使用，我们就说这块内存泄漏了。</p><h1 id="一些概念" tabindex="-1"><a class="header-anchor" href="#一些概念"><span>一些概念</span></a></h1><hr><h4 id="隐式内存泄漏" tabindex="-1"><a class="header-anchor" href="#隐式内存泄漏"><span>隐式内存泄漏</span></a></h4><p>​ 程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但 是对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。</p><h1 id="常见内些泄露相关问题" tabindex="-1"><a class="header-anchor" href="#常见内些泄露相关问题"><span>常见内些泄露相关问题</span></a></h1><hr><p><a href="https://ku.baidu-int.com/knowledge/HFVrC7hq1Q/pKzJfZczuc/zfJQeLyJBG/Yk7Cq4auB6KoCf" target="_blank" rel="noopener noreferrer">【内存泄露】内存(显存)未释放导致内存(显存)泄露</a></p><h2 id="百度内部-业界内存泄漏检测工具" tabindex="-1"><a class="header-anchor" href="#百度内部-业界内存泄漏检测工具"><span>百度内部&amp;业界内存泄漏检测工具</span></a></h2><hr><h3 id="公司内部内存检测工具" tabindex="-1"><a class="header-anchor" href="#公司内部内存检测工具"><span>公司内部内存检测工具</span></a></h3><ol><li><a href="https://wiki2ku.baidu-int.com/pubapi/urlmap?id=321387207" target="_blank" rel="noopener noreferrer">SA</a> 静态扫描里面也有内存泄露的规则（较少，只有3条，可参考性较低）；</li><li><a href="https://wiki2ku.baidu-int.com/pubapi/urlmap?id=1055483904" target="_blank" rel="noopener noreferrer">ASAN</a> 用于运行时检测C/C++程序中的内存访问错误，使用的内存检测工具 <a href="https://github.com/google/sanitizers/wiki/AddressSanitizer" target="_blank" rel="noopener noreferrer">Address Sanitizer (ASan)</a>。</li></ol><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3><h3 id="业界内存检测工具" tabindex="-1"><a class="header-anchor" href="#业界内存检测工具"><span>业界内存检测工具</span></a></h3><hr><p><a href="https://wiki2ku.baidu-int.com/pubapi/urlmap?id=1588904476" target="_blank" rel="noopener noreferrer">内存泄露检测工具总结</a></p><table><thead><tr><th>检测工具</th><th>分类</th><th>描述</th><th>性能影响</th><th>是否会修改源代码</th><th>能否指出具体位置和原因</th><th>应用场景</th><th>使用</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://www.valgrind.org" target="_blank" rel="noopener noreferrer">valgrind</a></td><td>动态检测</td><td>一个强大开源的程序检测工具</td><td>极大</td><td>否</td><td>能</td><td>适用Linux、Mac(Mac10.14后就不支持了)</td><td>valgrind --tool=memcheck ./a.out</td><td>安装下载：<a href="https://www.valgrind.xn--org-kb0er53o9bm8uv" target="_blank" rel="noopener noreferrer">https://www.valgrind.org详细使用</a>：<a href="https://blog.csdn.net/andylauren/article/details/93189740%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D%EF%BC%9Ahttps://blog.csdn.net/feisy/article/details/17022377" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/andylauren/article/details/93189740原理介绍：https://blog.csdn.net/feisy/article/details/17022377</a></td></tr><tr><td><a href="http://elinux.org/Memory_Debuggers#mtrace" target="_blank" rel="noopener noreferrer">mtrace</a></td><td>动态检测</td><td>GNU扩展, 用来跟踪malloc, mtrace为内存分配函数（malloc, realloc, memalign, free）安装hook函数</td><td>大</td><td>是</td><td>能</td><td>适用Linux</td><td>无需安装，使用时包含头文件mcheck.h，程序中调用mtrace和muntrace方法即可。mtrace 用于开启内存使用记录，muntrace用于取消内存使用记录。内存使用情况记录到一个文件，值由环境变量：MALLOC_TRACE决定。</td><td>mtrace这个工具本身是 Glibc 的一部分，一般无须特殊安装详细使用：<a href="https://www.jianshu.com/p/d9e12b66096a%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D%EF%BC%9Ahttps://zhuanlan.zhihu.com/p/83547768" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/d9e12b66096a原理介绍：https://zhuanlan.zhihu.com/p/83547768</a></td></tr><tr><td><a href="http://splint.org/download.html" target="_blank" rel="noopener noreferrer">splint</a></td><td>静态检测</td><td>一个针对C语言的开源程序静态分析工具</td><td>无</td><td>否</td><td>能</td><td>Linux、Windows</td><td>需要下载源码并安装程序，通过标志和注释来获取想要的错误信息splint *.c（Linux）</td><td>安装下载：<a href="http://splint.org/download.html%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%EF%BC%9Ahttps://www.cnblogs.com/bangerlee/archive/2011/09/07/2166593.html" target="_blank" rel="noopener noreferrer">http://splint.org/download.html详细使用：https://www.cnblogs.com/bangerlee/archive/2011/09/07/2166593.html</a></td></tr><tr><td><a href="https://github.com/gperftools/gperftools/wiki" target="_blank" rel="noopener noreferrer">Gperftools heap-profiler</a></td><td>动态检测</td><td>是 google 开源的一个工具集</td><td>有消耗，较低</td><td>是</td><td>不能，需要自己分析输出的内存变化情况</td><td>适用Linux</td><td>需要替换libc的malloc库，替换为tcmalloc：thread cache malloc，通过在tcmalloc加打桩，即可定位函数级别的内存的累积量，需要自行分析内存变化情况找到内存泄露位置。</td><td>安装与详细使用：<a href="https://www.cnblogs.com/minglee/p/10124174.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/minglee/p/10124174.html</a></td></tr><tr><td><a href="http://vld.codeplex.com/" target="_blank" rel="noopener noreferrer">Visual Leak Detector</a></td><td>动态检测</td><td>免费的、开源的、强大的内存泄露检测系统，可以安装当作VS的一个插件。相比Visual C++自带的内存检测机制，Visual Leak Detector可以显示导致内存泄露的完整内存分配调用堆栈。</td><td>无</td><td>否</td><td>能指出位置，不能给原因</td><td>Visual C++ IDE上的工具</td><td>在安装完成后，在工程中指定其include和lib，然后添加头文件#include &lt;vld.h&gt;这样就可以使用了。</td><td>安装下载：<a href="https://blog.csdn.net/chaipp0607/article/details/79182471" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/chaipp0607/article/details/79182471</a></td></tr><tr><td><a href="https://github.com/google/sanitizers/wiki/AddressSanitizer" target="_blank" rel="noopener noreferrer">Address Sanitizer (ASan)</a></td><td>动态检测</td><td>AddressSanitizer（内存错误检测器）最初由google研发，简称asan，用于运行时检测C/C++程序中的内存访问错误，相比较传统工具如valgind，运行速度快，检测到错误之后，输出信息非常详细，可以通过add2line符合输出，从而直接定位到代码行，方便快速的定位问题</td><td>有消耗，较低</td><td>否</td><td>能</td><td>Linux i386/x86_64 、OS X 10.7 - 10.11 (i386/x86_64)、iOS Simulator、Android ARM、FreeBSD i386/x86_64</td><td>gcc -fsanitize=address -ggdb -o test test.c编译后运行</td><td>详细使用：<a href="https://blog.csdn.net/yuanbinquan/article/details/106767635%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D%EF%BC%9Ahttps://github.com/google/sanitizers/wiki/AddressSanitizerAlgorithm" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/yuanbinquan/article/details/106767635原理介绍：https://github.com/google/sanitizers/wiki/AddressSanitizerAlgorithm</a></td></tr><tr><td>CRT</td><td></td><td></td><td></td><td></td><td></td><td>Visual C++ IDE</td><td>在程序退出前的最后一个地方调用_CrtDumpMemoryLeaks （）</td><td></td></tr><tr><td>BoundsChecker</td><td></td><td></td><td></td><td></td><td></td><td>Visual C++ IDE</td><td></td><td></td></tr><tr><td><a href="https://blog.csdn.net/gatieme/article/details/51959654" target="_blank" rel="noopener noreferrer">dmalloc</a></td><td></td><td>用于检查C/C++内存泄露(leak)的工具，即检查是否存在直到程序运行结束还没有释放的内存,以一个运行库的方式发布</td><td></td><td>是</td><td></td><td></td><td></td><td></td></tr><tr><td><a href="http://www.linkdata.se/sourcecode.html" target="_blank" rel="noopener noreferrer">memwatch</a></td><td></td><td>和dmalloc一样，它能检测未释放的内存、同一段内存被释放多次、位址存取错误及不当使用未分配之内存区域</td><td></td><td>是</td><td></td><td></td><td>在需要检测的.c文件里面包含memwatch.h文件，编译的时候加上几个参数即可</td><td></td></tr><tr><td><a href="http://mpatrol.sourceforge.net/" target="_blank" rel="noopener noreferrer">mpatrol</a></td><td></td><td>一个跨平台的 C++ 内存泄漏检测器</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>',25)]))}const s=e(n,[["render",o],["__file","内存泄漏.html.vue"]]),c=JSON.parse('{"path":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F.html","title":"内存泄漏","lang":"zh-CN","frontmatter":{"title":"内存泄漏","description":"背景 对于一个c/c++程序员来说，内存泄漏是一个常见的也是令人头疼的问题。已经有许多技术被研究出来以应对这个问题，比如 Smart Pointer，Garbage Collection等。Smart Pointer技术比较成熟，STL中已经包含支持Smart Pointer的class，但是它的使用似乎并不广泛，而且它也不能解决所有的问题；Garba...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"内存泄漏"}],["meta",{"property":"og:description","content":"背景 对于一个c/c++程序员来说，内存泄漏是一个常见的也是令人头疼的问题。已经有许多技术被研究出来以应对这个问题，比如 Smart Pointer，Garbage Collection等。Smart Pointer技术比较成熟，STL中已经包含支持Smart Pointer的class，但是它的使用似乎并不广泛，而且它也不能解决所有的问题；Garba..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内存泄漏\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"百度内部&业界内存泄漏检测工具","slug":"百度内部-业界内存泄漏检测工具","link":"#百度内部-业界内存泄漏检测工具","children":[{"level":3,"title":"公司内部内存检测工具","slug":"公司内部内存检测工具","link":"#公司内部内存检测工具","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]},{"level":3,"title":"业界内存检测工具","slug":"业界内存检测工具","link":"#业界内存检测工具","children":[]}]}],"git":{},"readingTime":{"minutes":5.37,"words":1611},"filePathRelative":"操作系统/内存管理/内核原理/内存泄漏.md","excerpt":"<p>背景</p>\\n<hr>\\n<p>对于一个c/c++程序员来说，内存泄漏是一个常见的也是令人头疼的问题。已经有许多技术被研究出来以应对这个问题，比如 Smart Pointer，Garbage Collection等。Smart Pointer技术比较成熟，STL中已经包含支持Smart Pointer的class，但是它的使用似乎并不广泛，而且它也不能解决所有的问题；Garbage Collection技术在Java 中已经比较成熟，但是在c/c++领域的发展并不顺畅，虽然很早就有人思考在C++中也加入GC的支持。</p>\\n<h1>内存泄露的定义</h1>\\n<hr>\\n<h4>广义的内存泄露</h4>","autoDesc":true}');export{s as comp,c as data};
