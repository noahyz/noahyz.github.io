import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-D1zlwylF.js";const l={};function p(t,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h2 id="panic-和-recover" tabindex="-1"><a class="header-anchor" href="#panic-和-recover"><span>panic 和 recover</span></a></h2><ul><li>panic 能够改变程序的控制流，调用 panic 后会立刻停止执行当前函数的剩余代码，并在当前 Goroutine 中递归执行调用方的 defer</li><li>recover 可以中止 panic 造成的程序崩溃。该函数只能在 defer 中发挥作用，在其他作用域中调用不会发挥作用</li></ul><h3 id="一、现象" tabindex="-1"><a class="header-anchor" href="#一、现象"><span>一、现象</span></a></h3><ul><li>panic 只会触发当前 Goroutine 的 defer</li><li>recover 只有在 defer 中调用才会生效</li><li>panic 允许在 defer 中嵌套多次调用</li></ul><h4 id="_1-跨协程失效" tabindex="-1"><a class="header-anchor" href="#_1-跨协程失效"><span>1. 跨协程失效</span></a></h4><p>panic 只会触发当前 Goroutine 的延迟调用函数（defer）</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    defer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;in main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    go</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">       defer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;in goroutine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;panic in goroutine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Second</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">输出</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> goroutine</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">panic</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> goroutine</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>defer 关键字对应的 <code>runtime.deferproc</code> 会将延迟调用函数与调用方所在的 Goroutine 进行关联。</p><ul><li>当程序发生崩溃时，只会调用当前 Goroutine 的延迟调用函数。</li><li>多个 Goroutine 之间没有太多关联，一个 Goroutine 在触发 panic 时也不应该执行其他 Goroutine 的延迟函数</li></ul><h4 id="_2-recover-只有在-defer-中调用才能生效" tabindex="-1"><a class="header-anchor" href="#_2-recover-只有在-defer-中调用才能生效"><span>2. recover 只有在 defer 中调用才能生效</span></a></h4><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    defer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;in main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> err</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> recover</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;panic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>recover 是在 panic 之前调用的，并不满足生效的条件，所以需要在 defer 中使用 recover 关键字</p><h4 id="_3-嵌套崩溃" tabindex="-1"><a class="header-anchor" href="#_3-嵌套崩溃"><span>3. 嵌套崩溃</span></a></h4><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;in main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  defer</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      defer</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">          panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;panic again and again&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      }()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">      panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;panic again&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;panic once&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">输出</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> main</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">panic</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> once</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">panic</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> again</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        panic</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">panic</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> again</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> again</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序多次执行 panic 也不会影响 defer 函数的正常执行。</p><h3 id="二、底层实现" tabindex="-1"><a class="header-anchor" href="#二、底层实现"><span>二、底层实现</span></a></h3><p>panic 关键字在 Go 语言源码中由 <code>runtime._panic</code> 实现。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>type _panic struct {</span></span>
<span class="line"><span>	argp      unsafe.Pointer</span></span>
<span class="line"><span>	arg       interface{}</span></span>
<span class="line"><span>	link      *_panic</span></span>
<span class="line"><span>	recovered bool</span></span>
<span class="line"><span>	aborted   bool</span></span>
<span class="line"><span>	pc        uintptr</span></span>
<span class="line"><span>	sp        unsafe.Pointer</span></span>
<span class="line"><span>	goexit    bool</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>argp 是指向 defer 调用时参数的指针</li><li>arg 是调用 panic 时传入的参数</li><li>link 是链表，指向更早调用的 <code>runtime._panic</code> 结构。panic 函数可以被连续多次调用，他们之间通过 link 可以组成链表</li><li>recovered 表示当前 <code>runtime._panic</code> 是否被 recover 恢复</li><li>aborted 表示当前 panic 是否被强行终止</li><li>结构体中的 3 个字段 pc、sp 和 goexit 都是为了修复 <code>runtime.Goexit</code> 带来的问题。<code>runtime.Goexit</code> 能够只结束该函数的 Goroutine 而不影响其他 Goroutine，但是该函数会被 defer 中的 panic 和 recover 取消，引入这 3 个字段就是为了保证该函数一定会生效</li></ul><h4 id="程序崩溃和恢复的过程" tabindex="-1"><a class="header-anchor" href="#程序崩溃和恢复的过程"><span>程序崩溃和恢复的过程</span></a></h4><ul><li>编译器会负责转换关键字： <ul><li>将 panic 和 recover 分别转换成 <code>runtime.gopanic</code> 和 <code>runtime.gorecover</code></li><li>将 defer 转换成 <code>runtime.deferproc</code> 函数</li><li>在调用 defer 的函数末尾调用 <code>runtime.deferreturn</code> 函数</li></ul></li><li>在运行过程中遇到 <code>runtime.gopanic</code> 方法时，会从 Goroutine 的链表依次取出 <code>runtime._defer</code> 结构体并执行</li><li>如果调用延迟执行函数时遇到 <code>runtime.gorecover</code>，就会将 <code>runtime._panic.recovered</code> 标记成 true 并返回 panic 的参数 <ul><li>在这次调用结束之后，<code>runtime.gopanic</code> 会从 <code>runtime._defer</code> 结构体中取出程序计数器 pc 和栈指针 sp，并调用 <code>runtime.recovery</code> 函数执行恢复程序</li><li><code>runtime.recovery</code>会根据传入的 pc 和 sp 跳转回 <code>runtime.deferproc</code></li><li>编译器自动生成的代码会发现 <code>runtime.deferproc</code> 的返回值不为 0 ，这时会跳回 <code>runtime.deferreturn</code> 并恢复到正常的执行流程</li></ul></li><li>如果没有遇到 <code>runtime.gorecover</code>，就会依次遍历所有 <code>runtime._defer</code>，在最后调用 <code>runtime.fatalpanic</code> 中止程序、打印 panic 的参数并返回错误码</li></ul>`,21)]))}const d=s(l,[["render",p],["__file","1.panic和recover.html.vue"]]),k=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/1.panic%E5%92%8Crecover.html","title":"1.panic和recover的使用","lang":"zh-CN","frontmatter":{"title":"1.panic和recover的使用","date":"2023-01-19T11:11:41.000Z","tags":["go"],"description":"panic 和 recover panic 能够改变程序的控制流，调用 panic 后会立刻停止执行当前函数的剩余代码，并在当前 Goroutine 中递归执行调用方的 defer recover 可以中止 panic 造成的程序崩溃。该函数只能在 defer 中发挥作用，在其他作用域中调用不会发挥作用 一、现象 panic 只会触发当前 Gorout...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/1.panic%E5%92%8Crecover.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"1.panic和recover的使用"}],["meta",{"property":"og:description","content":"panic 和 recover panic 能够改变程序的控制流，调用 panic 后会立刻停止执行当前函数的剩余代码，并在当前 Goroutine 中递归执行调用方的 defer recover 可以中止 panic 造成的程序崩溃。该函数只能在 defer 中发挥作用，在其他作用域中调用不会发挥作用 一、现象 panic 只会触发当前 Gorout..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.panic和recover的使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"panic 和 recover","slug":"panic-和-recover","link":"#panic-和-recover","children":[{"level":3,"title":"一、现象","slug":"一、现象","link":"#一、现象","children":[]},{"level":3,"title":"二、底层实现","slug":"二、底层实现","link":"#二、底层实现","children":[]}]}],"git":{},"readingTime":{"minutes":2.83,"words":848},"filePathRelative":"编程语言/go语言/基础语法/1.panic和recover.md","localizedDate":"2023年1月19日","excerpt":"<h2>panic 和 recover</h2>\\n<ul>\\n<li>panic 能够改变程序的控制流，调用 panic 后会立刻停止执行当前函数的剩余代码，并在当前 Goroutine 中递归执行调用方的 defer</li>\\n<li>recover 可以中止 panic 造成的程序崩溃。该函数只能在 defer 中发挥作用，在其他作用域中调用不会发挥作用</li>\\n</ul>\\n<h3>一、现象</h3>\\n<ul>\\n<li>panic 只会触发当前 Goroutine 的 defer</li>\\n<li>recover 只有在 defer 中调用才会生效</li>\\n<li>panic 允许在 defer 中嵌套多次调用</li>\\n</ul>","autoDesc":true}');export{d as comp,k as data};
