import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as i}from"./app-D1zlwylF.js";const l={};function p(t,s){return i(),e("div",null,s[0]||(s[0]=[a(`<h2 id="评估系统的网络性能" tabindex="-1"><a class="header-anchor" href="#评估系统的网络性能"><span>评估系统的网络性能</span></a></h2><p>对于各协议层的性能进行测试</p><h3 id="一、转发性能" tabindex="-1"><a class="header-anchor" href="#一、转发性能"><span>一、转发性能</span></a></h3><p>网络接口层和网络层，他们主要负责网络包的封装、寻址、路由以及发送和接收。在这两个网络协议层中，每秒可处理的网络包数 PPS，就是最重要的性能指标。特别是 64B 小包的处理能力。</p><p>测试网络包的处理能力，使用 pktgen 。详情：<a href="https://time.geekbang.org/column/article/81497" target="_blank" rel="noopener noreferrer">https://time.geekbang.org/column/article/81497</a></p><h3 id="二、tcp-udp-性能" tabindex="-1"><a class="header-anchor" href="#二、tcp-udp-性能"><span>二、TCP/UDP 性能</span></a></h3><p>使用 iperf 。详情：<a href="https://time.geekbang.org/column/article/81497" target="_blank" rel="noopener noreferrer">https://time.geekbang.org/column/article/81497</a></p><h3 id="三、http性能" tabindex="-1"><a class="header-anchor" href="#三、http性能"><span>三、HTTP性能</span></a></h3><p>ab 是 Apache 自带的 HTTP 压测工具，主要测试 HTTP 服务的每秒请求数、请求延迟、吞吐量以及请求延迟的分布情况等</p><p>安装 ab 工具：<code>yum install -y httpd-tools</code></p><p>比如在一台机器上部署一个 nginx 服务，然后在另一台机器上用 ab 来测试他的性能</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>[root@VM_14_255_centos ~]# ab -c 1000 -n 10000 http://9.134.239.95:1100/</span></span>
<span class="line"><span>Benchmarking 9.134.239.95 (be patient)</span></span>
<span class="line"><span>Completed 1000 requests</span></span>
<span class="line"><span>Completed 2000 requests</span></span>
<span class="line"><span>Completed 3000 requests</span></span>
<span class="line"><span>Completed 4000 requests</span></span>
<span class="line"><span>Completed 5000 requests</span></span>
<span class="line"><span>Completed 6000 requests</span></span>
<span class="line"><span>Completed 7000 requests</span></span>
<span class="line"><span>Completed 8000 requests</span></span>
<span class="line"><span>Completed 9000 requests</span></span>
<span class="line"><span>Completed 10000 requests</span></span>
<span class="line"><span>Finished 10000 requests</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Server Software:        nginx/1.20.2</span></span>
<span class="line"><span>Server Hostname:        9.134.239.95</span></span>
<span class="line"><span>Server Port:            1100</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Document Path:          /</span></span>
<span class="line"><span>Document Length:        612 bytes</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Concurrency Level:      1000</span></span>
<span class="line"><span>Time taken for tests:   0.868 seconds</span></span>
<span class="line"><span>Complete requests:      10000</span></span>
<span class="line"><span>Failed requests:        0</span></span>
<span class="line"><span>Write errors:           0</span></span>
<span class="line"><span>Total transferred:      8450000 bytes</span></span>
<span class="line"><span>HTML transferred:       6120000 bytes</span></span>
<span class="line"><span>Requests per second:    11515.17 [#/sec] (mean)</span></span>
<span class="line"><span>Time per request:       86.842 [ms] (mean)</span></span>
<span class="line"><span>Time per request:       0.087 [ms] (mean, across all concurrent requests)</span></span>
<span class="line"><span>Transfer rate:          9502.26 [Kbytes/sec] received</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Connection Times (ms)</span></span>
<span class="line"><span>              min  mean[+/-sd] median   max</span></span>
<span class="line"><span>Connect:        0    3   6.5      1      26</span></span>
<span class="line"><span>Processing:     4    9  28.7      6     817</span></span>
<span class="line"><span>Waiting:        1    9  28.7      6     817</span></span>
<span class="line"><span>Total:          5   12  29.9      7     820</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Percentage of the requests served within a certain time (ms)</span></span>
<span class="line"><span>  50%      7</span></span>
<span class="line"><span>  66%      7</span></span>
<span class="line"><span>  75%      7</span></span>
<span class="line"><span>  80%      7</span></span>
<span class="line"><span>  90%      8</span></span>
<span class="line"><span>  95%     37</span></span>
<span class="line"><span>  98%     43</span></span>
<span class="line"><span>  99%     56</span></span>
<span class="line"><span> 100%    820 (longest request)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ab 的测试结果分为三个部分，分别是请求汇总、连接时间汇总还有请求延迟汇总。在请求汇总部分，可以看到：</p><ul><li>Requests per second 为 1074</li><li>每个请求的延迟（Time per request）分为两行，第一行的 927 ms 表示平均延迟，包括了线程运行的调度时间和网络请求响应时间，而下一行的 0.927ms ，则表示实际请求的响应时间</li><li>Transfer rate 表示吞吐量（BPS）为 890 KB/s</li></ul><p>连接时间汇总部分，则是分别展示了建立连接、请求、等待以及汇总等的各类时间，包括最小、最大、平均以及中值处理时间</p><p>最后的请求延迟汇总部分，则给出了不同时间段内处理请求的百分比，比如， 90% 的请求，都可以在 274ms 内完成</p><h3 id="四、应用负载性能" tabindex="-1"><a class="header-anchor" href="#四、应用负载性能"><span>四、应用负载性能</span></a></h3><p>使用 ab 工具，可以得到某个页面的访问性能，但这个结果跟用户的实际请求，很可能不一致。因为用户请求往往会附带着各种各种的负载（payload），而这些负载会影响 Web 应用程序内部的处理逻辑，从而影响最终性能。为了得到应用程序的实际性能，就要求性能工具本身可以模拟用户的请求负载。我们还可以用 wrk、TCPCopy、Jmeter 或者 LoadRunner 等实现这个目标。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>[root@VM_14_255_centos ~]# wrk -c 1000 -t 2 http://9.134.239.95:1100/</span></span>
<span class="line"><span>Running 10s test @ http://9.134.239.95:1100/</span></span>
<span class="line"><span>  2 threads and 1000 connections</span></span>
<span class="line"><span>  Thread Stats   Avg      Stdev     Max   +/- Stdev</span></span>
<span class="line"><span>    Latency    59.99ms  205.14ms   2.00s    94.62%</span></span>
<span class="line"><span>    Req/Sec    23.98k     4.16k   35.94k    77.00%</span></span>
<span class="line"><span>  477107 requests in 10.01s, 386.75MB read</span></span>
<span class="line"><span>  Socket errors: connect 0, read 399, write 0, timeout 280</span></span>
<span class="line"><span>Requests/sec:  47684.24</span></span>
<span class="line"><span>Transfer/sec:     38.65MB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上使用 wrk，使用 2 个线程、并发 1000 连接，重新测试了 Nginx 性能，每秒请求数为 47684，吞吐量为 38MB，平均延迟为 59ms</p>`,20)]))}const d=n(l,[["render",p],["__file","3.评估系统的网络性能.html.vue"]]),o=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/3.%E8%AF%84%E4%BC%B0%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD.html","title":"3.评估系统的网络性能","lang":"zh-CN","frontmatter":{"title":"3.评估系统的网络性能","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"评估系统的网络性能 对于各协议层的性能进行测试 一、转发性能 网络接口层和网络层，他们主要负责网络包的封装、寻址、路由以及发送和接收。在这两个网络协议层中，每秒可处理的网络包数 PPS，就是最重要的性能指标。特别是 64B 小包的处理能力。 测试网络包的处理能力，使用 pktgen 。详情：https://time.geekbang.org/colum...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/3.%E8%AF%84%E4%BC%B0%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"3.评估系统的网络性能"}],["meta",{"property":"og:description","content":"评估系统的网络性能 对于各协议层的性能进行测试 一、转发性能 网络接口层和网络层，他们主要负责网络包的封装、寻址、路由以及发送和接收。在这两个网络协议层中，每秒可处理的网络包数 PPS，就是最重要的性能指标。特别是 64B 小包的处理能力。 测试网络包的处理能力，使用 pktgen 。详情：https://time.geekbang.org/colum..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.评估系统的网络性能\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"评估系统的网络性能","slug":"评估系统的网络性能","link":"#评估系统的网络性能","children":[{"level":3,"title":"一、转发性能","slug":"一、转发性能","link":"#一、转发性能","children":[]},{"level":3,"title":"二、TCP/UDP 性能","slug":"二、tcp-udp-性能","link":"#二、tcp-udp-性能","children":[]},{"level":3,"title":"三、HTTP性能","slug":"三、http性能","link":"#三、http性能","children":[]},{"level":3,"title":"四、应用负载性能","slug":"四、应用负载性能","link":"#四、应用负载性能","children":[]}]}],"git":{},"readingTime":{"minutes":2.93,"words":878},"filePathRelative":"计算机网络/工具运维/3.评估系统的网络性能.md","localizedDate":"2023年1月19日","excerpt":"<h2>评估系统的网络性能</h2>\\n<p>对于各协议层的性能进行测试</p>\\n<h3>一、转发性能</h3>\\n<p>网络接口层和网络层，他们主要负责网络包的封装、寻址、路由以及发送和接收。在这两个网络协议层中，每秒可处理的网络包数 PPS，就是最重要的性能指标。特别是 64B 小包的处理能力。</p>\\n<p>测试网络包的处理能力，使用 pktgen 。详情：<a href=\\"https://time.geekbang.org/column/article/81497\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://time.geekbang.org/column/article/81497</a></p>","autoDesc":true}');export{d as comp,o as data};
