import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a,o}from"./app-D1zlwylF.js";const d={};function l(n,e){return o(),i("div",null,e[0]||(e[0]=[a('<h2 id="exit-和-exit-函数详解" tabindex="-1"><a class="header-anchor" href="#exit-和-exit-函数详解"><span>exit() 和 _exit()函数详解</span></a></h2><p><code>exit()</code> 就是让程序退出，传入的参数是程序退出时的状态码，0 表示正常退出，其他表示非正常退出。标准中有：<code>EXIT_SUCCESS</code> 和 <code>EXIT_FAILURE</code> 两个宏。</p><p>作为系统调用，<code>_exit</code> 和 <code>exit</code> 是基本一样的。在内核中，有如下的定义</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#define __NR__exit  __NR_exit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>以下再说几点区别：</p><ul><li><code>exit()</code> 函数定义在 <code>stdlib.h</code> 中，而 <code>_exit()</code> 定义在 <code>unistd.h</code> 中</li><li><code>_exit()</code> 函数的作用最为简单：直接使进程停止运行，清除其使用的内存空间，并销毁其在内核中的各种数据结构；<code>exit()</code> 函数则在这些基础上做了一些包装，在执行退出前加了若干道工序。</li><li>两者最大的区别在于 <code>exit()</code>函数在执行前要先检查文件的打开情况，把文件缓冲区中的内容写回文件，就是“清理 IO 缓冲”</li></ul><h4 id="_1-exit-在结束调用它的进程之前-要进行如下步骤" tabindex="-1"><a class="header-anchor" href="#_1-exit-在结束调用它的进程之前-要进行如下步骤"><span>1. exit() 在结束调用它的进程之前，要进行如下步骤</span></a></h4><ol><li>调用 <code>atexit()</code> 注册的函数，按 atexit 注册时相反的顺序调用所有由它注册的函数，这使得我们可以指定在程序终止时执行自己的清理动作。例如，保存程序状态信息于某个文件，解开对共享数据库的锁等</li><li><code>cleanup()</code> 关闭所有打开的流，这将导致写所有被缓冲的输出到文件；删除用 tmpFile 函数建立的所有临时文件</li><li>最后调用 <code>_exit()</code> 函数终止进程</li></ol><h4 id="_2-exit-做如下事情" tabindex="-1"><a class="header-anchor" href="#_2-exit-做如下事情"><span>2. _exit() 做如下事情</span></a></h4><ol><li>关闭属于该进程的任何打开的文件描述符</li><li>让该进程的所有子进程都由 init（1号进程）继承</li><li>向该进程的父进程发送 SIGCHLD 信号</li></ol><h4 id="_3-注意" tabindex="-1"><a class="header-anchor" href="#_3-注意"><span>3. 注意</span></a></h4><ul><li>对于有缓冲的 IO，比如 <code>printf、fopen、fread、fwrite</code> 等等，如果调用 <code>_exit()</code>函数直接将进程关闭，可能会使缓冲区中的数据丢失。如果想要保证数据的完整性，就一定要使用 <code>exit()</code> 函数</li><li>相同点，不管进程是如何终止的，内核都会关闭进程打开的所有文件描述符，释放进程使用的内存。</li></ul><p>在一个 fork 的子进程分支中，使用 _exit 函数而不是 exit 函数？</p><p>如果在 fork 创建的子进程分支中使用 exit 函数，会导致标准输入输出的缓冲区被清空两次，而临时文件被出乎意料的删除（临时文件由 tmpfile 函数创建在系统临时目录下，文件名由系统随机生成）。在 c++ 程序中清空会更糟，因为静态目标的析构函数可以被错误的执行。</p><p>还有一些特殊情况，比如守护进程，他们的父进程需要调用 _exit 而不是子进程。对于大多数情况，exit 在每一次进入 main 函数后只调用一次即可。</p><p>关于实现：<a href="https://blog.csdn.net/gatieme/article/details/51638706" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/gatieme/article/details/51638706</a></p>',16)]))}const s=t(d,[["render",l],["__file","5.exit函数.html.vue"]]),p=JSON.parse('{"path":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/5.exit%E5%87%BD%E6%95%B0.html","title":"5.exit函数","lang":"zh-CN","frontmatter":{"title":"5.exit函数","description":"exit() 和 _exit()函数详解 exit() 就是让程序退出，传入的参数是程序退出时的状态码，0 表示正常退出，其他表示非正常退出。标准中有：EXIT_SUCCESS 和 EXIT_FAILURE 两个宏。 作为系统调用，_exit 和 exit 是基本一样的。在内核中，有如下的定义 以下再说几点区别： exit() 函数定义在 stdlib...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/5.exit%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"5.exit函数"}],["meta",{"property":"og:description","content":"exit() 和 _exit()函数详解 exit() 就是让程序退出，传入的参数是程序退出时的状态码，0 表示正常退出，其他表示非正常退出。标准中有：EXIT_SUCCESS 和 EXIT_FAILURE 两个宏。 作为系统调用，_exit 和 exit 是基本一样的。在内核中，有如下的定义 以下再说几点区别： exit() 函数定义在 stdlib..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5.exit函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"exit() 和 _exit()函数详解","slug":"exit-和-exit-函数详解","link":"#exit-和-exit-函数详解","children":[]}],"git":{},"readingTime":{"minutes":2.47,"words":741},"filePathRelative":"操作系统/系统编程/5.exit函数.md","excerpt":"<h2>exit() 和 _exit()函数详解</h2>\\n<p><code>exit()</code> 就是让程序退出，传入的参数是程序退出时的状态码，0 表示正常退出，其他表示非正常退出。标准中有：<code>EXIT_SUCCESS</code> 和 <code>EXIT_FAILURE</code> 两个宏。</p>\\n<p>作为系统调用，<code>_exit</code> 和 <code>exit</code> 是基本一样的。在内核中，有如下的定义</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>#define __NR__exit  __NR_exit</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as comp,p as data};
