import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as i,o as e}from"./app-D1zlwylF.js";const l="/assets/%E5%AD%97%E7%AC%A6%E5%8F%8A%E5%85%B6%E5%B1%9E%E6%80%A7-BDe5vuhm.png",p={};function t(d,s){return e(),a("div",null,s[0]||(s[0]=[i(`<h2 id="操作显示器" tabindex="-1"><a class="header-anchor" href="#操作显示器"><span>操作显示器</span></a></h2><h3 id="一、io-接口" tabindex="-1"><a class="header-anchor" href="#一、io-接口"><span>一、IO 接口</span></a></h3><p>CPU 通过 &quot;IO接口&quot; 来与外设通信。“IO接口” 是连接 CPU 与外部设备的逻辑控制部件，分为硬件和软件两部分，</p><ul><li>硬件部分所做的是一些实质具体的工作，其功能是协调 CPU 和外设之间的种种不匹配，如双方由于速度不匹配，那 IO 接口就实现数据缓冲以减少等待时间；如数据不匹配，IO 接口就在这两种格式间互相转换。</li><li>软件部分就是用来控制接口电路工作的驱动程序以及完成内部数据传输所需要的程序。</li></ul><p>IO 接口芯片分为“可编程接口芯片”和“不可编程接口芯片”。一般我们都使用 “可编程接口”。通常使用端口读写指令 “in/out” 来实现。</p><p>同一时刻，CPU 只能和一个 IO 接口通信。面对多个 IO 接口，通过输入输出控制中心（I/O control hub，ICH），也就是南桥芯片，他的责任是除了仲裁 IO 接口的竞争，还要链接各种内部总线。</p><p>南桥用于连接 pci、pci-express、AGP 等低速设备，北桥用于连接高速设备，如内存。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># in 指令用于从端口中读取数据</span></span>
<span class="line"><span>in al, dx;</span></span>
<span class="line"><span>in ax, dx;</span></span>
<span class="line"><span>其中 al 和 ax 用来存储从端口获取的数据，dx 是指端口号。</span></span>
<span class="line"><span>只要用 in 指令，源操作数（端口号）必须是 dx。而目的操作数是用 al，还是 ax，取决于 dx 端口指代的寄存器为 8 位还是 16 位宽度</span></span>
<span class="line"><span></span></span>
<span class="line"><span># out 指令用于往端口中写数据</span></span>
<span class="line"><span>out dx, al;</span></span>
<span class="line"><span>out dx, ax;</span></span>
<span class="line"><span>out 立即数, al;</span></span>
<span class="line"><span>out 立即数, ax;</span></span>
<span class="line"><span>out 指令的目的操作数是端口号</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、操作显卡" tabindex="-1"><a class="header-anchor" href="#二、操作显卡"><span>二、操作显卡</span></a></h3><p>现在的显卡都是串口的，串口传输一次只发一位。传输速度不仅取决于并行的数据量，还要取决于传输频率。串口显卡一次虽然只传输一位，但传输频率高。</p><p>地址总线的范围不只是主板上插的内存条的容量，内存条只是地址总线所能达到的范围中的一小部分。指令中所需的任何一个地址，都是地址总线去寻址的。地址只是个数字，地址总线把此数字指向那个存储介质，此地址就落到了那个介质上的某个存储单元中。对于显卡的显存来说，从起始地址 <code>0xB8000 - 0xBFFFF</code> 这片 32KB 大小的内存区域是用于文本显示。我们往这块内存写数据，会直接写到显存中，显存有了数据，自然显卡就将其搬到显示器屏幕上了。</p><p>每个字符在屏幕上都是有两个字节来表示，而且是连续的两个字节。显存范围有 32KB，一屏可以显示 2000 个字符，显示器上的每个字符占 2 字节大小，所以每屏字符实际占用 4000 字节。这样 32KB 的显存可以容纳大约 8 屏的数据。所以我们可以有多个屏幕进行切换。</p><ul><li>屏幕上每个字符的低字节是字符的 ASCII 码，高字节是字符的属性元信息。</li><li>高字节中，低 4 位是字符前景色，高 4 位是字符的背景色。其中第 4 位用来控制亮度，如果置 1 表示高亮。第 7 位用来控制字符是否闪烁（不是背景闪烁）</li></ul><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如下是文本模式中的字符颜色：</p><table><thead><tr><th>R</th><th>G</th><th>B</th><th>颜色( I = 0 )</th><th>颜色( I = 1)</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>黑</td><td>灰</td></tr><tr><td>0</td><td>0</td><td>1</td><td>蓝</td><td>浅蓝</td></tr><tr><td>0</td><td>1</td><td>0</td><td>绿</td><td>浅绿</td></tr><tr><td>0</td><td>1</td><td>1</td><td>青</td><td>浅青</td></tr><tr><td>1</td><td>0</td><td>0</td><td>红</td><td>浅红</td></tr><tr><td>1</td><td>0</td><td>1</td><td>紫</td><td>浅紫</td></tr><tr><td>1</td><td>1</td><td>0</td><td>棕</td><td>黄</td></tr><tr><td>1</td><td>1</td><td>1</td><td>白</td><td>亮白</td></tr></tbody></table><p>如上，只要亮度位 I 置 1 ，颜色就是变亮变浅。</p><h3 id="三、写代码操作显卡" tabindex="-1"><a class="header-anchor" href="#三、写代码操作显卡"><span>三、写代码操作显卡</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>SECTION MBR vstart=0x7c00</span></span>
<span class="line"><span>mov ax, cs</span></span>
<span class="line"><span>mov ds, ax</span></span>
<span class="line"><span>mov es, ax</span></span>
<span class="line"><span>mov ss, ax</span></span>
<span class="line"><span>mov fs, ax</span></span>
<span class="line"><span>mov sp, 0x7c00</span></span>
<span class="line"><span>mov ax, 0xb800</span></span>
<span class="line"><span>mov gs, ax </span></span>
<span class="line"><span></span></span>
<span class="line"><span>; 清屏</span></span>
<span class="line"><span>mov ax, 0x600</span></span>
<span class="line"><span>mov bx, 0x700</span></span>
<span class="line"><span>mov cx, 0</span></span>
<span class="line"><span>mov dx, 0x184f</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int 0x10</span></span>
<span class="line"><span></span></span>
<span class="line"><span>; 操作显存</span></span>
<span class="line"><span>mov byte [gs:0x00], &#39;I&#39;</span></span>
<span class="line"><span>mov byte [gs:0x01], 0x9F</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mov byte [gs:0x02], &#39; &#39;</span></span>
<span class="line"><span>mov byte [gs:0x03], 0x9F</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mov byte [gs:0x04], &#39;M&#39;</span></span>
<span class="line"><span>mov byte [gs:0x05], 0x9F</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mov byte [gs:0x06], &#39;B&#39;</span></span>
<span class="line"><span>mov byte [gs:0x07], 0x9F</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mov byte [gs:0x08], &#39;R&#39;</span></span>
<span class="line"><span>mov byte [gs:0x09], 0x9F</span></span>
<span class="line"><span></span></span>
<span class="line"><span>; 使程序停在这里</span></span>
<span class="line"><span>jmp $</span></span>
<span class="line"><span></span></span>
<span class="line"><span>times 510-($-$$) db 0</span></span>
<span class="line"><span>db 0x55, 0xaa</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上代码，显存段基址放在那个寄存器中是没有关系的，可以不用 ds 做段基址寄存器。</p>`,20)]))}const v=n(p,[["render",t],["__file","1.操作显示器.html.vue"]]),o=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/8.%E5%B1%8F%E5%B9%95%E5%92%8C%E6%98%BE%E5%8D%A1/1.%E6%93%8D%E4%BD%9C%E6%98%BE%E7%A4%BA%E5%99%A8.html","title":"3.操作显示器","lang":"zh-CN","frontmatter":{"title":"3.操作显示器","description":"操作显示器 一、IO 接口 CPU 通过 \\"IO接口\\" 来与外设通信。“IO接口” 是连接 CPU 与外部设备的逻辑控制部件，分为硬件和软件两部分， 硬件部分所做的是一些实质具体的工作，其功能是协调 CPU 和外设之间的种种不匹配，如双方由于速度不匹配，那 IO 接口就实现数据缓冲以减少等待时间；如数据不匹配，IO 接口就在这两种格式间互相转换。 软件...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/8.%E5%B1%8F%E5%B9%95%E5%92%8C%E6%98%BE%E5%8D%A1/1.%E6%93%8D%E4%BD%9C%E6%98%BE%E7%A4%BA%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"3.操作显示器"}],["meta",{"property":"og:description","content":"操作显示器 一、IO 接口 CPU 通过 \\"IO接口\\" 来与外设通信。“IO接口” 是连接 CPU 与外部设备的逻辑控制部件，分为硬件和软件两部分， 硬件部分所做的是一些实质具体的工作，其功能是协调 CPU 和外设之间的种种不匹配，如双方由于速度不匹配，那 IO 接口就实现数据缓冲以减少等待时间；如数据不匹配，IO 接口就在这两种格式间互相转换。 软件..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.操作显示器\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"操作显示器","slug":"操作显示器","link":"#操作显示器","children":[{"level":3,"title":"一、IO 接口","slug":"一、io-接口","link":"#一、io-接口","children":[]},{"level":3,"title":"二、操作显卡","slug":"二、操作显卡","link":"#二、操作显卡","children":[]},{"level":3,"title":"三、写代码操作显卡","slug":"三、写代码操作显卡","link":"#三、写代码操作显卡","children":[]}]}],"git":{},"readingTime":{"minutes":3.83,"words":1150},"filePathRelative":"技术专题/手写操作系统/8.屏幕和显卡/1.操作显示器.md","excerpt":"<h2>操作显示器</h2>\\n<h3>一、IO 接口</h3>\\n<p>CPU 通过 \\"IO接口\\" 来与外设通信。“IO接口” 是连接 CPU 与外部设备的逻辑控制部件，分为硬件和软件两部分，</p>\\n<ul>\\n<li>硬件部分所做的是一些实质具体的工作，其功能是协调 CPU 和外设之间的种种不匹配，如双方由于速度不匹配，那 IO 接口就实现数据缓冲以减少等待时间；如数据不匹配，IO 接口就在这两种格式间互相转换。</li>\\n<li>软件部分就是用来控制接口电路工作的驱动程序以及完成内部数据传输所需要的程序。</li>\\n</ul>\\n<p>IO 接口芯片分为“可编程接口芯片”和“不可编程接口芯片”。一般我们都使用 “可编程接口”。通常使用端口读写指令 “in/out” 来实现。</p>","autoDesc":true}');export{v as comp,o as data};
