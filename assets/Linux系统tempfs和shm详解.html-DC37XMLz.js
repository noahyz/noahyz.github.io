import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as i,o as a}from"./app-D1zlwylF.js";const n={};function m(d,e){return a(),t("div",null,e[0]||(e[0]=[i(`<h1 id="linux系统tempfs和-dev-shm解析" tabindex="-1"><a class="header-anchor" href="#linux系统tempfs和-dev-shm解析"><span>Linux系统tempfs和/dev/shm解析</span></a></h1><h2 id="一、tempfs文件系统" tabindex="-1"><a class="header-anchor" href="#一、tempfs文件系统"><span>一、tempfs文件系统</span></a></h2><p>文件系统有两种变体，称为<em>shm</em>和 <em>tmpfs</em>。它们都共享核心功能，并且主要用途不同。内核使用<code>shm</code>为匿名页面创建文件支持，并为<code>shmge()</code>创建的区域提供支持。该文件系统由<code>kern_mount（）</code>挂载这样它就可以在内部安装并且对用户不可见。<code>tmpfs</code>是一个临时文件系统，可以选择将其安装在/tmp/上，以具有基于RAM的快速临时文件系统。<code>tmpfs</code>的第二个用途 是将其安装在 /dev/shm/ 上。tmpfs文件系统中<code>mmap()</code>文件的进程将能够在它们之间共享信息，以作为System V IPC机制的替代方法。</p><p>tempfs是驻留在内存或交换分区中的临时文件系统。将目录挂载为tempfs是加快对其文件访问速度的有效方法。传统的虚拟磁盘是一个块设备，但tempfs是一个文件系统，而不是块设备，只需要安装它，就可以使用了。</p><p>tempfs的用途</p><ul><li>总会有一个内核内部挂载，也许我们看不到，可能用于共享内存等</li><li>这个文件系统的大小可以动态调整</li><li>tempfs因为驻留在内存或者交换分区中，因此它的读写比磁盘要快很多</li><li>有一个缺点：tempfs数据在系统重启后不会保留，因此应该注意根据不同场景做一些恰当的操作</li></ul><h2 id="二、-dev-shm目录" tabindex="-1"><a class="header-anchor" href="#二、-dev-shm目录"><span>二、/dev/shm目录</span></a></h2><p>/dev/shm也是属于tempfs文件系统，存在于内存中。默认情况下，这个目录占用大小是内存大小的一半。但是并不是一直占有内存的一半，如果/dev/shm下没有任何文件，它占有的内存实际就是0字节；如果他最大为2G，现在只存在100M的文件，那剩余的1900M仍然可以被其他程序所使用。同时，他占用的100M内存是不会被系统回收的。</p><p>使用 df -h 命令可以看到/dev/shm目录。使用 df -k /dev/shm 可以看到此目录的大小</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>文件系统         1K-块  已用    可用 已用% 挂载点</span></span>
<span class="line"><span>tmpfs          8046096     0 8046096    0% /dev/shm</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-修改-dev-shm目录大小" tabindex="-1"><a class="header-anchor" href="#_1-修改-dev-shm目录大小"><span>1.修改/dev/shm目录大小</span></a></h4><p>默认的最大一般内存的大小可能在某些场景下并不适用，并且默认的innode数量很低一般需要调高一点，可以使用mount命令来管理</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>mount -o size=1500M -o nr_inodes=1000000 -o noatime,nodiratime -o remount /dev/shm</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将他的大小调到1.5G，并且将inode数量调到1000000，这意味着大致可以存最多一百万个大小为大约为1K的小文件。</p><p>如果需要永久修改/dev/shm的值，则需要修改/etc/fstab</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>tmpfs /dev/shm tmpfs defaults,size=1.5G 0 0  #/etc/fstab中增加该行</span></span>
<span class="line"><span># 保存并关闭文件，为了使更改立即生效，可以重新安装/dev/shm</span></span>
<span class="line"><span>mount -o remount /dev/shm</span></span>
<span class="line"><span># 验证是否生效</span></span>
<span class="line"><span>df -h</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16)]))}const l=s(n,[["render",m],["__file","Linux系统tempfs和shm详解.html.vue"]]),o=JSON.parse('{"path":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/Linux%E7%B3%BB%E7%BB%9Ftempfs%E5%92%8Cshm%E8%AF%A6%E8%A7%A3.html","title":"Linux系统tempfs和/dev/shm解析","lang":"zh-CN","frontmatter":{"title":"Linux系统tempfs和/dev/shm解析","date":"2020-12-20T13:19:17.000Z","tags":["tempfs /dev/shm"],"description":"Linux系统tempfs和/dev/shm解析 一、tempfs文件系统 文件系统有两种变体，称为shm和 tmpfs。它们都共享核心功能，并且主要用途不同。内核使用shm为匿名页面创建文件支持，并为shmge()创建的区域提供支持。该文件系统由kern_mount（）挂载这样它就可以在内部安装并且对用户不可见。tmpfs是一个临时文件系统，可以选择...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/Linux%E7%B3%BB%E7%BB%9Ftempfs%E5%92%8Cshm%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"Linux系统tempfs和/dev/shm解析"}],["meta",{"property":"og:description","content":"Linux系统tempfs和/dev/shm解析 一、tempfs文件系统 文件系统有两种变体，称为shm和 tmpfs。它们都共享核心功能，并且主要用途不同。内核使用shm为匿名页面创建文件支持，并为shmge()创建的区域提供支持。该文件系统由kern_mount（）挂载这样它就可以在内部安装并且对用户不可见。tmpfs是一个临时文件系统，可以选择..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"tempfs /dev/shm"}],["meta",{"property":"article:published_time","content":"2020-12-20T13:19:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux系统tempfs和/dev/shm解析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-12-20T13:19:17.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"一、tempfs文件系统","slug":"一、tempfs文件系统","link":"#一、tempfs文件系统","children":[]},{"level":2,"title":"二、/dev/shm目录","slug":"二、-dev-shm目录","link":"#二、-dev-shm目录","children":[]}],"git":{},"readingTime":{"minutes":2.54,"words":763},"filePathRelative":"操作系统/文件管理/内核原理/Linux系统tempfs和shm详解.md","localizedDate":"2020年12月20日","excerpt":"\\n<h2>一、tempfs文件系统</h2>\\n<p>文件系统有两种变体，称为<em>shm</em>和 <em>tmpfs</em>。它们都共享核心功能，并且主要用途不同。内核使用<code>shm</code>为匿名页面创建文件支持，并为<code>shmge()</code>创建的区域提供支持。该文件系统由<code>kern_mount（）</code>挂载这样它就可以在内部安装并且对用户不可见。<code>tmpfs</code>是一个临时文件系统，可以选择将其安装在/tmp/上，以具有基于RAM的快速临时文件系统。<code>tmpfs</code>的第二个用途 是将其安装在 /dev/shm/ 上。tmpfs文件系统中<code>mmap()</code>文件的进程将能够在它们之间共享信息，以作为System V IPC机制的替代方法。</p>","autoDesc":true}');export{l as comp,o as data};
