import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as r,o as i}from"./app-D1zlwylF.js";const n="/assets/%E8%AF%81%E4%B9%A6%E9%93%BE-DMEF6IQ6.jpg",o="/assets/%E4%BF%A1%E4%BB%BB%E9%93%BE-DwIVe0Nq.jpg",l={};function h(p,t){return i(),a("div",null,t[0]||(t[0]=[r('<h2 id="浏览器如何验证-https-证书的合法性" tabindex="-1"><a class="header-anchor" href="#浏览器如何验证-https-证书的合法性"><span>浏览器如何验证 HTTPS 证书的合法性</span></a></h2><p>浏览器拿到服务端的数字证书后，如何校验该数字证书是否真实有效呢？</p><h3 id="一、数字证书和-ca-机构" tabindex="-1"><a class="header-anchor" href="#一、数字证书和-ca-机构"><span>一、数字证书和 CA 机构</span></a></h3><p>一个数字证书包含：</p><ul><li>公钥；</li><li>持有者信息；</li><li>证书认证机构（CA）的信息；</li><li>CA 对这份文件的数字签名及使用的算法；</li><li>证书有效期；</li><li>还有一些其他额外信息；</li></ul><p>那数字证书的作用，是用来认证公钥持有者的身份，以防止第三方进行冒充。说简单些，证书就是用来告诉客户端，该<a href="https://www.zhihu.com/search?q=%E6%9C%8D%E5%8A%A1%E7%AB%AF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1914075935%7D" target="_blank" rel="noopener noreferrer">服务端</a>是否是合法的，因为只有证书合法，才代表服务端身份是可信的。</p><p>我们用证书来认证公钥持有者的身份（服务端的身份），那证书又是怎么来的？又该怎么认证证书呢？</p><p>为了让服务端的公钥被大家信任，服务端的证书都是由 CA （<em>Certificate Authority</em>，证书认证机构）签名的，CA 机构具有极高的可信度，所以由它来给各个公钥签名，信任的一方签发的证书，那必然证书也是被信任的。之所以要签名，是因为签名的作用可以避免中间人在获取证书时对证书内容的篡改。</p><h3 id="二、数字证书签发和验证流程" tabindex="-1"><a class="header-anchor" href="#二、数字证书签发和验证流程"><span>二、数字证书签发和验证流程</span></a></h3><p>CA 签发证书的过程：</p><ul><li>首先 CA 会把持有者的公钥、用途、颁发者、有效时间等信息打成一个包，然后对这些信息进行 Hash 计算，得到一个 Hash 值</li><li>然后 CA 会使用自己的私钥将该 Hash 值加密，生成 Certificate Signature，也就是 CA 对证书做了签名</li><li>最后将 Certificate Signature 添加在文件证书上，形成数字证书</li></ul><p>客户端校验服务端的数字证书的过程：</p><ul><li>首先客户端会使用同样的 Hash 算法获取该证书的 Hash 值 H1</li><li>通常浏览器和操作系统中集成了 CA 的公钥信息，浏览器收到证书后可以使用 CA 的公钥解密 Certificate Signature 内容，得到一个 Hash 值 H2</li><li>最后比较 H1 和 H2，如果值相同，则为可信赖的证书，否则则认为证书不可信</li></ul><h3 id="三、证书链" tabindex="-1"><a class="header-anchor" href="#三、证书链"><span>三、证书链</span></a></h3><p>但事实上，证书的验证过程中还存在一个证书信任链的问题，因为我们向 CA 申请的证书一般不是根证书签发的，而是由中间证书签发的。比如百度的证书，从下图你可以看到，证书的层级有三级：</p><img src="'+n+'" style="zoom:80%;"><p>对于这种三级层级关系的证书的验证过程如下：</p><ul><li>客户端收到 <a href="https://link.zhihu.com/?target=http%3A//baidu.com" target="_blank" rel="noopener noreferrer">http://baidu.com</a> 的证书后，发现这个证书的签发者不是根证书，就无法根据本地已有的根证书中的公钥去验证 <a href="https://link.zhihu.com/?target=http%3A//baidu.com" target="_blank" rel="noopener noreferrer">http://baidu.com</a> 证书是否可信。于是，客户端根据 <a href="https://link.zhihu.com/?target=http%3A//baidu.com" target="_blank" rel="noopener noreferrer">http://baidu.com</a> 证书中的签发者，找到该证书的颁发机构是 “GlobalSign Organization Validation CA - SHA256 - G2”，然后向 CA 请求该中间证书</li><li>请求到证书后发现 “GlobalSign Organization Validation CA - SHA256 - G2” 证书是由 “GlobalSign Root CA” 签发的，由于 “GlobalSign Root CA” 没有再上级签发机构，说明它是根证书，也就是自签证书。应用软件会检查此证书有否已预载于<a href="https://www.zhihu.com/search?q=%E6%A0%B9%E8%AF%81%E4%B9%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1914075935%7D" target="_blank" rel="noopener noreferrer">根证书</a>清单上，如果有，则可以利用根证书中的公钥去验证 “GlobalSign Organization Validation CA - SHA256 - G2” 证书，如果发现验证通过，就认为该中间证书是可信的</li><li>“GlobalSign Organization Validation CA - SHA256 - G2” 证书被信任后，可以使用 “GlobalSign Organization Validation CA - SHA256 - G2” 证书中的公钥去验证 <a href="https://link.zhihu.com/?target=http%3A//baidu.com" target="_blank" rel="noopener noreferrer">http://baidu.com</a> 证书的可信性，如果验证通过，就可以信任 <a href="https://link.zhihu.com/?target=http%3A//baidu.com" target="_blank" rel="noopener noreferrer">http://baidu.com</a> 证书</li></ul><p>在这三个步骤中，最开始客户端只信任根证书 GlobalSign Root CA 证书的，然后 “GlobalSign Root CA” 证书信任 “GlobalSign Organization Validation CA - SHA256 - G2” 证书，而 “GlobalSign Organization Validation CA - SHA256 - G2” 证书又信任 <a href="https://link.zhihu.com/?target=http%3A//baidu.com" target="_blank" rel="noopener noreferrer">http://baidu.com</a> 证书，于是客户端也信任 <a href="https://link.zhihu.com/?target=http%3A//baidu.com" target="_blank" rel="noopener noreferrer">http://baidu.com</a> 证书</p><p>总括来说，由于用户信任 GlobalSign，所以由 GlobalSign 所担保的 <a href="https://link.zhihu.com/?target=http%3A//baidu.com" target="_blank" rel="noopener noreferrer">http://baidu.com</a> 可以被信任，另外由于用户信任操作系统或浏览器的软件商，所以由软件商预载了根证书的 GlobalSign 都可被信任。</p><img src="'+o+'" style="zoom:40%;"><p>为什么 Root CA 不直接颁发证书，而是要那么多中间层呢？这是为了确保根证书的绝对安全性，将根证书隔离的越严格越好，不然根证书如果失守了，那么整个信任链都会有问题。</p>',22)]))}const A=e(l,[["render",h],["__file","4.验证HTTPS证书合法性.html.vue"]]),E=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/4.%E9%AA%8C%E8%AF%81HTTPS%E8%AF%81%E4%B9%A6%E5%90%88%E6%B3%95%E6%80%A7.html","title":"4.验证HTTPS证书合法性","lang":"zh-CN","frontmatter":{"title":"4.验证HTTPS证书合法性","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"浏览器如何验证 HTTPS 证书的合法性 浏览器拿到服务端的数字证书后，如何校验该数字证书是否真实有效呢？ 一、数字证书和 CA 机构 一个数字证书包含： 公钥； 持有者信息； 证书认证机构（CA）的信息； CA 对这份文件的数字签名及使用的算法； 证书有效期； 还有一些其他额外信息； 那数字证书的作用，是用来认证公钥持有者的身份，以防止第三方进行冒充...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/4.%E9%AA%8C%E8%AF%81HTTPS%E8%AF%81%E4%B9%A6%E5%90%88%E6%B3%95%E6%80%A7.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"4.验证HTTPS证书合法性"}],["meta",{"property":"og:description","content":"浏览器如何验证 HTTPS 证书的合法性 浏览器拿到服务端的数字证书后，如何校验该数字证书是否真实有效呢？ 一、数字证书和 CA 机构 一个数字证书包含： 公钥； 持有者信息； 证书认证机构（CA）的信息； CA 对这份文件的数字签名及使用的算法； 证书有效期； 还有一些其他额外信息； 那数字证书的作用，是用来认证公钥持有者的身份，以防止第三方进行冒充..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.验证HTTPS证书合法性\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"浏览器如何验证 HTTPS 证书的合法性","slug":"浏览器如何验证-https-证书的合法性","link":"#浏览器如何验证-https-证书的合法性","children":[{"level":3,"title":"一、数字证书和 CA 机构","slug":"一、数字证书和-ca-机构","link":"#一、数字证书和-ca-机构","children":[]},{"level":3,"title":"二、数字证书签发和验证流程","slug":"二、数字证书签发和验证流程","link":"#二、数字证书签发和验证流程","children":[]},{"level":3,"title":"三、证书链","slug":"三、证书链","link":"#三、证书链","children":[]}]}],"git":{},"readingTime":{"minutes":4.24,"words":1271},"filePathRelative":"计算机网络/七层模型/应用层/基础概念/4.验证HTTPS证书合法性.md","localizedDate":"2023年1月19日","excerpt":"<h2>浏览器如何验证 HTTPS 证书的合法性</h2>\\n<p>浏览器拿到服务端的数字证书后，如何校验该数字证书是否真实有效呢？</p>\\n<h3>一、数字证书和 CA 机构</h3>\\n<p>一个数字证书包含：</p>\\n<ul>\\n<li>公钥；</li>\\n<li>持有者信息；</li>\\n<li>证书认证机构（CA）的信息；</li>\\n<li>CA 对这份文件的数字签名及使用的算法；</li>\\n<li>证书有效期；</li>\\n<li>还有一些其他额外信息；</li>\\n</ul>\\n<p>那数字证书的作用，是用来认证公钥持有者的身份，以防止第三方进行冒充。说简单些，证书就是用来告诉客户端，该<a href=\\"https://www.zhihu.com/search?q=%E6%9C%8D%E5%8A%A1%E7%AB%AF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1914075935%7D\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">服务端</a>是否是合法的，因为只有证书合法，才代表服务端身份是可信的。</p>","autoDesc":true}');export{A as comp,E as data};
