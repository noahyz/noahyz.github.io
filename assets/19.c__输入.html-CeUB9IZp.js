import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as n,o as a}from"./app-D1zlwylF.js";const e={};function l(h,i){return a(),s("div",null,i[0]||(i[0]=[n(`<h2 id="c-中输入cin" tabindex="-1"><a class="header-anchor" href="#c-中输入cin"><span>c++中输入cin</span></a></h2><p>系统的输入都有一个缓冲区，当一次键盘输入结束时会将输入的数据存入输入缓冲区，而cin对象直接从输入缓冲区中读取数据。正因为cin对象是直接从缓冲区取数据的，所以有时候当缓冲区有残留数据的时候，cin对象会直接取得这些残留数据而不会请求键盘输入。</p><h4 id="_1-cin" tabindex="-1"><a class="header-anchor" href="#_1-cin"><span>1. cin&gt;&gt;</span></a></h4><ul><li>当 cin&gt;&gt; 从缓冲区中读取数据的时候，若缓冲区中第一个字符是空格、tab或者换行这些分隔符时，cin&gt;&gt; 会将其忽略并清除，继续取下一个字符，若缓冲区为空，则继续等待。但是如果读取成功，字符后面的分隔符是残留在缓冲区的。 cin&gt;&gt; 不做处理。</li><li>如果不想略过空白字符，可以使用 nosklpws 流控制。比如 cin &gt;&gt; noskipws &gt;&gt; a;</li><li>getline(cin, str); getline 读取数据的时候，不会忽略输入缓冲区中换行、tab 等</li></ul><h4 id="_2-cin-get" tabindex="-1"><a class="header-anchor" href="#_2-cin-get"><span>2. cin.get</span></a></h4><ul><li>读取单个字符，使用 <code>cin.get(ch) 或 ch=cin.get()</code></li><li>cin.get() 的返回值是 int 类型，成功：读取字符的ASCII码值，遇到文件结束符时，返回EOF（-1）。</li><li>cin.get(char val) 如果成功返回的是 cin 对象，因此可以支持 cin.get(b).get(c)</li><li>cin.get() 从输入缓冲区读取单个字符时不忽略分隔符（空白符），直接将其读取。</li><li>istream&amp; get ( char* s, streamsize n, char delim ) 参数：字符数组，读入字符个数(长度-1)，结束符（默认为换行符）。不丢弃缓冲区的 Enter，自定义结束符时同样不丢弃缓冲区中的结束符。</li></ul><h4 id="_3-cin-getline" tabindex="-1"><a class="header-anchor" href="#_3-cin-getline"><span>3. cin.getline</span></a></h4><ul><li><p>会在读取的字符串后面自动加上 &#39;\\0&#39;</p></li><li><p>cin.get()当输入的字符串超过规定长度时，不会引起cin函数的错误，后面的cin操作会继续执行，只是直接从缓冲区中取数据。但是cin.getline()当输入超过规定长度时，会引起cin函数的错误，后面的cin操作将不再执行。</p></li><li><p>cin.get读取一行时，遇到换行符(自定义结束符)时结束读取，但是不对换行符(自定义结束符)进行处理，换行符(自定义结束符)仍然残留在输入缓冲区。</p><p>getline读取一行字符时，默认遇到’\\n’(自定义结束符)时终止，并且将’\\n’(自定义结束符)直接从输入缓冲区中删除掉，不会影响下面的输入处理。</p><p>两者都会在读取的字符串后面自动加上&#39;\\0&#39;</p></li><li><p>cin.get(str,size);读取一行时，只能将字符串读入C风格的字符串中，即char*，但是C++的getline函数还可以将字符串读入C++风格的字符串中，即string类型。</p></li></ul><h4 id="_4-输入缓冲区清除方法" tabindex="-1"><a class="header-anchor" href="#_4-输入缓冲区清除方法"><span>4. 输入缓冲区清除方法</span></a></h4><ul><li><p>cin.clear()是用来更改cin的状态标示符的，cin在接收到错误的输入的时候，会设置状态位good。如果good位不为1，则cin不接受输入，直接跳过。如果下次输入前状态位没有改变那么即使清除了缓冲区数据流也无法输入。所以清除缓冲区之前必须要cin.clear()。</p></li><li><p>sync()的作用就是清除输入缓冲区。成功时返回0，失败时badbit会置位，函数返回-1。另外，对于绑定了输出的输入流，调用sync()，还会刷新输出缓冲区。</p></li><li><p>有的时候我们想清除缓冲区中一部分而非全部内容。因此：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">cin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ignore</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">numeric_limits</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">streamsize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(),’\\n’);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//清除输入缓冲区的当前行 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">cin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ignore</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">numeric_limits</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">streamsize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //清除输入缓冲区里所有内容 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">cin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ignore</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//清除一个字符</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,10)]))}const r=t(e,[["render",l],["__file","19.c__输入.html.vue"]]),k=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/19.c__%E8%BE%93%E5%85%A5.html","title":"19.c++输入","lang":"zh-CN","frontmatter":{"title":"19.c++输入","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"c++中输入cin 系统的输入都有一个缓冲区，当一次键盘输入结束时会将输入的数据存入输入缓冲区，而cin对象直接从输入缓冲区中读取数据。正因为cin对象是直接从缓冲区取数据的，所以有时候当缓冲区有残留数据的时候，cin对象会直接取得这些残留数据而不会请求键盘输入。 1. cin>> 当 cin>> 从缓冲区中读取数据的时候，若缓冲区中第一个字符是空格、...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/19.c__%E8%BE%93%E5%85%A5.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"19.c++输入"}],["meta",{"property":"og:description","content":"c++中输入cin 系统的输入都有一个缓冲区，当一次键盘输入结束时会将输入的数据存入输入缓冲区，而cin对象直接从输入缓冲区中读取数据。正因为cin对象是直接从缓冲区取数据的，所以有时候当缓冲区有残留数据的时候，cin对象会直接取得这些残留数据而不会请求键盘输入。 1. cin>> 当 cin>> 从缓冲区中读取数据的时候，若缓冲区中第一个字符是空格、..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"19.c++输入\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"c++中输入cin","slug":"c-中输入cin","link":"#c-中输入cin","children":[]}],"git":{},"readingTime":{"minutes":3.16,"words":947},"filePathRelative":"编程语言/c++语言/基础语法/19.c++输入.md","localizedDate":"2023年1月19日","excerpt":"<h2>c++中输入cin</h2>\\n<p>系统的输入都有一个缓冲区，当一次键盘输入结束时会将输入的数据存入输入缓冲区，而cin对象直接从输入缓冲区中读取数据。正因为cin对象是直接从缓冲区取数据的，所以有时候当缓冲区有残留数据的时候，cin对象会直接取得这些残留数据而不会请求键盘输入。</p>\\n<h4>1. cin&gt;&gt;</h4>\\n<ul>\\n<li>当 cin&gt;&gt; 从缓冲区中读取数据的时候，若缓冲区中第一个字符是空格、tab或者换行这些分隔符时，cin&gt;&gt; 会将其忽略并清除，继续取下一个字符，若缓冲区为空，则继续等待。但是如果读取成功，字符后面的分隔符是残留在缓冲区的。 cin&gt;&gt; 不做处理。</li>\\n<li>如果不想略过空白字符，可以使用 nosklpws 流控制。比如 cin &gt;&gt; noskipws &gt;&gt; a;</li>\\n<li>getline(cin, str); getline 读取数据的时候，不会忽略输入缓冲区中换行、tab 等</li>\\n</ul>","autoDesc":true}');export{r as comp,k as data};
