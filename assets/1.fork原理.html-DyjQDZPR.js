import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,a as t,o as r}from"./app-D1zlwylF.js";const d={};function n(i,o){return r(),c("div",null,o[0]||(o[0]=[t('<h3 id="二、linux-中-fork-的原理" tabindex="-1"><a class="header-anchor" href="#二、linux-中-fork-的原理"><span>二、Linux 中 fork 的原理</span></a></h3><p>Linux 在创建进程时，使用 <code>fork</code> 通过拷贝当前进程创建一个子进程。子进程与父进程的区别仅仅在于 PID（每个进程唯一）、PPID（父进程的进程号）和某些资源和统计量（例如，挂起的信号，他没有必要继承）。然后使用 exec 函数读取可执行文件并将其载入地址空间开始运行。</p><p>Linux 的 fork 使用“写时拷贝”（<code>copy on write</code>）页实现。写时拷贝是一种可以推迟甚至免除拷贝数据的计数。内核在 fork 的时候并不复制整个进程地址空间，而是让父进程和子进程共享一个拷贝。只有在需要写入的时候，数据才会被复制，从而使各个进程拥有各自的拷贝。也就是说，资源的复制只有在需要写入的时候才进行，在此之前，只是以只读方式共享。那么，这样的话，fork 的实际开销就是复制父进程的页表以及给子进程创建唯一的进程描述符。在一般情况下，进程创建后都会马上运行一个可执行的文件，这种优化可以避免拷贝大量根本就不会被使用的数据（地址空间常常包含数十M的数据）。</p><h4 id="_1-fork-的底层实现" tabindex="-1"><a class="header-anchor" href="#_1-fork-的底层实现"><span>1. fork 的底层实现</span></a></h4><p>以下实现来自于 Linux 2.6 版本。</p><p>Linux 使用 <code>clone()</code> 系统调用，通过一系列的参数标志来指明父、子进程需要共享的资源。然后由 <code>clone()</code> 函数去调用 <code>do_fork()</code>。其中 <code>do_fork()</code> 完成了创建进程的大部分工作。其内部会调用 <code>copy_process()</code> 函数，然后让进程开始运行。<code>copy_process()</code> 函数会做如下事情：</p><ul><li>调用 <code>dup_task_struct()</code> 为新进程创建一个内核栈、<code>thread_info</code> 结构和 <code>task_struct</code> 结构。字段的填充的值和当前进程的值相同。此时，子进程和父进程的描述符是完全相同的。</li><li>检查并确保新创建这个子进程后，当前用户所拥有的进程数目没有超过给他分配的资源的限制</li><li>子进程着手使自己与父进程区分开来。进程描述符中内的许多成员都要被清 0 或设置为初始值。包括哪些不是继承而来的进程描述符成员，主要是统计信息。<code>task_struct</code> 中的大多数数据都依然未被修改。</li><li>子进程的状态被设置为 <code>task_uninterruptible</code>（不可中断），以保证他不会投入运行</li><li><code>copy_process()</code> 调用 <code>copy_flags()</code> 以更新 <code>task_struct</code> 的 flags 成员。将标志 <code>PF_SUPERPRIV</code> 标志被清 0，这是表明进程是否拥有超级用户权限。设置 <code>PF_FORKNOEXEC</code>，表明进程还没有调用 <code>exec()</code> 函数。</li><li>调用 <code>alloc_pid()</code> 为新进程分配一个有效的 PID</li><li>根据传递给 <code>clone()</code> 的参数标志，<code>copy_process()</code> 拷贝或共享打开的文件、文件系统信息、信号处理函数、进程地址空间和命名空间等。在一般情况下，这些资源会被给定进程的所有线程共享。</li><li>最后，<code>copy_process()</code> 做扫尾工作并返回一个指向子进程的指针。</li></ul><p>再回到 <code>do_fork()</code> 函数，如果 <code>copy_process()</code> 函数成功返回，新创建的子进程被唤醒并让其投入运行。内核会有意选择子进程首先运行，因为一般子进程都会马上调用 <code>exec()</code> 函数，这样可以避免写时拷贝的额外开销。如果父进程首先执行的话，有可能会开始向地址空间写入。虽然想让子进程先运行，但是并非总能如此。</p>',8)]))}const l=e(d,[["render",n],["__file","1.fork原理.html.vue"]]),s=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/1.fork%E5%8E%9F%E7%90%86.html","title":"1.fork原理","lang":"zh-CN","frontmatter":{"title":"1.fork原理","description":"二、Linux 中 fork 的原理 Linux 在创建进程时，使用 fork 通过拷贝当前进程创建一个子进程。子进程与父进程的区别仅仅在于 PID（每个进程唯一）、PPID（父进程的进程号）和某些资源和统计量（例如，挂起的信号，他没有必要继承）。然后使用 exec 函数读取可执行文件并将其载入地址空间开始运行。 Linux 的 fork 使用“写时拷...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/1.fork%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"1.fork原理"}],["meta",{"property":"og:description","content":"二、Linux 中 fork 的原理 Linux 在创建进程时，使用 fork 通过拷贝当前进程创建一个子进程。子进程与父进程的区别仅仅在于 PID（每个进程唯一）、PPID（父进程的进程号）和某些资源和统计量（例如，挂起的信号，他没有必要继承）。然后使用 exec 函数读取可执行文件并将其载入地址空间开始运行。 Linux 的 fork 使用“写时拷..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.fork原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"二、Linux 中 fork 的原理","slug":"二、linux-中-fork-的原理","link":"#二、linux-中-fork-的原理","children":[]}],"git":{},"readingTime":{"minutes":3.11,"words":933},"filePathRelative":"技术专题/Linux研究/1.fork原理.md","excerpt":"<h3>二、Linux 中 fork 的原理</h3>\\n<p>Linux 在创建进程时，使用 <code>fork</code> 通过拷贝当前进程创建一个子进程。子进程与父进程的区别仅仅在于 PID（每个进程唯一）、PPID（父进程的进程号）和某些资源和统计量（例如，挂起的信号，他没有必要继承）。然后使用 exec 函数读取可执行文件并将其载入地址空间开始运行。</p>\\n<p>Linux 的 fork 使用“写时拷贝”（<code>copy on write</code>）页实现。写时拷贝是一种可以推迟甚至免除拷贝数据的计数。内核在 fork 的时候并不复制整个进程地址空间，而是让父进程和子进程共享一个拷贝。只有在需要写入的时候，数据才会被复制，从而使各个进程拥有各自的拷贝。也就是说，资源的复制只有在需要写入的时候才进行，在此之前，只是以只读方式共享。那么，这样的话，fork 的实际开销就是复制父进程的页表以及给子进程创建唯一的进程描述符。在一般情况下，进程创建后都会马上运行一个可执行的文件，这种优化可以避免拷贝大量根本就不会被使用的数据（地址空间常常包含数十M的数据）。</p>","autoDesc":true}');export{l as comp,s as data};
