import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as r,o as n}from"./app-D1zlwylF.js";const s="/assets/http%E5%8D%8F%E8%AE%AE-gLcsRrSu.png",c="/assets/http%E5%93%8D%E5%BA%94%E5%8D%8F%E8%AE%AE-DNfok8RW.png",a={};function d(p,e){return n(),o("div",null,e[0]||(e[0]=[r('<h3 id="一、http协议" tabindex="-1"><a class="header-anchor" href="#一、http协议"><span>一、http协议</span></a></h3><p>HTTP协议客户端请求request消息包括以下格式：<code>请求行（request line）、请求头部（header）、空行、请求数据</code>；</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>服务端响应response也由四个部分组成，分别是：<code>响应行、响应头、空行、响应体</code>。</p><img src="'+c+'" style="zoom:80%;"><h4 id="请求方法" tabindex="-1"><a class="header-anchor" href="#请求方法"><span>请求方法</span></a></h4><p>HTTP协议定义了多种请求方式，具体如下：<br><code>GET</code>：<strong>获取资源</strong>，用来请求访问已被URI（统一资源标志符，和URL是包含和被包含的关系）识别的资源。<br><code>POST</code>：用来<strong>传输实体的主体</strong>，虽然GET也可以实现，但是一般不用。<br><code>PUT</code>：<strong>传输文件</strong>。但是鉴于PUT方法自身不带验证机制，任何人都可以上传文件，存在安全性问题，因此一般网站都不采用该方法。<br><code>HEAD</code>:<strong>获得报文首部</strong>。和GET请求一样，只是不返回报文主体部分。<br><code>DELETE</code>：<strong>删除文件</strong>。同样不带验证机制，存在安全性问题。<br><code>OPTIONS</code>:<strong>询问指定的请求URI支持哪些方法</strong>。<br><code>TRACE</code>:<strong>追踪路径</strong>，让Web服务器将之前的请求通信环回给客户端的方法。<br><code>CONNECT</code>：要求在<strong>与代理服务器通信时建立隧道</strong>，实现隧道协议进行TCP通信。</p>',7)]))}const g=t(a,[["render",d],["__file","http协议.html.vue"]]),h=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/http%E5%8D%8F%E8%AE%AE.html","title":"undefined","lang":"zh-CN","frontmatter":{"title":"undefined","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"一、http协议 HTTP协议客户端请求request消息包括以下格式：请求行（request line）、请求头部（header）、空行、请求数据； 服务端响应response也由四个部分组成，分别是：响应行、响应头、空行、响应体。 请求方法 HTTP协议定义了多种请求方式，具体如下： GET：获取资源，用来请求访问已被URI（统一资源标志符，和UR...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/http%E5%8D%8F%E8%AE%AE.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"undefined"}],["meta",{"property":"og:description","content":"一、http协议 HTTP协议客户端请求request消息包括以下格式：请求行（request line）、请求头部（header）、空行、请求数据； 服务端响应response也由四个部分组成，分别是：响应行、响应头、空行、响应体。 请求方法 HTTP协议定义了多种请求方式，具体如下： GET：获取资源，用来请求访问已被URI（统一资源标志符，和UR..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"undefined\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"一、http协议","slug":"一、http协议","link":"#一、http协议","children":[]}],"git":{},"readingTime":{"minutes":1.13,"words":338},"filePathRelative":"计算机网络/七层模型/应用层/基础概念/http协议.md","localizedDate":"2023年1月19日","excerpt":"<h3>一、http协议</h3>\\n<p>HTTP协议客户端请求request消息包括以下格式：<code>请求行（request line）、请求头部（header）、空行、请求数据</code>；</p>\\n<figure><figcaption></figcaption></figure>\\n<p>服务端响应response也由四个部分组成，分别是：<code>响应行、响应头、空行、响应体</code>。</p>\\n\\n<h4>请求方法</h4>\\n<p>HTTP协议定义了多种请求方式，具体如下：<br>\\n<code>GET</code>：<strong>获取资源</strong>，用来请求访问已被URI（统一资源标志符，和URL是包含和被包含的关系）识别的资源。<br>\\n<code>POST</code>：用来<strong>传输实体的主体</strong>，虽然GET也可以实现，但是一般不用。<br>\\n<code>PUT</code>：<strong>传输文件</strong>。但是鉴于PUT方法自身不带验证机制，任何人都可以上传文件，存在安全性问题，因此一般网站都不采用该方法。<br>\\n<code>HEAD</code>:<strong>获得报文首部</strong>。和GET请求一样，只是不返回报文主体部分。<br>\\n<code>DELETE</code>：<strong>删除文件</strong>。同样不带验证机制，存在安全性问题。<br>\\n<code>OPTIONS</code>:<strong>询问指定的请求URI支持哪些方法</strong>。<br>\\n<code>TRACE</code>:<strong>追踪路径</strong>，让Web服务器将之前的请求通信环回给客户端的方法。<br>\\n<code>CONNECT</code>：要求在<strong>与代理服务器通信时建立隧道</strong>，实现隧道协议进行TCP通信。</p>","autoDesc":true}');export{g as comp,h as data};
