import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-D1zlwylF.js";const h="/assets/ELF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F-DS8mx_X3.png",k={};function t(e,s){return l(),a("div",null,s[0]||(s[0]=[n('<h2 id="实现一个-hook-库" tabindex="-1"><a class="header-anchor" href="#实现一个-hook-库"><span>实现一个 hook 库</span></a></h2><h3 id="一、背景" tabindex="-1"><a class="header-anchor" href="#一、背景"><span>一、背景</span></a></h3><p>在日常开发中，我们经常可能会对动态库中的函数调用做 hook（替换、拦截、监听等等），实现业务目的，比如对于 hook malloc、free 等，我们能够统计出分配了多少内存、那些内存一直被占用而没有被释放等等。</p><p>鉴于此，我们实现一个 hook 库，提供接口帮助业务进行 hook 相关函数调用。本文主要分享一个通过 got 方式进行 hook 的方式</p><h3 id="二、基础知识" tabindex="-1"><a class="header-anchor" href="#二、基础知识"><span>二、基础知识</span></a></h3><h4 id="_1-ld-preload-预加载方式" tabindex="-1"><a class="header-anchor" href="#_1-ld-preload-预加载方式"><span>1. LD_PRELOAD 预加载方式</span></a></h4><p>一般情况下，在 linux 下，动态链接库的加载顺序如下：</p><ul><li>LD_PRELOAD</li><li>LD_LIBRARY_PATH</li><li>/etc/ld.so.cache</li><li>/lib、/usr/lib 等</li></ul><p>LD_PRELOAD 提供一种预加载机制，可以给一个 library 优先权，让其先加载，从而达到覆盖标准库中某些符号（函数）的目的。这种方式也可以达到 hook 的目的。但是需要设置环境变量，如：LD_PRELOAD=<a href="http://xxx.so" target="_blank" rel="noopener noreferrer">xxx.so</a></p><p>LD_PRELOAD 方式会使应用程序先绑定预加载库的符号，然后再绑定其他链接的共享库。如果一个应用程序调用一个函数，则链接器首先查看他是否在应用程序本身中可用。如果没有找到符号，链接器会检查所有预加载的库，然后检查所有已链接到应用程序的库。共享库按照编译和链接期间给出的顺序进行搜索。</p><p>这种方式有一个缺点就是实现于链接阶段，因此不适用于静态链接。</p><h4 id="_2-elf-文件" tabindex="-1"><a class="header-anchor" href="#_2-elf-文件"><span>2. ELF 文件</span></a></h4><p>PC 平台流行的可执行文件格式主要是 Windows 下的 PE（Portable Executable）和 Linux 下的 ELF（Executable Linkable Format），他们都是 COFF（Common file format）格式的变体。他们是标准的二进制数据封装格式。以 Linux 平台为例：可重定位文件（.o）、可执行文件、共享目标文件（.so）、核心转储文件（core dump）。</p><p>如下是 ELF 文件的大致结构</p><img src="'+h+`" style="zoom:15%;"><p>ELF 文件我们需要重点关注的有：ELF 文件头（file Header）、PHT（program header table）、段表（SHT：Section Header Table）等</p><h5 id="_1-elf-file-header" tabindex="-1"><a class="header-anchor" href="#_1-elf-file-header"><span>(1). ELF file Header</span></a></h5><p>ELF 文件头包含了描述整个文件的基本属性，比如 ELF 文件版本、目标机器型号、程序入口地址等。可以使用 <code>readelf -h xxx</code> 查看</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># readelf -h test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ELF</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Header:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  Magic:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   7f</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 45</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 4c</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 46</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 02</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 01</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 01</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  Class:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">                             ELF64</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  Data:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">                              2</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;s complement, little endian</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Version:                           1 (current)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  OS/ABI:                            UNIX - System V</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  ABI Version:                       0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Type:                              DYN (Shared object file)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Machine:                           Advanced Micro Devices X86-64</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Version:                           0x1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Entry point address:               0xf40</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Start of program headers:          64 (bytes into file)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Start of section headers:          17184 (bytes into file)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Flags:                             0x0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Size of this header:               64 (bytes)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Size of program headers:           56 (bytes)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Number of program headers:         9</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Size of section headers:           64 (bytes)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Number of section headers:         29</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Section header string table index: 28</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上就是一个 ELF 文件的文件头，这个结构被定义在 &quot;/usr/include/elf.h&quot; 中，以 64 位为例：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> struct</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;">	e_ident</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[EI_NIDENT];</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	/* Magic number and other info */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  Elf64_Half	e_type;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">			/* Object file type */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  Elf64_Half	e_machine;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		/* Architecture */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  Elf64_Word	e_version;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		/* Object file version */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  Elf64_Addr	e_entry;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		/* Entry point virtual address */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  Elf64_Off	e_phoff;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		/* Program header table file offset */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  Elf64_Off	e_shoff;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		/* Section header table file offset */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  Elf64_Word	e_flags;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		/* Processor-specific flags */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  Elf64_Half	e_ehsize;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		/* ELF header size in bytes */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  Elf64_Half	e_phentsize;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		/* Program header table entry size */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  Elf64_Half	e_phnum;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		/* Program header table entry count */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  Elf64_Half	e_shentsize;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		/* Section header table entry size */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  Elf64_Half	e_shnum;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		/* Section header table entry count */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  Elf64_Half	e_shstrndx;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		/* Section header string table index */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">} Elf64_Ehdr;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选几个重要的字段解释下</p><ul><li>e_shoff：段表在文件中的偏移，如上是 17184 (bytes into file)，也就是说段表从文件的第 17185 个字节开始</li><li>e_ehsize：ELF 文件头本身的大小，如上是 64 (bytes)</li><li>e_shentsize：段表描述符的大小，如上是 64 (bytes)</li><li>e_shnum：段表描述符数量，这个值为 ELF 文件中拥有的段的数量，如上是 29</li><li>e_shstrndx：段表字符串表所在的段在段表中的下标</li></ul><h5 id="_2-sht-section-header-table" tabindex="-1"><a class="header-anchor" href="#_2-sht-section-header-table"><span>(2). SHT（Section Header Table）</span></a></h5><p>段表描述了ELF 文件包含的所有段的信息，比如每个段的段名、段的长度、在文件中的偏移、读写权限以及段的一些属性。可以使用 <code>readelf -S xxx</code> 查看具体信息</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># readelf -S test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">There</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> are</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 29</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> section</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> headers,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> starting</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> offset</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 0x4320:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Section</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Headers:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [Nr] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Name</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">              Type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">             Address</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">           Offset</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       Size</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">              EntSize</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">          Flags</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Link</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Info</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Align</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [ 0]                   </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">NULL</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">             0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  00000000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [ 1] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.interp</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">           PROGBITS</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">         0000000000000238</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  00000238</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       000000000000001c</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   A</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [ 2] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.note.ABI-tag</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">     NOTE</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">             0000000000000254</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  00000254</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000020</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   A</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [ 3] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.note.gnu.build-i</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> NOTE</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">             0000000000000274</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  00000274</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000024</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   A</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [ 4] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.gnu.hash</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">         GNU_HASH</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">         0000000000000298</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  00000298</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000028</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   A</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       5</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [ 5] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.dynsym</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">           DYNSYM</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">           00000000000002c0</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  000002c0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000390</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000018</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   A</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       6</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [ 6] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.dynstr</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">           STRTAB</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">           0000000000000650</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  00000650</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       000000000000024c</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   A</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [ 7] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.gnu.version</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">      VERSYM</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">           000000000000089c</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  0000089c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       000000000000004c</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000002</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   A</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       5</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [ 8] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.gnu.version_r</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    VERNEED</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">          00000000000008e8</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  000008e8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000070</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   A</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       6</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     3</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [ 9] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.rela.dyn</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">         RELA</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">             0000000000000958</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  00000958</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000150</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000018</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   A</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       5</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [10] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.rela.plt</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">         RELA</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">             0000000000000aa8</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  00000aa8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       00000000000002a0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000018</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  AI</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       5</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">    22</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [11] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.init</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">             PROGBITS</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">         0000000000000d48</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  00000d48</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000017</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  AX</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [12] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.plt</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">              PROGBITS</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">         0000000000000d60</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  00000d60</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       00000000000001d0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000010</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  AX</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     16</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [13] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.plt.got</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">          PROGBITS</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">         0000000000000f30</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  00000f30</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000008</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000008</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  AX</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [14] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.text</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">             PROGBITS</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">         0000000000000f40</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  00000f40</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000c32</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  AX</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     16</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [15] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.fini</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">             PROGBITS</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">         0000000000001b74</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  00001b74</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000009</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  AX</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [16] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.rodata</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">           PROGBITS</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">         0000000000001b80</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  00001b80</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000125</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   A</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [17] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.eh_frame_hdr</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">     PROGBITS</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">         0000000000001ca8</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  00001ca8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       00000000000000c4</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   A</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [18] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.eh_frame</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">         PROGBITS</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">         0000000000001d70</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  00001d70</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000340</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   A</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [19] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.init_array</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">       INIT_ARRAY</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">       0000000000202ca0</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  00002ca0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000018</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000008</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  WA</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [20] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.fini_array</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">       FINI_ARRAY</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">       0000000000202cb8</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  00002cb8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000008</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000008</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  WA</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [21] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.dynamic</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">          DYNAMIC</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">          0000000000202cc0</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  00002cc0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000210</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000010</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  WA</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       6</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [22] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.got</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">              PROGBITS</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">         0000000000202ed0</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  00002ed0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000130</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000008</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  WA</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [23] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.data</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">             PROGBITS</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">         0000000000203000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  00003000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000010</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  WA</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [24] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.bss</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">              NOBITS</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">           0000000000203020</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  00003010</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000248</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  WA</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     32</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [25] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.comment</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">          PROGBITS</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">         0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  00003010</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000029</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000001</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  MS</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [26] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.symtab</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">           SYMTAB</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">           0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  00003040</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       0000000000000af8</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000018</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">          27</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">    52</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [27] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.strtab</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">           STRTAB</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">           0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  00003b38</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       00000000000006e7</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [28] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">.shstrtab</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">         STRTAB</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">           0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  0000421f</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       00000000000000fe</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Key</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Flags:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  W</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (write), A (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), X (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), M (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">merge</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), S (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">strings</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), I (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  L</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (link </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">order</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), O (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">extra</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> OS</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> processing</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> required</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), G (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">group</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), T (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">TLS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  C</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (compressed), x (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), o (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">OS</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> specific</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), E (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">exclude</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  l</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (large), p (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">processor</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> specific</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选几个较为重要的 section 说明下：</p><ul><li><code>.dynstr</code>：保存了所有的字符串常量信息</li><li><code>.dynsym</code>：保存了符号（symbol）的信息（符号的类型、起始地址、大小、符号名称在 <code>.dynstr</code>中的索引编号等等）。函数也是一种符号</li><li><code>.text</code>：程序代码经过编译后生成的机器指令</li><li><code>.dynamic</code>：供动态链接器使用的各项信息，记录了当前 ELF 的外部依赖，以及其他各个重要 section 的起始位置等信息</li><li><code>.got</code>：Global Offset Table。用于记录外部调用的入口地址。动态链接器（linker）执行重定位操作时，这里会被填入真实的外部调用的绝对地址</li><li><code>.plt</code>：Procedure Linkage Table。外部调用的跳板，主要用于支持 lazy binding 方式的外部调用重定位。</li></ul><h5 id="_3-elf-文件的基地址" tabindex="-1"><a class="header-anchor" href="#_3-elf-文件的基地址"><span>(3). ELF 文件的基地址</span></a></h5><p>在进程的内存空间中，各种 ELF 文件的加载地址是随机的，只有在运行时才能拿到加载地址，也就是基地址。我们需要知道 ELF 的基地址，才能将相对地址换算成绝对地址。</p><p>比较稳妥的办法可以解析 <code>/proc/self/maps</code>，比如：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># cat /proc/self/maps</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">55b735234000-55b73523c000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> r-xp</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 08:01</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5636121</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">                    /bin/cat</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">55b73543b000-55b73543c000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> r--p</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00007000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 08:01</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5636121</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">                    /bin/cat</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">55b73543c000-55b73543d000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> rw-p</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00008000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 08:01</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5636121</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">                    /bin/cat</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">55b7370a7000-55b7370c8000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> rw-p</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 00:00</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                          [heap]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">7f3bcf47d000-7f3bcfe4c000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> r--p</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 08:01</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 6298309</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">                    /usr/lib/locale/locale-archive</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">7f3bcfe4c000-7f3bd0033000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> r-xp</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 08:01</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1048660</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">                    /lib/x86_64-linux-gnu/libc-2.27.so</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">7f3bd0033000-7f3bd0233000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> ---p</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 001e7000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 08:01</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1048660</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">                    /lib/x86_64-linux-gnu/libc-2.27.so</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">7f3bd0233000-7f3bd0237000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> r--p</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 001e7000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 08:01</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1048660</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">                    /lib/x86_64-linux-gnu/libc-2.27.so</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">7f3bd0237000-7f3bd0239000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> rw-p</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 001eb000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 08:01</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1048660</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">                    /lib/x86_64-linux-gnu/libc-2.27.so</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">7f3bd0239000-7f3bd023d000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> rw-p</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 00:00</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">7f3bd023d000-7f3bd0266000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> r-xp</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 08:01</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1048592</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">                    /lib/x86_64-linux-gnu/ld-2.27.so</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">7f3bd042e000-7f3bd0452000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> rw-p</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 00:00</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">7f3bd0466000-7f3bd0467000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> r--p</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00029000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 08:01</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1048592</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">                    /lib/x86_64-linux-gnu/ld-2.27.so</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">7f3bd0467000-7f3bd0468000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> rw-p</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 0002a000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 08:01</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1048592</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">                    /lib/x86_64-linux-gnu/ld-2.27.so</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">7f3bd0468000-7f3bd0469000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> rw-p</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 00:00</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">7fff4dce1000-7fff4dd02000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> rw-p</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 00:00</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                          [stack]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">7fff4ddd7000-7fff4ddda000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> r--p</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 00:00</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                          [vvar]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">7fff4ddda000-7fff4dddc000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> r-xp</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 00:00</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                          [vdso]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ffffffffff600000-ffffffffff601000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> r-xp</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 00000000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 00:00</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                  [vsyscall]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>maps 返回的是指定进程的内存空间中 mmap 的映射信息，包括各种动态库、可执行文件，栈空间，堆空间。一般来说，比如 <code>/lib/x86_64-linux-gnu/libc-2.27.so</code> 的 offset 为 0 的第一行的起始地址 <code>7f3bcfe4c000</code> 在绝大多数情况下就是我们寻找的基地址。</p><h5 id="_4-内存访问权限" tabindex="-1"><a class="header-anchor" href="#_4-内存访问权限"><span>(4). 内存访问权限</span></a></h5><p><code>/proc/self/maps</code> 返回的信息已经包含了权限访问信息。如果要执行 hook，就需要写入的权限，使用 mprotect 来完成</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;sys/mman.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> mprotect</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> prot</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改内存访问权限，只能以“页”为单位。</p><h3 id="三、实践" tabindex="-1"><a class="header-anchor" href="#三、实践"><span>三、实践</span></a></h3><p>有了以上的基础，我们不难实现一个 hook 库。如下例子：</p><p>比如我有一个 <a href="http://libxxx.so" target="_blank" rel="noopener noreferrer">libxxx.so</a>，在这个 <a href="http://libxxx.so" target="_blank" rel="noopener noreferrer">libxxx.so</a> 里面调用了 <a href="http://libc.so" target="_blank" rel="noopener noreferrer">libc.so</a> 里面的 open 方法，那么在 <a href="http://libxxx.so" target="_blank" rel="noopener noreferrer">libxxx.so</a> 的 got 表中就存放了 open 的地址。所以我们先找到 <a href="http://libc.so" target="_blank" rel="noopener noreferrer">libc.so</a> 里面 open 方法在内存中的地址（使用 dlsym），然后在加载到内存中的 <a href="http://libxxx.so" target="_blank" rel="noopener noreferrer">libxxx.so</a> 的 got 表里面去找到存放 open 地址的地方，把它修改成新的函数的地址即可。也就是说替换了 <a href="http://libc.so" target="_blank" rel="noopener noreferrer">libc.so</a> 的 open 函数在 <a href="http://libxxx.so" target="_blank" rel="noopener noreferrer">libxxx.so</a> 里面引用的地址。</p><p>代码链接：<a href="https://github.com/noahyzhang/got_hook" target="_blank" rel="noopener noreferrer">https://github.com/noahyzhang/got_hook</a></p><h4 id="_1-第一步-我们先找到给定的-elf-文件的-got-段表的段虚拟地址和段的长度" tabindex="-1"><a class="header-anchor" href="#_1-第一步-我们先找到给定的-elf-文件的-got-段表的段虚拟地址和段的长度"><span>1. 第一步，我们先找到给定的 ELF 文件的 got 段表的段虚拟地址和段的长度</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 获取 .got 段表的段虚拟地址和段的长度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> get_got_table_info</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> lib</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> uint64_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> base</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> uint64_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> fd </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(lib, O_RDONLY);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (fd </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        std::cerr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;open file err: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> strerror</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(errno) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 读取 ELF 文件的 Header</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    Elf64_Ehdr elf_header;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    memset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">elf_header, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(elf_header));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    read</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fd, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">elf_header, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(elf_header));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 读取 ELF 文件的段表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    Elf64_Shdr elf_section_header;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    memset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">elf_section_header, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(elf_section_header));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // elf_header.e_shstrndx：段表字符串表所在的段在段表中的下标</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // elf_header.e_shentsize：段表描述符的大小</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // elf_header.e_shoff 指示了 ELF 文件中段表的位置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 读取段表字符串表。段表字符串表用来保存段表中用到的字符串，比如段名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    lseek</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fd, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">elf_header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">e_shstrndx</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> elf_header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">e_shentsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> elf_header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">e_shoff</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, SEEK_SET);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    read</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fd, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">elf_section_header, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(elf_section_header));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // elf_section_header.sh_size 段的长度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    char*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> lp_string_table </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">char*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">elf_section_header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">sh_size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (lp_string_table </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        std::cerr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;malloc err: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> strerror</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(errno) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        close</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fd);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // elf_section_header.sh_offset：段偏移，如果该段存在于文件中，则表示该段在文件中的偏移，否则无意义</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    lseek</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fd, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">elf_section_header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">sh_offset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, SEEK_SET);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 读取这个段（段表字符串表 Section Header String Table）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    read</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fd, lp_string_table, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">elf_section_header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">sh_size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 将文件指针偏移到 ELF 文件中段表的位置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    lseek</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fd, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">elf_header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">e_shoff</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, SEEK_SET);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // elf_header.e_shnum：段表描述符数量，也就是 ELF 文件中拥有的段的数量</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 读取每个段表</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> elf_header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">e_shnum</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        memset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">elf_section_header, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(elf_section_header));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        read</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fd, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">elf_section_header, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(elf_section_header));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 找到 &quot;.got&quot; 段表。 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">elf_section_header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">sh_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> SHT_PROGBITS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            // sh_name：段名，是个字符串，位于 &quot;.shstrtab&quot; 的字符串表。sh_name 是段名字符串在 &quot;.shstrtab&quot; 中的偏移</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            // 通过比较当前段表的段名，获取到 sh_addr、sh_size</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            // sh_addr：段虚拟地址，如果该段可以被加载，则 sh_addr 为该段被加载后在进程地址空间中的虚拟地址；否则为0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            // sh_size：段的长度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">strcmp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(lp_string_table</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">elf_section_header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">sh_name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;.got&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">base </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> elf_section_header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">sh_addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> elf_section_header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">sh_size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                res </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    close</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fd);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> res;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-通过-maps-拿到-elf-文件的基地址" tabindex="-1"><a class="header-anchor" href="#_2-通过-maps-拿到-elf-文件的基地址"><span>2. 通过 maps 拿到 ELF 文件的基地址</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// /proc/self/maps 显示了进程映射了的内存区域和访问权限</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 找到进程中关于 module_name 的内存区域。即拿到虚拟地址空间的起始地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">uint64_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> get_module_base</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">pid_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> pid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> module_name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> fp </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    char*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> addr_range </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;"> file_name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;"> line</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (pid </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        snprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(file_name, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(file_name), </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/proc/self/maps&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        snprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(file_name, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(file_name), </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/proc/</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">/maps&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, pid);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    fp </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> fopen</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(file_name, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;r&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (fp </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">fgets</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(line, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(line), fp)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            // std::cout &lt;&lt; &quot;get module base line: &quot; &lt;&lt; line &lt;&lt; std::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">strstr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(line, module_name)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                addr_range </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> strtok</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(line, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> strtoul</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(addr_range, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">400000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                    addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">                // std::cout &lt;&lt; &quot;addr: &quot; &lt;&lt; std::hex &lt;&lt; addr &lt;&lt; std::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        fclose</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fp);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> addr;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-寻找符号并替换" tabindex="-1"><a class="header-anchor" href="#_3-寻找符号并替换"><span>3. 寻找符号并替换</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 修改调用进程内存页的保护属性，修改为 rwx</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// mprotect: 可以用来修改一段指定内存区域的保护属性。把自start开始的、长度为len的内存区的保护属性修改为prot指定的值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> change_addr_to_rwx</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">uint64_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> page_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> sysconf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(_SC_PAGESIZE);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> page_start </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(page_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // std::cout &lt;&lt; &quot;page_start: &quot; &lt;&lt; page_start &lt;&lt; std::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> mprotect</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)page_start, page_size, PROT_READ </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> PROT_WRITE </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> PROT_EXEC);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (res </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        std::cerr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;mprotect err: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> strerror</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(errno) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 替换 got 表中的关于某个符号的指向</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> write_data_to_addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">uint64_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> uint64_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> change_addr_to_rwx</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(addr);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (res </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        std::cerr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;write data to addr err: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> strerror</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(errno) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">uint64_t*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> value;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@brief</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> hook 的入口函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> lib</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> 可以是二进制文件，也可以是 so 文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> symbol</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> 需要 hook 的符号（函数）地址</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> new_func</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> 需要替换的函数地址</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> old_func</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> 保存原始的函数地址</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> int 成功与否</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> hook_func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> lib</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> new_func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void**</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> old_func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> got_off, got_size;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get_got_table_info</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(lib, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">got_off, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">got_size) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        std::cerr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;get got table info err&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> base </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> get_module_base</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, lib);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (base </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        std::cerr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;get module base failed, not find: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> lib </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 依次遍历寻找这个符号，找到之后进行替换</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> got_size; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">+=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ((</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)symbol </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">uint64_t*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)(base </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> got_off </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i)))) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">old_func </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> symbol;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">            write_data_to_addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(base </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> got_off </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i, (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)new_func);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            res </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (res </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        std::cerr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;unable find symbol addr in got table&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> res;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-例子" tabindex="-1"><a class="header-anchor" href="#_4-例子"><span>4. 例子</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">pid_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">old_getpid)() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">pid_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> new_getpid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">old_getpid)() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 获取 getpid 函数的地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    void*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> dlsym</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;getpid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;hook before, pid: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getpid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    hook_func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, addr, (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)new_getpid, (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void**</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">old_getpid);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;hook after, pid: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> std::dec </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getpid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行得到：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># ./test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">hook</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> before,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pid:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 121561</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">hook</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> after,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pid:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 121562</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、常见的-hook-技术对比" tabindex="-1"><a class="header-anchor" href="#四、常见的-hook-技术对比"><span>四、常见的 Hook 技术对比</span></a></h3><table><thead><tr><th>技术类型</th><th>生效范围</th><th>生效时机</th><th>依赖注入</th><th>层级</th><th>安全性</th><th>稳定性</th><th>开发运维难度</th></tr></thead><tbody><tr><td>内核模块</td><td>所有进程</td><td>加载内核模块后</td><td>否</td><td>低</td><td>最高</td><td>中</td><td>极高</td></tr><tr><td>Inline Hook</td><td>当前进程</td><td>hook后</td><td>是</td><td>中</td><td>中</td><td>中</td><td>高</td></tr><tr><td>Got Hook</td><td>当前进程模块</td><td>hook后</td><td>是</td><td>中</td><td>低</td><td>良</td><td>中</td></tr><tr><td>Preload Hook</td><td>所有进程</td><td>hook后</td><td>否</td><td>中</td><td>低</td><td>优</td><td>低</td></tr><tr><td>系统文件修改</td><td>所有进程</td><td>文件修改后</td><td>否</td><td>中</td><td>高</td><td>中</td><td>高</td></tr></tbody></table><ul><li>依赖注入，代表在使用该技术hook第三方进程前，是否需要先进行注入</li><li>层级，代表hook点在整个系统调用的位置，越底层则层级越低</li><li>稳定性越低，代表要通过这种技术做到稳定所需要的技术和时间成本较高</li><li>安全性，代表该项技术被绕过的难易程度</li></ul><p>注意：preload hook 的方式，可以使用环境变量配置，也可以写入文件 <code>/etc/ld.so.preload</code> 进行配置。若使用命令行指定LD_PRELOAD则只影响该新进程及子进程；若写入全局环境变量则LD_PRELOAD对所有新进程生效；父进程可以控制子进程的环境变量从而取消preload</p><h3 id="五、扩展" tabindex="-1"><a class="header-anchor" href="#五、扩展"><span>五、扩展</span></a></h3><p>除了基于 GOT/PLT 的实现机制，native hook 的实现方案还包括 “inline hook”、&quot;trap hook&quot; 的实现。其中 “trap hook” 使用系统的 SIGTRAP 信号中断的机制，性能不好，在生产环境中使用较少。“inline hook” 实现的是指令级别的替换机制，实现难度大。</p>`,57)]))}const r=i(k,[["render",t],["__file","1.实现一个hook库.html.vue"]]),g=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/1.%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAhook%E5%BA%93.html","title":"1.实现一个hook库","lang":"zh-CN","frontmatter":{"title":"1.实现一个hook库","date":"2023-01-19T11:11:41.000Z","tags":["hook"],"description":"实现一个 hook 库 一、背景 在日常开发中，我们经常可能会对动态库中的函数调用做 hook（替换、拦截、监听等等），实现业务目的，比如对于 hook malloc、free 等，我们能够统计出分配了多少内存、那些内存一直被占用而没有被释放等等。 鉴于此，我们实现一个 hook 库，提供接口帮助业务进行 hook 相关函数调用。本文主要分享一个通过 ...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/1.%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAhook%E5%BA%93.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"1.实现一个hook库"}],["meta",{"property":"og:description","content":"实现一个 hook 库 一、背景 在日常开发中，我们经常可能会对动态库中的函数调用做 hook（替换、拦截、监听等等），实现业务目的，比如对于 hook malloc、free 等，我们能够统计出分配了多少内存、那些内存一直被占用而没有被释放等等。 鉴于此，我们实现一个 hook 库，提供接口帮助业务进行 hook 相关函数调用。本文主要分享一个通过 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"hook"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.实现一个hook库\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"实现一个 hook 库","slug":"实现一个-hook-库","link":"#实现一个-hook-库","children":[{"level":3,"title":"一、背景","slug":"一、背景","link":"#一、背景","children":[]},{"level":3,"title":"二、基础知识","slug":"二、基础知识","link":"#二、基础知识","children":[]},{"level":3,"title":"三、实践","slug":"三、实践","link":"#三、实践","children":[]},{"level":3,"title":"四、常见的 Hook 技术对比","slug":"四、常见的-hook-技术对比","link":"#四、常见的-hook-技术对比","children":[]},{"level":3,"title":"五、扩展","slug":"五、扩展","link":"#五、扩展","children":[]}]}],"git":{},"readingTime":{"minutes":12.24,"words":3673},"filePathRelative":"技术专题/hook/1.实现一个hook库.md","localizedDate":"2023年1月19日","excerpt":"<h2>实现一个 hook 库</h2>\\n<h3>一、背景</h3>\\n<p>在日常开发中，我们经常可能会对动态库中的函数调用做 hook（替换、拦截、监听等等），实现业务目的，比如对于 hook malloc、free 等，我们能够统计出分配了多少内存、那些内存一直被占用而没有被释放等等。</p>\\n<p>鉴于此，我们实现一个 hook 库，提供接口帮助业务进行 hook 相关函数调用。本文主要分享一个通过 got 方式进行 hook 的方式</p>\\n<h3>二、基础知识</h3>\\n<h4>1. LD_PRELOAD 预加载方式</h4>\\n<p>一般情况下，在 linux 下，动态链接库的加载顺序如下：</p>","autoDesc":true}');export{r as comp,g as data};
