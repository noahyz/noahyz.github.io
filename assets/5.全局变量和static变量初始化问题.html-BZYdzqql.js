import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as n}from"./app-D1zlwylF.js";const e={};function l(p,i){return n(),a("div",null,i[0]||(i[0]=[t(`<h2 id="cpp-中全局变量和-static-变量初始化问题" tabindex="-1"><a class="header-anchor" href="#cpp-中全局变量和-static-变量初始化问题"><span>cpp 中全局变量和 static 变量初始化问题</span></a></h2><h3 id="一、初始化时机" tabindex="-1"><a class="header-anchor" href="#一、初始化时机"><span>一、初始化时机</span></a></h3><ul><li>全局变量、文件域中的静态变量、类中的成员静态变量在 main 函数执行前初始化</li><li>局部变量中的静态变量在第一次调用时初始化</li></ul><p>局部静态变量，C 和 C++ 的区别：</p><ul><li>在 C 语言中是编译期间初始化并分配内存，因此不能用变量给静态局部变量赋值，只能用常量</li><li>在 C++ 语言中是第一次执行时初始化，因为 C++ 引入了对象的概念，对象一般需要构造函数，无法简单的分配内存，因此可以用变量赋值，并且在第一次使用时初始化</li></ul><p>初始化分为静态初始化、动态初始化</p><ul><li><p>静态初始化，用常量来对全局变量进行初始化的情况。根据变量是否设置初始值分别放于 data segment 段（设置初值）和 bss 段（未设置初始值）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int a = 3;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>动态初始化（运行期）（main 函数前，局部静态变量除外）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># 需要经过函数调用来完成的初始化</span></span>
<span class="line"><span>int a = foo()</span></span>
<span class="line"><span># 复杂类型的初始化。需要调用构造函数。</span></span>
<span class="line"><span>class A { A() {} }</span></span>
<span class="line"><span>A aa;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>静态初始化的时机是先于动态初始化的</p></li></ul><p>注意：</p><ul><li><p>c++ 规定，非局部 static 变量的初始化发生在 main 函数执行之前，也即 main 函数之前的单线程启动阶段，所以不存在线程安全问题。但 c++ 没有规定多个非局部 static 对象的初始化顺序，尤其是来自于多个编译单元的非局部 static 对象，他们的初始化顺序是随机的，不过可以设置优先级</p></li><li><p>局部静态变量，其初始化发生在控制流第一次执行到该对象的初始化语句时。多个线程的控制流可能同时到达其初始化语句。</p><p>在C++11之前，在多线程环境下局部静态对象的初始化并不是线程安全的。具体表现就是：如果一个线程正在执行局部静态对象的初始化语句但还没有完成初始化，此时若其它线程也执行到该语句，那么这个线程会认为自己是第一次执行该语句并进入该local static对象的构造函数中。这会造成这个local static对象的重复构造，进而产生内存泄露问题。所以，local static对象在多线程环境下的重复构造问题是需要解决的。</p><p>而C++11则在语言规范中解决了这个问题。C++11规定，在一个线程开始local static 对象的初始化后到完成初始化前，其他线程执行到这个local static对象的初始化语句就会等待，直到该local static 对象初始化完成。</p></li></ul><h3 id="二、初始化顺序" tabindex="-1"><a class="header-anchor" href="#二、初始化顺序"><span>二、初始化顺序</span></a></h3><p>对于编译单元（同一个文件）的全局变量来讲，初始化顺序跟声明的顺序一致。销毁顺序则相反</p><p>对于不同编译单元的全局变量，初始化顺序不确定。对于不同编译单元的全局变量互相引用的情况应避免</p><h3 id="三、解决不同文件相互引用全局变量初始化顺序不确定问题" tabindex="-1"><a class="header-anchor" href="#三、解决不同文件相互引用全局变量初始化顺序不确定问题"><span>三、解决不同文件相互引用全局变量初始化顺序不确定问题</span></a></h3><p>可以通过函数调用，引用的时候不直接引用全局变量，而是放在一个函数中。函数中的全局变量在调用时初始化。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> get_a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() { </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">　　static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">　　return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> a; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> get_b</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()  { </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">　　static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> get_a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(); </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">　　return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> b; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15)]))}const r=s(e,[["render",l],["__file","5.全局变量和static变量初始化问题.html.vue"]]),d=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/5.%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%92%8Cstatic%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98.html","title":"5.全局变量和static变量初始化问题","lang":"zh-CN","frontmatter":{"title":"5.全局变量和static变量初始化问题","description":"cpp 中全局变量和 static 变量初始化问题 一、初始化时机 全局变量、文件域中的静态变量、类中的成员静态变量在 main 函数执行前初始化 局部变量中的静态变量在第一次调用时初始化 局部静态变量，C 和 C++ 的区别： 在 C 语言中是编译期间初始化并分配内存，因此不能用变量给静态局部变量赋值，只能用常量 在 C++ 语言中是第一次执行时初始...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/5.%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%92%8Cstatic%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"5.全局变量和static变量初始化问题"}],["meta",{"property":"og:description","content":"cpp 中全局变量和 static 变量初始化问题 一、初始化时机 全局变量、文件域中的静态变量、类中的成员静态变量在 main 函数执行前初始化 局部变量中的静态变量在第一次调用时初始化 局部静态变量，C 和 C++ 的区别： 在 C 语言中是编译期间初始化并分配内存，因此不能用变量给静态局部变量赋值，只能用常量 在 C++ 语言中是第一次执行时初始..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5.全局变量和static变量初始化问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"cpp 中全局变量和 static 变量初始化问题","slug":"cpp-中全局变量和-static-变量初始化问题","link":"#cpp-中全局变量和-static-变量初始化问题","children":[{"level":3,"title":"一、初始化时机","slug":"一、初始化时机","link":"#一、初始化时机","children":[]},{"level":3,"title":"二、初始化顺序","slug":"二、初始化顺序","link":"#二、初始化顺序","children":[]},{"level":3,"title":"三、解决不同文件相互引用全局变量初始化顺序不确定问题","slug":"三、解决不同文件相互引用全局变量初始化顺序不确定问题","link":"#三、解决不同文件相互引用全局变量初始化顺序不确定问题","children":[]}]}],"git":{},"readingTime":{"minutes":3.12,"words":936},"filePathRelative":"编程语言/c++语言/编码技巧/5.全局变量和static变量初始化问题.md","excerpt":"<h2>cpp 中全局变量和 static 变量初始化问题</h2>\\n<h3>一、初始化时机</h3>\\n<ul>\\n<li>全局变量、文件域中的静态变量、类中的成员静态变量在 main 函数执行前初始化</li>\\n<li>局部变量中的静态变量在第一次调用时初始化</li>\\n</ul>\\n<p>局部静态变量，C 和 C++ 的区别：</p>\\n<ul>\\n<li>在 C 语言中是编译期间初始化并分配内存，因此不能用变量给静态局部变量赋值，只能用常量</li>\\n<li>在 C++ 语言中是第一次执行时初始化，因为 C++ 引入了对象的概念，对象一般需要构造函数，无法简单的分配内存，因此可以用变量赋值，并且在第一次使用时初始化</li>\\n</ul>","autoDesc":true}');export{r as comp,d as data};
