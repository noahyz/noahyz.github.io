import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as t}from"./app-D1zlwylF.js";const a="/assets/GMP%E6%A8%A1%E5%9E%8B-C7PslCFe.png",l="/assets/Goroutine%E7%8A%B6%E6%80%81%E5%88%87%E6%8D%A2-86wjrEth.png",o={};function r(d,i){return t(),e("div",null,i[0]||(i[0]=[n(`<h2 id="go语言调度器" tabindex="-1"><a class="header-anchor" href="#go语言调度器"><span>Go语言调度器</span></a></h2><p>虽然线程比较轻量，但是在调度时也有比较大的额外开销。每个线程会都占用 1M 以上的内存空间，在切换线程时不止会消耗较多的内存，恢复寄存器中的内容还需要向操作系统申请或者销毁资源，每一次线程上下文的切换都需要消耗 ~1us 左右的时间<a href="https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#fn:1" target="_blank" rel="noopener noreferrer">1</a>，但是 Go 调度器对 Goroutine 的上下文切换约为 ~0.2us，减少了 80% 的额外开销。</p><h3 id="一、go语言调度器的演进" tabindex="-1"><a class="header-anchor" href="#一、go语言调度器的演进"><span>一、Go语言调度器的演进</span></a></h3><h4 id="_1-单线程调度器-go-0-x-版本" tabindex="-1"><a class="header-anchor" href="#_1-单线程调度器-go-0-x-版本"><span>1. 单线程调度器 --- Go 0.x 版本</span></a></h4><p>程序中只能存在一个活跃线程，由 G-M 模型组成。执行流程</p><ul><li>获取调度器的全局锁</li><li>保存栈寄存器和程序计数器</li><li>获取下一个需要运行的 Goroutine 并解锁调度器</li><li>修改全局线程上要执行的 Goroutinue</li><li>运行最新的 Goroutinue</li></ul><p>这个单线程的调度器只能保证Go语言可以运行</p><h4 id="_2-多线程调度器-go-1-10-版本" tabindex="-1"><a class="header-anchor" href="#_2-多线程调度器-go-1-10-版本"><span>2. 多线程调度器 --- Go 1.10 版本</span></a></h4><p>允许运行多线程的程序；但是全局锁导致竞争严重，对调度器做的性能测试发现 14% 的时间都花费在锁上面。</p><p>整体的逻辑与单线程调度器没有太多区别，因为程序中可能同时存在多个活跃线程，所以多线程调度器引入了 <code>GOMAXPROCS</code> 变量帮助我们灵活控制程序中的最大处理器数，即活跃线程数。</p><p>这个调度器由如下问题需要解决：</p><ol><li>调度器和锁是全局资源，所有的调度状态都是中心化存储的，锁竞争问题严重；</li><li>线程需要经常互相传递可运行的 Goroutine，引入了大量的延迟；</li><li>每个线程都需要处理内存缓存，导致大量的内存占用并影响数据局部性；</li><li>系统调用频繁阻塞和解除阻塞正在运行的线程，增加了额外开销；</li></ol><h4 id="_3-任务窃取调度器-go-1-11-版本" tabindex="-1"><a class="header-anchor" href="#_3-任务窃取调度器-go-1-11-版本"><span>3. 任务窃取调度器 --- Go 1.11 版本</span></a></h4><p>构成了目前基础的 G-M-P模型，实现了基于工作窃取的调度器；在某些情况下，Goroutine 不会让出线程，进而造成饥饿问题；时间过长的垃圾回收（Stop-the-world，STW）会导致程序长时间无法工作。</p><p>主要分三个部分：</p><ol><li>如果当前运行时在等待垃圾回收，则调用 <code>runtime.gctopm</code> 函数，之后继续检测运行时是否等待垃圾回收，直到当前垃圾回收结束</li><li>调用 <code>runtime.runqget</code> 和 <code>runtime.find</code>从本地或者全局的运行队列中获取待执行的 Goroutine。如果当前处理器本地的运行队列中包包括 Goroutine 时，会调用 <code>runtime.findrunnable</code>触发工作窃取，从其他的处理器的队列中随机获取一些 Goroutine</li><li>调用 <code>runtime.execute</code>在当前线程M 上运行 Goroutine</li></ol><p>运行时 G-M-P 模型中的处理器 P 是线程和 Goroutine 的中间层，他的结构如下：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> P</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	Lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	uint32</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	status</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	P</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	link</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	uint32</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	tick</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	M</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	m</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 一个线程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	MCache</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	mcache</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	G</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	runq</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 由可运行的 Goroutine 组成的环形的运行队列 runq</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	runqhead</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	runqtail</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	runqsize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	G</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	gfree</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	gfreecnt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理器持有一个由可运行的 Goroutine 组成的环形的运行队列 <code>runq</code>，还反向持有一个线程。调度器在调度时会从处理器的队列中选择队列头的 Goroutine 放到线程 M 上执行。如下是线程 M、处理器 P、Goroutine 之间的关系</p><img src="`+a+`" style="zoom:50%;"><p>基于工作窃取的多线程调度器将每一个线程绑定到了独立的 CPU 上，这些线程会被不同处理器管理，不同的处理器通过工作窃取对任务进行再分配实现任务的平衡，也能提升调度器和 Go 语言程序的整体性能，</p><h4 id="_4-基于协作的抢占式调度器-go-1-12-到-go-1-13" tabindex="-1"><a class="header-anchor" href="#_4-基于协作的抢占式调度器-go-1-12-到-go-1-13"><span>4. 基于协作的抢占式调度器 --- Go 1.12 到 Go 1.13</span></a></h4><p>任务窃取调度器仍然不支持抢占式调度，程序只能依靠 Goroutine 主动让出 CPU 资源才能触发调度。因此引入了基于协作的抢占式调度器解决下面的问题：</p><ul><li>某些 Goroutine 可以长时间占用线程，造成其它 Goroutine 的饥饿</li><li>垃圾回收需要暂停整个程序（Stop-the-world，STW），最长可能需要几分钟的时间<a href="https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#fn:6" target="_blank" rel="noopener noreferrer">6</a>，导致整个程序无法工作</li></ul><p>通过编译器在函数调用时插入抢占检查指令，在函数调用时检查当前 Goroutine 是否发起了抢占请求，实现基于协作的抢占式调度。但是 还是存在一些无法被抢占的边缘情况，比如 Goroutine 可能会因为垃圾回收和循环长时间占用资源导致程序暂停</p><p>基于协作的抢占式调度的工作原理：</p><ol><li>编译器会在调用函数前插入 <code>runtime.morestack</code></li><li>Go 语言运行时会在垃圾回收暂停程序、系统监控发现 Goroutine 运行超过 10ms 时发出抢占请求 <code>StackPreempt</code></li><li>当发生函数调用时，可能会执行编译器插入的 <code>runtime.morestack</code>，它调用的 <code>runtime.newstack</code>会检查 Goroutine 的 <code>stackguard0</code> 字段是否为 <code>StackPreempt</code></li><li>如果 <code>stackguard0</code> 是 <code>StackPreempt</code>，就会触发抢占让出当前线程</li></ol><p>因为这里的抢占是通过编译器插入函数实现的，还是需要函数调用作为入口才能触发抢占，所以这是一种协作式的抢占式调度</p><h4 id="_5-基于信号的抢占式调度器-go-1-14-到-至今" tabindex="-1"><a class="header-anchor" href="#_5-基于信号的抢占式调度器-go-1-14-到-至今"><span>5. 基于信号的抢占式调度器 --- Go 1.14 到 至今</span></a></h4><p>实现基于信号的真抢占式调度；垃圾回收在扫描栈时会触发抢占调度；但是抢占的时间点不够多，还不能覆盖全部的边缘情况；</p><p>这种抢占式调度也只会在垃圾回收扫描任务时触发，他的运行过程：</p><ol><li>程序启动时，在 <code>runtime.sighandler</code>中注册 <code>SIGURG</code> 信号的处理函数 <code>runtime.doSigPreempt</code></li><li>在触发垃圾回收的栈扫描时会调用 <code>runtime.suspendG</code> 挂起 Goroutine，该函数会执行如下逻辑 <ol><li>将 _Grunning 状态的 Goroutine 标记成可以被抢占，将 <code>preemptStop</code> 设置成 <code>true</code></li><li>调用 <code>runtime.preemptM</code> 触发抢占</li></ol></li><li><code>runtime.preemptM</code> 会调用 <code>runtime.signalM</code> 向线程发送信号 SIGURG</li><li>操作系统会中断正在运行的线程并执行预先注册的信号处理函数 <code>runtime.doSigPreempt</code></li><li><code>runtime.doSigPreempt</code> 函数会处理抢占信号，获取当前的 SP 和 PC 寄存器并调用 <code>runtime.sigctxt.pushCall</code></li><li><code>runtime.sigctxt.pushCall</code>会修改寄存器并在程序回到用户态时执行 <code>runtime.asyncPreempt</code></li><li>汇编指令 <code>runtime.asyncPreempt</code>会调用运行时函数 <code>runtime.asyncPreempt2</code></li><li><code>runtime.asyncPreempt2</code>会调用 <code>runtime.preemptPark</code></li><li><code>runtime.preemptPark</code>会修改当前 Goroutine 的状态到 <code>_Gpreempted</code> 并调用 <code>runtime.schedule</code> 让当前函数陷入休眠并让出线程，调度器会选择其它的 Goroutine 继续执行</li></ol><p>为什么选择 SIGURG 信号来作为触发异步抢占的信号，有如下理由：</p><ol><li>该信号需要被调试器透传</li><li>该信号不会被内部的 libc 库使用并拦截</li><li>该信号可以随意出现并且不触发任何后果</li><li>我们需要处理多个平台上的不同信号</li></ol><p>STW 和栈扫描是一个可以抢占的安全点（Safe-points），所以 Go 语言会在这里先加入抢占功能。基于信号的抢占式调度只解决了垃圾回收和栈扫描时存在的问题，它到目前为止没有解决所有问题。</p><h3 id="二、gmp的数据结构" tabindex="-1"><a class="header-anchor" href="#二、gmp的数据结构"><span>二、GMP的数据结构</span></a></h3><ol><li>G — 表示 Goroutine，它是一个待执行的任务；</li><li>M — 表示操作系统的线程，它由操作系统的调度器调度和管理；</li><li>P — 表示处理器，它可以被看做运行在线程上的本地调度器；</li></ol><h4 id="_1-g-goroutine" tabindex="-1"><a class="header-anchor" href="#_1-g-goroutine"><span>1. G（Goroutine）</span></a></h4><p>Goroutine 占用的内存空间更小，也降低了上下文切换的开销。如下是 G 的结构</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> g</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	stack</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">       stack</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   // 栈内存范围 [stack.lo, stack.hi]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	stackguard0</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> uintptr</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 用于调度器抢占式调度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    _panic</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">       *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">_panic</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 最内侧的 panic 结构体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	_defer</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">       *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">_defer</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 最内侧的延迟函数结构体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    m</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">m</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      // 当前 Goroutine 占用的线程，可能为空</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	sched</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">        gobuf</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 存储 Goroutine 的调度相关数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    atomicstatus</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> uint32</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // Goroutine 的状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    goid</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">         int64</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // Goroutine 的 id </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    preempt</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">       bool</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 抢占信号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    preemptStop</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">   bool</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 抢占时将状态修改成 _Gpreempted</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    preemptShrink</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 在同步安全点收缩栈 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Goroutine 的状态，由如上的 atomicstatus 字段表示。除了几个已经不被使用的以及与 GC 相关的状态之外，Goroutine 可能处于以下 9 种状态：</p><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td><code>_Gidle</code></td><td>刚刚被分配并且还没有被初始化</td></tr><tr><td><code>_Grunnable</code></td><td>没有执行代码，没有栈的所有权，存储在运行队列中</td></tr><tr><td><code>_Grunning</code></td><td>可以执行代码，拥有栈的所有权，被赋予了内核线程 M 和处理器 P</td></tr><tr><td><code>_Gsyscall</code></td><td>正在执行系统调用，拥有栈的所有权，没有执行用户代码，被赋予了内核线程 M 但是不在运行队列上</td></tr><tr><td><code>_Gwaiting</code></td><td>由于运行时而被阻塞，没有执行用户代码并且不在运行队列上，但是可能存在于 Channel 的等待队列上</td></tr><tr><td><code>_Gdead</code></td><td>没有被使用，没有执行代码，可能有分配的栈</td></tr><tr><td><code>_Gcopystack</code></td><td>栈正在被拷贝，没有执行代码，不在运行队列上</td></tr><tr><td><code>_Gpreempted</code></td><td>由于抢占而被阻塞，没有执行用户代码并且不在运行队列上，等待唤醒</td></tr><tr><td><code>_Gscan</code></td><td>GC 正在扫描栈空间，没有执行代码，可以与其他状态同时存在</td></tr></tbody></table><p>Goroutine 在运行时中定义的状态非常多而且复杂，但是我们可以将这些不同的状态聚合成三种：等待中、可运行、运行中，运行期间会在这三种状态来回切换</p><ul><li>等待中：Goroutine 正在等待某些条件满足，例如：系统调用结束等，包括 <code>_Gwaiting</code>、<code>_Gsyscall</code> 和 <code>_Gpreempted</code> 几个状态；</li><li>可运行：Goroutine 已经准备就绪，可以在线程运行，如果当前程序中有非常多的 Goroutine，每个 Goroutine 就可能会等待更多的时间，即 <code>_Grunnable</code>；</li><li>运行中：Goroutine 正在某个线程上运行，即 <code>_Grunning</code>；</li></ul><img src="`+l+`" style="zoom:50%;"><h4 id="_2-m-操作系统线程" tabindex="-1"><a class="header-anchor" href="#_2-m-操作系统线程"><span>2. M（操作系统线程）</span></a></h4><p>调度器最多可以创建 10000 个线程，但是其中大多数的线程都不会执行用户代码（可能陷入系统调用），最多只会有 <code>GOMAXPROCS</code> 个活跃线程能够正常运行。在默认情况下，运行时会将 <code>GOMAXPROCS</code> 设置成当前机器的核数，我们也可以在程序中使用 <code>runtime.GOMAXPROCS</code> 来改变最大的活跃线程数。</p><h4 id="_3-p-处理器" tabindex="-1"><a class="header-anchor" href="#_3-p-处理器"><span>3. P（处理器）</span></a></h4><p>调度器中的处理器 P 是线程和 Goroutine 的中间层，它能提供线程需要的上下文环境，也会负责调度线程上的等待队列，通过处理器 P 的调度，每一个内核线程都能够执行多个 Goroutine，它能在 Goroutine 进行一些 I/O 操作时及时让出计算资源，提高线程的利用率。</p><p>因为调度器在启动时就会创建 <code>GOMAXPROCS</code> 个处理器，<strong>所以 Go 语言程序的处理器数量一定会等于 <code>GOMAXPROCS</code></strong>，这些处理器会绑定到不同的内核线程上。</p><p><code>runtime.p</code> 是处理器的运行时表示，字段包含性能追踪、垃圾回收和计时器相关的字段。如下我们关注处理器中的线程和运行队列</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	m</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">           muintptr</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	runqhead</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> uint32</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	runqtail</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> uint32</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	runq</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">     [</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">256</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">guintptr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	runnext</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> guintptr</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">	...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反向存储的线程维护着线程与处理器之间的关系，而 <code>runqhead</code>、<code>runqtail</code> 和 <code>runq</code> 三个字段表示处理器持有的运行队列，其中存储着待执行的 Goroutine 列表，<code>runnext</code> 中是线程下一个需要执行的 Goroutine。</p><p><code>runtime.p</code> 结构体中的状态 <code>status</code> 字段会是以下五种中的一种：</p><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td><code>_Pidle</code></td><td>处理器没有运行用户代码或者调度器，被空闲队列或者改变其状态的结构持有，运行队列为空</td></tr><tr><td><code>_Prunning</code></td><td>被线程 M 持有，并且正在执行用户代码或者调度器</td></tr><tr><td><code>_Psyscall</code></td><td>没有执行用户代码，当前线程陷入系统调用</td></tr><tr><td><code>_Pgcstop</code></td><td>被线程 M 持有，当前处理器由于垃圾回收被停止</td></tr><tr><td><code>_Pdead</code></td><td>当前处理器已经不被使用</td></tr></tbody></table><p>通过分析处理器 P 的状态，我们能够对处理器的工作过程有一些简单理解，例如处理器在执行用户代码时会处于 <code>_Prunning</code> 状态，在当前线程执行 I/O 操作时会陷入 <code>_Psyscall</code> 状态。</p><h3 id="三、调度过程" tabindex="-1"><a class="header-anchor" href="#三、调度过程"><span>三、调度过程</span></a></h3><ol><li><p><strong>调度器启动</strong>，获取到 GOMAXPROCS 变量的值作为当前创建的线程数，创建线程后，再创建相同数量的处理器并启动，然后等待用户创建新的 Goroutine 并为 Goroutine 调度处理器资源。</p></li><li><p><strong>创建 Goroutine</strong>，使用 go 关键字，底层会转换成 <code>runtime.newproc</code>函数调用，newproc 函数的入参是参数大小和表示函数的指针，他会获取 Goroutine 以及调用方的程序计数器，然后通过 <code>runtime.newproc1</code> 获取新的 Goroutine 结构体，将其加入处理器的运行队列并在满足条件时调用 <code>runtime.wakep</code>唤醒新的处理器执行 Goroutine。</p><ol><li><p>创建一个 Goroutine 结构体</p><p><code>runtime.newproc1</code> 会根据参数初始化一个 g 结构体，他的实现为：</p><ol><li>获取或者创建新的 Goroutine 结构体。会先从处理器的 gFree 列表中查找空闲的 Goroutine，如果不存在空间的 Goroutine，会通过 <code>runtime.malg</code>创建一个栈大小足够的新结构体</li><li>将传入的参数移到 Goroutine 的栈上</li><li>更新 Goroutine 调度相关的属性，包括栈指针、程序计数器并更新其状态到 <code>_Grunnable</code> 并返回。</li></ol></li><li><p>将其加入到运行队列上</p><p>这里的运行队列，既可能是全局的运行队列，也可能是处理器本地的运行队列。优先加入到处理器本地的运行队列，如果处理器本地的运行队列没有剩余空间时就会把本地队列中的一部分 Goroutine 和待加入的 Goroutine 通过 <code>runtime.runqputslow</code> 添加到调度器持有的全局运行队列上</p><p>处理器本地的运行队列是一个使用数组构成的环形链表，他最多存储 256 个待执行任务</p></li><li><p>设置调度信息</p><p>设置程序计数器等等</p></li></ol></li><li><p><strong>调度循环</strong>，调度器启动后，会初始化线程并调用 <code>runtime.schedule</code>进入调度循环，会从这几个地方查找待执行的 Goroutine</p><ol><li>为了保证公平，当全局运行队列中有待执行的 Goroutine 时，通过 <code>schedtick</code> 保证有一定几率会从全局的运行队列中查找对应的 Goroutine</li><li>从处理器本地的运行队列中查找待执行的 Goroutine</li><li>如果前两种方法都没有找到 Goroutine，会通过 <code>runtime.findrunnable</code>进行阻塞地查找 Goroutine。这个函数一定会返回一个可执行的 Goroutine，如果当前不存在就阻塞等待</li></ol><p>当获取到 Goroutine 后，会通过 <code>runtime.execute</code>执行获取的 Goroutine，做好准备工作后，他会通过 <code>runtime.gogo</code>将 Goroutine 调度到当前线程上。而 Go 语言正常的函数调用会使用 CALL 指令，该指令会将调用方的返回地址加入栈寄存器 SP 中，然后跳转到目标函数；当目标函数返回后，会从栈中查找调用的地址并跳转回调方继续执行剩下的代码。因此这个 Goroutine 执行完需要切换时，会设置 Goroutine 的状态为 _Gdead 状态、清理其中的字段、移除 Goroutine 和线程的关联并重新加入处理器的 Goroutine 的空闲列表 gFree。然后触发新一轮的 Goroutine 调度。这就是调度循环</p></li><li><p>触发调度，运行时调度的几个条件。下面的调度时间点是通过调度器 <code>runtime.schedule</code>重新调度的</p><ol><li>主动挂起，将当前 Goroutine 暂停，被暂停的任务不会放回运行队列。然后将 Goroutine 的状态从 <code>_Grunning</code> 切换至 <code>_Gwaiting</code>，移除线程和 Goroutine 之间的关联。当 Goroutine 等待的特定条件满足后，运行时会唤醒陷入休眠的 Goroutine，并将其状态切换到 _Grunnable ，且将其加入处理器的运行队列，等待调度器的调度。</li><li>系统调用</li><li>协作式调度</li><li>系统监控</li></ol></li></ol><h3 id="四、线程管理" tabindex="-1"><a class="header-anchor" href="#四、线程管理"><span>四、线程管理</span></a></h3><p>Go语言运行时会通过调度器改变线程的所有权，它也提供了 <code>runtime.LockOSThread</code>和 <code>runtime.UnlockOSThread</code>让我们有能力绑定 Goroutine 和线程完成一些比较特殊的操作。 比如调用操作系统服务或者依赖线程状态的非 go 语言库，C 语言图形库等。一般使用 cgo 的时候会用到</p><p>什么时候销毁线程？</p><p>Go 语言的运行时会通过 <code>runtime.startm</code> 启动线程来执行处理器 P，如果我们在该函数中没能从闲置列表中获取到线程 M 就会调用 <code>runtime.newm</code>创建新的线程。创建新线程就要使用 <code>runtime.newproc</code> 函数，该函数在 linux 上就会调用系统调用 clone 创建系统线程。使用系统调用 <code>clone</code> 创建的线程会在线程主动调用 <code>exit</code>、或者传入的函数 <code>runtime.mstart</code>返回会主动退出，<code>runtime.mstart</code> 会执行调用 <code>runtime.newm</code> 时传入的匿名函数 <code>fn</code>，到这里也就完成了从线程创建到销毁的整个闭环。</p>`,62)]))}const c=s(o,[["render",r],["__file","11.GMP调度.html.vue"]]),k=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/11.GMP%E8%B0%83%E5%BA%A6.html","title":"11.Go语言调度器","lang":"zh-CN","frontmatter":{"title":"11.Go语言调度器","date":"2023-01-19T11:11:41.000Z","tags":["go"],"description":"Go语言调度器 虽然线程比较轻量，但是在调度时也有比较大的额外开销。每个线程会都占用 1M 以上的内存空间，在切换线程时不止会消耗较多的内存，恢复寄存器中的内容还需要向操作系统申请或者销毁资源，每一次线程上下文的切换都需要消耗 ~1us 左右的时间1，但是 Go 调度器对 Goroutine 的上下文切换约为 ~0.2us，减少了 80% 的额外开销。...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/11.GMP%E8%B0%83%E5%BA%A6.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"11.Go语言调度器"}],["meta",{"property":"og:description","content":"Go语言调度器 虽然线程比较轻量，但是在调度时也有比较大的额外开销。每个线程会都占用 1M 以上的内存空间，在切换线程时不止会消耗较多的内存，恢复寄存器中的内容还需要向操作系统申请或者销毁资源，每一次线程上下文的切换都需要消耗 ~1us 左右的时间1，但是 Go 调度器对 Goroutine 的上下文切换约为 ~0.2us，减少了 80% 的额外开销。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"11.Go语言调度器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"Go语言调度器","slug":"go语言调度器","link":"#go语言调度器","children":[{"level":3,"title":"一、Go语言调度器的演进","slug":"一、go语言调度器的演进","link":"#一、go语言调度器的演进","children":[]},{"level":3,"title":"二、GMP的数据结构","slug":"二、gmp的数据结构","link":"#二、gmp的数据结构","children":[]},{"level":3,"title":"三、调度过程","slug":"三、调度过程","link":"#三、调度过程","children":[]},{"level":3,"title":"四、线程管理","slug":"四、线程管理","link":"#四、线程管理","children":[]}]}],"git":{},"readingTime":{"minutes":14.92,"words":4476},"filePathRelative":"编程语言/go语言/底层实现/11.GMP调度.md","localizedDate":"2023年1月19日","excerpt":"<h2>Go语言调度器</h2>\\n<p>虽然线程比较轻量，但是在调度时也有比较大的额外开销。每个线程会都占用 1M 以上的内存空间，在切换线程时不止会消耗较多的内存，恢复寄存器中的内容还需要向操作系统申请或者销毁资源，每一次线程上下文的切换都需要消耗 ~1us 左右的时间<a href=\\"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#fn:1\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">1</a>，但是 Go 调度器对 Goroutine 的上下文切换约为 ~0.2us，减少了 80% 的额外开销。</p>","autoDesc":true}');export{c as comp,k as data};
