import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,o as e}from"./app-D1zlwylF.js";const d={};function l(h,t){return e(),s("div",null,t[0]||(t[0]=[a(`<h2 id="对于原子操作的理解" tabindex="-1"><a class="header-anchor" href="#对于原子操作的理解"><span>对于原子操作的理解</span></a></h2><h3 id="一、概念理解" tabindex="-1"><a class="header-anchor" href="#一、概念理解"><span>一、概念理解</span></a></h3><p><strong>原子操作</strong>：是一个不可分割的操作，从系统中的任何一个线程中，你都无法观察到完成了一半的这种操作，它要么做完了，要么没有做完。如果读取对象值的载入操作是原子的，并且所有对该对象的修改也都是原子的，那么这个载入操作所获得得要么是对象的初始值，要么是被修改者修改后的值。</p><p><strong>CAS</strong> 的意思：是 <code>Compare &amp; Set</code> 或者 <code>Compare &amp; Swap</code>。整个过程是原子的。现代几乎所有的CPU指令都支持 CAS 的原子操作，X86 下对应的是 CMPXCHG 汇编指令。</p><p>在 c++ 的 atomic 中关于 CAS 的实现有两种：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> compare_exchange_weak</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> expected</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">memory_order</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> sync</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> memory_order_seq_cst) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">noexcept</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> compare_exchange_strong</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> expected</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">memory_order</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> sync</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> memory_order_seq_cst) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">noexcept</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>功能：如果原子变量值和期望值相等，则将原子变量值替换为 val。如果原子变量值和期望值不相等，则将期望值替换为原子变量值。两个函数的功能一致。默认使用 memory_order_seq_cst 内存顺序。</p><p>区别：compare_exchange_wak 有可能出现虚假失败，即原子变量值和期望值相等的情况下，依然返回失败。这种情况下原子变量值是不会变化的。这种情况最有可能发生在缺少单个的比较并交换指令的机器上或者某些平台使用伪指令(不是X86上的指令)，在这样的平台上，上下文切换，另一个线程重新加载相同的地址（或缓存行）等可能会使原语失败。因此 compare_exchange_wak 通常用在循环中：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> expected </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">extern</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> atomic</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;bool&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">compare_exchange_weak</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(expected, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">expected);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，只要 expected 仍为 false，表明 compare_exchange_wak 调用虚假失败，应该保持循环。</p><p>而 compare_exchange_strong 没有这种虚假失败，</p><p>如果待存储的值很简单，为了避免在 compare_exchange_weak 可能会虚假失败进行循环也还好。但如果待存储的值本身是耗时的，当个 expected 值没有变化时，使用 compare_exchange_strong 来避免被迫重新计算待存储的值可能是有意义的。并且虚假失败通常很少发生，compare_exchange_weak 的性能往往比 compare_exchange_strong 要快很多。</p><p>因此，简单来说，c++ 为我们提供这两种语义，一种是“尽力而为”，一种是“我一定会做到，无论中间有多少坏事发生”。</p><h3 id="二、c-中的原子操作-atomic" tabindex="-1"><a class="header-anchor" href="#二、c-中的原子操作-atomic"><span>二、c++ 中的原子操作 atomic</span></a></h3><p>原子操作有三类：</p><ul><li>读：在读取的过程中，读取位置的内容不会发生任何变动。</li><li>写：在写入的过程中，其他执行线程不会看到部分写入的结果。</li><li>读‐修改‐写：读取内存、修改数值、然后写回内存，整个操作的过程中间不会有其他写入操作插入，其他执行线程不会看到部分写入的结果。</li></ul><p>关于 volatile 和原子类型：Java 和 C++ 都有 volatile 关键字。但同样的关键字在不同的语言中有着不同的含义。Java 中的 volatile 和 C++ 的原子类型是类似的含义。而 C++ 中的 volatile 是禁止编译器对这个变量进行优化。</p><p>我们来看看 c++ 中为我们提供的 atomic 原子操作。c++ 中 atomic 是模版类，支持多种不同的类型，主要分为四大类，包括 <code>atomic_flag</code> 、<code>atomic_bool</code>、<code>atomic_指针类型</code>、<code>atomic_整形类型</code>。表格无差别的列出了 atomic 支持的原子操作，以及不同的类型对应对应的不同的原子操作。</p><table><thead><tr><th>操作</th><th>atomic_flag</th><th>atomic_bool</th><th>atomic_指针类型</th><th>atomic_整形类型</th><th>说明</th></tr></thead><tbody><tr><td>test_and_set 操作</td><td>Y</td><td></td><td></td><td></td><td>将 flag 设为 true 并返回原先的值</td></tr><tr><td>clear 操作</td><td>Y</td><td></td><td></td><td></td><td>将 flag 设置为 false</td></tr><tr><td>store 操作</td><td></td><td>Y</td><td>Y</td><td>Y</td><td>写入对象到原子对象中</td></tr><tr><td>load 操作</td><td></td><td>Y</td><td>Y</td><td>Y</td><td>从原子对象读取到内置对象</td></tr><tr><td>is_lock_free 操作</td><td></td><td>Y</td><td>Y</td><td>Y</td><td>判断对原子对象的操作是否无锁</td></tr><tr><td>exchange 交换操作</td><td></td><td>Y</td><td>Y</td><td>Y</td><td>这是读‐修改‐写操作</td></tr><tr><td>compare_exchange_weak</td><td></td><td>Y</td><td>Y</td><td>Y</td><td>比较加交换（CAS），存在虚假失败</td></tr><tr><td>compare_exchange_strong</td><td></td><td>Y</td><td>Y</td><td>Y</td><td>比较加交换（CAS），不存在虚假失败</td></tr><tr><td>fetch_add</td><td></td><td></td><td>Y</td><td>Y</td><td>仅对整数和指针内置对象有效，对目标原子对象执行加操作，返回其原始值</td></tr><tr><td>fetch_sub</td><td></td><td></td><td>Y</td><td>Y</td><td>仅对整数和指针内置对象有效，对目标原子对象执行加操作，返回其原始值</td></tr><tr><td>++ 和 -- 操作（前置和后置）</td><td></td><td></td><td>Y</td><td>Y</td><td>仅对整数和指针内置对象有效，对目标原子对象执行增一或减一，操作使用顺序一致性语义，并注意返回的不是原子对象的引用（这是读‐修改‐写操作）</td></tr><tr><td>+= 和 -= 操作</td><td></td><td></td><td>Y</td><td>Y</td><td>仅对整数和指针内置对象有效，对目标原子对象执行加或减操作，返回操作之后的数值，操作使用顺序一致性语义，并注意返回的不是原子对象的引用（这是读‐修改‐写操作）</td></tr><tr><td>fetch_or, |=</td><td></td><td></td><td></td><td>Y</td><td>求或并赋值</td></tr><tr><td>fetch_and, &amp;=</td><td></td><td></td><td></td><td>Y</td><td>求与并赋值</td></tr><tr><td>fetch_xor, ^=</td><td></td><td></td><td></td><td>Y</td><td>求异或并赋值</td></tr></tbody></table><p>注意：</p><ul><li>所有的原子操作都不支持拷贝和赋值。因为该操作涉及了两个原子对象：要先从另外一个原子对象上读取值，然后再写入另外一个原子对象。而对于两个不同的原子对象上单一操作不可能是原子的。</li><li>没有浮点类型的原子类型</li><li>没有原子操作的乘法和除法</li></ul><h4 id="_1-atomic-flag" tabindex="-1"><a class="header-anchor" href="#_1-atomic-flag"><span>1. atomic_flag</span></a></h4><p>他是一个 bool 类型的原子类型。只有两个状态，设置（值为 true）或者清除（值为 false）。注意 atomic_flag 必须通过 <code>ATOMIC_FLAG_INIT</code> 初始化，将其设置为清除状态。只能这样做</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::atomic_flag flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ATOMIC_FLAG_INIT;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>初始化之后，<code>atomic_flag</code> 支持两种操作 <code>test_and_set</code> 和 <code>clear</code> 操作。如上面的表格介绍</p><h5 id="_2-is-lock-free" tabindex="-1"><a class="header-anchor" href="#_2-is-lock-free"><span>2. is_lock_free</span></a></h5><p>通过此接口可以得知这个对象上的原子操作是否无锁。</p><p>atomic_flag 类型不支持 is_lock_free 操作，其他的原子类型都支持这个操作。C++ 规范要求 atomic_flag 的原子操作都是无锁的，其他的原子类型是否无锁就要看具体的平台实现了。</p><h4 id="_3-读、写、交换" tabindex="-1"><a class="header-anchor" href="#_3-读、写、交换"><span>3. 读、写、交换</span></a></h4><p>原子操作不支持拷贝和赋值操作，提供了如下操作来读、写、交换值。</p><ul><li>load：原子的获取原子对象的值</li><li>store：原子的以非原子对象替换原子对象的值</li><li>exchange：原子的替换原子对象的值，并获取他之前持有的值</li></ul><p>这三种操作，使用的参数和返回值都是非原子类型的。</p><h4 id="_4-指针原子类型" tabindex="-1"><a class="header-anchor" href="#_4-指针原子类型"><span>4. 指针原子类型</span></a></h4><p>对于某种类型 T 的原子类型是： <code>atomic&lt;T*&gt;</code> 。</p><p>指针类型除了一些正常的操作之外，还包括通过偏移值调整指针位置的操作：</p><ul><li>fetch_add 和 +=：原子的增加指定的值</li><li>fetch_sub 和 -=：原子的减少指定的值</li><li>++ 和 --：原子的自增或者自减</li></ul><h4 id="_5-整形原子类型" tabindex="-1"><a class="header-anchor" href="#_5-整形原子类型"><span>5. 整形原子类型</span></a></h4><p>整形原子类型除了一些正常的操作之外，还包括一些位运算。支持：“或”、“与”、“异或”三种逻辑操作。</p><p>还有需要注意的是：</p><ul><li>所有命名函数：比如 <code>fet_add</code>、<code>fetch_or</code> 等返回的都是修改前的数值。</li><li>所有复合赋值运算符：比如：<code>+=</code>、<code>-=</code>、<code>|=</code> 等返回的是修改后的值。</li></ul><h3 id="三、简单总结" tabindex="-1"><a class="header-anchor" href="#三、简单总结"><span>三、简单总结</span></a></h3><p>本小节我们对原子操作进行了分享，不过大家可能发现 atomic 的那些操作，有一个参数用来指定 <code>memory ordering</code>。比如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>T load (memory_order sync = memory_order_seq_cst) const volatile noexcept;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>memory order</code> 是一个比较重要的话题，我们留到下节重点分享。</p><p>本节内容主要分享原子操作是什么，以及 c++ 中的 atomic 原子操作的使用方式。</p>`,45)]))}const p=i(d,[["render",l],["__file","2.对于原子操作的理解.html.vue"]]),k=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/2.%E5%AF%B9%E4%BA%8E%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%9A%84%E7%90%86%E8%A7%A3.html","title":"2. 对于原子操作的理解","lang":"zh-CN","frontmatter":{"title":"2. 对于原子操作的理解","description":"对于原子操作的理解 一、概念理解 原子操作：是一个不可分割的操作，从系统中的任何一个线程中，你都无法观察到完成了一半的这种操作，它要么做完了，要么没有做完。如果读取对象值的载入操作是原子的，并且所有对该对象的修改也都是原子的，那么这个载入操作所获得得要么是对象的初始值，要么是被修改者修改后的值。 CAS 的意思：是 Compare & Set 或者 C...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/2.%E5%AF%B9%E4%BA%8E%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%9A%84%E7%90%86%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"2. 对于原子操作的理解"}],["meta",{"property":"og:description","content":"对于原子操作的理解 一、概念理解 原子操作：是一个不可分割的操作，从系统中的任何一个线程中，你都无法观察到完成了一半的这种操作，它要么做完了，要么没有做完。如果读取对象值的载入操作是原子的，并且所有对该对象的修改也都是原子的，那么这个载入操作所获得得要么是对象的初始值，要么是被修改者修改后的值。 CAS 的意思：是 Compare & Set 或者 C..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2. 对于原子操作的理解\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"对于原子操作的理解","slug":"对于原子操作的理解","link":"#对于原子操作的理解","children":[{"level":3,"title":"一、概念理解","slug":"一、概念理解","link":"#一、概念理解","children":[]},{"level":3,"title":"二、c++ 中的原子操作 atomic","slug":"二、c-中的原子操作-atomic","link":"#二、c-中的原子操作-atomic","children":[]},{"level":3,"title":"三、简单总结","slug":"三、简单总结","link":"#三、简单总结","children":[]}]}],"git":{},"readingTime":{"minutes":6.62,"words":1986},"filePathRelative":"技术专题/9天带你走进无锁化编程/2.对于原子操作的理解.md","excerpt":"<h2>对于原子操作的理解</h2>\\n<h3>一、概念理解</h3>\\n<p><strong>原子操作</strong>：是一个不可分割的操作，从系统中的任何一个线程中，你都无法观察到完成了一半的这种操作，它要么做完了，要么没有做完。如果读取对象值的载入操作是原子的，并且所有对该对象的修改也都是原子的，那么这个载入操作所获得得要么是对象的初始值，要么是被修改者修改后的值。</p>\\n<p><strong>CAS</strong> 的意思：是 <code>Compare &amp; Set</code> 或者 <code>Compare &amp; Swap</code>。整个过程是原子的。现代几乎所有的CPU指令都支持 CAS 的原子操作，X86 下对应的是 CMPXCHG 汇编指令。</p>","autoDesc":true}');export{p as comp,k as data};
