import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as e,o as r}from"./app-D1zlwylF.js";const o={};function a(i,n){return r(),c("div",null,n[0]||(n[0]=[e("h3",{id:"c-c-错误之-undefined-reference-未定义的问题",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#c-c-错误之-undefined-reference-未定义的问题"},[e("span",null,"c/c++错误之 Undefined reference 未定义的问题")])],-1),e("p",null,"首先看一看链接器的作用。在构建c++程序的时候，几乎所有的程序都由多个c++源文件组成。使用c++编译器分别编译这些文件，以生成包含机器代码的目标文件(.o 或者 .obj 文件)，每个目标文件对其他文件一无所知。所以，如果从另一个目标文件中存在的一个目标文件调用函数，则编译器将无法提供被调用函数的地址。",-1),e("p",null,"一旦生成了所有的目标文件，想要生成最终的可执行文件，那么链接器就会查看他们并计算出可执行文件中函数的最终地址是什么。然后他修补了编译器无法提供的地址。对于可能使用的任何库(.a 和 .lib 文件) ，他都执行相同的操作。最后，他将可执行文件写到磁盘。",-1),e("p",null,"链接器通常是与编译器分开的程序，例如：gcc 链接器成为 ld。传统上，链接器技术落后于编译器，主要是因为构建编译器比构建链接器通常更加有趣。并且链接程序不一定有权访问他们正在链接的目标文件的源代码。",-1),e("p",null,"好了，清楚了这个，未定义的错误就很明显了。“undefined reference” 错误意味着程序中的名称（函数、变量、常量等）具有引用，链接器在查找时找不到其定义。",-1),e("p",null,"比如：1: 调用的函数真的没有定义。 2: 定义的函数或其他与声明的不一样",-1),e("p",null,"注意：头文件(.h文件)不是库。链接器既不知道也不在乎头文件，他只在乎 .a 和 .lib 文件。因此，如果出现使用的库中出现了链接错误，则很大概率是因为没有和这个库建立链接。",-1),e("p",null,"后记：未解决的问题可能有很多种原因，但是这些错误都不是无缘无故的发生的，发生错误总意味着代码里面或者项目的配置当中做错了什么。我们只需要坐下来，想一想整体的流程，逻辑性的思考出现问题的原因，并弄清楚为什么？不要放弃，连前人已经研究好的东西拿来用出错都想放弃，那还如何去创新一个新的东西。",-1)]))}const p=t(o,[["render",a],["__file","cc__错误之 Undefined reference 未定义的问题.html.vue"]]),E=JSON.parse('{"path":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/cc__%E9%94%99%E8%AF%AF%E4%B9%8B%20Undefined%20reference%20%E6%9C%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E9%97%AE%E9%A2%98.html","title":"c和c++链接未定义的问题","lang":"zh-CN","frontmatter":{"title":"c和c++链接未定义的问题","date":"2020-10-06T16:19:17.000Z","tags":["c++链接"],"description":"c/c++错误之 Undefined reference 未定义的问题 首先看一看链接器的作用。在构建c++程序的时候，几乎所有的程序都由多个c++源文件组成。使用c++编译器分别编译这些文件，以生成包含机器代码的目标文件(.o 或者 .obj 文件)，每个目标文件对其他文件一无所知。所以，如果从另一个目标文件中存在的一个目标文件调用函数，则编译器将无...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/cc__%E9%94%99%E8%AF%AF%E4%B9%8B%20Undefined%20reference%20%E6%9C%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"c和c++链接未定义的问题"}],["meta",{"property":"og:description","content":"c/c++错误之 Undefined reference 未定义的问题 首先看一看链接器的作用。在构建c++程序的时候，几乎所有的程序都由多个c++源文件组成。使用c++编译器分别编译这些文件，以生成包含机器代码的目标文件(.o 或者 .obj 文件)，每个目标文件对其他文件一无所知。所以，如果从另一个目标文件中存在的一个目标文件调用函数，则编译器将无..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"c++链接"}],["meta",{"property":"article:published_time","content":"2020-10-06T16:19:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c和c++链接未定义的问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-10-06T16:19:17.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"c/c++错误之 Undefined reference 未定义的问题","slug":"c-c-错误之-undefined-reference-未定义的问题","link":"#c-c-错误之-undefined-reference-未定义的问题","children":[]}],"git":{},"readingTime":{"minutes":2.16,"words":647},"filePathRelative":"操作系统/问题排查/cc++错误之 Undefined reference 未定义的问题.md","localizedDate":"2020年10月7日","excerpt":"<h3>c/c++错误之 Undefined reference 未定义的问题</h3>\\n<p>首先看一看链接器的作用。在构建c++程序的时候，几乎所有的程序都由多个c++源文件组成。使用c++编译器分别编译这些文件，以生成包含机器代码的目标文件(.o 或者 .obj 文件)，每个目标文件对其他文件一无所知。所以，如果从另一个目标文件中存在的一个目标文件调用函数，则编译器将无法提供被调用函数的地址。</p>\\n<p>一旦生成了所有的目标文件，想要生成最终的可执行文件，那么链接器就会查看他们并计算出可执行文件中函数的最终地址是什么。然后他修补了编译器无法提供的地址。对于可能使用的任何库(.a 和 .lib 文件) ，他都执行相同的操作。最后，他将可执行文件写到磁盘。</p>","autoDesc":true}');export{p as comp,E as data};
