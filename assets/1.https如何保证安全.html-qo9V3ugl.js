import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as i,o as a}from"./app-D1zlwylF.js";const s="/assets/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86-BwhFVTmE.png",n="/assets/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86-DGXbuJMK.png",p="/assets/https%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F-CVJqSzo3.png",r="/assets/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB-1tamyp-X.png",h={};function o(c,t){return a(),l("div",null,t[0]||(t[0]=[i('<h3 id="一、http-的不足" tabindex="-1"><a class="header-anchor" href="#一、http-的不足"><span>一、HTTP 的不足</span></a></h3><ul><li>通信使用明文传输，内容可能会被窃听</li><li>不验证通信方的身份，有可能遭到伪装。服务端和客户端都有可能伪装。</li><li>无法证明报文的完整性，所以有可能已经遭到篡改。像这样，请求或响应在传输途中遭到攻击者拦截并篡改内容，称为“中间人攻击”</li></ul><p>通常认为，如果通信过程具备了四个特性，就可以认为是安全的，四个特性是：机密性、完整性、身份认证和不可否认</p><ul><li>机密性：对数据的保密，只能由可信的人访问，对其他人是不可见的秘密</li><li>完整性：也称为一致性，数据在传输过程中没有被篡改，保持原状</li><li>身份认证：确认对方的真实身份，保证消息只能发送给可信的人。如果通信的另一方是假冒的网站，那么数据再保密也没用，黑客完全可以使用冒充的身体套出各种信息，加密和没有加密一样</li><li>不可否认：也叫不可抵赖，不能否认已经发生过的行为。保证通信事务的真实性。比如小明借小红一千块，没写借条，第二天否认，小红没有证据只能认倒霉。另一种情况，小明借钱后还给了小红，但没写收条，小红不承认小明还钱的事，还要小明掏一千块。</li></ul><p>同时满足机密性、完整性、身份认证、不可否认这四个特性，通信双方的利益才能有保障，才安全。</p><h3 id="二、https-的原理" tabindex="-1"><a class="header-anchor" href="#二、https-的原理"><span>二、HTTPS 的原理</span></a></h3><p>通常 HTTP 通过 TCP 通信，那么 HTTPS 则先与 TLS/SSL 通信，然后 TLS/SSL 再和 TCP 层通信。</p><h3 id="_1-对称加密" tabindex="-1"><a class="header-anchor" href="#_1-对称加密"><span>1. 对称加密</span></a></h3><p>加密和解密使用同一个 “密钥”，称为对称密钥加密。</p><img src="'+s+'" style="zoom:35%;"><ul><li>浏览器发送给服务器 “自身支持的加密方法和 client_random”</li><li>服务器一种加密方法，发送给浏览器，同时发送 server_random</li><li>现在浏览器和服务器有了三个相同的凭证：client_random、server_random 和加密方法。于是使用这两个随机数 client_random、server_random，通过加密方法，生成密钥。</li><li>那么接下来的数据报文就通过这个密钥进行加密、解密了</li></ul><p>存在问题：第三方可以截获 client_random、server_random 和加密方法。因此数据有报文可能不安全</p><h3 id="_2-非对称加密" tabindex="-1"><a class="header-anchor" href="#_2-非对称加密"><span>2. 非对称加密</span></a></h3><img src="'+n+'" style="zoom:50%;"><ul><li>浏览器发送给服务器 “自身支持的加密方法”</li><li>服务器选择一种加密方法，发送给浏览器，同时发送自身的 “公钥”</li><li>之后浏览器通过公钥将数据加密传输给服务器，服务器收到数据后使用 “私钥” 进行解密。服务器给浏览器发送数据，则使用 “私钥” 进行加密，浏览器收到服务器发送过来的数据，使用公钥进行解密</li></ul><p>存在问题：</p><ul><li><strong>非对称加密效率太低</strong>，这会严重影响加密、解密的效率，进而影响到数据的传输效率</li><li><strong>无法保证服务器发送给浏览器的数据安全</strong>，服务器的数据只能用私钥进行加密（因为如果他用公钥，那么浏览器没法解密），中间人一旦拿到公钥，那么就可以对服务器传来的数据进行解密了。</li></ul><h3 id="_3-ca-数字证书" tabindex="-1"><a class="header-anchor" href="#_3-ca-数字证书"><span>3. CA（数字证书）</span></a></h3><p>使用对称和非对称加密混合的方式，可以实现了数据的加密传输，但是服务器可能是黑客的服务器。黑客可以在自己的服务器上实现公钥和私钥，而对浏览器来说，他并不知道自己访问的是黑客的站点。</p><p>服务器需要证明自己的身份，需要使用权威机构颁发的证书，这个权威机构就是 CA（Certificate Authority），颁发的证书就称为数字证书（Digital Certificate）。</p><p>对于浏览器来说，数字证书有两个作用：</p><ul><li>通过数字证书向浏览器证明服务器的身份</li><li>数字证书里面包含了服务器公钥</li></ul><h3 id="_4-https-使用-对称加密-非对称加密-ca证书-组合" tabindex="-1"><a class="header-anchor" href="#_4-https-使用-对称加密-非对称加密-ca证书-组合"><span>4. https 使用 “对称加密+非对称加密+CA证书” 组合</span></a></h3><p>传输数据阶段依然使用对称加密，但是对称加密的密钥采用非对称加密传输。</p><img src="'+p+'" style="zoom:50%;"><ul><li>浏览器向服务器发送 client_random 和支持的加密方式列表</li><li>服务器收到后，返回 server_random 和选择的加密方式，以及数字证书（包含了公钥）</li><li>浏览器会去验证这个数字证书，证书验证没有问题之后才进行接下来的步骤</li><li>浏览器会生成另一个随机数 pre_master，并且用公钥加密，传给服务器</li><li>服务器用私钥解密，得到 pre_master</li><li>到此为止，服务器和浏览器就有了相同的 client_random、server_random 和 pre_master，然后服务器和浏览器会使用这三组随机数生成对称密钥。有了对称密钥之后，双方就可以使用对称加密的方式来传输数据了</li></ul><h3 id="三、https-就绝对安全了吗" tabindex="-1"><a class="header-anchor" href="#三、https-就绝对安全了吗"><span>三、HTTPS 就绝对安全了吗？</span></a></h3><h4 id="_1-中间人攻击" tabindex="-1"><a class="header-anchor" href="#_1-中间人攻击"><span>1. 中间人攻击</span></a></h4><p>基于 HTTPS 交互的过程中，在通信的过程中公钥被掉包。也就是说，中间人通过网络劫持，将通信过程中的公钥替换成自己的，然后假装自己是服务器，与客户端进行通信。从而对信息进行窃取或篡改。</p><img src="'+r+'" style="zoom:35%;"><p>我们知道，公钥和证书都是可以自己进行生成，虽然发起了 HTTPS 的请求，但是如果证书和公钥无法保证是否被替换，传输的安全性就无法保证。因此 CA 证书可以检测证书是否可信，证书是否合法。</p><p>当浏览器获取到假公钥时，通过对比验证会发现不合法，然后浏览器会提醒用户，访问有风险。但用户仍然授权信任证书继续操作的话，数据就无法保证安全了。</p><h3 id="_2-本地随机数的安全" tabindex="-1"><a class="header-anchor" href="#_2-本地随机数的安全"><span>2. 本地随机数的安全</span></a></h3><p>在 https 内容传输时，采用的是对称加密，因此密钥在客户端和服务端都有存储。针对本地存储是随机数，https 并不能保证他的安全。https 重点关注的是数据传输过程中的安全。</p><p>本地的安全，可以通过安装杀毒软件、浏览器升级修复漏洞的方式来规避。</p><h3 id="四、https-的抓包" tabindex="-1"><a class="header-anchor" href="#四、https-的抓包"><span>四、HTTPS 的抓包</span></a></h3><p>https 的数据是加密的，常规抓包工具，无法查看加密内容。</p><p>通常 https 的抓包工具的原理是：生成一个证书，用户手动将证书安装到客户端，然后客户端发起的所有请求通过该证书完成与抓包工具的交互，然后抓包工具再转发请求到服务器，最后把服务器返回的结果进行输出，从而完成整个请求的闭环。</p><p>https 可以防止用户在不知情的情况下通信链路被监听。但是对于主动授权的抓包操作是不提供防护的。因为这个场景用户是已经对风险知情。</p>',39)]))}const _=e(h,[["render",o],["__file","1.https如何保证安全.html.vue"]]),A=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/1.https%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%AE%89%E5%85%A8.html","title":"1.https如何保证安全","lang":"zh-CN","frontmatter":{"title":"1.https如何保证安全","description":"一、HTTP 的不足 通信使用明文传输，内容可能会被窃听 不验证通信方的身份，有可能遭到伪装。服务端和客户端都有可能伪装。 无法证明报文的完整性，所以有可能已经遭到篡改。像这样，请求或响应在传输途中遭到攻击者拦截并篡改内容，称为“中间人攻击” 通常认为，如果通信过程具备了四个特性，就可以认为是安全的，四个特性是：机密性、完整性、身份认证和不可否认 机密...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/1.https%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%AE%89%E5%85%A8.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"1.https如何保证安全"}],["meta",{"property":"og:description","content":"一、HTTP 的不足 通信使用明文传输，内容可能会被窃听 不验证通信方的身份，有可能遭到伪装。服务端和客户端都有可能伪装。 无法证明报文的完整性，所以有可能已经遭到篡改。像这样，请求或响应在传输途中遭到攻击者拦截并篡改内容，称为“中间人攻击” 通常认为，如果通信过程具备了四个特性，就可以认为是安全的，四个特性是：机密性、完整性、身份认证和不可否认 机密..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.https如何保证安全\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"一、HTTP 的不足","slug":"一、http-的不足","link":"#一、http-的不足","children":[]},{"level":3,"title":"二、HTTPS 的原理","slug":"二、https-的原理","link":"#二、https-的原理","children":[]},{"level":3,"title":"1. 对称加密","slug":"_1-对称加密","link":"#_1-对称加密","children":[]},{"level":3,"title":"2. 非对称加密","slug":"_2-非对称加密","link":"#_2-非对称加密","children":[]},{"level":3,"title":"3. CA（数字证书）","slug":"_3-ca-数字证书","link":"#_3-ca-数字证书","children":[]},{"level":3,"title":"4. https 使用 “对称加密+非对称加密+CA证书” 组合","slug":"_4-https-使用-对称加密-非对称加密-ca证书-组合","link":"#_4-https-使用-对称加密-非对称加密-ca证书-组合","children":[]},{"level":3,"title":"三、HTTPS 就绝对安全了吗？","slug":"三、https-就绝对安全了吗","link":"#三、https-就绝对安全了吗","children":[]},{"level":3,"title":"2. 本地随机数的安全","slug":"_2-本地随机数的安全","link":"#_2-本地随机数的安全","children":[]},{"level":3,"title":"四、HTTPS 的抓包","slug":"四、https-的抓包","link":"#四、https-的抓包","children":[]}],"git":{},"readingTime":{"minutes":6.26,"words":1878},"filePathRelative":"计算机网络/七层模型/应用层/通信安全/1.https如何保证安全.md","excerpt":"<h3>一、HTTP 的不足</h3>\\n<ul>\\n<li>通信使用明文传输，内容可能会被窃听</li>\\n<li>不验证通信方的身份，有可能遭到伪装。服务端和客户端都有可能伪装。</li>\\n<li>无法证明报文的完整性，所以有可能已经遭到篡改。像这样，请求或响应在传输途中遭到攻击者拦截并篡改内容，称为“中间人攻击”</li>\\n</ul>\\n<p>通常认为，如果通信过程具备了四个特性，就可以认为是安全的，四个特性是：机密性、完整性、身份认证和不可否认</p>\\n<ul>\\n<li>机密性：对数据的保密，只能由可信的人访问，对其他人是不可见的秘密</li>\\n<li>完整性：也称为一致性，数据在传输过程中没有被篡改，保持原状</li>\\n<li>身份认证：确认对方的真实身份，保证消息只能发送给可信的人。如果通信的另一方是假冒的网站，那么数据再保密也没用，黑客完全可以使用冒充的身体套出各种信息，加密和没有加密一样</li>\\n<li>不可否认：也叫不可抵赖，不能否认已经发生过的行为。保证通信事务的真实性。比如小明借小红一千块，没写借条，第二天否认，小红没有证据只能认倒霉。另一种情况，小明借钱后还给了小红，但没写收条，小红不承认小明还钱的事，还要小明掏一千块。</li>\\n</ul>","autoDesc":true}');export{_ as comp,A as data};
