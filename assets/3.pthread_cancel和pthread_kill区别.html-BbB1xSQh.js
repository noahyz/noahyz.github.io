import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as s}from"./app-D1zlwylF.js";const l={};function h(n,i){return s(),t("div",null,i[0]||(i[0]=[a(`<h2 id="pthread-cancel-和-pthread-kill-的区别" tabindex="-1"><a class="header-anchor" href="#pthread-cancel-和-pthread-kill-的区别"><span>pthread_cancel 和 pthread_kill 的区别</span></a></h2><p>线程结束执行的方式共有 3 种，分别是：</p><ul><li>线程将指定函数体中的代码执行完后自行结束</li><li>线程执行过程中，遇到 pthread_exit 函数结束执行</li><li>线程执行过程中，被同一进程中的其他线程（包括主线程）强制终止</li></ul><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> pthread_kill</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">pthread_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> sig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>功能：向指定线程发送信号。如果信号为 0，则执行错误检查，但实际上不发送信号。</p><p>成功返回 0，失败时有如下错误返回</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>[ESRCH]   thread is an invalid thread ID.</span></span>
<span class="line"><span>[EINVAL]  sig is an invalid or unsupported signal number.</span></span>
<span class="line"><span>[ENOTSUP] thread was not created by pthread_create() and does not support being killed with pthread_kill()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ESRCH：线程 ID 不合法</li><li>EINVAL：信号是个不合法或者非法的数值</li><li>ENOTSUP：线程没有通过 pthread_create 创建，也不支持通过 pthread_kill 杀死</li></ul><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> pthread_cancel</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">pthread_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>功能是给线程发送取消信号，使线程从取消点返回。注意目标线程的取消是异步进行的。</p><p>根据 POSIX 标准，pthread_join、pthread_testcancel、pthread_cond_wait、pthread_cond_timedwait、sem_wait、sigwait 等函数以及 read、write 等会引起阻塞的系统调用都是取消点，其他 pthread 函数都不会引起取消动作。</p>`,11)]))}const p=e(l,[["render",h],["__file","3.pthread_cancel和pthread_kill区别.html.vue"]]),k=JSON.parse('{"path":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/3.pthread_cancel%E5%92%8Cpthread_kill%E5%8C%BA%E5%88%AB.html","title":"3.pthread_cancel和pthread_kill区别","lang":"zh-CN","frontmatter":{"title":"3.pthread_cancel和pthread_kill区别","description":"pthread_cancel 和 pthread_kill 的区别 线程结束执行的方式共有 3 种，分别是： 线程将指定函数体中的代码执行完后自行结束 线程执行过程中，遇到 pthread_exit 函数结束执行 线程执行过程中，被同一进程中的其他线程（包括主线程）强制终止 功能：向指定线程发送信号。如果信号为 0，则执行错误检查，但实际上不发送信号。...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/3.pthread_cancel%E5%92%8Cpthread_kill%E5%8C%BA%E5%88%AB.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"3.pthread_cancel和pthread_kill区别"}],["meta",{"property":"og:description","content":"pthread_cancel 和 pthread_kill 的区别 线程结束执行的方式共有 3 种，分别是： 线程将指定函数体中的代码执行完后自行结束 线程执行过程中，遇到 pthread_exit 函数结束执行 线程执行过程中，被同一进程中的其他线程（包括主线程）强制终止 功能：向指定线程发送信号。如果信号为 0，则执行错误检查，但实际上不发送信号。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.pthread_cancel和pthread_kill区别\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"pthread_cancel 和 pthread_kill 的区别","slug":"pthread-cancel-和-pthread-kill-的区别","link":"#pthread-cancel-和-pthread-kill-的区别","children":[]}],"git":{},"readingTime":{"minutes":1.02,"words":307},"filePathRelative":"操作系统/系统编程/3.pthread_cancel和pthread_kill区别.md","excerpt":"<h2>pthread_cancel 和 pthread_kill 的区别</h2>\\n<p>线程结束执行的方式共有 3 种，分别是：</p>\\n<ul>\\n<li>线程将指定函数体中的代码执行完后自行结束</li>\\n<li>线程执行过程中，遇到 pthread_exit 函数结束执行</li>\\n<li>线程执行过程中，被同一进程中的其他线程（包括主线程）强制终止</li>\\n</ul>\\n<div class=\\"language-c++ line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c++\\" data-title=\\"c++\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> pthread_kill</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#ABB2BF\\">pthread_t</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> thread</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> sig</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">);</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{p as comp,k as data};
