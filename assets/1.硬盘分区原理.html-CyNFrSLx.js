import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as i}from"./app-D1zlwylF.js";const d="/assets/%E5%88%86%E5%8C%BA%E8%A1%A8%E9%A1%B9%E7%BB%93%E6%9E%84-uhQbo1yr.png",l="/assets/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%B8%83%E5%B1%80%E5%9B%BE-C3X1_vy5.png",p={};function c(t,s){return i(),e("div",null,s[0]||(s[0]=[a(`<h4 id="_1-获取安装的磁盘数" tabindex="-1"><a class="header-anchor" href="#_1-获取安装的磁盘数"><span>1. 获取安装的磁盘数</span></a></h4><p>在物理地址 <code>0x475</code> 处存储着主机上安装的硬盘的数量，它是由 BIOS 检测并写入的。因此当我们使用 bochs 配置好磁盘，准备调试的时候，可以先看看此处内存存储的磁盘数。如下即可查看</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>xp/b 0x475</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-创建磁盘分区表" tabindex="-1"><a class="header-anchor" href="#_2-创建磁盘分区表"><span>2. 创建磁盘分区表</span></a></h4><p>文件系统是运行在操作系统中的软件模块，是操作系统提供的一套管理磁盘文件读写的方法和数据组织、存储形式。他的管理对象是文件，管辖范围是分区，因此他建立在分区的基础上，每个分区都可以有不同的文件系统。</p><p>分区：是由多个编号连续的柱面组成，因此分区在物理上的表现是由某段范围内的所有柱面组成的通心环。分区不能垮柱面，一个柱面只属于一个分区，分区的起始和终止都落在完整的柱面上。分区大小等于“每柱面上的扇区数”乘以“柱面数”。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>磁盘容量 = 单片容量 * 磁头数</span></span>
<span class="line"><span>单片容量 = 每磁道扇区数 * 磁道数 * 512字节</span></span>
<span class="line"><span>因为 磁道数 等于 柱面数，因此</span></span>
<span class="line"><span>磁盘容量 = 每磁道扇区数 * 柱面数 * 512字节 * 磁头数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般情况下，每磁道扇区数都是 63，扇区大小都是 512，柱面数和磁头数取决于实际配置。因此：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>柱面数 * 磁头数 = 硬盘容量 / 63 / 512</span></span>
<span class="line"><span>那么，假如磁盘容量为 80M，柱面数和磁头数就可以选择：162和16、324和8、216和12 等</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>每个分区都有“描述符”来描述分区本身所在硬盘上的起止界限等信息，在硬盘的 MBR 中有个 64 字节“固定大小”的数据结构，称为“分区表”。分区表的每个表项大小是 16 字节，因此分区表可以容纳 4 个表项，这也就是硬盘仅支持 4 个分区的原因。</p><p>分区表的长度并不是由结构本身限制，而是由所在的位置限制，他必须存在于 MBR 引导扇区或 EBR 引导扇区中。在这 512 字节中，前 446 字节是硬盘的参数和引导程序，然后才是 64 字节的分区表，最后是 2 字节的魔数 <code>0x55aa</code>。</p><p>在分区描述符中有属性是文件系统 id，表示文件系统的类型。为了支持更多的分区，专门增加一种属性值（id 为5），用来表示该分区可被再次划分成更多的子分区，这就是<strong>逻辑分区</strong>。</p><p>这 4 个分区都可以作为扩展分区（逻辑分区），扩展分区是可选项，可以没有，最多只有 1 个。如果有，其他 3 个区称为主分区。1 个扩展分区理论上可以划分出任意多的子扩展分区。但一般硬件有限制，比如 ide 硬盘只支持 63 个分区，scsi 硬盘只支持 15 个分区。</p><p>可以使用 fdisk 来设置硬盘的分区。</p><h4 id="_3-磁盘分区表浅析" tabindex="-1"><a class="header-anchor" href="#_3-磁盘分区表浅析"><span>3. 磁盘分区表浅析</span></a></h4><p>磁盘分区表（<code>Disk Partition Table</code>）简称 DPT。有 4 个表项。是由多个分区元信息组成的表，表中每一个表项都对应一个分区，主要记录各分区的起始扇区地址，大小界限等</p><p>最初的磁盘分区表位于 MBR 引导扇区，这 512 字节内容由 3 部分组成：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>0 - 0x1BD  总共 446 字节，存放主引导记录MBR</span></span>
<span class="line"><span>0x1BE - 0x1FD   总共 64 字节，存放磁盘分区表</span></span>
<span class="line"><span>0x55,0xaa  这两字节，存放魔数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分区需要占用完整的柱面，但 MBR 引导扇区位于 0 盘 0 道 1 扇区，因此 MBR 所在的磁道就不能划入分区了，因此分区起始地址要偏移磁盘 1 个磁道的大小。并且 0 磁道剩余的 63 个扇区操作系统一般不会去用他了。</p><p><strong>如何设计扩展分区的分区表呢？</strong></p><p>既要兼容固定长度为 4 个分区的分区表，又要突破固定分区数的限制。将这个扩展分区视为总扩展分区，将他划分成多个子扩展分区，每个子扩展分区“在逻辑上”相当于硬盘，因此每个子扩展分区都可以有一个分区表。虽然每个分区表长度为4，但允许有无限多个分区表。扩展分区表采用链式结构。</p><p>每个子扩展分区的空间并不是只有逻辑分区，在每个子扩展分区中最开始的扇区（称为 EBR 引导扇区）用于存储此子扩展分区中的分区表。他的结构和 MBR 一致。因此那个磁道剩余的扇区也不会再使用，其余部分才会作为存储数据的逻辑分区。MBR 也即扩展引导记录。</p><p>每个子扩展分区都有一个 EBR，EBR 中分区表的第一分区表项用来描述所包含的逻辑分区的元信息，第二分区表项用来描述下一个子扩展分区的地址，第三、四表项未用到。值得一提的是，这个第一分区表项指向该逻辑分区的最开始的扇区，此扇区称为操作系统引导扇区，即 OBR 引导扇区。</p><p>如下是分区表项结构：</p><img src="`+d+`" style="zoom:50%;"><p>注意：MBR、EBR 不属于分区之内，不属于操作系统管理的范围。而 OBR 引导扇区位于分区（主分区和逻辑分区）最开始的扇区，属于操作系统管理的范围。因此操作系统通常往 OBR 引导扇区中添加内核加载器的代码，供 MBR 调用以实现操作系统的自举，总之，OBR 引导扇区中绝不包含分区表。</p><p>总结一下：总扩展分区被直接拆分成多个子扩展分区，子扩展分区又被拆分成 EBR引导扇区、空闲扇区、逻辑分区三部分。</p><h4 id="_4-分区实验" tabindex="-1"><a class="header-anchor" href="#_4-分区实验"><span>4. 分区实验</span></a></h4><p>我们创建了一块 80M 的磁盘：<code> bximage -q -func=&quot;create&quot; -hd=80 -imgmode=&quot;flat&quot; -sectsize=512 hd80M.img</code></p><p>然后进行分区：<code>echo &quot;n\\np\\n1\\n\\n+4M\\nn\\ne\\n2\\n\\n\\nn\\n\\n+5M\\nn\\n\\n+6M\\nn\\n\\n+7M\\nn\\n\\n+8M\\nn\\n\\n+9M\\nn\\n\\n\\nw\\n&quot; | fdisk ./hd80M.img</code></p><p>查看分区：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Device        Boot Start    End Sectors  Size Id Type</span></span>
<span class="line"><span>./hd80M.img1        2048  10239    8192    4M 83 Linux</span></span>
<span class="line"><span>./hd80M.img2       10240 163295  153056 74.8M  5 Extended</span></span>
<span class="line"><span>./hd80M.img5       12288  22527   10240    5M 83 Linux</span></span>
<span class="line"><span>./hd80M.img6       24576  36863   12288    6M 83 Linux</span></span>
<span class="line"><span>./hd80M.img7       38912  53247   14336    7M 83 Linux</span></span>
<span class="line"><span>./hd80M.img8       55296  71679   16384    8M 83 Linux</span></span>
<span class="line"><span>./hd80M.img9       73728  92159   18432    9M 83 Linux</span></span>
<span class="line"><span>./hd80M.img10      94208 163295   69088 33.8M 83 Linux</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>./hd80M.img1 </code> 是主分区，<code>./hd80M.img2</code> 是总扩展分区，其他的是子扩展分区。</p><p>因此，我们看此物理磁盘第一个扇区的分区表，分区表 64 字节，存放在 0x1BE - 0x1FD</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># xxd -a -s 0 -l 512 hd80M.img</span></span>
<span class="line"><span>00000000: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span>
<span class="line"><span>*</span></span>
<span class="line"><span>000001b0: 0000 0000 0000 0000 6110 f6b4 0000 0020  ........a......</span></span>
<span class="line"><span>000001c0: 2100 83a2 2200 0008 0000 0020 0000 00a2  !...&quot;...... ....</span></span>
<span class="line"><span>000001d0: 2300 0529 3f0a 0028 0000 e055 0200 0000  #..)?..(...U....</span></span>
<span class="line"><span>000001e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span>
<span class="line"><span>000001f0: 0000 0000 0000 0000 0000 0000 0000 55aa  ..............U.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分区表项占用 16 字节，因此：</p><ul><li>第一个分区表项是：<code>0020 2100 83a2 2200 0008 0000 0020 0000</code></li><li>第二个分区表项是：<code>00a2 2300 0529 3f0a 0028 0000 e055 0200 </code></li></ul><p>第一个分区表项是主分区，分区类型是 <code>0x83</code>，扇区数 <code>0x 0000 2000 =&gt; 8192</code>。偏移扇区数是：<code>0x0000 0800 =&gt; 2048</code></p><p>第二个分区表项是总扩展分区，分区类型是 <code>0x05</code>，扇区数 <code>0x 0002 55e0 =&gt; 153056</code>。偏移扇区数是：<code>0x0000 2800 =&gt; 10240</code>。就是对应到 <code>./hd80M.img2</code>，他就是总扩展分区。</p><p>第三、四个分区表项未使用，所以全为 0。</p><p>好，如上是 MBR 引导扇区的分区表，接下来再来解析扩展分区的分区表。扩展分区中的所有分区表被组织成单向链表。通过总扩展分区的偏移扇区数，计算出总扩展分区中第一个扇区位置：<code>0x2800 * 512 =&gt; 0x500000</code>，这个扇区就是总扩展分区的分区表。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>xxd -a -s 0x500000 -l 512 hd80M.img</span></span>
<span class="line"><span>00500000: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span>
<span class="line"><span>*</span></span>
<span class="line"><span>005001b0: 0000 0000 0000 0000 0000 0000 0000 00c3  ................</span></span>
<span class="line"><span>005001c0: 0400 8366 2501 0008 0000 0028 0000 0066  ...f%......(...f</span></span>
<span class="line"><span>005001d0: 2601 054b 0902 0030 0000 0038 0000 0000  &amp;..K...0...8....</span></span>
<span class="line"><span>005001e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span>
<span class="line"><span>005001f0: 0000 0000 0000 0000 0000 0000 0000 55aa  ..............U.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们知道，扩展分区的分区表，第一个分区表项是用来描述所包含的逻辑分区的元信息，第二分区表项用来描述下一个子扩展分区的地址，第三、四表项未用到。分区表项位置：<code>0x500000 + 446 =&gt; 0x5001be</code> 因此：</p><ul><li>扩展分区的分区表中，第一个分区表项是：<code>0x00c3 0400 8366 2501 0008 0000 0028 0000</code>。偏移扇区数：<code>0x0000 0800 =&gt; 2048</code>。扇区数：<code>0x0000 2800 =&gt; 10240</code>，对应到 <code>./hd80M.img5</code> 分区。他就是子扩展分区，又称为逻辑分区。</li><li>扩展分区的分区表中，第二个分区表项是：<code>0x0066 2601 054b 0902 0030 0000 0038 0000 </code>。偏移扇区数：<code>0x0000 3000 =&gt; 12288</code>。扇区数：<code>0x0000 3800 =&gt; 14336</code>。</li></ul><p><strong>注意：子扩展分区是在总扩展分区中创建的，子扩展分区的偏移扇区理应以总扩展分区的绝对扇区 LBA 地址为基准，因此，子扩展分区的绝对扇区 LBA 地址 = 总扩展分区绝对扇区 LBA 地址 + 子扩展分区的偏移地址</strong>。分区起始偏移扇区是一个相对量。</p><p>我们通过这个信息来看下一个子扩展分区的地址，绝对偏移地址：<code>(0x2800 + 0x3000) * 512 =&gt; 0xb0 0000</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># xxd -a -s 0xb00000 -l 512  hd80M.img</span></span>
<span class="line"><span>00b00000: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span>
<span class="line"><span>*</span></span>
<span class="line"><span>00b001b0: 0000 0000 0000 0000 0000 0000 0000 0087  ................</span></span>
<span class="line"><span>00b001c0: 0701 834b 0902 0008 0000 0030 0000 004b  ...K.......0...K</span></span>
<span class="line"><span>00b001d0: 0a02 0550 0d03 0068 0000 0040 0000 0000  ...P...h...@....</span></span>
<span class="line"><span>00b001e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span>
<span class="line"><span>00b001f0: 0000 0000 0000 0000 0000 0000 0000 55aa  ..............U.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个子扩展分区的分区表如上，我们来看分区表项，同样的，第三、四分区表项不使用</p><ul><li>第一个分区表项：<code>0x0087 0701 834b 0902 0008 0000 0030 0000</code>。偏移扇区数：<code>0x0000 0800 =&gt; 2048</code>，扇区数：<code>0x0000 3000 =&gt; 12288</code>。对应到子扩展分区 <code>./hd80M.img6</code></li><li>第二个分区表项：<code>0x004b 0a02 0550 0d03 0068 0000 0040 0000 </code>。分区类型：<code>0x05</code>，偏移扇区数：<code>0x0000 6800 =&gt; 26624</code>，扇区数：<code>0x0000 4000 =&gt; 16384</code>。</li></ul><p>好，我们继续计算下一个子扩展分区的地址，绝对偏移地址：<code>(0x2800 + 0x6800) * 512 =&gt; 0x120 0000 </code>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># xxd -a -s 0x1200000 -l 512  hd80M.img</span></span>
<span class="line"><span>01200000: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span>
<span class="line"><span>*</span></span>
<span class="line"><span>012001b0: 0000 0000 0000 0000 0000 0000 0000 006b  ...............k</span></span>
<span class="line"><span>012001c0: 2a02 8350 0d03 0008 0000 0038 0000 0050  *..P.......8...P</span></span>
<span class="line"><span>012001d0: 0e03 0575 3104 00a8 0000 0048 0000 0000  ...u1......H....</span></span>
<span class="line"><span>012001e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span>
<span class="line"><span>012001f0: 0000 0000 0000 0000 0000 0000 0000 55aa  ..............U.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三个子扩展分区的分区表如上：</p><ul><li>第一个分区表项：<code>0x006b 2a02 8350 0d03 0008 0000 0038 0000</code>。偏移扇区数：<code>0x0000 0800 =&gt; 2048</code>，扇区数：<code>0x0000 3800 =&gt; 14336</code>。对应到子扩展分区 <code>./hd80M.img7</code></li><li>第二个分区表项：<code>0x0050 0e03 0575 3104 00a8 0000 0048 0000</code>。偏移扇区数：<code>0x0000 a800 =&gt; 43008</code>，扇区数：<code>0x0000 4800 =&gt; 18432</code></li></ul><p>好，我们继续计算下一个子扩展分区的地址，绝对偏移地址：<code>(0x2800 + 0xa800) * 512 =&gt; 0x1a0 0000 </code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># xxd -a -s 0x1a00000 -l 512  hd80M.img</span></span>
<span class="line"><span>01a00000: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span>
<span class="line"><span>*</span></span>
<span class="line"><span>01a001b0: 0000 0000 0000 0000 0000 0000 0000 0070  ...............p</span></span>
<span class="line"><span>01a001c0: 2e03 8375 3104 0008 0000 0040 0000 0075  ...u1......@...u</span></span>
<span class="line"><span>01a001d0: 3204 05bb 3605 00f0 0000 0050 0000 0000  2...6......P....</span></span>
<span class="line"><span>01a001e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span>
<span class="line"><span>01a001f0: 0000 0000 0000 0000 0000 0000 0000 55aa  ..............U.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第 4 个子扩展分区的分区表如上：</p><ul><li>第一个分区表项：<code>0x0070 2e03 8375 3104 0008 0000 0040 0000</code>。偏移扇区数：<code>0x0000 0800 =&gt; 2048</code>，扇区数：<code>0x0000 4000 =&gt; 16384</code>。对应到子扩展分区 <code>./hd80M.img8</code></li><li>第二个分区表项：<code>0x0075 3204 05bb 3605 00f0 0000 0050 0000 </code>。偏移扇区数：<code>0x0000 f000 =&gt; 61440</code>，扇区数：<code>0x0000 5000 =&gt; 20480</code></li></ul><p>继续计算下一个子扩展分区的地址，绝对偏移地址：<code>(0x2800 + 0xf000) * 512 =&gt; 0x230 0000 </code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># xxd -a -s 0x2300000 -l 512  hd80M.img</span></span>
<span class="line"><span>02300000: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span>
<span class="line"><span>*</span></span>
<span class="line"><span>023001b0: 0000 0000 0000 0000 0000 0000 0000 0096  ................</span></span>
<span class="line"><span>023001c0: 1304 83bb 3605 0008 0000 0048 0000 00bb  ....6......H....</span></span>
<span class="line"><span>023001d0: 3705 0529 3f0a 0040 0100 e015 0100 0000  7..)?..@........</span></span>
<span class="line"><span>023001e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span>
<span class="line"><span>023001f0: 0000 0000 0000 0000 0000 0000 0000 55aa  ..............U.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第 5 个子扩展分区的分区表如上：</p><ul><li>第一个分区表项：<code>0x0096 1304 83bb 3605 0008 0000 0048 0000 </code>。偏移扇区数：<code>0x0000 0800 =&gt; 2048</code>，扇区数：<code>0x0000 4800 =&gt; 18432</code>。对应到的子分区：<code>./hd80M.img9</code></li><li>第二个分区表项：<code>0x00bb 3705 0529 3f0a 0040 0100 e015 0100</code>。偏移扇区数：<code>0x0001 4000 =&gt; 81920</code>，扇区数：<code>0x0001 15e0 =&gt; 71136</code></li></ul><p>继续计算下一个子扩展分区的地址，绝对偏移地址：<code>(0x2800 + 0x14000) * 512 =&gt; 0x2d0 0000</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># xxd -a -s 0x2d00000 -l 512  hd80M.img</span></span>
<span class="line"><span>02d00000: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span>
<span class="line"><span>*</span></span>
<span class="line"><span>02d001b0: 0000 0000 0000 0000 0000 0000 0000 00dc  ................</span></span>
<span class="line"><span>02d001c0: 1805 8329 3f0a 0008 0000 e00d 0100 0000  ...)?...........</span></span>
<span class="line"><span>02d001d0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span>
<span class="line"><span>02d001e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span>
<span class="line"><span>02d001f0: 0000 0000 0000 0000 0000 0000 0000 55aa  ..............U.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第 6 个子扩展分区的分区表如上：</p><ul><li>第一个分区表项：<code>0x00dc 1805 8329 3f0a 0008 0000 e00d 0100</code>。偏移扇区数：<code>0x0000 0800 =&gt; 2048</code>，扇区数：<code>0x0001 0de0 =&gt; 69088</code>。对应的子区：<code>./hd80M.img10 </code></li><li>由于后续再无分区，所以没有后续分区表项</li></ul><p>此时，我们拆分了所有的分区表。接下来我们以一张图来展示这块物理硬盘，分区后的布局图：</p><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',67)]))}const h=n(p,[["render",c],["__file","1.硬盘分区原理.html.vue"]]),b=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E7%A1%AC%E7%9B%98/1.%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%8E%9F%E7%90%86.html","title":"硬盘分区原理","lang":"zh-CN","frontmatter":{"title":"硬盘分区原理","description":"1. 获取安装的磁盘数 在物理地址 0x475 处存储着主机上安装的硬盘的数量，它是由 BIOS 检测并写入的。因此当我们使用 bochs 配置好磁盘，准备调试的时候，可以先看看此处内存存储的磁盘数。如下即可查看 2. 创建磁盘分区表 文件系统是运行在操作系统中的软件模块，是操作系统提供的一套管理磁盘文件读写的方法和数据组织、存储形式。他的管理对象是文...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E7%A1%AC%E7%9B%98/1.%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"硬盘分区原理"}],["meta",{"property":"og:description","content":"1. 获取安装的磁盘数 在物理地址 0x475 处存储着主机上安装的硬盘的数量，它是由 BIOS 检测并写入的。因此当我们使用 bochs 配置好磁盘，准备调试的时候，可以先看看此处内存存储的磁盘数。如下即可查看 2. 创建磁盘分区表 文件系统是运行在操作系统中的软件模块，是操作系统提供的一套管理磁盘文件读写的方法和数据组织、存储形式。他的管理对象是文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"硬盘分区原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":11.15,"words":3345},"filePathRelative":"技术专题/手写操作系统/6.硬盘/1.硬盘分区原理.md","excerpt":"<h4>1. 获取安装的磁盘数</h4>\\n<p>在物理地址 <code>0x475</code> 处存储着主机上安装的硬盘的数量，它是由 BIOS 检测并写入的。因此当我们使用 bochs 配置好磁盘，准备调试的时候，可以先看看此处内存存储的磁盘数。如下即可查看</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>xp/b 0x475</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{h as comp,b as data};
