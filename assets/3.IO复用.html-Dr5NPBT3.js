import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as t,o as e}from"./app-D1zlwylF.js";const a="/assets/epoll%E5%8E%9F%E7%90%86-CK2ECz_l.jpg",n={};function h(p,i){return e(),l("div",null,i[0]||(i[0]=[t(`<h2 id="一、i-o复用之-select" tabindex="-1"><a class="header-anchor" href="#一、i-o复用之-select"><span>一、I/O复用之 select</span></a></h2><p>用途：在一段指定时间内，监听用户感兴趣的文件描述符上的可读、可写、异常等事件</p><h3 id="一-、使用" tabindex="-1"><a class="header-anchor" href="#一-、使用"><span>（一）、使用</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> select</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> nfds</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fd_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> readfds</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fd_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> writefds</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fd_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> excetfds</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> timeval</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>nfds 参数指定被监听的文件描述符的总数。它通常被设置为 select 监听的所有文件描述符中的最大值加1，因为文件描述符是从0开始计数的</p></li><li><p>readfds、writefds 和 exceptfds 参数分别指向可读、可写和异常等事件对应的文件描述符集合。应用程序调用 select 函数时，通过这 3 个参数传入自己感兴趣的文件描述符。select 调用返回时，内核将修改他们来通知应用程序哪些文件描述符已经就绪</p><p>fd_set 结构体仅包含一个整形数组，该数组的每个元素的每一位（bit）标记一个文件描述符。fd_set 能容纳的文件描述符数量由 FD_SETSIZE 指定，这就限制了 select 能同时处理的文件描述符的总量<br> 可以使用一系列宏来访问 fd_set 结构体中的位</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">FD_ZERO</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">fd_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fdset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 清除 fdset 的所有位</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">FD_SET</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fd_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fdset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 设置 fdset 的位 fd</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">FD_CLR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fd_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fdset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 清除 fdset 的位 fd</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> FD_ISSET</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fd_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fdset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 测试 fdset 的位 fd 是否被设置</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>timeout 参数用来设置 select 函数的超时时间。是一个 timeval 结构类型的指针，采用指针参数是因为内核将修改它以告诉应用程序 select 等待了多久。不过也不能完全信任 select 调用返回后的 timeout 值，比如调用失败时 timeout 值是不确定的。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> timeval {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	long</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> tv_sec;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 秒</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	long</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> tv_usec;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 微秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果给 timeval 的成员都传递 0，则 select 将立即返回；如果给 timeout 传递 NULL，则阻塞直到某个文件描述符就绪。</p></li><li><p>select 成功时返回就绪（可读、可写和异常）文件描述符的总数。如果在超时时间内没有任何文件描述符就绪，select 返回0。</p></li></ul><h3 id="二-、文件描述符就绪条件" tabindex="-1"><a class="header-anchor" href="#二-、文件描述符就绪条件"><span>（二）、文件描述符就绪条件</span></a></h3><p>以下情况 socket 是可读的</p><ul><li>socket 内核接收缓冲区中的字节数大于或者等于其低水位的标记 SO_RCVLOWAT 标记。此时，我们可以无阻塞的该 socket，并且读操作的返回值大于0</li><li>socket 通信的对方关闭连接，此时对该 socket 的读操作将返回 0</li><li>监听 socket 上有新的连接请求</li><li>socket 上有未处理的错误。此时我们可以使用 getsockopt 来读取和清除错误</li></ul><p>以下情况 socket 是可写的</p><ul><li>socket 内核发送缓冲区中的可用字节数大于或者等于其低水位标记 SO_SNDLOWAT，此时我们可以无阻塞的读该 socket，并且返回值大于0</li><li>socket 的写操作被关闭，对写操作被关闭的 socket 执行写操作会触发 SIGPIPE 的信号</li><li>socket 使用非阻塞 connect 连接成功或者失败之后</li><li>socket上有未处理的错误，此时我们可以通过 getsockopt 来读取和清除该错误</li></ul><p>socket 是异常情况</p><ul><li>socket 上接收到带外数据</li></ul><h2 id="二、i-o复用之-poll" tabindex="-1"><a class="header-anchor" href="#二、i-o复用之-poll"><span>二、I/O复用之 poll</span></a></h2><p>指定时间内轮询一定数量的文件描述符，以测试其中是否有就绪</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> poll</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> pollfd</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fds</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> nfds_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> nfds</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>fds 参数指定我们感兴趣的文件描述符上发生的可读、可写和异常等事件。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> pollfd {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> fd;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 文件描述符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	short</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> events;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 注册的事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	short</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> revents;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 实际发生的事件，由内核填充</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>events 成员告诉 poll 监听 fd 上的那些事件，他是一系列事件的按位或</p><p>revents 成员则由内核修改，以通知应用程序 fd 上世纪发生了哪些事件</p></li><li><p>nfds 指定被监听事件集合 fds 的大小。<code>typedef unsigned long int nfds_t;</code></p></li><li><p>timeout 指定 poll 的超时值，单位是毫秒。当 timeout 为 -1 时，poll 调用将永远阻塞。为 0 则立即返回</p></li></ul><p>poll 文件描述符没有上限，只是解决了 select 句柄有限的问题</p><h2 id="三、i-o复用之-epoll" tabindex="-1"><a class="header-anchor" href="#三、i-o复用之-epoll"><span>三、I/O复用之 epoll</span></a></h2><h3 id="一-、epoll-的实现" tabindex="-1"><a class="header-anchor" href="#一-、epoll-的实现"><span>（一）、epoll 的实现</span></a></h3><p>调用 epoll_create 方法，Linux 内核会创建一个 eventpoll 结构体，这个结构体中有两个成员和 epoll 的使用方式密切相关</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> eventpoll {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 红黑树的根节点，这棵树中存储着所有添加到 epoll 中的事件，也就是这个 epoll 监控的事件 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> rb_root rbr;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 双向链表 rdllist 保存着将要通过 epoll_wait 返回给用户的、满足条件的事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> list_hand rdllist;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+a+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>每一个 epoll 对象都有一个独立的 eventpoll 结构体，这个结构体会在内核空间中创造独立的内存，用于存储使用 epoll_ctl 方法向 epoll 对象中添加进来的事件。这些事件都会挂到 rbr 红黑树中，也可以通过红黑树快速识别重复添加的事件。</p><p><strong>所有添加到epoll中的事件都会与设备（如网卡）驱动程序建立回调关系</strong>。也就是说，相应的事件发生时会调用这里的回调方法。这个回调方法在内核中叫做 ep_poll_callback，它会把这样的事件放到上面的 rdllist 双向链表中。</p><p>能实现多路复用，主要依赖于：将进程挂在对应的 fd 的等待队列上，这样当这个 fd 的事情产生的时候，设备驱动就会将这个队列上的进程唤醒，如果不依赖 epoll，毫无疑问进程无法把自己同时挂在多个 fd 的队列上，epoll 帮忙干了这个事情，而干这个事情的一个核心步骤，是调用对应 fd 驱动设备提供 poll 方法。</p><p>Linux 中，对设备模型进行了规范的标准化，比如设备分为字符设备、块设备、网络设备等，对于开发者而言，要给一个设备实现一个驱动程序就必须按照 linux 提供的规范来实现，其中对于跟用户层交互这里，内核要求开发者实现一个叫 file_operations 的结构，这个结构定义了一系列操作的回调指针，比如 read、write 等用户熟知的操作，当用户调用 read、write 等方法时，最终内核会回调到这个设备的 file_operations.read、file_operations.write 方法，这个方法的具体逻辑由驱动开发者实现，比如 accept 调用，实际上最终是调用了 socket 下面的 file_operations.accept 方法。因此，如果是进程自己调用 accept，则协议栈驱动会亲自把这个进程挂在 fd 的等待队列上；如果是 epoll 来调用，则会回调 poll 方法，最终由 epoll 来将进程挂在 fd 这个等待队列上。</p><p>在 epoll 中，每一个事件都会建立一个 epitem 结构体，就是一个事件对应的信息。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> epitem {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 红黑树节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> rb_node rbn;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 双向链表节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> list_head rdllist;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 事件句柄等信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> epoll_filefd ffd;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 指向其所属的 eventpoll 对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> eventpoll</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ep;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 期待的事件类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> epoll_event event;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当调用 epoll_wait 检查是否有发生事件的连接时，只是检查 eventpoll 对象中的 rdllist 双向链表是否有 epitem 元素而已，如果 rdllist 链表不为空，则把这里的事件复制到用户态内存中，同时将事件数量返回给用户。因此 epoll_wait 的效率比较高。</p><p>epoll_ctl 在向 epoll 对象中添加、修改、删除事件时，从 rbr 红黑树中查找事件也非常快。</p><h3 id="二-、epoll-的使用" tabindex="-1"><a class="header-anchor" href="#二-、epoll-的使用"><span>（二）、epoll 的使用</span></a></h3><h5 id="_1-epoll-create" tabindex="-1"><a class="header-anchor" href="#_1-epoll-create"><span>1. epoll_create</span></a></h5><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int epoll_create(int size);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>返回一个句柄，参数 size 是告诉 epoll 所要处理的大致事件数目，而不是能够处理的事件的最大个数。</p><h5 id="_2-epoll-ctl" tabindex="-1"><a class="header-anchor" href="#_2-epoll-ctl"><span>2. epoll_ctl</span></a></h5><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int epoll_ctl(int epfd, int op, int fd, struct epoll_event* event);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>epfd 是 epoll_create 返回的句柄</p></li><li><p>op 的取值</p><table><thead><tr><th>op的取值</th><th>意义</th></tr></thead><tbody><tr><td>EPOLL_CTL_ADD</td><td>添加新的事件到 epoll 中</td></tr><tr><td>EPOLL_CTL_MOD</td><td>修改 epoll 中的事件</td></tr><tr><td>EPOLL_CTL_DEL</td><td>删除 epoll 中的事件</td></tr></tbody></table></li><li><p>fd 是待监测的连接套接字</p></li><li><p>event 告诉 epoll 对什么样的事件感兴趣</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> union</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> epoll_data {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    void*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ptr;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> fd;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> u32;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> u64;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">epoll_data_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> epoll_event {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">    __uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> events;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">    epoll_data_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>epoll_event 中 events 的取值意义</p><table><thead><tr><th>events 取值</th><th>意义</th></tr></thead><tbody><tr><td>EPOLLIN</td><td>连接上有数据可以读出，比如：TCP连接的远端主动关闭连接，需要处理发送过来的 FIN 包</td></tr><tr><td>EPOLLOUT</td><td>连接上有数据可以写入，比如：主动向上游服务器发起非阻塞的TCP连接，连接建立成功的事件相当于可写事件</td></tr><tr><td>EPOLLRDHUP</td><td>TCP连接的远端关闭或半关闭连接</td></tr><tr><td>EPOLLERR</td><td>对应的连接发生错误</td></tr><tr><td>EPOLLHUP</td><td>对应的连接被挂起</td></tr><tr><td>EPOLLET</td><td>将触发方式设置为边缘触发（ET），系统默认为水平触发（LT）</td></tr><tr><td>EPOLLONESHOT</td><td>对这个事件只处理一次，下次需要处理时需重新加入 epoll</td></tr><tr><td>EPOLLPRI</td><td>对应的连接上有紧急数据需要读</td></tr></tbody></table></li></ul><h5 id="_3-epoll-wait" tabindex="-1"><a class="header-anchor" href="#_3-epoll-wait"><span>3. epoll_wait</span></a></h5><p>收集在 epoll 监控的事件中已经发生的事件。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>epoll_wait(int epfd, struct epoll_event* events, int maxevents, int timeout);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>返回值为当前发生的事件个数。返回 0 表示没有本次调用没有事件发生；返回 -1 表示出现错误</li><li>epfd 是 epoll 的描述符</li><li>events 是分配好的 epoll_event 结构体数组，epoll 将会把发生的事件复制到 events 数组中（不可以是空指针，那个只负责拷贝）</li><li>maxevents 可以返回的最大事件数目，通常 maxevents 参数于预分配的 events 数组的大小是相等的</li><li>timeout 在没有监测到事件发生时最多等待的时间（毫秒），为 0 表示立即返回，-1 表示阻塞</li></ul><h5 id="_4-et-和-lt-模式" tabindex="-1"><a class="header-anchor" href="#_4-et-和-lt-模式"><span>4. ET 和 LT 模式</span></a></h5><p>epoll 有两种工作模式，LT（水平触发）模式和ET（边缘触发）模式。默认情况 epoll 采用 LT 模式工作，可以处理阻塞和非阻塞套接字。<br> 可以通过 epoll_ctl 设置事件为 ET 模式，ET 模式的效率比 LT 模式高，但它只支持非阻塞套接字。如果文件描述符是阻塞的，那么读或者写操作将会因为没有后续的事件而一直处于阻塞状态。</p><p>LT 和 ET 的区别：当一个新的事件到来时，ET 模式下，如果没有把这个到来的事件对应的套接字缓冲区处理完，那么在这个套接字没有新的事件再次到来时，ET 模式无法再次从 epoll_wait 调用中获取这个事件的。而 LT 模式，只要一个事件对应的套接字缓冲区还有数据，就总能从 epoll_wait 中获取这个事件。</p><p>nginx 是通过 ET 模式使用 epoll 的。</p><h5 id="_5-epolloneshot-模式" tabindex="-1"><a class="header-anchor" href="#_5-epolloneshot-模式"><span>5. EPOLLONESHOT 模式</span></a></h5><p>抛出问题：即使我们使用 ET 模式，一个 socket 上的某个事件还是可能被触发多次。在并发程序中，一个线程在读取完某个 socket 上的数据后开始处理这些数据，而在数据处理过程中该 socket 上又有新数据可读（EPOLLIN再次被触发），此时另外一个线程被唤醒来读取这些新的数据。于是就出现了两个线程同时操作一个 socket 的局面。我们期望的是一个 socket 连接在任一时刻都只被一个线程处理。</p><p>对于注册了 EPOLLONESHOT 事件的文件描述符，操作系统最多触发其上注册的一个可读、可写或者异常事件，且只触发一次，除非我们使用 epoll_ctl 函数重置该文件描述符上注册的 EPOLLONESHOT 事件。这就可以实现一个线程在处理某个 socket 时，其他线程是不可能有机会操作该 socket 的</p><p>注意：注册了 EPOLLONESHOT 事件的 socket 一旦被某个线程处理完毕，该线程就应该立即重置这个 socket 上的 EPOLLONESHOT 事件，以确保这个 socket 下一次可读时，其 EPOLLIN 事件能被触发，进而让其他线程有机会继续处理这个 socket。</p><h2 id="三、三组-i-o复用的比较" tabindex="-1"><a class="header-anchor" href="#三、三组-i-o复用的比较"><span>三、三组 I/O复用的比较</span></a></h2><p>select</p><ul><li>select 的参数类型 fd_set 没有将文件描述符和事件绑定，它仅仅是一个文件描述符集合，因此 select 需要提供 3 个这种类型的参数来分别传入和输出可读、可写及异常等事件。因此 select 不能处理更新类型的事件</li><li>select 中由于内核对 fd_set 集合的在线修改，应用程序下次调用 select 前必须重置这 3 个 fd_set 集合。</li><li>select采用对所有注册的文件描述符集轮询的方式，会返回整个用户注册的事件集合，所以应用程序索引就绪文件的时间复杂度为O(n)</li><li>select允许监听的最大文件描述符个数通常有限制，一般是1024，如果大于1024，可能会导致不可预期的后果</li><li>只能工作在 LT 模式</li></ul><p>poll</p><ul><li>将文件描述符和事件绑定，并且每次内核修改的是 pollfd 结构体的 revents 成员，而 events 成员保持不变。因此下次调用无须重置 pollfd 类型的事件集参数</li><li>poll采用对所有注册的文件描述符集轮询的方式，会返回整个用户注册的事件集合，所以应用程序索引就绪文件的时间复杂度为O(n)</li><li>poll用nfds参数指定最多监听多少个文件描述符和事件，这个数能达到系统允许打开的最大文件描述符数目，即（/proc/sys/fs/file-max）</li><li>只能工作在 LT 模式</li></ul><p>epoll</p><ul><li>epoll 把用户注册的文件描述符和事件放到 epoll（eventpoll）中的红黑树上，提供了一个系统调用 epoll_ctl 来管理用户事件。增删改的效率都是 O(logn)</li><li>epoll 将所有添加到 epoll 中的事件都会与设备（如网卡）驱动程序建立回调关系，事件发生后内核会将这个文件描述符和事件放到 epoll（eventpoll）的双向链表上。因此 epoll_wait 系统调用直接从 epoll 的双向链表上读取数据即可，时间复杂度变为 O(1)</li><li>epoll_wait 通过 maxevents 来决定最多监听多少个文件描述符和事件，这个数能达到系统允许打开的最大文件描述符数据，即（/proc/sys/fs/file-max）</li><li>支持高效的 ET 模式，并且还支持 EPOLLONESHOT 事件，能进一步减少可读、可写和异常等事件被触发的次数</li></ul><p>从实现原理上来说，select 和 poll 采用的都是轮询的方式，即每次调用都要扫描整个注册文件描述符集合，并将其中就绪的文件描述符返回给用户程序，因此他们检测就绪事件的算法时间复杂度是 O(n) 。epoll_wait 则不同，他采用回调方式，内核检测到就绪的文件描述符时，将触发回调函数，回调函数就将该文件描述符上对应的事件插入内核就绪事件队列。内核最后在恰当的时机将该就绪事件队列中的内容拷贝到用户空间。epoll_wait 无需轮询整个文件描述符集合来检测哪些事件已经就绪，事件算法复杂度是 O(1)</p><p>epoll 缺点：当活动连接比较多的时候，epoll_wait 的效率未必比 select 和 poll 高，因此此时回调函数被触发得过于频繁。<br> epoll 适应场景：epoll_wait 适用于连接数量多，但活动连接较少的情况。</p>`,58)]))}const r=s(n,[["render",h],["__file","3.IO复用.html.vue"]]),o=JSON.parse('{"path":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/3.IO%E5%A4%8D%E7%94%A8.html","title":"3.IO复用","lang":"zh-CN","frontmatter":{"title":"3.IO复用","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"一、I/O复用之 select 用途：在一段指定时间内，监听用户感兴趣的文件描述符上的可读、可写、异常等事件 （一）、使用 nfds 参数指定被监听的文件描述符的总数。它通常被设置为 select 监听的所有文件描述符中的最大值加1，因为文件描述符是从0开始计数的 readfds、writefds 和 exceptfds 参数分别指向可读、可写和异常等...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/3.IO%E5%A4%8D%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"3.IO复用"}],["meta",{"property":"og:description","content":"一、I/O复用之 select 用途：在一段指定时间内，监听用户感兴趣的文件描述符上的可读、可写、异常等事件 （一）、使用 nfds 参数指定被监听的文件描述符的总数。它通常被设置为 select 监听的所有文件描述符中的最大值加1，因为文件描述符是从0开始计数的 readfds、writefds 和 exceptfds 参数分别指向可读、可写和异常等..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.IO复用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"一、I/O复用之 select","slug":"一、i-o复用之-select","link":"#一、i-o复用之-select","children":[{"level":3,"title":"（一）、使用","slug":"一-、使用","link":"#一-、使用","children":[]},{"level":3,"title":"（二）、文件描述符就绪条件","slug":"二-、文件描述符就绪条件","link":"#二-、文件描述符就绪条件","children":[]}]},{"level":2,"title":"二、I/O复用之 poll","slug":"二、i-o复用之-poll","link":"#二、i-o复用之-poll","children":[]},{"level":2,"title":"三、I/O复用之 epoll","slug":"三、i-o复用之-epoll","link":"#三、i-o复用之-epoll","children":[{"level":3,"title":"（一）、epoll 的实现","slug":"一-、epoll-的实现","link":"#一-、epoll-的实现","children":[]},{"level":3,"title":"（二）、epoll 的使用","slug":"二-、epoll-的使用","link":"#二-、epoll-的使用","children":[]}]},{"level":2,"title":"三、三组 I/O复用的比较","slug":"三、三组-i-o复用的比较","link":"#三、三组-i-o复用的比较","children":[]}],"git":{},"readingTime":{"minutes":13.16,"words":3949},"filePathRelative":"操作系统/文件管理/内核原理/3.IO复用.md","localizedDate":"2023年1月19日","excerpt":"<h2>一、I/O复用之 select</h2>\\n<p>用途：在一段指定时间内，监听用户感兴趣的文件描述符上的可读、可写、异常等事件</p>\\n<h3>（一）、使用</h3>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c\\" data-title=\\"c\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> select</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> nfds</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> fd_set</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">*</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> readfds</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> fd_set</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">*</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> writefds</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> fd_set</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">*</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> excetfds</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> struct</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> timeval</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">*</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> timeout</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">);</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,o as data};
