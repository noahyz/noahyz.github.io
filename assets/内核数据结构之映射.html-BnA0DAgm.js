import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-D1zlwylF.js";const t={};function h(k,i){return l(),a("div",null,i[0]||(i[0]=[n(`<p>我们一般称键值对数组为映射，也称为哈希。一般查找的时间复杂度可以低至常数级别。在高频次的查询场景中，有较为优异的性能。关于映射的性质，我们不过多讨论，本文主要看看 Linux 中映射的实现，本文以 Linux 2.6.12 版本为例。</p><p>Linux 实现的映射，并不是一个通用的映射。他的目标是：映射一个唯一数（UID）到一个指针。</p><h3 id="一、实现结构" tabindex="-1"><a class="header-anchor" href="#一、实现结构"><span>一、实现结构</span></a></h3><p>Linux 提供了结构体 idr 用来完成这一目标。如下：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> idr_layer {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		 bitmap;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> idr_layer	</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;">ary</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">IDR_BITS];</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 64 位机器 IDR_BITS 为 6</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">			 count;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> idr {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> idr_layer </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">top;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> idr_layer </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">id_free;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		  layers;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		  id_free_cnt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">	spinlock_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	  lock;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>top：指向顶层（最高层），</li></ul><p>使用一些接口来构造一个 idr 数据结构，并进行初始化。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> init_id_cache</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">idr_layer_cache)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		idr_layer_cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> kmem_cache_create</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;idr_layer_cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">			sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> idr_layer), </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, idr_cache_ctor, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> idr_init</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> idr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">idp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">	init_id_cache</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">	memset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(idp, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> idr));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">	spin_lock_init</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">idp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 idr_layer_cache 是一个全局变量，在初始化 idr 的时候，会尝试对 idr_layer_cache 进行初始化一次。暂时不用理 kmem_cache_create 方法的含义，只需要知道他是为 idr_layer_cache 获取到了内存空间即可。</p><p>然后将用户传入的 idr 结构体指针的空间，全部置为 0，并初始化结构体中的锁。</p><h3 id="二、分配一个-uid" tabindex="-1"><a class="header-anchor" href="#二、分配一个-uid"><span>二、分配一个 UID</span></a></h3><p>构造好 idr 之后，就可以分配新的 UID 了。这个过程分为两步。</p><ul><li>告诉 idr，我们需要分配新的 UID，允许其在必要时可以调整后备树的大小</li><li>请求新的 UID</li></ul><p>对于第一步，我们可以使用 <code>idr_pre_get</code> 这个方法</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> free_layer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> idr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">idp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> idr_layer </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	 * Depends on the return element being zeroed.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">	spin_lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">idp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">	p</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ary</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> idp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">id_free</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">	idp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">id_free</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> p;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">	idp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">id_free_cnt</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">	spin_unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">idp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> idr_pre_get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> idr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">idp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> unsigned</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> gfp_mask</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">idp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">id_free_cnt</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> IDR_FREE_MAX) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> idr_layer </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">new;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		new </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> kmem_cache_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(idr_layer_cache, gfp_mask);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(new </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">			return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">		free_layer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(idp, new);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IDR_FREE_MAX 这个值经过计算，在 64 位机器上是 12。感兴趣可以去计算一下。</p>`,16)]))}const r=s(t,[["render",h],["__file","内核数据结构之映射.html.vue"]]),d=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/%E5%86%85%E6%A0%B8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%98%A0%E5%B0%84.html","title":"内核数据结构之映射","lang":"zh-CN","frontmatter":{"title":"内核数据结构之映射","description":"我们一般称键值对数组为映射，也称为哈希。一般查找的时间复杂度可以低至常数级别。在高频次的查询场景中，有较为优异的性能。关于映射的性质，我们不过多讨论，本文主要看看 Linux 中映射的实现，本文以 Linux 2.6.12 版本为例。 Linux 实现的映射，并不是一个通用的映射。他的目标是：映射一个唯一数（UID）到一个指针。 一、实现结构 Linu...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/%E5%86%85%E6%A0%B8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%98%A0%E5%B0%84.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"内核数据结构之映射"}],["meta",{"property":"og:description","content":"我们一般称键值对数组为映射，也称为哈希。一般查找的时间复杂度可以低至常数级别。在高频次的查询场景中，有较为优异的性能。关于映射的性质，我们不过多讨论，本文主要看看 Linux 中映射的实现，本文以 Linux 2.6.12 版本为例。 Linux 实现的映射，并不是一个通用的映射。他的目标是：映射一个唯一数（UID）到一个指针。 一、实现结构 Linu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内核数据结构之映射\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"一、实现结构","slug":"一、实现结构","link":"#一、实现结构","children":[]},{"level":3,"title":"二、分配一个 UID","slug":"二、分配一个-uid","link":"#二、分配一个-uid","children":[]}],"git":{},"readingTime":{"minutes":1.72,"words":516},"filePathRelative":"技术专题/Linux研究/内核数据结构之映射.md","excerpt":"<p>我们一般称键值对数组为映射，也称为哈希。一般查找的时间复杂度可以低至常数级别。在高频次的查询场景中，有较为优异的性能。关于映射的性质，我们不过多讨论，本文主要看看 Linux 中映射的实现，本文以 Linux 2.6.12 版本为例。</p>\\n<p>Linux 实现的映射，并不是一个通用的映射。他的目标是：映射一个唯一数（UID）到一个指针。</p>\\n<h3>一、实现结构</h3>\\n<p>Linux 提供了结构体 idr 用来完成这一目标。如下：</p>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c\\" data-title=\\"c\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">struct</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> idr_layer {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">\\tunsigned</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> long</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">\\t\\t bitmap;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">\\tstruct</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> idr_layer\\t</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">*</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#E06C75\\">ary</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">[</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">1</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">&lt;&lt;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">IDR_BITS];</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">  // 64 位机器 IDR_BITS 为 6</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">\\tint</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">\\t\\t\\t count;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">struct</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> idr {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">\\tstruct</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> idr_layer </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">top;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">\\tstruct</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> idr_layer </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">id_free;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">\\tint</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">\\t\\t  layers;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">\\tint</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">\\t\\t  id_free_cnt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#56B6C2\\">\\tspinlock_t</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">\\t  lock;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">};</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,d as data};
