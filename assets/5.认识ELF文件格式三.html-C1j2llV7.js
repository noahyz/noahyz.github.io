import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-D1zlwylF.js";const e={};function h(p,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="认识-elf-文件格式-三" tabindex="-1"><a class="header-anchor" href="#认识-elf-文件格式-三"><span>认识 ELF 文件格式（三）</span></a></h2><p>本篇文章我们介绍 ELF 文件中的程序头</p><h3 id="一、程序头" tabindex="-1"><a class="header-anchor" href="#一、程序头"><span>一、程序头</span></a></h3><p>程序头提供了 ELF 文件的段视图，segment 我们将其翻译成段。与节头提供的节视图不一样。节视图仅适用于静态链接。而段视图是在将 ELF 文件加载到进程并执行的时候，定位相关代码和数据，并确定加载到虚拟内存中的内容时，操作系统和动态链接器会用到段视图。</p><p>ELF 的段包含零个或多个节，实际上就是把多个节捆绑成单个段。段提供的可执行视图，只有 ELF 二进制文件才会用到他们，而非二进制文件，比如可重定位对象，则用不到他们。</p><p>如下则是程序头以及段和节之间的映射关系。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># readelf --wide --segments main </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Elf</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> DYN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (Shared </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">object</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> file</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Entry</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> point</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x400</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">There</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> are</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> program</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> headers,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> starting</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> offset</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 52</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Program</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Headers:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  Type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">           Offset</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   VirtAddr</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   PhysAddr</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   FileSiz</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> MemSiz</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  Flg</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Align</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  PHDR</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">           0x000034</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00000034</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00000034</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00140</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00140</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> R</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">   0x4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  INTERP</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">         0x000174</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00000174</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00000174</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00013</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00013</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> R</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">   0x1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      [Requesting program interpreter: /lib/ld-linux.so.2]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  LOAD</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">           0x000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x0074c</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x0074c</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> R</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> E</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x1000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  LOAD</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">           0x000ed8</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00001ed8</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00001ed8</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00130</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00134</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> RW</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0x1000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  DYNAMIC</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">        0x000ee0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00001ee0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00001ee0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x000f8</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x000f8</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> RW</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0x4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  NOTE</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">           0x000188</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00000188</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00000188</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00044</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00044</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> R</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">   0x4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  TLS</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">            0x000ed8</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00001ed8</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00001ed8</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00004</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> R</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">   0x4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  GNU_EH_FRAME</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">   0x000614</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00000614</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00000614</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x0003c</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x0003c</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> R</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">   0x4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  GNU_STACK</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">      0x000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00000</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00000</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> RW</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  0x10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  GNU_RELRO</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">      0x000ed8</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00001ed8</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00001ed8</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00128</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0x00128</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> R</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">   0x1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Section</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Segment</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mapping:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  Segment</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Sections...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">   00</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">     </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">   01</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">     .interp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">   02</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">     .interp</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .note.ABI-tag</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .note.gnu.build-id</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .gnu.hash</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .dynsym</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .dynstr</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .gnu.version</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .gnu.version_r</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .rel.dyn</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .rel.plt</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .init</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .plt</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .plt.got</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .text</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .fini</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .rodata</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .eh_frame_hdr</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .eh_frame</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">   03</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">     .init_array</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .fini_array</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .dynamic</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .got</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .data</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .bss</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">   04</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">     .dynamic</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">   05</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">     .note.ABI-tag</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .note.gnu.build-id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">   06</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">     .tbss</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">   07</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">     .eh_frame_hdr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">   08</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">     </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">   09</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">     .init_array</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .fini_array</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .dynamic</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .got</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们随便找一个二进制文件，然后通过 readelf 查看对应的段和节之间的映射关系。如上，有 10 个程序头，并且通过 <code> Section to Segment mapping</code> 部分，我们发现 “段只不过是把节简单的绑定在一起” 而已。</p><p>如下是一个程序头的结构体定义，一个 ELF 文件有多个程序头，程序头如同数组一样排列，我们也将其称为程序头表。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>typedef struct</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  Elf64_Word	p_type;			/* Segment type */</span></span>
<span class="line"><span>  Elf64_Word	p_flags;		/* Segment flags */</span></span>
<span class="line"><span>  Elf64_Off	p_offset;		/* Segment file offset */</span></span>
<span class="line"><span>  Elf64_Addr	p_vaddr;		/* Segment virtual address */</span></span>
<span class="line"><span>  Elf64_Addr	p_paddr;		/* Segment physical address */</span></span>
<span class="line"><span>  Elf64_Xword	p_filesz;		/* Segment size in file */</span></span>
<span class="line"><span>  Elf64_Xword	p_memsz;		/* Segment size in memory */</span></span>
<span class="line"><span>  Elf64_Xword	p_align;		/* Segment alignment */</span></span>
<span class="line"><span>} Elf64_Phdr;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们来解析每一个字段的含义。</p><h4 id="_1-p-type-字段" tabindex="-1"><a class="header-anchor" href="#_1-p-type-字段"><span>1. p_type 字段</span></a></h4><p>标识了段的类型，常见的类型包括：<code>PT_LOAD、PT_DYNAMIC、PT_INTERP</code>。</p><ul><li>PT_LOAD：此类型的段会在创建进程时加载到内存中，程序头的剩余部分描述了可加载块的大小和将其加载到的地址。通常至少有两个 <code>PT_LOAD</code> 类型的段，一个包含不可写数据节，另一个包含可写数据节。</li><li><code>PT_INTERP</code>：此段通常包含 <code>.interp</code> 节，该节提供了加载二进制文件的解释器的名称。</li><li><code>PT_DYNAMIC</code>：此段包含了 <code>.dynamic</code> 节，该节告诉解释器如何解析二进制文件用于执行。</li></ul><h4 id="_2-p-flags-字段" tabindex="-1"><a class="header-anchor" href="#_2-p-flags-字段"><span>2. p_flags 字段</span></a></h4><p>指定了段在运行时的访问权限，这里有 3 种重要的标志类型：<code>PF_X、PF_W、PF_R</code> 。</p><ul><li><code>PF_X</code> 标志：指定该段为可执行，一般对代码段设置此标志</li><li><code>PF_W</code> 标志：表示该段为可写，一般对可写数据段设置该位，代码段一般不设置该位。</li><li><code>PF_R</code> 标志：表示该段为可读，该属性在代码段和数据段都是正常情况。</li></ul><h4 id="_3-p-offset-字段、p-vaddr-字段、p-paddr-字段、p-filesz-字段和-p-memsz-字段" tabindex="-1"><a class="header-anchor" href="#_3-p-offset-字段、p-vaddr-字段、p-paddr-字段、p-filesz-字段和-p-memsz-字段"><span>3. p_offset 字段、p_vaddr 字段、p_paddr 字段、p_filesz 字段和 p_memsz 字段</span></a></h4><p>其中 p_offset 字段：指定该段的起始文件偏移量，p_vaddr 字段：指定了加载的虚拟地址，p_filesz 字段：指定了段的大小。p_memsz 字段：指定了段在内存中的大小。</p><p>在某些操作系统上，可以使用 p_paddr 字段：指定段在物理内存的那个地址进行加载。在 Linux 操作系统中，该字段并未被使用且设置为零，因为操作系统在虚拟内存中执行二进制文件。</p><p>为什么要用 p_filesz 和 p_memsz 来指定段在文件中的大小和在内存中大小呢？</p><p>因为我们知道某些节只表明需要在内存中分配一些字节，而实际上并没有在二进制文件中占用这些字节。比如 <code>.bss</code> 节包含的初始化数据，肯定为零，所以实际上无须在二进制文件中包含这些零。但是。再将包含 <code>.bss</code> 节的段加载虚拟内存的时候，就应该分配 <code>.bss</code> 里面所有的字节。因此，<code>p_memsz</code> 很可能会大于 <code>p_filesz</code> 字段。这种情况下，链接器在加载二进制文件时，就会在段的末尾添加额外的字节，并且将其初始化为零。</p><h4 id="_4-p-align-字段" tabindex="-1"><a class="header-anchor" href="#_4-p-align-字段"><span>4. p_align 字段</span></a></h4><p>指定了段所需的内存对齐方式，以字节为单位。对齐值 0 或 1 表示不需要特定的对齐方式。如果 p_align 未设置为 0 或者 1，则其值必须是 2 的指数，并且 p_vaddr 必须等于 <code>p_offset % p_align</code>。</p><h3 id="二、小结" tabindex="-1"><a class="header-anchor" href="#二、小结"><span>二、小结</span></a></h3><p>程序头我们介绍完了，因为段就是多个节的映射。只是看待的角度不同而已。</p><p>再将 ELF 二进制加载到进程中并且执行的时候，定位相关代码和数据并确定加载到虚拟内存中的内容时，操作系统和动态链接器就会使用到段视图。</p>`,27)]))}const d=i(e,[["render",h],["__file","5.认识ELF文件格式三.html.vue"]]),r=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/5.%E8%AE%A4%E8%AF%86ELF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%B8%89.html","title":"5.认识ELF文件格式（三）","lang":"zh-CN","frontmatter":{"title":"5.认识ELF文件格式（三）","description":"认识 ELF 文件格式（三） 本篇文章我们介绍 ELF 文件中的程序头 一、程序头 程序头提供了 ELF 文件的段视图，segment 我们将其翻译成段。与节头提供的节视图不一样。节视图仅适用于静态链接。而段视图是在将 ELF 文件加载到进程并执行的时候，定位相关代码和数据，并确定加载到虚拟内存中的内容时，操作系统和动态链接器会用到段视图。 ELF 的...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/5.%E8%AE%A4%E8%AF%86ELF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%B8%89.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"5.认识ELF文件格式（三）"}],["meta",{"property":"og:description","content":"认识 ELF 文件格式（三） 本篇文章我们介绍 ELF 文件中的程序头 一、程序头 程序头提供了 ELF 文件的段视图，segment 我们将其翻译成段。与节头提供的节视图不一样。节视图仅适用于静态链接。而段视图是在将 ELF 文件加载到进程并执行的时候，定位相关代码和数据，并确定加载到虚拟内存中的内容时，操作系统和动态链接器会用到段视图。 ELF 的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5.认识ELF文件格式（三）\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"认识 ELF 文件格式（三）","slug":"认识-elf-文件格式-三","link":"#认识-elf-文件格式-三","children":[{"level":3,"title":"一、程序头","slug":"一、程序头","link":"#一、程序头","children":[]},{"level":3,"title":"二、小结","slug":"二、小结","link":"#二、小结","children":[]}]}],"git":{},"readingTime":{"minutes":4.55,"words":1366},"filePathRelative":"技术专题/链接与装载/5.认识ELF文件格式三.md","excerpt":"<h2>认识 ELF 文件格式（三）</h2>\\n<p>本篇文章我们介绍 ELF 文件中的程序头</p>\\n<h3>一、程序头</h3>\\n<p>程序头提供了 ELF 文件的段视图，segment 我们将其翻译成段。与节头提供的节视图不一样。节视图仅适用于静态链接。而段视图是在将 ELF 文件加载到进程并执行的时候，定位相关代码和数据，并确定加载到虚拟内存中的内容时，操作系统和动态链接器会用到段视图。</p>\\n<p>ELF 的段包含零个或多个节，实际上就是把多个节捆绑成单个段。段提供的可执行视图，只有 ELF 二进制文件才会用到他们，而非二进制文件，比如可重定位对象，则用不到他们。</p>\\n<p>如下则是程序头以及段和节之间的映射关系。</p>","autoDesc":true}');export{d as comp,r as data};
