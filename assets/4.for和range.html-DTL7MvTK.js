import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-D1zlwylF.js";const l={};function h(t,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="for-和-range" tabindex="-1"><a class="header-anchor" href="#for-和-range"><span>for 和 range</span></a></h2><h3 id="一、遍历切片或数组" tabindex="-1"><a class="header-anchor" href="#一、遍历切片或数组"><span>一、遍历切片或数组</span></a></h3><h4 id="_1-遍历数组的同时修改数组元素" tabindex="-1"><a class="header-anchor" href="#_1-遍历数组的同时修改数组元素"><span>1. 遍历数组的同时修改数组元素</span></a></h4><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> _</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">输出</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">：[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，结果表明，循环只遍历了原始切片中的三个元素，在遍历切片时追加的元素不会增加循环的执行次数，因此循环最终还是会停下来。</p><p>原理：Go语言源码中，对于所有的 range 循环，Go 语言都会在编译期将原切片或者数组赋值给一个新变量，在赋值过程中就发生了复制，并且又使用 len 关键字预先获取了切片的长度，所以在循环中追加新元素不会改变循环执行的次数。</p><h4 id="_2-range-返回变量的地址" tabindex="-1"><a class="header-anchor" href="#_2-range-返回变量的地址"><span>2. range 返回变量的地址</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>func main() {</span></span>
<span class="line"><span>    arr := []int{1,2,3}</span></span>
<span class="line"><span>    newArr := []*int{}</span></span>
<span class="line"><span>    for _, v := range arr {</span></span>
<span class="line"><span>        newArr = append(newArr, &amp;v)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    for _, v := range newArr {</span></span>
<span class="line"><span>        fmt.Printf(&quot;%d &quot;, *v)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>输出：3 3 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原理：同时遍历索引和元素的 range 循环，Go语言也会额外创建一个新的变量 v2 存储切片中的元素，循环中使用的这个变量 v2 会在每一次迭代被重新赋值而覆盖，赋值时也会触发复制。</p><p>因此我们想访问数组中元素的地址时，应该使用 <code>&amp;arr[index]</code> 这种形式</p><h3 id="二、遍历哈希表" tabindex="-1"><a class="header-anchor" href="#二、遍历哈希表"><span>二、遍历哈希表</span></a></h3><p>遍历哈希表时，编译器会根据 range 返回值的数量在循环体中插入需要的赋值语句。</p><ul><li><code> for k := range hash{}</code> ，会插入 <code> k := *hit.key</code></li><li><code> for k, v := range hash{}</code>，会插入 <code>k := *hit.key, v := *hit.value</code></li></ul><p>遍历前，会通过 <code>runtime.fastrand</code> 生成一个随机数随机选择一个遍历桶的起始位置。Go 语言不希望使用者依赖固定的遍历顺序，因此引入了随机数保证遍历的随机性。那么遍历过程中，通过随机数先选出一个正常桶开始遍历，随后遍历所有溢出桶，因为哈希表中正常桶和溢出桶在内存中是连续的，最后按照索引顺序遍历哈希表中其他的桶，直到遍历完所有桶。</p><h3 id="三、遍历字符串" tabindex="-1"><a class="header-anchor" href="#三、遍历字符串"><span>三、遍历字符串</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>func main() {</span></span>
<span class="line"><span>    str := &quot;hello 世界&quot;</span></span>
<span class="line"><span>    for i := 0; i &lt; len(str); i++ {</span></span>
<span class="line"><span>        fmt.Printf(&quot;%c&quot;, str[i])</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    fmt.Println()</span></span>
<span class="line"><span>    for _, v := range str {</span></span>
<span class="line"><span>        fmt.Printf(&quot;%c&quot;, v)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>输出：</span></span>
<span class="line"><span>hello ä¸�ç��</span></span>
<span class="line"><span>hello 世界</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，遍历字符串分为两种情况</p><ul><li>使用下标访问字符串，那将会得到字符串中每个字节存储的元素，无法正常输出汉字</li><li>使用 range 访问字符串，就会转换成 rune 类型，rune 类型的定义：<code>type rune = int32</code>，rune 类型就是为了区分字符值和整数值。因此如果当前 rune 是 ASCII 的，那么只会占用 1 字节长度，每次循环体运行之后只需要将索引加一；但是如果当前 rune 占用多个字节，就会使用 <code>runtime.decoderune</code> 函数解码。循环运行后将索引加 N 个字节。</li></ul><h3 id="四、遍历-channel" tabindex="-1"><a class="header-anchor" href="#四、遍历-channel"><span>四、遍历 channel</span></a></h3><p>使用 for range 也可以遍历 channel。如 <code>for v := range ch {}</code> 语句，会循环从 channel 中取出待处理的值，并且会调用 <code>runtime.chanrecv2</code> 阻塞当前协程。</p>`,20)]))}const k=i(l,[["render",h],["__file","4.for和range.html.vue"]]),d=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/4.for%E5%92%8Crange.html","title":"4.for和range的使用","lang":"zh-CN","frontmatter":{"title":"4.for和range的使用","date":"2023-01-19T11:11:41.000Z","tags":["go"],"description":"for 和 range 一、遍历切片或数组 1. 遍历数组的同时修改数组元素 如上，结果表明，循环只遍历了原始切片中的三个元素，在遍历切片时追加的元素不会增加循环的执行次数，因此循环最终还是会停下来。 原理：Go语言源码中，对于所有的 range 循环，Go 语言都会在编译期将原切片或者数组赋值给一个新变量，在赋值过程中就发生了复制，并且又使用 len...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/4.for%E5%92%8Crange.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"4.for和range的使用"}],["meta",{"property":"og:description","content":"for 和 range 一、遍历切片或数组 1. 遍历数组的同时修改数组元素 如上，结果表明，循环只遍历了原始切片中的三个元素，在遍历切片时追加的元素不会增加循环的执行次数，因此循环最终还是会停下来。 原理：Go语言源码中，对于所有的 range 循环，Go 语言都会在编译期将原切片或者数组赋值给一个新变量，在赋值过程中就发生了复制，并且又使用 len..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.for和range的使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"for 和 range","slug":"for-和-range","link":"#for-和-range","children":[{"level":3,"title":"一、遍历切片或数组","slug":"一、遍历切片或数组","link":"#一、遍历切片或数组","children":[]},{"level":3,"title":"二、遍历哈希表","slug":"二、遍历哈希表","link":"#二、遍历哈希表","children":[]},{"level":3,"title":"三、遍历字符串","slug":"三、遍历字符串","link":"#三、遍历字符串","children":[]},{"level":3,"title":"四、遍历 channel","slug":"四、遍历-channel","link":"#四、遍历-channel","children":[]}]}],"git":{},"readingTime":{"minutes":2.69,"words":808},"filePathRelative":"编程语言/go语言/基础语法/4.for和range.md","localizedDate":"2023年1月19日","excerpt":"<h2>for 和 range</h2>\\n<h3>一、遍历切片或数组</h3>\\n<h4>1. 遍历数组的同时修改数组元素</h4>\\n<div class=\\"language-go line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"go\\" data-title=\\"go\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">func</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> main</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">    arr</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\\"> :=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> []</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">{</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">2</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">3</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    for</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> _</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">v</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\\"> :=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> range</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> arr</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">        arr</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> append</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">arr</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">v</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">    fmt</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">Println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">arr</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">输出</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">：[</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">1</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> 2</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> 3</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> 1</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> 2</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> 3</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">]</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{k as comp,d as data};
