import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as h}from"./app-D1zlwylF.js";const n={};function l(e,i){return h(),a("div",null,i[0]||(i[0]=[t(`<h3 id="强制修改const-char-类型的数据" tabindex="-1"><a class="header-anchor" href="#强制修改const-char-类型的数据"><span>强制修改const char*类型的数据</span></a></h3><p>首先来说明const 的位置不同所带来的语法规则不同</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>const 放在 * 号的前面，代表指针指向的内容不变，const 放在 * 号的后面，代表指针的指向不能改变。且在编译时 &quot;hello&quot; 会放在常量区。常量区的变量只可读不可修改。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // ok</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // error</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> const_cast</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(b);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // ok</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，a 所指向的字符串没有在常量区，让一个 const char* 的指针指向它也不会改变原有字符串的存储位置，只不过是规范了不能使用指针b去修改字符串。我们也可以使用 const_cast 来去掉指针b的不可修改指向字符串的属性。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> const_cast</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(a);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // error</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此代码在编译的时候不会报错，代码语法没有错误，但是会在运行时报错。指针a 所指向的字符串存储在常量区。虽然可以去掉指针a 本身的不可修改指向字符串内容的属性，但是无法改变所指向的字符串的存储区域。对于常量区的内容只可读，不可写。</p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h4><ul><li>能否修改一块内存空间，主要看这块内存空间在那个区域，常量区不可修改。堆栈区可修改。</li><li>既然有const 这种属性，那我们写代码就应该遵循这个约定，不要写可读性不好的代码</li></ul>`,10)]))}const r=s(n,[["render",l],["__file","18.强制修改const char指针类型的数据.html.vue"]]),d=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/18.%E5%BC%BA%E5%88%B6%E4%BF%AE%E6%94%B9const%20char%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE.html","title":"18.强制修改const char指针类型的数据","lang":"zh-CN","frontmatter":{"title":"18.强制修改const char指针类型的数据","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"强制修改const char*类型的数据 首先来说明const 的位置不同所带来的语法规则不同 const 放在 * 号的前面，代表指针指向的内容不变，const 放在 * 号的后面，代表指针的指向不能改变。且在编译时 \\"hello\\" 会放在常量区。常量区的变量只可读不可修改。 如上，a 所指向的字符串没有在常量区，让一个 const char* 的指...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/18.%E5%BC%BA%E5%88%B6%E4%BF%AE%E6%94%B9const%20char%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"18.强制修改const char指针类型的数据"}],["meta",{"property":"og:description","content":"强制修改const char*类型的数据 首先来说明const 的位置不同所带来的语法规则不同 const 放在 * 号的前面，代表指针指向的内容不变，const 放在 * 号的后面，代表指针的指向不能改变。且在编译时 \\"hello\\" 会放在常量区。常量区的变量只可读不可修改。 如上，a 所指向的字符串没有在常量区，让一个 const char* 的指..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"18.强制修改const char指针类型的数据\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"强制修改const char*类型的数据","slug":"强制修改const-char-类型的数据","link":"#强制修改const-char-类型的数据","children":[]}],"git":{},"readingTime":{"minutes":1.45,"words":435},"filePathRelative":"编程语言/c++语言/编码技巧/18.强制修改const char指针类型的数据.md","localizedDate":"2023年1月19日","excerpt":"<h3>强制修改const char*类型的数据</h3>\\n<p>首先来说明const 的位置不同所带来的语法规则不同</p>\\n<div class=\\"language-c++ line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c++\\" data-title=\\"c++\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">const</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> char</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> a </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> \\"hello\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">char</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\">*</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> const</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> b </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> \\"hello\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,d as data};
