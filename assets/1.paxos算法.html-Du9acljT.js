import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as t,o as i}from"./app-D1zlwylF.js";const o="/assets/%E6%8F%90%E6%A1%88%E5%B7%B2%E8%A2%AB%E6%89%B9%E5%87%86-QdDysNUv.png",n="/assets/%E6%8F%90%E6%A1%88%E8%A2%AB%E6%8E%A5%E5%8F%97%E4%B8%94%E6%8F%90%E8%AE%AE%E8%80%85%E5%8F%AF%E8%A7%81-D3syHtbO.png",r="/assets/%E6%8F%90%E6%A1%88%E8%A2%AB%E6%8E%A5%E5%8F%97%E4%B8%94%E6%8F%90%E8%AE%AE%E8%80%85%E4%B8%8D%E5%8F%AF%E8%A7%81-B11DD_fj.png",s="/assets/paxos%E6%B4%BB%E9%94%81-BBkWCfoD.png",c={};function l(d,e){return i(),p("div",null,e[0]||(e[0]=[t('<h3 id="一、算法流程" tabindex="-1"><a class="header-anchor" href="#一、算法流程"><span>一、算法流程</span></a></h3><p>paxos 算法将分布式系统中的节点分为几种角色：</p><ul><li>客户端：向分布式系统发送请求，并等待响应</li><li>提议者：提议者收到客户端的请求，提出相关的提案，试图让接受者接受该提案，并在发生冲突时进行协调，推动算法运行</li><li>接受者：也叫投票者，即投票接受或拒绝提议者的提案，若超过半数的接受者接受提案，则该提案被批准</li><li>学习者：学习者只能学习被批准的提案，不参与决议提案。一旦客户端的请求得到接受者的同意，学习者就可以学习到提案值，执行其中的请求操作并向客户端发送响应。增加多个学习者可以提高系统的可用性。</li></ul><h4 id="_1-第一阶段" tabindex="-1"><a class="header-anchor" href="#_1-第一阶段"><span>1. 第一阶段</span></a></h4><p>phase 1a（Prepare阶段）：客户端请求，提议者收到客户端的请求后，选择一个最新的提案编号 n，向超过半数的接受者广播 perpare 消息，请求接受者对提案编号进行投票。注意：这里只发送提案编号。</p><p>phase 1b（Promise阶段）：接受者收到 Prepare 请求消息后进行判断：</p><ul><li>如果 prepare 消息中的提案编号 n 大于之前接受的所有提案编号，则返回 promise 消息进行响应，并承诺不会再接受任何编号小于 n 的提案。特别的，如果接受者之前接受了某个提案，那么 promise 响应还应将前一次提案的编号和对应的值一起发送给提议者。</li><li>否则，即提案编号 n 小于等于接受者之前接受的最大编号，就忽略该请求，但常常会回复一个拒绝响应。</li></ul><p>为了实现故障恢复，接受者需要持久化存储已接受的最大提案编号（记为<code>max_n</code>）、已接受的提案编号（<code>accepted_N</code>）和已接受的提案值（<code>accepted_VALUE</code>）。</p><h4 id="_2-第二阶段" tabindex="-1"><a class="header-anchor" href="#_2-第二阶段"><span>2. 第二阶段</span></a></h4><p>phase 2a（Accept阶段）：当提议者收到超过半数的接受者的 promise 响应后，提议者向多数派的接受者发起 <code>accept(n, value)</code> 请求，这次要带上提案编号和提案值。</p><ul><li>注意：如果之前接受者的 promise 响应有返回已接受的提案值 accept_VALUE，那么使用提案编号最大的已接受值作为提案值。如果没有返回任何 accept_value，那么提议者可以自由决定提案值。</li><li>第一阶段和第二阶段中，多数派接受者不一定相同。因为两个多数派接受者之间必然存在交集，所以不会影响算法的正确性。</li><li>接受者在处理 accept 请求时，也要更新承诺的提案编号 max_n 的值，否则会导致集群接受不同的提案</li></ul><p>phase 2b（Accepted阶段）：接受者收到 Accept 请求后，在这期间如果接受者没有另外承诺提案编号比 n 更大的提案，则接受该提案，更新承诺的提案编号，保存已接受的提案。</p><p>注意：接受提案和批准提案是不同的，接受提案是接受者单独决定的，而批准提案需要满足超过半数接受者接受提案。</p><h3 id="二、案例剖析" tabindex="-1"><a class="header-anchor" href="#二、案例剖析"><span>二、案例剖析</span></a></h3><h4 id="_1-提案已被批准" tabindex="-1"><a class="header-anchor" href="#_1-提案已被批准"><span>1. 提案已被批准</span></a></h4><p>如下图，其中 S1 和 S5 是提议者，每个节点都扮演接受者。图中提案编号使用 <code>n.server_id</code> 的格式来表示，比如提案编号 3.1 表示 S1 发起的轮次 n 等于 3 的提案，具体比较时使用轮次 n 的值。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>图中所示流程如下：</p><ul><li>S1 收到客户端值为 X 的写请求，于是 S1 向 S1、S2、S3 发起 <code>prepare(3.1)</code> 请求，请求接受者对提案编号为 3.1 的提案进行投票处理。接受者接受该提案，回复 promise 响应。由于暂时没有接受其他提案，所以不回复任何其他提案信息。</li><li>由于 S1、S2 和 S3 没有接受过任何提案，S1 继续向 S1、S2、S3 发送 <code>accept(3.1, X)</code> 请求，三个节点都接受该提案，满足超过半数节点接受提案的条件，提案被成功批准。</li><li>之后，S5 收到客户端值 Y 的写请求，并向 S3、S4、S5 发送 <code>prepare(4.5)</code>请求，由于提案编号 4 大于 3，并且提案已经被批准了，接受者 S3 会回复包含提案值 X 的 promise 响应。</li><li>S5 会根据 S3 的响应，将提案值 Y 替换成 X，继续向 S3、S4、S5 发送 <code>accept(4.5, X)</code>请求，之后提案再次被批准，但提案值依旧是 X。</li></ul><h4 id="_2-提案被接受-提议者可见" tabindex="-1"><a class="header-anchor" href="#_2-提案被接受-提议者可见"><span>2. 提案被接受，提议者可见</span></a></h4><p>和情况1类似，区别在于此时提案 3.1 还未被批准，只是被 S3 接受，但 S3 仍然会回复包含已经接受的提案值 X 的 promise 响应，所以 S5 仍然会将提案值替换成 X，最终所有接受者对 X 达成共识，虽然提案编号有所不同。</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意：只要有一个接受者在 promise 响应中返回了提案值，就要用他来替换提案值。</p><h4 id="_3-提案被接受-提议者不可见" tabindex="-1"><a class="header-anchor" href="#_3-提案被接受-提议者不可见"><span>3. 提案被接受，提议者不可见</span></a></h4><p>和情况2稍有不同，此处变成 S1 接受了提案，但是 S3 还未接受提案，因此在 S3、S4、S5 的 promise 响应中没有任何提案消息。所以 S5 没有收到任何上一阶段的提案值，于是自行决定提案值为 Y，并在第二阶段发送 <code>accept(4.5,Y)</code>请求。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>由于此时 S3 承诺的提案编号 n 变为了 4，且 4 大于 3，所以 S3 不再接受 S1 后续的 <code>accept(3.1, X)</code> 请求。虽然有两个节点接受了提案值为 X 的提案，但并不满足多数派的要求。最终提案值为 Y 的提案被批准。</p><h3 id="三、活锁" tabindex="-1"><a class="header-anchor" href="#三、活锁"><span>三、活锁</span></a></h3><p>如果提议者在 phase 1a 发出 prepare 请求消息，还没来得及发送 phase 2a 的 accept 请求消息，紧接着第二个提议者在 phase 1a 又发出提案编号更大的 prepare 请求。如果这样运行，接受者会始终停留在决定提案编号的大小这一过程中，都无法成功。</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>解决活锁问题最简单的方式就是引入随机超时，某个提议者发现提案没有被成功接受，则等待一个随机超时时间，让出机会，减少一直互相抢占的可能性。</p>',31)]))}const m=a(c,[["render",l],["__file","1.paxos算法.html.vue"]]),g=JSON.parse('{"path":"/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/1.paxos%E7%AE%97%E6%B3%95.html","title":"1.paxos算法","lang":"zh-CN","frontmatter":{"title":"1.paxos算法","description":"一、算法流程 paxos 算法将分布式系统中的节点分为几种角色： 客户端：向分布式系统发送请求，并等待响应 提议者：提议者收到客户端的请求，提出相关的提案，试图让接受者接受该提案，并在发生冲突时进行协调，推动算法运行 接受者：也叫投票者，即投票接受或拒绝提议者的提案，若超过半数的接受者接受提案，则该提案被批准 学习者：学习者只能学习被批准的提案，不参与...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/1.paxos%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"1.paxos算法"}],["meta",{"property":"og:description","content":"一、算法流程 paxos 算法将分布式系统中的节点分为几种角色： 客户端：向分布式系统发送请求，并等待响应 提议者：提议者收到客户端的请求，提出相关的提案，试图让接受者接受该提案，并在发生冲突时进行协调，推动算法运行 接受者：也叫投票者，即投票接受或拒绝提议者的提案，若超过半数的接受者接受提案，则该提案被批准 学习者：学习者只能学习被批准的提案，不参与..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.paxos算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"一、算法流程","slug":"一、算法流程","link":"#一、算法流程","children":[]},{"level":3,"title":"二、案例剖析","slug":"二、案例剖析","link":"#二、案例剖析","children":[]},{"level":3,"title":"三、活锁","slug":"三、活锁","link":"#三、活锁","children":[]}],"git":{},"readingTime":{"minutes":5.61,"words":1684},"filePathRelative":"分布式/分布式共识算法/1.paxos算法.md","excerpt":"<h3>一、算法流程</h3>\\n<p>paxos 算法将分布式系统中的节点分为几种角色：</p>\\n<ul>\\n<li>客户端：向分布式系统发送请求，并等待响应</li>\\n<li>提议者：提议者收到客户端的请求，提出相关的提案，试图让接受者接受该提案，并在发生冲突时进行协调，推动算法运行</li>\\n<li>接受者：也叫投票者，即投票接受或拒绝提议者的提案，若超过半数的接受者接受提案，则该提案被批准</li>\\n<li>学习者：学习者只能学习被批准的提案，不参与决议提案。一旦客户端的请求得到接受者的同意，学习者就可以学习到提案值，执行其中的请求操作并向客户端发送响应。增加多个学习者可以提高系统的可用性。</li>\\n</ul>","autoDesc":true}');export{m as comp,g as data};
