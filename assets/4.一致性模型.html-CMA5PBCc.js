import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as r}from"./app-D1zlwylF.js";const o={};function p(l,t){return r(),n("div",null,t[0]||(t[0]=[a('<p>一致性模型是指：在并发编程中，系统和开发者之间的一种约定，如果开发者遵循某些规则，那么开发者执行读操作或写操作的结果是可预测的。其中，可预测保证了程序逻辑的确定性。</p><h3 id="一、线性一致性" tabindex="-1"><a class="header-anchor" href="#一、线性一致性"><span>一、线性一致性</span></a></h3><p>也称为强一致性、原子一致性、</p><p>线性一致性的定义有两种：</p><p>非严格定义：分布式系统的所有操作看起来都是<strong>原子的</strong>，整个分布式系统<strong>看起来好像只有一个节点</strong>。</p><p>严格定义：给定一个执行历史，执行历史根据并发操作可以扩展为多个顺序历史，只要从中找到一个合法的顺序历史，那么该执行历史就是线性一致性的。</p><h3 id="二、顺序一致性" tabindex="-1"><a class="header-anchor" href="#二、顺序一致性"><span>二、顺序一致性</span></a></h3><p>只需要同一个客户端（或进程）的操作在排序后保持先后顺序不变，但不同客户端（或进程）之间的先后顺序是可以任意改变的。</p><p>顺序一致性和线性一致性的主要区别在于没有全局时间的限制，顺序一致性不要求不同客户端之间的操作的顺序一致，只关注局部的顺序。</p><h3 id="三、最终一致性" tabindex="-1"><a class="header-anchor" href="#三、最终一致性"><span>三、最终一致性</span></a></h3><p>只要系统最终能够达到一个稳定的状态，在某个阶段，系统各节点处理客户端的操作顺序可以不同，读操作也不需要返回最新的写操作的结果。在最终的状态下，只要不再执行写操作，读操作将返回相同的、最新的结果。</p>',11)]))}const h=e(o,[["render",p],["__file","4.一致性模型.html.vue"]]),c=JSON.parse('{"path":"/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%9E%8B/4.%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B.html","title":"4.分布式系统的一致性模型","lang":"zh-CN","frontmatter":{"title":"4.分布式系统的一致性模型","description":"一致性模型是指：在并发编程中，系统和开发者之间的一种约定，如果开发者遵循某些规则，那么开发者执行读操作或写操作的结果是可预测的。其中，可预测保证了程序逻辑的确定性。 一、线性一致性 也称为强一致性、原子一致性、 线性一致性的定义有两种： 非严格定义：分布式系统的所有操作看起来都是原子的，整个分布式系统看起来好像只有一个节点。 严格定义：给定一个执行历史...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%9E%8B/4.%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"4.分布式系统的一致性模型"}],["meta",{"property":"og:description","content":"一致性模型是指：在并发编程中，系统和开发者之间的一种约定，如果开发者遵循某些规则，那么开发者执行读操作或写操作的结果是可预测的。其中，可预测保证了程序逻辑的确定性。 一、线性一致性 也称为强一致性、原子一致性、 线性一致性的定义有两种： 非严格定义：分布式系统的所有操作看起来都是原子的，整个分布式系统看起来好像只有一个节点。 严格定义：给定一个执行历史..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.分布式系统的一致性模型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"一、线性一致性","slug":"一、线性一致性","link":"#一、线性一致性","children":[]},{"level":3,"title":"二、顺序一致性","slug":"二、顺序一致性","link":"#二、顺序一致性","children":[]},{"level":3,"title":"三、最终一致性","slug":"三、最终一致性","link":"#三、最终一致性","children":[]}],"git":{},"readingTime":{"minutes":1.44,"words":431},"filePathRelative":"分布式/分布式模型/4.一致性模型.md","excerpt":"<p>一致性模型是指：在并发编程中，系统和开发者之间的一种约定，如果开发者遵循某些规则，那么开发者执行读操作或写操作的结果是可预测的。其中，可预测保证了程序逻辑的确定性。</p>\\n<h3>一、线性一致性</h3>\\n<p>也称为强一致性、原子一致性、</p>\\n<p>线性一致性的定义有两种：</p>\\n<p>非严格定义：分布式系统的所有操作看起来都是<strong>原子的</strong>，整个分布式系统<strong>看起来好像只有一个节点</strong>。</p>\\n<p>严格定义：给定一个执行历史，执行历史根据并发操作可以扩展为多个顺序历史，只要从中找到一个合法的顺序历史，那么该执行历史就是线性一致性的。</p>","autoDesc":true}');export{h as comp,c as data};
