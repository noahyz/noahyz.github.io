import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-D1zlwylF.js";const i={};function l(r,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h4 id="c-11-之-enable-shared-from-this" tabindex="-1"><a class="header-anchor" href="#c-11-之-enable-shared-from-this"><span>c++11 之 enable_shared_from_this</span></a></h4><p>enable_shared_from_this 是一个模板类</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>template&lt; class T &gt; class enable_shared_from_this;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>std::enable_shared_from_this</code> 能让一个对象（假设名为 t，且被一个 std::shared_ptr 对象 pt 管理）安全地生成其他额外的 std::shared_ptr 实例，他们与 pt 共享对象 t 的所有权</p><p>若一个类 T 继承 <code>std::enable_shared_from_this&lt;T&gt;</code> ，则会为该类提供成员函数：shared_from_this。当 T 类型对象 t 被一个名为 pt 的 <code>std::shared_ptr&lt;T&gt;</code> 类对象管理时，调用 <code>T::shared_from_this</code> 成员函数，将会返回一个新的 <code>std::shared_ptr&lt;T&gt;</code> 对象，他与 pt 共享 t 的所有权。</p><h4 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>class B : public std::enable_shared_from_this&lt;B&gt; {</span></span>
<span class="line"><span>public:</span></span>
<span class="line"><span>    std::shared_ptr&lt;B&gt; get_ptr() {</span></span>
<span class="line"><span>        return B::shared_from_this();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    ~B() {</span></span>
<span class="line"><span>        std::cout &lt;&lt; &quot;B::~B() called&quot; &lt;&lt; std::endl;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main() {</span></span>
<span class="line"><span>    std::shared_ptr&lt;B&gt; b1(new B());</span></span>
<span class="line"><span>    std::shared_ptr&lt;B&gt; b2 = b1-&gt;get_ptr();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    std::cout &lt;&lt; &quot;b1.use_count(): &quot; &lt;&lt; b1.use_count() &lt;&lt; std::endl;</span></span>
<span class="line"><span>    std::cout &lt;&lt; &quot;b2.use_count(): &quot; &lt;&lt; b2.use_count() &lt;&lt; std::endl;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>输出：</span></span>
<span class="line"><span>b1.use_count(): 2</span></span>
<span class="line"><span>b2.use_count(): 2</span></span>
<span class="line"><span>B::~B() called</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h4><p>当类A 被 shared_ptr 管理，且在类A 的成员函数中需要把当前类对象作为参数传给其他函数时，就需要传递一个指向自身的 shared_ptr。</p><ol><li><p>为什么不直接传递 this 指针？</p><p>使用智能指针的初衷是为了方便资源管理，如果智能指针和原始指针混用，很容易破坏智能指针的语义，从而产生问题</p></li><li><p>可以直接传递 <code>shared_ptr&lt;this&gt;</code> 吗？</p><p>不能，这样会导致两个非共享的 shared_ptr 指向同一个对象，未增加引用计数导致对象被析构两次。</p></li></ol>`,10)]))}const h=e(i,[["render",l],["__file","18.c__11之enable_shared_from_this.html.vue"]]),c=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/18.c__11%E4%B9%8Benable_shared_from_this.html","title":"18.c++11之enable_shared_from_this","lang":"zh-CN","frontmatter":{"title":"18.c++11之enable_shared_from_this","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"c++11 之 enable_shared_from_this enable_shared_from_this 是一个模板类 std::enable_shared_from_this 能让一个对象（假设名为 t，且被一个 std::shared_ptr 对象 pt 管理）安全地生成其他额外的 std::shared_ptr 实例，他们与 pt 共享对象...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/18.c__11%E4%B9%8Benable_shared_from_this.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"18.c++11之enable_shared_from_this"}],["meta",{"property":"og:description","content":"c++11 之 enable_shared_from_this enable_shared_from_this 是一个模板类 std::enable_shared_from_this 能让一个对象（假设名为 t，且被一个 std::shared_ptr 对象 pt 管理）安全地生成其他额外的 std::shared_ptr 实例，他们与 pt 共享对象..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"18.c++11之enable_shared_from_this\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":1.26,"words":377},"filePathRelative":"编程语言/c++语言/基础语法/18.c++11之enable_shared_from_this.md","localizedDate":"2023年1月19日","excerpt":"<h4>c++11 之 enable_shared_from_this</h4>\\n<p>enable_shared_from_this 是一个模板类</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>template&lt; class T &gt; class enable_shared_from_this;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{h as comp,c as data};
