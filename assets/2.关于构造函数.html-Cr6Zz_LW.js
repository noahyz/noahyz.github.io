import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as e,o as n}from"./app-D1zlwylF.js";const l={};function t(p,s){return n(),i("div",null,s[0]||(s[0]=[e(`<h3 id="一、默认的构造函数" tabindex="-1"><a class="header-anchor" href="#一、默认的构造函数"><span>一、默认的构造函数</span></a></h3><p>比如一段代码</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>class Foo {</span></span>
<span class="line"><span>public:</span></span>
<span class="line"><span>		int val;</span></span>
<span class="line"><span>		Foo* p_next;</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先明确默认构造函数是程序需要？还是编译器需要？</p><ul><li>如果是程序需要，那就是程序员的责任，比如将数据成员置为 0</li><li>如果是编译器需要，那么编译器生成的构造函数只执行编译器所需的行动。如上不会将两个用户数据成员 val 和 p_next 置为 0</li></ul><p>对于一个类，如果没有任何用户定义的构造函数，那么就会有一个默认构造函数被隐式的声明出来，但我们认为他“对于用户”而言是“无用”的。不过也有“有用”的时候。如下有 4 种情况是有用的：</p><h4 id="_1-带有默认构造函数的成员类对象" tabindex="-1"><a class="header-anchor" href="#_1-带有默认构造函数的成员类对象"><span>1. 带有默认构造函数的成员类对象</span></a></h4><p>如果一个类没有任何构造函数，但他内含一个成员对象，并且这个成员对象有默认构造函数。那么这个类的隐式的默认构造函数就是“有用的”。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>class Foo { public: Foo(); Foo(int) ... };</span></span>
<span class="line"><span>class Bar { public: Foo foo; char* str };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时编译器生成的 Bar 的默认构造函数会调用 Foo 的构造函数，但是并不会初始化 <code>Bar::str</code>。将 <code>Bar::foo</code> 初始化是编译器的责任，而将 <code>Bar::str</code> 初始化是程序猿的责任。</p><p>如果构造函数被程序猿显式的定义了，并且如果这个类中含有一个或多个数据成员（类对象），那么这个类的每一个构造函数都必须调用这些数据成员的默认构造函数，编译器会扩张这个类已经定义的构造函数，在其中安插一些代码，使这个类对象在进行构造时，先调用成员对象的构造函数。</p><p>同时，C++语言要求以成员对象在类中的声明顺序来调用各个构造函数。这一点由编译器完成，他会为类的每一个构造函数插入代码，以成员对象的声明顺序调用每一个成员对象所关联的默认构造函数。并且这些代码会插入在用户代码之前。</p><h4 id="_2-带有默认构造函数的基类" tabindex="-1"><a class="header-anchor" href="#_2-带有默认构造函数的基类"><span>2. 带有默认构造函数的基类</span></a></h4><p>如果一个子类没有构造函数，但他的基类有默认构造函数。那么这个子类的默认构造函数就是“有用的”。他会调用基类的默认构造函数（按照他们的声明顺序）。</p><p>如果程序猿对这个子类提供了多个构造函数，但没有默认构造函数，编译器会为每个用户定义的构造函数加入代码（调用基类的默认构造函数）。</p><p>但注意，编译器不会在生成一个新的默认构造函数，因为已经有用户提供的构造函数了。</p><p>如果同时存在带有默认构造函数的成员类对象，那么顺序为先调用基类的默认构造函数，在调用成员类对象的默认构造函数。</p><h4 id="_3-带有一个虚函数的类" tabindex="-1"><a class="header-anchor" href="#_3-带有一个虚函数的类"><span>3. 带有一个虚函数的类</span></a></h4><p>类声明（或继承）了一个虚函数。由于没有用户定义的构造函数，那么编译器生成的默认构造函数需要详细的记录一些信息。</p><ul><li>编译器会生成虚表，放置类的虚函数地址</li><li>在每一个类对象中，编译器会生成一个虚表指针，放置虚表地址</li></ul><p>为了让这个机制生效，编译器必须为每一个类对象的虚表指针设置初始值，用以指向合适的虚表地址。对于类所定义的每一个构造函数，编译器都会插入一些代码来做这个事情。</p><p>对于没有构造函数的类，编译器会生成默认构造函数，用以初始化每一个类对象的虚表指针。</p><h4 id="_4-带有一个虚基类的类" tabindex="-1"><a class="header-anchor" href="#_4-带有一个虚基类的类"><span>4. 带有一个虚基类的类</span></a></h4><p>子类继承的基类当中，有一个或多个虚基类。编译器必须让虚基类在每一个子类对象的位置，能够在执行器准备妥当。</p><p>对于类所定义的每一个构造函数，编译器会插入哪些“允许每一个虚基类的执行期存取操作”的代码。</p><p>如果类没有声明任何构造函数，编译器必须为他生成一个默认构造函数。</p><h4 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结"><span>5. 总结</span></a></h4><p>以上 4 种情况，编译器生成的默认构造函数是有用的。</p><p>其他情况，且用户没有定义任何构造函数，那么我们说他拥有的是一个“隐式的”、“无用的” 默认构造函数，实际上他们并不会生成。</p><p>编译器生成的默认构造函数中，只有基类对象和成员类对象会被初始化。其他的非静态数据成员（如整数、整数指针、整数数组等）都不会被初始化。这些初始化操作对程序而言或许有需要，但对编译器则没有必要。</p><h3 id="二、初始化链表" tabindex="-1"><a class="header-anchor" href="#二、初始化链表"><span>二、初始化链表</span></a></h3><p>在如下情况下，为了让程序可以有较高的效率，必须使用 member initialization list：</p><ol><li>当初始化一个引用成员（reference member）时</li><li>当初始化一个 const member 时</li><li>当调用一个 base class 的构造，而他拥有一组参数时</li><li>当调用一个 member class 的构造，而他拥有一组参数时</li></ol><p>为什么这么说呢？看一个例子，展示一些低效率</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>class Word {</span></span>
<span class="line"><span>		String name_;</span></span>
<span class="line"><span>		Word() {</span></span>
<span class="line"><span>				name_ = &quot;0&quot;;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码本身从语法角度来看没有问题，但是效率低。因为编译器会重写如上的构造函数，以完成正确的代码逻辑</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Word::Word() {</span></span>
<span class="line"><span>		name_::String();  // 调用 String 的默认构造</span></span>
<span class="line"><span>		String temp = String(&quot;0&quot;);  // 产生临时性对象</span></span>
<span class="line"><span>		name_.String::operator=(temp);  // &quot;memberwise&quot; 地拷贝 name_</span></span>
<span class="line"><span>		temp.String::~String();  // 摧毁临时性对象</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们使用成员初始化链表，那将会是一个明显有效率的实现：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Word::Word : name_(&quot;0&quot;) { } </span></span>
<span class="line"><span>会被编译器转换为：</span></span>
<span class="line"><span>Word::Word() { name_.String::String(&quot;0&quot;); }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到效率提高了很多，少了一个临时性对象的产生和销毁，和对象的拷贝操作</p><p>我们再来看初始化列表的一些规则：</p><ul><li>编译器会一一操作初始化列表，以适当的顺序在构造函数之内插入初始化操作，并且在任何显式的用户代码之前。</li><li>初始化列表中初始化顺序是由类中的成员声明顺序决定的，不是由初始化列表中的排列顺序决定的</li></ul><p>请牢记第二点，否则会造成一些 BUG，如下例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>class X {</span></span>
<span class="line"><span>		int i;</span></span>
<span class="line"><span>		int j;</span></span>
<span class="line"><span>		X (int val) : j(val), i(j) {}</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>// 在初始化列表中 i(j) 其实比 j(val) 更早执行，所以这个初始值就是非预期的</span></span>
<span class="line"><span>// 当然希望编译器发出一个警告，不过只有 g++ 做到了</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再来看一个例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>X::X (int val) : i( xfoo(val) ), j ( val ) { }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>xfoo()</code> 是 X 的一个成员函数。这种写法很糟糕，我们并不知道 <code>xfoo()</code> 函数对对象的依赖性有多高。明显属于对象都没有构造完全，却去使用对象的成员函数了。</p>`,47)]))}const c=a(l,[["render",t],["__file","2.关于构造函数.html.vue"]]),h=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/2.%E5%85%B3%E4%BA%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html","title":"2.关于构造函数","lang":"zh-CN","frontmatter":{"title":"2.关于构造函数","description":"一、默认的构造函数 比如一段代码 首先明确默认构造函数是程序需要？还是编译器需要？ 如果是程序需要，那就是程序员的责任，比如将数据成员置为 0 如果是编译器需要，那么编译器生成的构造函数只执行编译器所需的行动。如上不会将两个用户数据成员 val 和 p_next 置为 0 对于一个类，如果没有任何用户定义的构造函数，那么就会有一个默认构造函数被隐式的声...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/2.%E5%85%B3%E4%BA%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"2.关于构造函数"}],["meta",{"property":"og:description","content":"一、默认的构造函数 比如一段代码 首先明确默认构造函数是程序需要？还是编译器需要？ 如果是程序需要，那就是程序员的责任，比如将数据成员置为 0 如果是编译器需要，那么编译器生成的构造函数只执行编译器所需的行动。如上不会将两个用户数据成员 val 和 p_next 置为 0 对于一个类，如果没有任何用户定义的构造函数，那么就会有一个默认构造函数被隐式的声..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2.关于构造函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"一、默认的构造函数","slug":"一、默认的构造函数","link":"#一、默认的构造函数","children":[]},{"level":3,"title":"二、初始化链表","slug":"二、初始化链表","link":"#二、初始化链表","children":[]}],"git":{},"readingTime":{"minutes":6.2,"words":1859},"filePathRelative":"编程语言/c++语言/对象模型/2.关于构造函数.md","excerpt":"<h3>一、默认的构造函数</h3>\\n<p>比如一段代码</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>class Foo {</span></span>\\n<span class=\\"line\\"><span>public:</span></span>\\n<span class=\\"line\\"><span>\\t\\tint val;</span></span>\\n<span class=\\"line\\"><span>\\t\\tFoo* p_next;</span></span>\\n<span class=\\"line\\"><span>};</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,h as data};
