import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-D1zlwylF.js";const t={};function e(h,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="内存屏障和-aba-问题" tabindex="-1"><a class="header-anchor" href="#内存屏障和-aba-问题"><span>内存屏障和 ABA 问题</span></a></h2><h3 id="一、内存屏障" tabindex="-1"><a class="header-anchor" href="#一、内存屏障"><span>一、内存屏障</span></a></h3><p>内存屏障也被称为内存栅栏，都是一个意思。内存屏障是全局操作，在之前内存顺序的松散模型中，编译器或者硬件通常可以自由的进行重新排序。屏障限制了这一自由。</p><p>从 C++11 开始，提供了下面两个机制：</p><ul><li><code>std::atomic_thread_fence</code>：在线程间进行数据访问的同步</li><li><code>std::atomic_signal_fence</code>：线程和信号处理器间的同步</li></ul><p>本节我们只关注 <code>std::atomic_thread_fence</code> 。演示一段代码</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::atomic</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;bool&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> x, y;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::atomic</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> z;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> write_x_then_y</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">store</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::memory_order_relaxed);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">atomic_thread_fence</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::memory_order_release);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 释放屏障</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    y</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">store</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::memory_order_relaxed);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> read_y_then_x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::memory_order_relaxed));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">atomic_thread_fence</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::memory_order_acquire);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 获取屏障</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::memory_order_relaxed)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">z;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    x </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    y </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    z </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::thread </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(write_x_then_y);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::thread </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(read_y_then_x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    b</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">z</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上代码。释放屏障和获取屏障同步，y 的 store 一定会在 y 的 load 之前。也就意味着对 x 的 store 发生在 x 的 load 之前，所以读取的值一定是 true。因此 assert 一定不会触发。</p><p>屏障的总体思路：如果获取操作看到了释放屏障后发生的存储的结果，该屏障与获取操作同步；如果在获取屏障之前发生的载入看到释放操作的结果，该释放操作与获取屏障同步。</p><h4 id="mutex-与内存屏障" tabindex="-1"><a class="header-anchor" href="#mutex-与内存屏障"><span>mutex 与内存屏障</span></a></h4><p>其实锁 mutex 也用到了内存屏障，拿到 mutex 锁的线程才能进入到临界区。</p><p>而 mutex 除了保证互斥之外，其他 mutex 的加锁和解锁之间也起到了“内存屏障”的功能。因为临界区的代码是不会被优化到临界区外的，这个是一定保证的。但是有一点，不保证临界区外的内容被优化到临界区中。</p><h3 id="二、aba-问题" tabindex="-1"><a class="header-anchor" href="#二、aba-问题"><span>二、ABA 问题</span></a></h3><p>参考维基百科的定义，问题可以描述为：</p><ol><li>线程 T1 从共享内存中读取值 A</li><li>线程 T1 被抢占，线程 T2 执行</li><li>线程 T2 将共享内存中值 A 修改为值 B，然后又修改为值 A</li><li>线程 T1 执行，看到值 A 没有发生变化，则继续执行</li></ol><p>咋一看，没什么问题，但是如果这个值是指针呢？指针的值没有改变，但是指针所指向的内容有可能发生改变。而操作系统中内存复用（MRU算法）是常见的行为，很容易出现新分配的对象与删除的对象处于同一位置。而这个问题在无锁的编程中需要关注。</p><p>从网上找到的一个例子：</p><blockquote><p>有一个人类(男)拿着一个装满钱的手提箱在飞机场，此时过来了一个火辣性感的美女，然后她很暖昧地挑逗着这个人类，并趁这个人类不注意的时候，用一个一模一样的手提箱和这个人类装满钱的箱子调了个包，然后就离开了，这个人类看到自己的手提箱还在，于是就提着手提箱去赶飞机去了。</p></blockquote><h4 id="如何解决-aba-问题" tabindex="-1"><a class="header-anchor" href="#如何解决-aba-问题"><span>如何解决 ABA 问题</span></a></h4><p>参考维基百科，有三种解决方法</p><ol><li><p>标记状态：一种常见的解决方法是在所要同步的结构上添加额外的“标签”位。例如，在指针上使用比较和交换的算法可能会使用地址的低位来指示指针已成功修改的次数。因此，即使地址相同，下一次比较和交换也会失败，因为标签位不匹配。这有时被称为ABAʹ，因为第二个A与第一个略有不同。</p></li><li><p>中间节点：一个可行但昂贵的方法是使用不是数据元素的中间节点，从而在插入和删除元素时确保不变量，</p></li><li><p>延迟回收：推迟回收已删除的数据元素，实现较为复杂</p></li></ol><h3 id="三、简单总结" tabindex="-1"><a class="header-anchor" href="#三、简单总结"><span>三、简单总结</span></a></h3><p>本小节的主要分享了内存屏障、ABA 问题。内存屏障主要作用于编译器，阻止编译器在具体位置生成乱序的代码。而 ABA 问题在我们进行无锁编程中是比较重要的，尤其是对于 CAS 操作，比如：CAS 判断的是指针的地址，如果这个地址被重用了呢？那问题就大了。</p><p>这些概念是为了我们后面更加深入的学习和实现无锁化编程</p>`,24)]))}const d=i(t,[["render",e],["__file","4.对于内存屏障和ABA问题的理解.html.vue"]]),r=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/4.%E5%AF%B9%E4%BA%8E%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C%E5%92%8CABA%E9%97%AE%E9%A2%98%E7%9A%84%E7%90%86%E8%A7%A3.html","title":"4. 内存屏障和 ABA 问题","lang":"zh-CN","frontmatter":{"title":"4. 内存屏障和 ABA 问题","description":"内存屏障和 ABA 问题 一、内存屏障 内存屏障也被称为内存栅栏，都是一个意思。内存屏障是全局操作，在之前内存顺序的松散模型中，编译器或者硬件通常可以自由的进行重新排序。屏障限制了这一自由。 从 C++11 开始，提供了下面两个机制： std::atomic_thread_fence：在线程间进行数据访问的同步 std::atomic_signal_f...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/4.%E5%AF%B9%E4%BA%8E%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C%E5%92%8CABA%E9%97%AE%E9%A2%98%E7%9A%84%E7%90%86%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"4. 内存屏障和 ABA 问题"}],["meta",{"property":"og:description","content":"内存屏障和 ABA 问题 一、内存屏障 内存屏障也被称为内存栅栏，都是一个意思。内存屏障是全局操作，在之前内存顺序的松散模型中，编译器或者硬件通常可以自由的进行重新排序。屏障限制了这一自由。 从 C++11 开始，提供了下面两个机制： std::atomic_thread_fence：在线程间进行数据访问的同步 std::atomic_signal_f..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4. 内存屏障和 ABA 问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"内存屏障和 ABA 问题","slug":"内存屏障和-aba-问题","link":"#内存屏障和-aba-问题","children":[{"level":3,"title":"一、内存屏障","slug":"一、内存屏障","link":"#一、内存屏障","children":[]},{"level":3,"title":"二、ABA 问题","slug":"二、aba-问题","link":"#二、aba-问题","children":[]},{"level":3,"title":"三、简单总结","slug":"三、简单总结","link":"#三、简单总结","children":[]}]}],"git":{},"readingTime":{"minutes":3.8,"words":1139},"filePathRelative":"技术专题/9天带你走进无锁化编程/4.对于内存屏障和ABA问题的理解.md","excerpt":"<h2>内存屏障和 ABA 问题</h2>\\n<h3>一、内存屏障</h3>\\n<p>内存屏障也被称为内存栅栏，都是一个意思。内存屏障是全局操作，在之前内存顺序的松散模型中，编译器或者硬件通常可以自由的进行重新排序。屏障限制了这一自由。</p>\\n<p>从 C++11 开始，提供了下面两个机制：</p>\\n<ul>\\n<li><code>std::atomic_thread_fence</code>：在线程间进行数据访问的同步</li>\\n<li><code>std::atomic_signal_fence</code>：线程和信号处理器间的同步</li>\\n</ul>\\n<p>本节我们只关注 <code>std::atomic_thread_fence</code> 。演示一段代码</p>","autoDesc":true}');export{d as comp,r as data};
