import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as t}from"./app-D1zlwylF.js";const p={};function n(r,l){return t(),e("div",null,l[0]||(l[0]=[a('<h3 id="一、分布式系统存在的意义" tabindex="-1"><a class="header-anchor" href="#一、分布式系统存在的意义"><span>一、分布式系统存在的意义</span></a></h3><ol><li>高性能：计算机硬件无法突破物理限制，随着芯片工艺的逼近极限，摩尔定律已失效。并且多核CPU依然存在物理限制，而且成本会急剧上升。分布式系统可以实现对高性能的需求。</li><li>可扩展性：对于数据密集型的应用，单台计算机的容量有限，分布式存储系统可以良好的进行扩展。</li><li>高可用性：几乎所有的在线服务都需要不间断的运行。单机无法处理各种硬件故障、人为因素或意外情况等。分布式系统可以冗余多份数据保证数据可用性；或者通过冗余计算实现服务切换，及时进行故障切换。</li><li>必要性：有一些场景构建分布式系统是必然的。比如银行系统支持从北京的银行转账到纽约的银行，这时就需要一种方法来保证转账的一致性。</li></ol><h3 id="二、分布式系统的挑战" tabindex="-1"><a class="header-anchor" href="#二、分布式系统的挑战"><span>二、分布式系统的挑战</span></a></h3><p>分布式系统的缪误：</p><ul><li>网络是可靠的</li><li>延迟为零</li><li>带宽是无限的</li><li>网络是安全的</li><li>拓扑结构不会改变</li><li>单一管理员</li><li>传输成本为零</li><li>网络是同构的</li></ul><p>重点如下常见的问题</p><ol><li>网络延迟问题</li></ol><p>消息传输可能会发生延迟。比如：网络拥堵。这种延迟可能会导致不可预期的后果。比如，根据基准时钟，进程 P 先发送了一个消息，之后另一个进程 Q 发送了消息，但是进程 Q 的消息也许会先完成传送。</p><ul><li>消息丢失</li><li>我们认为消息丢失，但其实消息只是延迟到达</li><li>网络可能会重传消息，导致收到重复的消息</li><li>网络延迟可能会让我们认为某个服务已经因故障下线，但实际上并没有</li><li>消息可能以不同的顺序到达，或者不同的节点上消息到达的顺序不同</li></ul><ol start="2"><li>处理器性能</li></ol><p>操作系统的调度和超载也可能导致消息处理的任意延迟。消息的延迟时间：发送端消耗的时间、传输时间、接收端的处理时间。还需要包括发送或接收过程中进程调度的时间。</p><ol start="3"><li>部分失效问题</li></ol><p>分布式系统中，系统中可能有一部分节点停止运行，或者由于网络终端导致无法协同工作。也就是说，系统的某些部分可能会以某种不可预知的方式宕机，这种情况称为部分失效。</p><p>难点在于部分失效是不确定的，甚至我们不知道应用程序是否成功？因为消息是通过网络传播的。</p><ol start="4"><li>时钟偏移</li></ol><p>处理器时钟并不可靠，他们之间会发生任意的偏移。依赖处理器时钟也许会导致错误的决策。</p><h3 id="三、分布式系统的经典实验" tabindex="-1"><a class="header-anchor" href="#三、分布式系统的经典实验"><span>三、分布式系统的经典实验</span></a></h3><p>从两个经典的思想实验来引出：</p><h4 id="_1-两将军问题" tabindex="-1"><a class="header-anchor" href="#_1-两将军问题"><span>1. 两将军问题</span></a></h4><p>描述：两支由不同将军领导的军队，准备进攻一座城市。两只军队被一个山谷隔开，这个山谷被城市的守卫者占领。并且两支军队必须同时进攻，才能占用城市。如果同一时间仅一支军队进攻，将会战败。</p><p>于是，两将军需要通过信使沟通并约定攻击时间，但传递消息的信使可能会被俘虏导致消息丢失，甚至传递了错误的消息。因此双方即使不断确认已收到对方的上一条消息，也无法确保对方已与自己达成共识。</p><p>因此，两将军问题已经被证明无解。但是我们有工程上的解决方案，比如 TCP 的“三次握手” 就是两将军问题的一个工程解。</p><h4 id="_2-拜占庭将军问题" tabindex="-1"><a class="header-anchor" href="#_2-拜占庭将军问题"><span>2. 拜占庭将军问题</span></a></h4><p>描述：多个拜占庭将军各率领一支军队，想要占领一座城市，将军们通过信使传递“进攻”或“撤退”命令。部分军队进攻、部分军队撤退会导致灾难性后果，所以各位将军必须通过投票来达成一致，要么一起进攻、要么一起撤退。</p><p>挑战在于，将军中可能出现叛徒，传递错误的消息。而拜占庭将军问题就是要确保所有忠诚的将军在同一个计划上达成共识。</p><h3 id="四、分布式系统模型" tabindex="-1"><a class="header-anchor" href="#四、分布式系统模型"><span>四、分布式系统模型</span></a></h3><p>我们按照网络、节点故障和时间三种类型划分系统模型。</p><h4 id="_1-网络链路模型" tabindex="-1"><a class="header-anchor" href="#_1-网络链路模型"><span>1. 网络链路模型</span></a></h4><p>我们可以将通信的网络链路分成：可靠链路、公平损失链路、任意链路。</p><p>(1). 可靠链路：最理想的模型。不会丢失消息，也不会凭空捏造消息，但可能对消息重新排序。</p><ul><li>可靠传递</li><li>没有重复：每条消息最多传递一次</li><li>不会无中生有，不会传递一个从未发送过的消息</li></ul><p>(2). 公平损失链路：可能会丢失、重复或重新排序，但消息最终总会到达。</p><ul><li>公平损失：如果发送方和接收方都是正常运行的，且发送方不断重复发送消息，则消息最终会被送达。</li><li>有限重复：消息只会重复发送有限的次数</li><li>不会无中生有</li></ul><p>(3). 任意链路：最接近互联网的模型</p><h4 id="_2-节点故障模型" tabindex="-1"><a class="header-anchor" href="#_2-节点故障模型"><span>2. 节点故障模型</span></a></h4><p>节点出现故障分为三种：</p><ul><li>崩溃-停止：一个节点停止工作后永远不会恢复。</li><li>崩溃-恢复：允许节点重新启动并继续执行剩余的步骤，一般通过持久化存储必要的状态信息来容忍这种故障类型。</li><li>拜占庭故障：故障的节点可能不只会宕机，还可能以任意方式偏离算法，甚至恶意破坏系统。</li></ul><p>一般公司内部的分布式系统都部署在私有、安全的环境，因此不会去解决拜占庭故障。但航空航天系统和去中心化环境的加密货币就需要实现拜占庭容错。</p><h4 id="_3-时间划分的系统模型" tabindex="-1"><a class="header-anchor" href="#_3-时间划分的系统模型"><span>3. 时间划分的系统模型</span></a></h4><p>基于时间是否同步，可以将系统分为同步系统和异步系统模型。</p><ul><li>同步系统模型：一个消息的响应时间在一个有限且已知的时间范围内</li><li>异步系统模型：一个消息的响应时间是无限的，无法知道下一条消息什么时候会到达</li></ul><p>异步系统比较接近现实，我们无法保证整个系统的所有组件都正常运行。网络的时延、操作也可能因为内存不足挂起一个线程，一致无法传递消息。类Java语言的垃圾回收机制也会有 STW(<code>Stop The World</code>)暂停正在运行的线程。</p><p>部分同步模型：大部分时间是同步的，但偶尔会因为故障转变为异步系统。</p>',43)]))}const s=i(p,[["render",n],["__file","1.分布式系统模型.html.vue"]]),c=JSON.parse('{"path":"/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%9E%8B/1.%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B.html","title":"1.分布式系统模型","lang":"zh-CN","frontmatter":{"title":"1.分布式系统模型","description":"一、分布式系统存在的意义 高性能：计算机硬件无法突破物理限制，随着芯片工艺的逼近极限，摩尔定律已失效。并且多核CPU依然存在物理限制，而且成本会急剧上升。分布式系统可以实现对高性能的需求。 可扩展性：对于数据密集型的应用，单台计算机的容量有限，分布式存储系统可以良好的进行扩展。 高可用性：几乎所有的在线服务都需要不间断的运行。单机无法处理各种硬件故障、...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%9E%8B/1.%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"1.分布式系统模型"}],["meta",{"property":"og:description","content":"一、分布式系统存在的意义 高性能：计算机硬件无法突破物理限制，随着芯片工艺的逼近极限，摩尔定律已失效。并且多核CPU依然存在物理限制，而且成本会急剧上升。分布式系统可以实现对高性能的需求。 可扩展性：对于数据密集型的应用，单台计算机的容量有限，分布式存储系统可以良好的进行扩展。 高可用性：几乎所有的在线服务都需要不间断的运行。单机无法处理各种硬件故障、..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.分布式系统模型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"一、分布式系统存在的意义","slug":"一、分布式系统存在的意义","link":"#一、分布式系统存在的意义","children":[]},{"level":3,"title":"二、分布式系统的挑战","slug":"二、分布式系统的挑战","link":"#二、分布式系统的挑战","children":[]},{"level":3,"title":"三、分布式系统的经典实验","slug":"三、分布式系统的经典实验","link":"#三、分布式系统的经典实验","children":[]},{"level":3,"title":"四、分布式系统模型","slug":"四、分布式系统模型","link":"#四、分布式系统模型","children":[]}],"git":{},"readingTime":{"minutes":6.08,"words":1825},"filePathRelative":"分布式/分布式模型/1.分布式系统模型.md","excerpt":"<h3>一、分布式系统存在的意义</h3>\\n<ol>\\n<li>高性能：计算机硬件无法突破物理限制，随着芯片工艺的逼近极限，摩尔定律已失效。并且多核CPU依然存在物理限制，而且成本会急剧上升。分布式系统可以实现对高性能的需求。</li>\\n<li>可扩展性：对于数据密集型的应用，单台计算机的容量有限，分布式存储系统可以良好的进行扩展。</li>\\n<li>高可用性：几乎所有的在线服务都需要不间断的运行。单机无法处理各种硬件故障、人为因素或意外情况等。分布式系统可以冗余多份数据保证数据可用性；或者通过冗余计算实现服务切换，及时进行故障切换。</li>\\n<li>必要性：有一些场景构建分布式系统是必然的。比如银行系统支持从北京的银行转账到纽约的银行，这时就需要一种方法来保证转账的一致性。</li>\\n</ol>","autoDesc":true}');export{s as comp,c as data};
