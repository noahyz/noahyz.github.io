import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as h}from"./app-D1zlwylF.js";const l={};function k(t,i){return h(),a("div",null,i[0]||(i[0]=[n(`<h2 id="插桩" tabindex="-1"><a class="header-anchor" href="#插桩"><span>插桩</span></a></h2><p>可以利用 clang/gcc 的 <code>-finstrument-functions</code> 编译参数，使得每个函数都会在出口和入口以此执行 <code>__cyg_profile_func_enter</code> 函数和 <code>__cyg_profile_func_exit</code> 函数。</p><p>使用 dladdr 将函数的地址转换成符号</p><p>hook.cpp</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;dlfcn.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;cxxabi.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> get_funcname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> status </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 99</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> abi</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">__cxa_demangle</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(src, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">status);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> nullptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> src </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> f;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">extern</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;C&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> __cyg_profile_func_enter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> func, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> caller) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    Dl_info info1, info2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">dladdr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(func, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">info1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> dladdr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(caller, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">info2)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        fprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(stdout, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;enter func: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> father: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get_funcname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">info1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">dli_sname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get_funcname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">info2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">dli_sname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">extern</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;C&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> __cyg_profile_func_exit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> func, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> caller) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    Dl_info info1, info2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">dladdr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(func, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">info1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> dladdr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(caller, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">info2)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        fprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(stdout, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;exit func: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> father: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get_funcname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">info1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">dli_sname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get_funcname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">info2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">dli_sname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.cpp</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> func_02</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> func_01</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    func_02</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    func_01</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译 hook.cpp 如：<code>g++ hook.cpp -c</code></p><p>然后链接到要被插桩的项目或代码中：<code>g++ main.cpp hook.o -g -finstrument-functions -ldl -rdynamic</code></p><p>输出：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">enter</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> func:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> father:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> __libc_start_main</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">enter</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> func:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> func_01</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">father:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> main</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">enter</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> func:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> func_02</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">father:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> func_01</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">exit</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> func:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> func_02</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">father:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> func_01</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">exit</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> func:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> func_01</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">father:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> main</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">exit</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> func:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> father:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> __libc_start_main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11)]))}const d=s(l,[["render",k],["__file","插桩.html.vue"]]),r=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/%E6%8F%92%E6%A1%A9.html","title":"插桩","lang":"zh-CN","frontmatter":{"title":"插桩","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"插桩 可以利用 clang/gcc 的 -finstrument-functions 编译参数，使得每个函数都会在出口和入口以此执行 __cyg_profile_func_enter 函数和 __cyg_profile_func_exit 函数。 使用 dladdr 将函数的地址转换成符号 hook.cpp main.cpp 编译 hook.cpp 如...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/%E6%8F%92%E6%A1%A9.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"插桩"}],["meta",{"property":"og:description","content":"插桩 可以利用 clang/gcc 的 -finstrument-functions 编译参数，使得每个函数都会在出口和入口以此执行 __cyg_profile_func_enter 函数和 __cyg_profile_func_exit 函数。 使用 dladdr 将函数的地址转换成符号 hook.cpp main.cpp 编译 hook.cpp 如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"插桩\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"插桩","slug":"插桩","link":"#插桩","children":[]}],"git":{},"readingTime":{"minutes":0.78,"words":233},"filePathRelative":"技术专题/hook/插桩.md","localizedDate":"2023年1月19日","excerpt":"<h2>插桩</h2>\\n<p>可以利用 clang/gcc 的 <code>-finstrument-functions</code> 编译参数，使得每个函数都会在出口和入口以此执行 <code>__cyg_profile_func_enter</code> 函数和 <code>__cyg_profile_func_exit</code> 函数。</p>\\n<p>使用 dladdr 将函数的地址转换成符号</p>\\n<p>hook.cpp</p>\\n<div class=\\"language-c++ line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c++\\" data-title=\\"c++\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">#include</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> &lt;dlfcn.h&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">#include</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> &lt;stdio.h&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">#include</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> &lt;cxxabi.h&gt;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">inline</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> const</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> char*</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> get_funcname</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">const</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> char*</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> src</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    int</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> status </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">=</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> 99</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    const</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> char</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> f </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">=</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#ABB2BF\\"> abi</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">::</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">__cxa_demangle</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(src, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">nullptr</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">nullptr</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\">&amp;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">status);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> f </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">==</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> nullptr</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> ?</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> src </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">:</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> f;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">extern</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> \\"C\\"</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> void</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> __cyg_profile_func_enter</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">void</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> func, </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">void</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> caller) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">    Dl_info info1, info2;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    if</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> (</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">dladdr</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(func, </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\">&amp;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">info1) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\">&amp;</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> dladdr</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(caller, </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\">&amp;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">info2)) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">        fprintf</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(stdout, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"enter func: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">%s</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> father: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">%s</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#56B6C2\\">\\\\n</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">get_funcname</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\">info1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">dli_sname</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">), </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">get_funcname</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\">info2</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">dli_sname</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">));</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">extern</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> \\"C\\"</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> void</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> __cyg_profile_func_exit</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">void</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> func, </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">void</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> caller) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">    Dl_info info1, info2;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    if</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> (</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">dladdr</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(func, </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\">&amp;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">info1) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\">&amp;</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> dladdr</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(caller, </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\">&amp;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">info2)) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">        fprintf</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(stdout, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"exit func: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">%s</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> father: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">%s</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#56B6C2\\">\\\\n</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">get_funcname</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\">info1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">dli_sname</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">), </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">get_funcname</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\">info2</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">dli_sname</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">));</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,r as data};
