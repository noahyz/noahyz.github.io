import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as n}from"./app-D1zlwylF.js";const e={};function h(l,i){return n(),a("div",null,i[0]||(i[0]=[t(`<h3 id="使用-scanf-函数需要注意的点" tabindex="-1"><a class="header-anchor" href="#使用-scanf-函数需要注意的点"><span>使用 scanf 函数需要注意的点</span></a></h3><ol><li><p>缓冲区问题<br> scanf 在使用的时候，回车符也会留在缓冲区，因此在用 %c 的时候可能会读到回车符。可以加上 fflush(stdin) 刷新缓冲区</p></li><li><p>空白符问题</p><p><code>scanf(&quot;%d\\n&quot;,&amp;a);</code> 这种 scanf 会跳过空白符去读下一个字符。空白符号包括：空格、制表符、换行符、回车符和换页符。</p></li><li><p>输入不匹配问题</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">scanf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%d%c</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">scanf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%d%c</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于scanf，在输入的时候，如果和第一个参数类型匹配，则继续从缓冲区中读取数据和第二个参数进行匹配，依次进行下去，直到匹配完所有的参数；</p><p>如果其中有一个参数不匹配，那就从这个地方跳出，忽略这个 scanf 后面所有的参数，而去执行下一条语句。</p></li><li><p>输入字符串中空格问题</p><p><code>%[...]</code> 表示只提取与 [ ] 中相匹配的内容，碰到其他内容则终止提取；注意：方括号两边不能空格，否则空格也会算到里面的。</p><p><code>%[^...]</code>（注意异或符&#39;^&#39;）表示提取内容，碰到[]中相匹配的内容则终止提取；可以解决 scanf 的输入中不能有空格的问题。例如: <code>scanf(&quot;%[^\\n]&quot;,strings)</code> 就可以在输入的时候忽略空格。</p></li></ol>`,2)]))}const r=s(e,[["render",h],["__file","7.scanf使用注意.html.vue"]]),c=JSON.parse(`{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/7.scanf%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F.html","title":"7.scanf使用注意","lang":"zh-CN","frontmatter":{"title":"7.scanf使用注意","date":"2021-03-12T21:19:17.000Z","categories":["编程语言"],"tags":["scanf"],"description":"使用 scanf 函数需要注意的点 缓冲区问题 scanf 在使用的时候，回车符也会留在缓冲区，因此在用 %c 的时候可能会读到回车符。可以加上 fflush(stdin) 刷新缓冲区 空白符问题 scanf(\\"%d\\\\n\\",&a); 这种 scanf 会跳过空白符去读下一个字符。空白符号包括：空格、制表符、换行符、回车符和换页符。 输入不匹配问题 对于...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/7.scanf%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"7.scanf使用注意"}],["meta",{"property":"og:description","content":"使用 scanf 函数需要注意的点 缓冲区问题 scanf 在使用的时候，回车符也会留在缓冲区，因此在用 %c 的时候可能会读到回车符。可以加上 fflush(stdin) 刷新缓冲区 空白符问题 scanf(\\"%d\\\\n\\",&a); 这种 scanf 会跳过空白符去读下一个字符。空白符号包括：空格、制表符、换行符、回车符和换页符。 输入不匹配问题 对于..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"scanf"}],["meta",{"property":"article:published_time","content":"2021-03-12T21:19:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"7.scanf使用注意\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-12T21:19:17.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"使用 scanf 函数需要注意的点","slug":"使用-scanf-函数需要注意的点","link":"#使用-scanf-函数需要注意的点","children":[]}],"git":{},"readingTime":{"minutes":1.22,"words":367},"filePathRelative":"编程语言/c++语言/编码技巧/7.scanf使用注意.md","localizedDate":"2021年3月13日","excerpt":"<h3>使用 scanf 函数需要注意的点</h3>\\n<ol>\\n<li>\\n<p>缓冲区问题<br>\\nscanf 在使用的时候，回车符也会留在缓冲区，因此在用 %c 的时候可能会读到回车符。可以加上 fflush(stdin) 刷新缓冲区</p>\\n</li>\\n<li>\\n<p>空白符问题</p>\\n<p><code>scanf(\\"%d\\\\n\\",&amp;a);</code>  这种 scanf 会跳过空白符去读下一个字符。空白符号包括：空格、制表符、换行符、回车符和换页符。</p>\\n</li>\\n<li>\\n<p>输入不匹配问题</p>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c\\" data-title=\\"c\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">scanf</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">%d%c</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> &amp;</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">a</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> &amp;</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">c</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">scanf</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">%d%c</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> &amp;</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">a</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> &amp;</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">c</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">);</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>对于scanf，在输入的时候，如果和第一个参数类型匹配，则继续从缓冲区中读取数据和第二个参数进行匹配，依次进行下去，直到匹配完所有的参数；</p>\\n<p>如果其中有一个参数不匹配，那就从这个地方跳出，忽略这个 scanf 后面所有的参数，而去执行下一条语句。</p>\\n</li>\\n<li>\\n<p>输入字符串中空格问题</p>\\n<p><code>%[...]</code> 表示只提取与 [ ] 中相匹配的内容，碰到其他内容则终止提取；注意：方括号两边不能空格，否则空格也会算到里面的。</p>\\n<p><code>%[^...]</code>（注意异或符'^'）表示提取内容，碰到[]中相匹配的内容则终止提取；可以解决 scanf 的输入中不能有空格的问题。例如: <code>scanf(\\"%[^\\\\n]\\",strings)</code> 就可以在输入的时候忽略空格。</p>\\n</li>\\n</ol>","autoDesc":true}`);export{r as comp,c as data};
