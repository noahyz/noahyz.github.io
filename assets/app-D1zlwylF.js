const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/1.对于线程安全的理解.html-MBM0WJmM.js","assets/plugin-vue_export-helper-DlAUqK2U.js","assets/2.对于原子操作的理解.html-D_4oHzCc.js","assets/3.对于内存模型的理解.html-CJERMBan.js","assets/4.对于内存屏障和ABA问题的理解.html-G4az1WEa.js","assets/5.研读C__语言boost库中无锁队列的实现.html-Bx-o3zfu.js","assets/6.研读Go语言channel的实现.html-J712GZDs.js","assets/7.研读Java语言中线程安全队列的实现.html-BVXr72wP.js","assets/8.实现一个无锁的线程安全队列.html-DDldoL4o.js","assets/9.思考与展望.html-BdvzNEv0.js","assets/1.自研离散型槽位哈希.html-kSnIVUnT.js","assets/1.fork原理.html-DyjQDZPR.js","assets/2.进程调度之CFS算法.html-BMwBltND.js","assets/3.内核数据结构之链表.html-oelZwBAZ.js","assets/4.内核数据结构之队列.html-DOPuipDN.js","assets/CFS算法在内核中的实现.html-BgR-aQjC.js","assets/内核数据结构之映射.html-BnA0DAgm.js","assets/进程调度之O1算法.html-CThkZZgN.js","assets/1.实现一个hook库.html-kB6lFtMR.js","assets/2.preload失效问题.html-CGxE2oxq.js","assets/3.如何hook函数calloc.html-BhsmURjH.js","assets/ELF文件.html-fJhzkZgE.js","assets/hook动态库.html-DIawD_Ov.js","assets/hook文件IO函数问题.html-DjdnDdHx.js","assets/malloc的hook方法.html-BGLDdxGe.js","assets/preload.html-Cfq766lP.js","assets/xhook.html-BcYqvRWk.js","assets/啊未总结.html-WjF_3_wF.js","assets/库函数打桩.html-CkVp7vIZ.js","assets/插桩.html-DMMm5_mQ.js","assets/重载new和delete.html-D2ToHjXF.js","assets/1.浅谈线程安全队列.html-J7QT_xM_.js","assets/1.对于并发编程的理解.html-CXpcZ-JV.js","assets/2.线程间同步.html-DRMFal-g.js","assets/3.基础变量的同步需要加锁吗.html-Bzttxk6O.js","assets/4.优先级反转.html-nN1Vl11c.js","assets/5.多线程编程总结.html-BwWtT363.js","assets/1.栈与调用惯例.html-BjpFFbr3.js","assets/1.锁竞争分析工具.html-DSwZXXWm.js","assets/1.预处理、编译、汇编、链接过程.html-DJQ_zYUJ.js","assets/2.二进制的装载与执行.html-CR1kaq2G.js","assets/3.认识ELF文件格式一.html-WDp1vWo9.js","assets/4.认识ELF文件格式二.html-tINzsL7g.js","assets/5.认识ELF文件格式三.html-C1j2llV7.js","assets/6.静态链接.html-CQAixQB7.js","assets/7.动态链接.html-D8z2lMUZ.js","assets/8.PLT hook的实现机制.html-CPE5CinZ.js","assets/1.进程和环境变量.html-D6wUwz7t.js","assets/2.system和popen函数.html-C6bHYoAZ.js","assets/3.pthread_cancel和pthread_kill区别.html-BbB1xSQh.js","assets/4.mlock函数.html-B7pX2fO7.js","assets/5.exit函数.html-CsN6GBdX.js","assets/6.eventfd原理和实践.html-gnXEz7jB.js","assets/7.backtrace接口说明.html-1dgfzRvE.js","assets/8.文件锁.html-D0z1csfg.js","assets/9.pthread_cond_timedwait函数.html-DnEK7pV-.js","assets/Linux之syslog日志服务详解.html-_4B7L0PS.js","assets/netlink.html-BLUuz3ZL.js","assets/pselect函数.html-D_4l7Lcw.js","assets/sysconf.html-Dbmd8AUg.js","assets/1.多进程的死锁问题.html-CNBSXdAe.js","assets/2.排查进程终止的原因.html-dwZugBzW.js","assets/3.linux下段错误的产生原因及调试方法.html-CDx5ggju.js","assets/4.load不到共享库.html-BX0mnaz0.js","assets/Linux之proc下kcore文件解释.html-DPajteJO.js","assets/cc__错误之 Undefined reference 未定义的问题.html-Ku6N_Joe.js","assets/1.分布式式事务ACID特性.html-gfp7ddHu.js","assets/2.原子性保证-原子提交.html-BaIqQdUt.js","assets/3.原子性保证-两阶段提交.html-C-xu1A5J.js","assets/4.原子性保证-三阶段提交.html-TG53Or5I.js","assets/1.paxos算法.html-Du9acljT.js","assets/2.raft算法.html-DN3lLpah.js","assets/1.分布式系统模型.html-DFlBunoj.js","assets/2.数据的分布式.html-ho4Mzoam.js","assets/3.CAP定理.html-CqdFDLnB.js","assets/4.一致性模型.html-CMA5PBCc.js","assets/1.浅谈分布式锁.html-B25xiwVs.js","assets/2.基于redis的分布式锁的实现.html-CZ0vRSV7.js","assets/1.网络模型和收发网络包流程.html-BSaZqcPp.js","assets/2.C10K和C000K和C10M问题.html-COBiel69.js","assets/3.DNS认识.html-g9jtmSAS.js","assets/DDos攻击.html-C8UK9i8l.js","assets/计算机网络知识点.html-BEhogowd.js","assets/1.缓存更新的方式.html-XE-gIc8O.js","assets/2.缓存与队列.html-tvNP3ySr.js","assets/1.衡量网络性能指标和工具.html-OWPhZlN4.js","assets/2.iptables命令详解.html-wQ-fIvkP.js","assets/3.评估系统的网络性能.html-Dw1YPdT2.js","assets/未总结---使用wireshark抓取TLS包.html-nLsRxZqf.js","assets/网络丢包总结.html-CPKq4XlA.js","assets/1.计算机的启动.html-BMpOxBcc.js","assets/2.写一个MBR程序.html-M4-uDCFA.js","assets/3.加载内核.html-BexbVpm_.js","assets/4.Linux从开机加电到执行main函数的过程.html-mde-WH8l.js","assets/1.获取物理内存容量.html-Bd6CXxqQ.js","assets/2.内存分页机制.html-OY1xBHlL.js","assets/页目录项及页表项-DWl50dUU.js","assets/3.实现内存分页.html-De9uZ91x.js","assets/4.用虚拟地址访问页表.html-GAb58BXG.js","assets/5.内存管理.html-D6WhXYS5.js","assets/6.快表TLB.html-BKqDc7NC.js","assets/1.中断.html-B-keAlhb.js","assets/2.可编程中断控制器8259A.html-RgI9C5-y.js","assets/3.定时器8253.html-CL9sA_WG.js","assets/4.8259A的编程.html-Dc4ihIrO.js","assets/1.保护模式.html-D0K85AZg.js","assets/2.保护模式2.html-8IAGmKCT.js","assets/1.概念.html-X17BkLwz.js","assets/2.实现线程的方式.html-C1Zvr6eN.js","assets/3.多线程调度.html-BMWhrMvP.js","assets/4.线程实现.html--pAnVMDW.js","assets/5.进程的实现方式.html-DvdB1U9d.js","assets/6.协程的实现方式.html-CG61uxvl.js","assets/同步机制之锁.html-6jQzvVK_.js","assets/笔记.html-B_w2vOu5.js","assets/1.操作显示器.html-C-ytG6hx.js","assets/1.硬盘分区原理.html-CyNFrSLx.js","assets/2.文件系统原理.html-DooIBkoz.js","assets/3.文件系统原理2.html-Cvv9KQH3.js","assets/4.硬盘驱动程序.html-rEjX97Uy.js","assets/5.操作硬盘.html-Dc5KrE36.js","assets/6.打印函数.html-DAvL774r.js","assets/1.CPU性能调优.html-DAuYELHy.js","assets/2.平均负载.html-Dm9E3a54.js","assets/3.上下文切换.html-Da7fbkQ3.js","assets/4.中断.html-BRZ70gli.js","assets/上下文切换.html-DjZE3aq4.js","assets/1.系统调用概念.html-L720wH3v.js","assets/2.fork的原理和实现.html-DPU2b50l.js","assets/3.wait和exit的原理.html-BpThJaql.js","assets/4.管道.html-CrwWZ0wn.js","assets/1.pidstat查看进程占用系统资源情况.html-CeXEeAqk.js","assets/2.mpstat查看CPU性能.html-B18AxMM2.js","assets/3.vmstat系统性能分析工具.html-nkUJOl-e.js","assets/4.stress压力测试工具.html-BaC0UASh.js","assets/perf命令.html-Bh8FEK8M.js","assets/strace 命令.html-DcxaLgDn.js","assets/1.内存管理.html-BciFjUKJ.js","assets/10.mmap技术.html-BjRbNOCs.js","assets/11.coredump.html-K3_O7PS0.js","assets/12.通过free命令理解linux内存管理.html-QRSQfgeN.js","assets/13.垃圾回收.html-UeP9xDry.js","assets/2.常见的内存分配器算法.html-EPtGoG57.js","assets/3.内存分配的分段和分页.html-CntqY2j4.js","assets/4.进程内存布局.html-BQ28U2-S.js","assets/5.共享内存的原理.html-Dooc7_tY.js","assets/6.buff和cache.html-CA1hk8Bq.js","assets/7.缓存的原理.html-ys0vm-2P.js","assets/8.缓存命中率.html-BoebbHEl.js","assets/9.多核CPU同步高速缓存.html-BMiJVWqA.js","assets/swap原理.html-BU16vN1c.js","assets/内存泄漏.html-TLsFIIiY.js","assets/十九种内存泄漏.html-DtiEGHyH.js","assets/未总结.html-DSuC0bQv.js","assets/程序局部性.html-BPbDHfNd.js","assets/1.内存暴增问题剖析解决过程.html-C690gNo2.js","assets/2.如何定位系统内存问题.html-CUkhKn5c.js","assets/3.内存泄露的排查与定位.html-B9vSufXb.js","assets/4.内存问题检测工具.html-mKGwQCVU.js","assets/内存什么时候释放.html-Ct2KM_Kn.js","assets/内存分析工具.html-Cq8lmgwO.js","assets/1.IO监控工具.html-CyLhDC22.js","assets/工具.html-Q6wIfLjJ.js","assets/1.内存申请相关函数.html-CZhK74FB.js","assets/编译选项注意.html-CbX3-Qs-.js","assets/1.磁盘和查看性能.html-CpKBRMXB.js","assets/10.linux系统日志分析.html-CZYZR1e0.js","assets/2.iowait的理解.html-D6yk7kZe.js","assets/3.IO复用.html-Dr5NPBT3.js","assets/4.epoll问题记录.html-D2jLY_OI.js","assets/5.文件系统和查看性能.html-DS4u4HEH.js","assets/6.DMA和零拷贝技术.html-BISQ4RKS.js","assets/7.Inotify详解.html-DXCBoicR.js","assets/8.惊群效应.html-CFAwkYg2.js","assets/9.linux权限和umask值.html-iCngSnxD.js","assets/9.netlink优缺点.html-Bg1RO0Cq.js","assets/Linux系统tempfs和shm详解.html-DC37XMLz.js","assets/netlink相关.html-DkIGE3eF.js","assets/业余研究.html-CMBjbJ2j.js","assets/性能优化.html-Eh6oUdtg.js","assets/1.进程栈和线程栈和内核栈和中断栈.html-D9Btki_C.js","assets/2.线程局部存储的原理与实现.html-ClH-d_jH.js","assets/3.Linux系统进程状态解析.html-COsMgWTB.js","assets/4.fork实现.html-OJJc-oZk.js","assets/特殊的IP地址.html-fCXhAVyG.js","assets/1.可扩展架构的思想.html-CoHFvYaW.js","assets/2.微内核.html-CElf60GP.js","assets/3.微服务.html-DXEIGVLw.js","assets/1.存储架构-集群和分区.html-UBQk9-wz.js","assets/2.存储架构-双机架构.html-CiA5P8Nc.js","assets/3.计算高可用架构.html-YAHxOCbw.js","assets/4.异地多活.html-Cte_XLtA.js","assets/5.接口级故障处理方法.html-WReX6NPK.js","assets/6.CAP理论.html-DxmWU9J2.js","assets/7.如何排除可用性隐患.html-C-FTm41N.js","assets/1.数据库集群之分库分表.html-BRKnWgZb.js","assets/2.数据库集群之读写分离.html-CMCQK1pG.js","assets/3.高性能NoSQL.html-CrrsD6Fi.js","assets/4.高性能负载均衡.html-D1XGBwAO.js","assets/5.高性能缓存架构-缓存穿透雪崩热点.html-C_D4meOy.js","assets/6.单服务器高性能-Reactor与Proactor.html-B_V5VOD9.js","assets/7.单服务器高性能模式-PPC和TPC.html-Bg6I1Z1E.js","assets/1.智能指针.html-D2yxw15e.js","assets/10.定位new详解.html-BD28BHrq.js","assets/11.类型转换.html-C0aTxGAq.js","assets/12.typename用法.html-Cs5U219J.js","assets/13.POD类型详解.html-DGuuiLhP.js","assets/14.extern的详解.html-BQx69EA2.js","assets/15.explicit关键字.html-CRErn29j.js","assets/16.emplace_back和push_back区别.html-MMdSoclk.js","assets/17.cout使用.html-yke2OIDe.js","assets/18.c__11之enable_shared_from_this.html-C4rY5pCE.js","assets/19.c__输入.html-CeUB9IZp.js","assets/2.左值和右值.html-BJl119dd.js","assets/3.const和constexpr使用.html-DtOzW6hw.js","assets/4.STL容器.html-eZ3MIR0R.js","assets/5.闭包和仿函数和匿名函数.html-CpZV2_-J.js","assets/6.宏与内联.html-DzeRBhTg.js","assets/7.虚继承和虚基类.html-B2L4K0Za.js","assets/8.断言的使用.html-Ic0ZFKpo.js","assets/9.c__11中function和bind的使用.html-CD2NQcYH.js","assets/1.并发编程.html-BLGd3m9N.js","assets/10.单例模式.html-EaZDxFWV.js","assets/11.分支预测优化.html-BJi8glIJ.js","assets/12.函数重载注意点.html-Dx0HnVPB.js","assets/13.可变参数.html-QtKfHC8z.js","assets/14.内存对齐.html-CbeCzU6Y.js","assets/15.生成随机浮点数.html-CFBy_hAJ.js","assets/16.时间编程.html-8oAG-Xav.js","assets/17.引用和指针.html-C0a6ptoZ.js","assets/18.强制修改const char指针类型的数据.html-C4eTHxgA.js","assets/19.字符串中删除空格.html-CrxmvD1D.js","assets/2.单元测试.html-JNPz7alO.js","assets/20.字符串拼接效率对比.html-6NRQ3oAL.js","assets/3.关于返回对象的问题.html-Ct2VOJda.js","assets/4.异常.html-CYYZc1sh.js","assets/5.全局变量和static变量初始化问题.html-BZYdzqql.js","assets/6.STL容器存放对象还是指针.html-D59Tr26z.js","assets/7.scanf使用注意.html-LUSdB_8B.js","assets/8.c__初始化问题记录.html-ChnsH6Mr.js","assets/9.string与memset的问题.html-BGbuWv2Q.js","assets/1.关于对象.html-dgrGsB_l.js","assets/2.关于构造函数.html-Cr6Zz_LW.js","assets/3.关于拷贝构造函数.html-Ca1GIp1U.js","assets/4.数据语意.html-CQ5Dpaqz.js","assets/1.coredump调试.html-qPqmg8Wh.js","assets/2.gdb调试工具.html-CNna_x2U.js","assets/3.gcc使用.html-D-UzdQ8u.js","assets/1.C__符号的编解码.html-DqcviPuo.js","assets/2.c__内存模型.html-DYnXqgd6.js","assets/1.panic和recover.html-BEPr4t_v.js","assets/2.make和new.html-BoXNtlPr.js","assets/3.go语言三个点的意义.html-DtW0hXIu.js","assets/4.for和range.html-DTL7MvTK.js","assets/5.cgo注意事项.html-EdXosM2v.js","assets/6.下划线的语义.html-BYudHRO5.js","assets/1.数组切片字符串.html-BG4vHBTk.js","assets/10.垃圾回收.html-iLtPIzpy.js","assets/11.GMP调度.html-DB31cEQP.js","assets/2.go语言defer关键字浅析.html-Dv4u2nq7.js","assets/3.sync.mutex详解.html-BCHRNxXt.js","assets/4.哈希表.html-D9aCEn-n.js","assets/5.chan底层实现.html-CMZUX-op.js","assets/6.select.html-BcYiSnmh.js","assets/7.栈空间管理.html-DSjFQcuW.js","assets/8.内存管理.html-CjiOc2EE.js","assets/9.内存逃逸.html-WBel5PNT.js","assets/1.编译构建时ldflags变量注入.html-BmT1d8nv.js","assets/2.go语言正确的获取连接的文件描述符.html-Cw4DK7M_.js","assets/3.go网络编程正确关闭TCP连接以及管理它的生命周期.html-BE9N75Zs.js","assets/4.go加密解密算法.html-B5yHyKKL.js","assets/5.go单元测试.html-hYeF0LNA.js","assets/6.ticket使用.html-DIXmDSfB.js","assets/7.http客户端的实现.html-DoFmfCsb.js","assets/8.项目设置版本号.html-BQGxWZVc.js","assets/9.时间戳和时间之间的转换.html-Cy4841Wg.js","assets/1.TCP的重传机制.html-CB0lj-hy.js","assets/2.TCP的保活机制.html-CXiLVHEl.js","assets/3.socket与三次握手四次挥手.html-X5qS_BJ_.js","assets/4.TCP异常断开连接.html-B2AwHF7J.js","assets/5.拔掉网线后的TCP连接.html-Bui0wbIh.js","assets/6.TCP和UDP占用同一端口.html-C5m5N4xH.js","assets/传输层.html-BWiklgt4.js","assets/1.如何正确关闭TCP连接.html-h5Dq965T.js","assets/tcp和udp.html-DEltxTjz.js","assets/1.https如何保证安全.html-qo9V3ugl.js","assets/2.HTTPS优化手段.html-Du7yvUji.js","assets/3.TLS1.2协议.html-DGivY2Ie.js","assets/4.TLS1.3协议.html-BqLKosEj.js","assets/CSRF攻击.html-CN5JATc9.js","assets/基础名词详解.html-DDx2xfo6.js","assets/1.浏览器同源和跨域问题.html-U3Tv5umi.js","assets/1.浏览器输入URL后发生了什么.html-BcmyAAgg.js","assets/2.http2的特性.html-BuIxB6Pm.js","assets/3.get和post的区别.html-CQTnR0-J.js","assets/4.验证HTTPS证书合法性.html-yYpFPSpk.js","assets/http协议.html-CYHNw9oK.js","assets/http和https的区别.html-BNRocMis.js","assets/应用层.html-CtzLXyDD.js","assets/消息头.html-Dgv0QkXd.js","assets/请求头Proxy-Connection.html-BtvC5hfa.js","assets/404.html-DsM25ODZ.js","assets/index.html-Dhm_iTKL.js","assets/index.html-CxIil7fY.js","assets/index.html-CClHuKp3.js","assets/index.html-BWWr3eAL.js","assets/index.html-DvBJLIu0.js","assets/index.html-D2iUFDrL.js","assets/index.html-C1oa389R.js","assets/index.html-BdaI29I_.js","assets/index.html-Cb7Ked8Z.js","assets/index.html-SkapzIJd.js","assets/index.html-BdwH88BP.js","assets/index.html-BQO_cb0T.js","assets/index.html-BbROZJv2.js","assets/index.html-Bh_Hez4M.js","assets/index.html-BnPC0YSi.js","assets/index.html-BicHlBFB.js","assets/index.html-C1b2Zmzu.js","assets/index.html-DXIYlEHX.js","assets/index.html-avf94cXV.js","assets/index.html-C-wT_lPC.js","assets/index.html-Xg0gJahI.js","assets/index.html-PH282HdR.js","assets/index.html-BCmEPTtv.js","assets/index.html-uMG-T27v.js","assets/index.html-ChMvhLEr.js","assets/index.html-Cx0jPUh5.js","assets/index.html-DFYxyZGp.js","assets/index.html-BZKGYbYe.js","assets/index.html-CxpJxXiS.js","assets/index.html-CWtNl4iD.js","assets/index.html-eecOIF2N.js","assets/index.html-CsTuT8NM.js","assets/index.html-Byzk1e0O.js","assets/index.html-CLWJBlO0.js","assets/index.html-BzPDSKhK.js","assets/index.html-kRTZ6GSb.js","assets/index.html-CdIY_1HH.js","assets/index.html-CUV0u34D.js","assets/index.html-P0ebYOJV.js","assets/index.html-OYnM6TJi.js","assets/index.html-YOPEuSaZ.js","assets/index.html-CRc36DtB.js","assets/index.html-uyKuF7-9.js","assets/index.html-D-VVq--o.js","assets/index.html-Ba3c2bzR.js","assets/index.html-CwEXAhkl.js","assets/index.html-90qofcQx.js","assets/index.html-2N-fNCx4.js","assets/index.html-B4IX0g2J.js","assets/index.html-DJuTp0Py.js","assets/index.html-Cm98wNk1.js","assets/index.html-jMjH_dsi.js","assets/index.html-BD0IX3VN.js","assets/index.html-ErESQ_fH.js","assets/index.html-DyGYBWLW.js","assets/index.html-C2P6jElP.js","assets/index.html-D7x-C4xL.js","assets/index.html-CohK65_h.js","assets/index.html-B3pgwtA_.js","assets/index.html-BmGahbPi.js","assets/index.html-GuDpdS82.js","assets/index.html-Dit6OicL.js","assets/index.html-BDzJyQ7q.js","assets/index.html-B_VlhrLi.js","assets/index.html-CnR0HNwi.js","assets/index.html-Dxe9_0rf.js","assets/index.html-Cyp8yu5G.js","assets/index.html-BJmiu5_b.js","assets/index.html-BttyQDCu.js","assets/index.html-BrYUu3Uh.js","assets/index.html-CY2iXvXS.js","assets/index.html-Bqd1rq_4.js","assets/index.html-D7GiH4F5.js","assets/index.html-qeecfQhb.js","assets/index.html-BS2EWzD4.js","assets/index.html-CJEH6VhZ.js","assets/index.html-BCVXPSTz.js","assets/index.html-B-YyjubH.js","assets/index.html-Ct7hDfhc.js","assets/index.html-BxoouiAu.js","assets/index.html-BJC7Qcf6.js","assets/index.html-D6CXIJ6Z.js","assets/index.html-Dj5XEsHN.js","assets/index.html-CGGVrcU2.js","assets/index.html-BKMfWuSb.js","assets/index.html-Cs3gsDHP.js","assets/index.html-U2PmA8po.js","assets/index.html-CafNTp1L.js","assets/index.html-Bi7ehguh.js","assets/index.html-BtjPNI8k.js","assets/index.html-CvZA6zQk.js","assets/index.html-DLGRxmcp.js","assets/index.html-BnrzRa1C.js","assets/index.html-DqP7jIRF.js","assets/index.html-DRPQzIKR.js","assets/index.html-DCgahhRT.js","assets/index.html-D79b2fFy.js","assets/index.html-BT7xB3Kl.js"])))=>i.map(i=>d[i]);
var Uo=Object.defineProperty;var zo=(i,s,e)=>s in i?Uo(i,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[s]=e;var aa=(i,s,e)=>zo(i,typeof s!="symbol"?s+"":s,e);const jo="modulepreload",Go=function(i){return"/"+i},Cr={},B=function(s,e,n){let t=Promise.resolve();if(e&&e.length>0){document.getElementsByTagName("link");const l=document.querySelector("meta[property=csp-nonce]"),r=(l==null?void 0:l.nonce)||(l==null?void 0:l.getAttribute("nonce"));t=Promise.allSettled(e.map(h=>{if(h=Go(h),h in Cr)return;Cr[h]=!0;const p=h.endsWith(".css"),o=p?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${h}"]${o}`))return;const d=document.createElement("link");if(d.rel=p?"stylesheet":jo,p||(d.as="script"),d.crossOrigin="",d.href=h,r&&d.setAttribute("nonce",r),document.head.appendChild(d),p)return new Promise((c,k)=>{d.addEventListener("load",c),d.addEventListener("error",()=>k(new Error(`Unable to preload CSS for ${h}`)))})}))}function a(l){const r=new Event("vite:preloadError",{cancelable:!0});if(r.payload=l,window.dispatchEvent(r),!r.defaultPrevented)throw l}return t.then(l=>{for(const r of l||[])r.status==="rejected"&&a(r.reason);return s().catch(a)})};/**
* @vue/shared v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**//*! #__NO_SIDE_EFFECTS__ */function ln(i){const s=Object.create(null);for(const e of i.split(","))s[e]=1;return e=>e in s}const Di={},We=[],Vs=()=>{},Wo=()=>!1,qn=i=>i.charCodeAt(0)===111&&i.charCodeAt(1)===110&&(i.charCodeAt(2)>122||i.charCodeAt(2)<97),yl=i=>i.startsWith("onUpdate:"),Ri=Object.assign,Fl=(i,s)=>{const e=i.indexOf(s);e>-1&&i.splice(e,1)},qo=Object.prototype.hasOwnProperty,mi=(i,s)=>qo.call(i,s),ni=Array.isArray,Dn=i=>Nt(i)==="[object Map]",Ko=i=>Nt(i)==="[object Set]",ei=i=>typeof i=="function",xi=i=>typeof i=="string",rn=i=>typeof i=="symbol",Ti=i=>i!==null&&typeof i=="object",JE=i=>(Ti(i)||ei(i))&&ei(i.then)&&ei(i.catch),Xo=Object.prototype.toString,Nt=i=>Xo.call(i),Yo=i=>Nt(i).slice(8,-1),Qo=i=>Nt(i)==="[object Object]",Cl=i=>xi(i)&&i!=="NaN"&&i[0]!=="-"&&""+parseInt(i,10)===i,qe=ln(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Ht=i=>{const s=Object.create(null);return e=>s[e]||(s[e]=i(e))},Jo=/-(\w)/g,es=Ht(i=>i.replace(Jo,(s,e)=>e?e.toUpperCase():"")),Zo=/\B([A-Z])/g,Ae=Ht(i=>i.replace(Zo,"-$1").toLowerCase()),Kn=Ht(i=>i.charAt(0).toUpperCase()+i.slice(1)),la=Ht(i=>i?`on${Kn(i)}`:""),oe=(i,s)=>!Object.is(i,s),ra=(i,...s)=>{for(let e=0;e<i.length;e++)i[e](...s)},Ze=(i,s,e,n=!1)=>{Object.defineProperty(i,s,{configurable:!0,enumerable:!1,writable:n,value:e})},id=i=>{const s=parseFloat(i);return isNaN(s)?i:s},sd=i=>{const s=xi(i)?Number(i):NaN;return isNaN(s)?i:s};let Dr;const Ut=()=>Dr||(Dr=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function zt(i){if(ni(i)){const s={};for(let e=0;e<i.length;e++){const n=i[e],t=xi(n)?ad(n):zt(n);if(t)for(const a in t)s[a]=t[a]}return s}else if(xi(i)||Ti(i))return i}const ed=/;(?![^(]*\))/g,nd=/:([^]+)/,td=/\/\*[^]*?\*\//g;function ad(i){const s={};return i.replace(td,"").split(ed).forEach(e=>{if(e){const n=e.split(nd);n.length>1&&(s[n[0].trim()]=n[1].trim())}}),s}function ld(i){if(!i)return"";if(xi(i))return i;let s="";for(const e in i){const n=i[e];if(xi(n)||typeof n=="number"){const t=e.startsWith("--")?e:Ae(e);s+=`${t}:${n};`}}return s}function jt(i){let s="";if(xi(i))s=i;else if(ni(i))for(let e=0;e<i.length;e++){const n=jt(i[e]);n&&(s+=n+" ")}else if(Ti(i))for(const e in i)i[e]&&(s+=e+" ");return s.trim()}const ZE="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",rd=ln(ZE),br=ln(ZE+",async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected");function Dl(i){return!!i||i===""}const Ed=ln("accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap"),hd=ln("xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xmlns:xlink,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan");function pd(i){if(i==null)return!1;const s=typeof i;return s==="string"||s==="number"||s==="boolean"}const od=/[ !"#$%&'()*+,./:;<=>?@[\\\]^`{|}~]/g;function dd(i,s){return i.replace(od,e=>`\\${e}`)}/**
* @vue/reactivity v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let Gi;class cd{constructor(s=!1){this.detached=s,this._active=!0,this.effects=[],this.cleanups=[],this._isPaused=!1,this.parent=Gi,!s&&Gi&&(this.index=(Gi.scopes||(Gi.scopes=[])).push(this)-1)}get active(){return this._active}pause(){if(this._active){this._isPaused=!0;let s,e;if(this.scopes)for(s=0,e=this.scopes.length;s<e;s++)this.scopes[s].pause();for(s=0,e=this.effects.length;s<e;s++)this.effects[s].pause()}}resume(){if(this._active&&this._isPaused){this._isPaused=!1;let s,e;if(this.scopes)for(s=0,e=this.scopes.length;s<e;s++)this.scopes[s].resume();for(s=0,e=this.effects.length;s<e;s++)this.effects[s].resume()}}run(s){if(this._active){const e=Gi;try{return Gi=this,s()}finally{Gi=e}}}on(){Gi=this}off(){Gi=this.parent}stop(s){if(this._active){this._active=!1;let e,n;for(e=0,n=this.effects.length;e<n;e++)this.effects[e].stop();for(this.effects.length=0,e=0,n=this.cleanups.length;e<n;e++)this.cleanups[e]();if(this.cleanups.length=0,this.scopes){for(e=0,n=this.scopes.length;e<n;e++)this.scopes[e].stop(!0);this.scopes.length=0}if(!this.detached&&this.parent&&!s){const t=this.parent.scopes.pop();t&&t!==this&&(this.parent.scopes[this.index]=t,t.index=this.index)}this.parent=void 0}}}function bl(){return Gi}function ih(i,s=!1){Gi&&Gi.cleanups.push(i)}let Ci;const Ea=new WeakSet;class sh{constructor(s){this.fn=s,this.deps=void 0,this.depsTail=void 0,this.flags=5,this.next=void 0,this.cleanup=void 0,this.scheduler=void 0,Gi&&Gi.active&&Gi.effects.push(this)}pause(){this.flags|=64}resume(){this.flags&64&&(this.flags&=-65,Ea.has(this)&&(Ea.delete(this),this.trigger()))}notify(){this.flags&2&&!(this.flags&32)||this.flags&8||nh(this)}run(){if(!(this.flags&1))return this.fn();this.flags|=2,_r(this),th(this);const s=Ci,e=bs;Ci=this,bs=!0;try{return this.fn()}finally{ah(this),Ci=s,bs=e,this.flags&=-3}}stop(){if(this.flags&1){for(let s=this.deps;s;s=s.nextDep)xl(s);this.deps=this.depsTail=void 0,_r(this),this.onStop&&this.onStop(),this.flags&=-2}}trigger(){this.flags&64?Ea.add(this):this.scheduler?this.scheduler():this.runIfDirty()}runIfDirty(){Va(this)&&this.run()}get dirty(){return Va(this)}}let eh=0,bn,_n;function nh(i,s=!1){if(i.flags|=8,s){i.next=_n,_n=i;return}i.next=bn,bn=i}function _l(){eh++}function wl(){if(--eh>0)return;if(_n){let s=_n;for(_n=void 0;s;){const e=s.next;s.next=void 0,s.flags&=-9,s=e}}let i;for(;bn;){let s=bn;for(bn=void 0;s;){const e=s.next;if(s.next=void 0,s.flags&=-9,s.flags&1)try{s.trigger()}catch(n){i||(i=n)}s=e}}if(i)throw i}function th(i){for(let s=i.deps;s;s=s.nextDep)s.version=-1,s.prevActiveLink=s.dep.activeLink,s.dep.activeLink=s}function ah(i){let s,e=i.depsTail,n=e;for(;n;){const t=n.prevDep;n.version===-1?(n===e&&(e=t),xl(n),Bd(n)):s=n,n.dep.activeLink=n.prevActiveLink,n.prevActiveLink=void 0,n=t}i.deps=s,i.depsTail=e}function Va(i){for(let s=i.deps;s;s=s.nextDep)if(s.dep.version!==s.version||s.dep.computed&&(lh(s.dep.computed)||s.dep.version!==s.version))return!0;return!!i._dirty}function lh(i){if(i.flags&4&&!(i.flags&16)||(i.flags&=-17,i.globalVersion===In))return;i.globalVersion=In;const s=i.dep;if(i.flags|=2,s.version>0&&!i.isSSR&&i.deps&&!Va(i)){i.flags&=-3;return}const e=Ci,n=bs;Ci=i,bs=!0;try{th(i);const t=i.fn(i._value);(s.version===0||oe(t,i._value))&&(i._value=t,s.version++)}catch(t){throw s.version++,t}finally{Ci=e,bs=n,ah(i),i.flags&=-3}}function xl(i,s=!1){const{dep:e,prevSub:n,nextSub:t}=i;if(n&&(n.nextSub=t,i.prevSub=void 0),t&&(t.prevSub=n,i.nextSub=void 0),e.subs===i&&(e.subs=n,!n&&e.computed)){e.computed.flags&=-5;for(let a=e.computed.deps;a;a=a.nextDep)xl(a,!0)}!s&&!--e.sc&&e.map&&e.map.delete(e.key)}function Bd(i){const{prevDep:s,nextDep:e}=i;s&&(s.nextDep=e,i.prevDep=void 0),e&&(e.prevDep=s,i.nextDep=void 0)}let bs=!0;const rh=[];function Qs(){rh.push(bs),bs=!1}function Js(){const i=rh.pop();bs=i===void 0?!0:i}function _r(i){const{cleanup:s}=i;if(i.cleanup=void 0,s){const e=Ci;Ci=void 0;try{s()}finally{Ci=e}}}let In=0;class kd{constructor(s,e){this.sub=s,this.dep=e,this.version=e.version,this.nextDep=this.prevDep=this.nextSub=this.prevSub=this.prevActiveLink=void 0}}class Gt{constructor(s){this.computed=s,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0}track(s){if(!Ci||!bs||Ci===this.computed)return;let e=this.activeLink;if(e===void 0||e.sub!==Ci)e=this.activeLink=new kd(Ci,this),Ci.deps?(e.prevDep=Ci.depsTail,Ci.depsTail.nextDep=e,Ci.depsTail=e):Ci.deps=Ci.depsTail=e,Eh(e);else if(e.version===-1&&(e.version=this.version,e.nextDep)){const n=e.nextDep;n.prevDep=e.prevDep,e.prevDep&&(e.prevDep.nextDep=n),e.prevDep=Ci.depsTail,e.nextDep=void 0,Ci.depsTail.nextDep=e,Ci.depsTail=e,Ci.deps===e&&(Ci.deps=n)}return e}trigger(s){this.version++,In++,this.notify(s)}notify(s){_l();try{for(let e=this.subs;e;e=e.prevSub)e.sub.notify()&&e.sub.dep.notify()}finally{wl()}}}function Eh(i){if(i.dep.sc++,i.sub.flags&4){const s=i.dep.computed;if(s&&!i.dep.subs){s.flags|=20;for(let n=s.deps;n;n=n.nextDep)Eh(n)}const e=i.dep.subs;e!==i&&(i.prevSub=e,e&&(e.nextSub=i)),i.dep.subs=i}}const xt=new WeakMap,xe=Symbol(""),$a=Symbol(""),Rn=Symbol("");function Hi(i,s,e){if(bs&&Ci){let n=xt.get(i);n||xt.set(i,n=new Map);let t=n.get(e);t||(n.set(e,t=new Gt),t.map=n,t.key=e),t.track()}}function qs(i,s,e,n,t,a){const l=xt.get(i);if(!l){In++;return}const r=h=>{h&&h.trigger()};if(_l(),s==="clear")l.forEach(r);else{const h=ni(i),p=h&&Cl(e);if(h&&e==="length"){const o=Number(n);l.forEach((d,c)=>{(c==="length"||c===Rn||!rn(c)&&c>=o)&&r(d)})}else switch((e!==void 0||l.has(void 0))&&r(l.get(e)),p&&r(l.get(Rn)),s){case"add":h?p&&r(l.get("length")):(r(l.get(xe)),Dn(i)&&r(l.get($a)));break;case"delete":h||(r(l.get(xe)),Dn(i)&&r(l.get($a)));break;case"set":Dn(i)&&r(l.get(xe));break}}wl()}function Ad(i,s){const e=xt.get(i);return e&&e.get(s)}function Ve(i){const s=li(i);return s===i?s:(Hi(s,"iterate",Rn),_s(i)?s:s.map(Wi))}function Tl(i){return Hi(i=li(i),"iterate",Rn),i}const ud={__proto__:null,[Symbol.iterator](){return ha(this,Symbol.iterator,Wi)},concat(...i){return Ve(this).concat(...i.map(s=>ni(s)?Ve(s):s))},entries(){return ha(this,"entries",i=>(i[1]=Wi(i[1]),i))},every(i,s){return Us(this,"every",i,s,void 0,arguments)},filter(i,s){return Us(this,"filter",i,s,e=>e.map(Wi),arguments)},find(i,s){return Us(this,"find",i,s,Wi,arguments)},findIndex(i,s){return Us(this,"findIndex",i,s,void 0,arguments)},findLast(i,s){return Us(this,"findLast",i,s,Wi,arguments)},findLastIndex(i,s){return Us(this,"findLastIndex",i,s,void 0,arguments)},forEach(i,s){return Us(this,"forEach",i,s,void 0,arguments)},includes(...i){return pa(this,"includes",i)},indexOf(...i){return pa(this,"indexOf",i)},join(i){return Ve(this).join(i)},lastIndexOf(...i){return pa(this,"lastIndexOf",i)},map(i,s){return Us(this,"map",i,s,void 0,arguments)},pop(){return kn(this,"pop")},push(...i){return kn(this,"push",i)},reduce(i,...s){return wr(this,"reduce",i,s)},reduceRight(i,...s){return wr(this,"reduceRight",i,s)},shift(){return kn(this,"shift")},some(i,s){return Us(this,"some",i,s,void 0,arguments)},splice(...i){return kn(this,"splice",i)},toReversed(){return Ve(this).toReversed()},toSorted(i){return Ve(this).toSorted(i)},toSpliced(...i){return Ve(this).toSpliced(...i)},unshift(...i){return kn(this,"unshift",i)},values(){return ha(this,"values",Wi)}};function ha(i,s,e){const n=Tl(i),t=n[s]();return n!==i&&!_s(i)&&(t._next=t.next,t.next=()=>{const a=t._next();return a.value&&(a.value=e(a.value)),a}),t}const gd=Array.prototype;function Us(i,s,e,n,t,a){const l=Tl(i),r=l!==i&&!_s(i),h=l[s];if(h!==gd[s]){const d=h.apply(i,a);return r?Wi(d):d}let p=e;l!==i&&(r?p=function(d,c){return e.call(this,Wi(d),c,i)}:e.length>2&&(p=function(d,c){return e.call(this,d,c,i)}));const o=h.call(l,p,n);return r&&t?t(o):o}function wr(i,s,e,n){const t=Tl(i);let a=e;return t!==i&&(_s(i)?e.length>3&&(a=function(l,r,h){return e.call(this,l,r,h,i)}):a=function(l,r,h){return e.call(this,l,Wi(r),h,i)}),t[s](a,...n)}function pa(i,s,e){const n=li(i);Hi(n,"iterate",Rn);const t=n[s](...e);return(t===-1||t===!1)&&Sl(e[0])?(e[0]=li(e[0]),n[s](...e)):t}function kn(i,s,e=[]){Qs(),_l();const n=li(i)[s].apply(i,e);return wl(),Js(),n}const md=ln("__proto__,__v_isRef,__isVue"),hh=new Set(Object.getOwnPropertyNames(Symbol).filter(i=>i!=="arguments"&&i!=="caller").map(i=>Symbol[i]).filter(rn));function fd(i){rn(i)||(i=String(i));const s=li(this);return Hi(s,"has",i),s.hasOwnProperty(i)}class ph{constructor(s=!1,e=!1){this._isReadonly=s,this._isShallow=e}get(s,e,n){if(e==="__v_skip")return s.__v_skip;const t=this._isReadonly,a=this._isShallow;if(e==="__v_isReactive")return!t;if(e==="__v_isReadonly")return t;if(e==="__v_isShallow")return a;if(e==="__v_raw")return n===(t?a?Td:Bh:a?ch:dh).get(s)||Object.getPrototypeOf(s)===Object.getPrototypeOf(n)?s:void 0;const l=ni(s);if(!t){let h;if(l&&(h=ud[e]))return h;if(e==="hasOwnProperty")return fd}const r=Reflect.get(s,e,Li(s)?s:n);return(rn(e)?hh.has(e):md(e))||(t||Hi(s,"get",e),a)?r:Li(r)?l&&Cl(e)?r:r.value:Ti(r)?t?Zs(r):Xn(r):r}}class oh extends ph{constructor(s=!1){super(!1,s)}set(s,e,n,t){let a=s[e];if(!this._isShallow){const h=Pe(a);if(!_s(n)&&!Pe(n)&&(a=li(a),n=li(n)),!ni(s)&&Li(a)&&!Li(n))return h?!1:(a.value=n,!0)}const l=ni(s)&&Cl(e)?Number(e)<s.length:mi(s,e),r=Reflect.set(s,e,n,Li(s)?s:t);return s===li(t)&&(l?oe(n,a)&&qs(s,"set",e,n):qs(s,"add",e,n)),r}deleteProperty(s,e){const n=mi(s,e);s[e];const t=Reflect.deleteProperty(s,e);return t&&n&&qs(s,"delete",e,void 0),t}has(s,e){const n=Reflect.has(s,e);return(!rn(e)||!hh.has(e))&&Hi(s,"has",e),n}ownKeys(s){return Hi(s,"iterate",ni(s)?"length":xe),Reflect.ownKeys(s)}}class vd extends ph{constructor(s=!1){super(!0,s)}set(s,e){return!0}deleteProperty(s,e){return!0}}const yd=new oh,Fd=new vd,Cd=new oh(!0);const Na=i=>i,ct=i=>Reflect.getPrototypeOf(i);function Dd(i,s,e){return function(...n){const t=this.__v_raw,a=li(t),l=Dn(a),r=i==="entries"||i===Symbol.iterator&&l,h=i==="keys"&&l,p=t[i](...n),o=e?Na:s?Ha:Wi;return!s&&Hi(a,"iterate",h?$a:xe),{next(){const{value:d,done:c}=p.next();return c?{value:d,done:c}:{value:r?[o(d[0]),o(d[1])]:o(d),done:c}},[Symbol.iterator](){return this}}}}function Bt(i){return function(...s){return i==="delete"?!1:i==="clear"?void 0:this}}function bd(i,s){const e={get(t){const a=this.__v_raw,l=li(a),r=li(t);i||(oe(t,r)&&Hi(l,"get",t),Hi(l,"get",r));const{has:h}=ct(l),p=s?Na:i?Ha:Wi;if(h.call(l,t))return p(a.get(t));if(h.call(l,r))return p(a.get(r));a!==l&&a.get(t)},get size(){const t=this.__v_raw;return!i&&Hi(li(t),"iterate",xe),Reflect.get(t,"size",t)},has(t){const a=this.__v_raw,l=li(a),r=li(t);return i||(oe(t,r)&&Hi(l,"has",t),Hi(l,"has",r)),t===r?a.has(t):a.has(t)||a.has(r)},forEach(t,a){const l=this,r=l.__v_raw,h=li(r),p=s?Na:i?Ha:Wi;return!i&&Hi(h,"iterate",xe),r.forEach((o,d)=>t.call(a,p(o),p(d),l))}};return Ri(e,i?{add:Bt("add"),set:Bt("set"),delete:Bt("delete"),clear:Bt("clear")}:{add(t){!s&&!_s(t)&&!Pe(t)&&(t=li(t));const a=li(this);return ct(a).has.call(a,t)||(a.add(t),qs(a,"add",t,t)),this},set(t,a){!s&&!_s(a)&&!Pe(a)&&(a=li(a));const l=li(this),{has:r,get:h}=ct(l);let p=r.call(l,t);p||(t=li(t),p=r.call(l,t));const o=h.call(l,t);return l.set(t,a),p?oe(a,o)&&qs(l,"set",t,a):qs(l,"add",t,a),this},delete(t){const a=li(this),{has:l,get:r}=ct(a);let h=l.call(a,t);h||(t=li(t),h=l.call(a,t)),r&&r.call(a,t);const p=a.delete(t);return h&&qs(a,"delete",t,void 0),p},clear(){const t=li(this),a=t.size!==0,l=t.clear();return a&&qs(t,"clear",void 0,void 0),l}}),["keys","values","entries",Symbol.iterator].forEach(t=>{e[t]=Dd(t,i,s)}),e}function Pl(i,s){const e=bd(i,s);return(n,t,a)=>t==="__v_isReactive"?!i:t==="__v_isReadonly"?i:t==="__v_raw"?n:Reflect.get(mi(e,t)&&t in n?e:n,t,a)}const _d={get:Pl(!1,!1)},wd={get:Pl(!1,!0)},xd={get:Pl(!0,!1)};const dh=new WeakMap,ch=new WeakMap,Bh=new WeakMap,Td=new WeakMap;function Pd(i){switch(i){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Ld(i){return i.__v_skip||!Object.isExtensible(i)?0:Pd(Yo(i))}function Xn(i){return Pe(i)?i:Ll(i,!1,yd,_d,dh)}function kh(i){return Ll(i,!1,Cd,wd,ch)}function Zs(i){return Ll(i,!0,Fd,xd,Bh)}function Ll(i,s,e,n,t){if(!Ti(i)||i.__v_raw&&!(s&&i.__v_isReactive))return i;const a=t.get(i);if(a)return a;const l=Ld(i);if(l===0)return i;const r=new Proxy(i,l===2?n:e);return t.set(i,r),r}function wn(i){return Pe(i)?wn(i.__v_raw):!!(i&&i.__v_isReactive)}function Pe(i){return!!(i&&i.__v_isReadonly)}function _s(i){return!!(i&&i.__v_isShallow)}function Sl(i){return i?!!i.__v_raw:!1}function li(i){const s=i&&i.__v_raw;return s?li(s):i}function Sd(i){return!mi(i,"__v_skip")&&Object.isExtensible(i)&&Ze(i,"__v_skip",!0),i}const Wi=i=>Ti(i)?Xn(i):i,Ha=i=>Ti(i)?Zs(i):i;function Li(i){return i?i.__v_isRef===!0:!1}function G(i){return Ah(i,!1)}function Pi(i){return Ah(i,!0)}function Ah(i,s){return Li(i)?i:new Od(i,s)}class Od{constructor(s,e){this.dep=new Gt,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=e?s:li(s),this._value=e?s:Wi(s),this.__v_isShallow=e}get value(){return this.dep.track(),this._value}set value(s){const e=this._rawValue,n=this.__v_isShallow||_s(s)||Pe(s);s=n?s:li(s),oe(s,e)&&(this._rawValue=s,this._value=n?s:Wi(s),this.dep.trigger())}}function Ks(i){return Li(i)?i.value:i}const Id={get:(i,s,e)=>s==="__v_raw"?i:Ks(Reflect.get(i,s,e)),set:(i,s,e,n)=>{const t=i[s];return Li(t)&&!Li(e)?(t.value=e,!0):Reflect.set(i,s,e,n)}};function uh(i){return wn(i)?i:new Proxy(i,Id)}class Rd{constructor(s){this.__v_isRef=!0,this._value=void 0;const e=this.dep=new Gt,{get:n,set:t}=s(e.track.bind(e),e.trigger.bind(e));this._get=n,this._set=t}get value(){return this._value=this._get()}set value(s){this._set(s)}}function Ol(i){return new Rd(i)}class Md{constructor(s,e,n){this._object=s,this._key=e,this._defaultValue=n,this.__v_isRef=!0,this._value=void 0}get value(){const s=this._object[this._key];return this._value=s===void 0?this._defaultValue:s}set value(s){this._object[this._key]=s}get dep(){return Ad(li(this._object),this._key)}}class Vd{constructor(s){this._getter=s,this.__v_isRef=!0,this.__v_isReadonly=!0,this._value=void 0}get value(){return this._value=this._getter()}}function Oe(i,s,e){return Li(i)?i:ei(i)?new Vd(i):Ti(i)&&arguments.length>1?$d(i,s,e):G(i)}function $d(i,s,e){const n=i[s];return Li(n)?n:new Md(i,s,e)}class Nd{constructor(s,e,n){this.fn=s,this.setter=e,this._value=void 0,this.dep=new Gt(this),this.__v_isRef=!0,this.deps=void 0,this.depsTail=void 0,this.flags=16,this.globalVersion=In-1,this.next=void 0,this.effect=this,this.__v_isReadonly=!e,this.isSSR=n}notify(){if(this.flags|=16,!(this.flags&8)&&Ci!==this)return nh(this,!0),!0}get value(){const s=this.dep.track();return lh(this),s&&(s.version=this.dep.version),this._value}set value(s){this.setter&&this.setter(s)}}function Hd(i,s,e=!1){let n,t;return ei(i)?n=i:(n=i.get,t=i.set),new Nd(n,t,e)}const kt={},Tt=new WeakMap;let De;function Ud(i,s=!1,e=De){if(e){let n=Tt.get(e);n||Tt.set(e,n=[]),n.push(i)}}function zd(i,s,e=Di){const{immediate:n,deep:t,once:a,scheduler:l,augmentJob:r,call:h}=e,p=C=>t?C:_s(C)||t===!1||t===0?pe(C,1):pe(C);let o,d,c,k,f=!1,u=!1;if(Li(i)?(d=()=>i.value,f=_s(i)):wn(i)?(d=()=>p(i),f=!0):ni(i)?(u=!0,f=i.some(C=>wn(C)||_s(C)),d=()=>i.map(C=>{if(Li(C))return C.value;if(wn(C))return p(C);if(ei(C))return h?h(C,2):C()})):ei(i)?s?d=h?()=>h(i,2):i:d=()=>{if(c){Qs();try{c()}finally{Js()}}const C=De;De=o;try{return h?h(i,3,[k]):i(k)}finally{De=C}}:d=Vs,s&&t){const C=d,L=t===!0?1/0:t;d=()=>pe(C(),L)}const y=bl(),v=()=>{o.stop(),y&&y.active&&Fl(y.effects,o)};if(a&&s){const C=s;s=(...L)=>{C(...L),v()}}let D=u?new Array(i.length).fill(kt):kt;const g=C=>{if(!(!(o.flags&1)||!o.dirty&&!C))if(s){const L=o.run();if(t||f||(u?L.some((W,V)=>oe(W,D[V])):oe(L,D))){c&&c();const W=De;De=o;try{const V=[L,D===kt?void 0:u&&D[0]===kt?[]:D,k];h?h(s,3,V):s(...V),D=L}finally{De=W}}}else o.run()};return r&&r(g),o=new sh(d),o.scheduler=l?()=>l(g,!1):g,k=C=>Ud(C,!1,o),c=o.onStop=()=>{const C=Tt.get(o);if(C){if(h)h(C,4);else for(const L of C)L();Tt.delete(o)}},s?n?g(!0):D=o.run():l?l(g.bind(null,!0),!0):o.run(),v.pause=o.pause.bind(o),v.resume=o.resume.bind(o),v.stop=v,v}function pe(i,s=1/0,e){if(s<=0||!Ti(i)||i.__v_skip||(e=e||new Set,e.has(i)))return i;if(e.add(i),s--,Li(i))pe(i.value,s,e);else if(ni(i))for(let n=0;n<i.length;n++)pe(i[n],s,e);else if(Ko(i)||Dn(i))i.forEach(n=>{pe(n,s,e)});else if(Qo(i)){for(const n in i)pe(i[n],s,e);for(const n of Object.getOwnPropertySymbols(i))Object.prototype.propertyIsEnumerable.call(i,n)&&pe(i[n],s,e)}return i}/**
* @vue/runtime-core v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const xn=[];let oa=!1;function te(i,...s){if(oa)return;oa=!0,Qs();const e=xn.length?xn[xn.length-1].component:null,n=e&&e.appContext.config.warnHandler,t=jd();if(n)En(n,e,11,[i+s.map(a=>{var l,r;return(r=(l=a.toString)==null?void 0:l.call(a))!=null?r:JSON.stringify(a)}).join(""),e&&e.proxy,t.map(({vnode:a})=>`at <${hp(e,a.type)}>`).join(`
`),t]);else{const a=[`[Vue warn]: ${i}`,...s];t.length&&a.push(`
`,...Gd(t)),console.warn(...a)}Js(),oa=!1}function jd(){let i=xn[xn.length-1];if(!i)return[];const s=[];for(;i;){const e=s[0];e&&e.vnode===i?e.recurseCount++:s.push({vnode:i,recurseCount:0});const n=i.component&&i.component.parent;i=n&&n.vnode}return s}function Gd(i){const s=[];return i.forEach((e,n)=>{s.push(...n===0?[]:[`
`],...Wd(e))}),s}function Wd({vnode:i,recurseCount:s}){const e=s>0?`... (${s} recursive calls)`:"",n=i.component?i.component.parent==null:!1,t=` at <${hp(i.component,i.type,n)}`,a=">"+e;return i.props?[t,...qd(i.props),a]:[t+a]}function qd(i){const s=[],e=Object.keys(i);return e.slice(0,3).forEach(n=>{s.push(...gh(n,i[n]))}),e.length>3&&s.push(" ..."),s}function gh(i,s,e){return xi(s)?(s=JSON.stringify(s),e?s:[`${i}=${s}`]):typeof s=="number"||typeof s=="boolean"||s==null?e?s:[`${i}=${s}`]:Li(s)?(s=gh(i,li(s.value),!0),e?s:[`${i}=Ref<`,s,">"]):ei(s)?[`${i}=fn${s.name?`<${s.name}>`:""}`]:(s=li(s),e?s:[`${i}=`,s])}function En(i,s,e,n){try{return n?i(...n):i()}catch(t){Yn(t,s,e)}}function xs(i,s,e,n){if(ei(i)){const t=En(i,s,e,n);return t&&JE(t)&&t.catch(a=>{Yn(a,s,e)}),t}if(ni(i)){const t=[];for(let a=0;a<i.length;a++)t.push(xs(i[a],s,e,n));return t}}function Yn(i,s,e,n=!0){const t=s?s.vnode:null,{errorHandler:a,throwUnhandledErrorInProduction:l}=s&&s.appContext.config||Di;if(s){let r=s.parent;const h=s.proxy,p=`https://vuejs.org/error-reference/#runtime-${e}`;for(;r;){const o=r.ec;if(o){for(let d=0;d<o.length;d++)if(o[d](i,h,p)===!1)return}r=r.parent}if(a){Qs(),En(a,null,10,[i,h,p]),Js();return}}Kd(i,e,t,n,l)}function Kd(i,s,e,n=!0,t=!1){if(t)throw i;console.error(i)}const qi=[];let Is=-1;const Ke=[];let le=null,ze=0;const mh=Promise.resolve();let Pt=null;function ys(i){const s=Pt||mh;return i?s.then(this?i.bind(this):i):s}function Xd(i){let s=Is+1,e=qi.length;for(;s<e;){const n=s+e>>>1,t=qi[n],a=Mn(t);a<i||a===i&&t.flags&2?s=n+1:e=n}return s}function Il(i){if(!(i.flags&1)){const s=Mn(i),e=qi[qi.length-1];!e||!(i.flags&2)&&s>=Mn(e)?qi.push(i):qi.splice(Xd(s),0,i),i.flags|=1,fh()}}function fh(){Pt||(Pt=mh.then(vh))}function Yd(i){ni(i)?Ke.push(...i):le&&i.id===-1?le.splice(ze+1,0,i):i.flags&1||(Ke.push(i),i.flags|=1),fh()}function xr(i,s,e=Is+1){for(;e<qi.length;e++){const n=qi[e];if(n&&n.flags&2){if(i&&n.id!==i.uid)continue;qi.splice(e,1),e--,n.flags&4&&(n.flags&=-2),n(),n.flags&4||(n.flags&=-2)}}}function Lt(i){if(Ke.length){const s=[...new Set(Ke)].sort((e,n)=>Mn(e)-Mn(n));if(Ke.length=0,le){le.push(...s);return}for(le=s,ze=0;ze<le.length;ze++){const e=le[ze];e.flags&4&&(e.flags&=-2),e.flags&8||e(),e.flags&=-2}le=null,ze=0}}const Mn=i=>i.id==null?i.flags&2?-1:1/0:i.id;function vh(i){try{for(Is=0;Is<qi.length;Is++){const s=qi[Is];s&&!(s.flags&8)&&(s.flags&4&&(s.flags&=-2),En(s,s.i,s.i?15:14),s.flags&4||(s.flags&=-2))}}finally{for(;Is<qi.length;Is++){const s=qi[Is];s&&(s.flags&=-2)}Is=-1,qi.length=0,Lt(),Pt=null,(qi.length||Ke.length)&&vh()}}let Ms,fn=[],Ua=!1;function Wt(i,...s){Ms?Ms.emit(i,...s):Ua||fn.push({event:i,args:s})}function yh(i,s){var e,n;Ms=i,Ms?(Ms.enabled=!0,fn.forEach(({event:t,args:a})=>Ms.emit(t,...a)),fn=[]):typeof window<"u"&&window.HTMLElement&&!((n=(e=window.navigator)==null?void 0:e.userAgent)!=null&&n.includes("jsdom"))?((s.__VUE_DEVTOOLS_HOOK_REPLAY__=s.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push(a=>{yh(a,s)}),setTimeout(()=>{Ms||(s.__VUE_DEVTOOLS_HOOK_REPLAY__=null,Ua=!0,fn=[])},3e3)):(Ua=!0,fn=[])}function Qd(i,s){Wt("app:init",i,s,{Fragment:Ki,Text:de,Comment:Zi,Static:Qe})}function Jd(i){Wt("app:unmount",i)}const Zd=Rl("component:added"),Fh=Rl("component:updated"),i2=Rl("component:removed"),s2=i=>{Ms&&typeof Ms.cleanupBuffer=="function"&&!Ms.cleanupBuffer(i)&&i2(i)};/*! #__NO_SIDE_EFFECTS__ */function Rl(i){return s=>{Wt(i,s.appContext.app,s.uid,s.parent?s.parent.uid:void 0,s)}}function e2(i,s,e){Wt("component:emit",i.appContext.app,i,s,e)}let gs=null,Ch=null;function St(i){const s=gs;return gs=i,Ch=i&&i.type.__scopeId||null,s}function n2(i,s=gs,e){if(!s||i._n)return i;const n=(...t)=>{n._d&&zr(-1);const a=St(s);let l;try{l=i(...t)}finally{St(a),n._d&&zr(1)}return Fh(s),l};return n._n=!0,n._c=!0,n._d=!0,n}function Rs(i,s,e,n){const t=i.dirs,a=s&&s.dirs;for(let l=0;l<t.length;l++){const r=t[l];a&&(r.oldValue=a[l].value);let h=r.dir[n];h&&(Qs(),xs(h,e,8,[i.el,r,i,s]),Js())}}const t2=Symbol("_vte"),Dh=i=>i.__isTeleport,re=Symbol("_leaveCb"),At=Symbol("_enterCb");function bh(){const i={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return pi(()=>{i.isMounted=!0}),Rh(()=>{i.isUnmounting=!0}),i}const Bs=[Function,Array],_h={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Bs,onEnter:Bs,onAfterEnter:Bs,onEnterCancelled:Bs,onBeforeLeave:Bs,onLeave:Bs,onAfterLeave:Bs,onLeaveCancelled:Bs,onBeforeAppear:Bs,onAppear:Bs,onAfterAppear:Bs,onAppearCancelled:Bs},wh=i=>{const s=i.subTree;return s.component?wh(s.component):s},a2={name:"BaseTransition",props:_h,setup(i,{slots:s}){const e=ge(),n=bh();return()=>{const t=s.default&&Ml(s.default(),!0);if(!t||!t.length)return;const a=xh(t),l=li(i),{mode:r}=l;if(n.isLeaving)return da(a);const h=Tr(a);if(!h)return da(a);let p=Vn(h,l,n,e,d=>p=d);h.type!==Zi&&Le(h,p);let o=e.subTree&&Tr(e.subTree);if(o&&o.type!==Zi&&!_e(h,o)&&wh(e).type!==Zi){let d=Vn(o,l,n,e);if(Le(o,d),r==="out-in"&&h.type!==Zi)return n.isLeaving=!0,d.afterLeave=()=>{n.isLeaving=!1,e.job.flags&8||e.update(),delete d.afterLeave,o=void 0},da(a);r==="in-out"&&h.type!==Zi?d.delayLeave=(c,k,f)=>{const u=Th(n,o);u[String(o.key)]=o,c[re]=()=>{k(),c[re]=void 0,delete p.delayedLeave,o=void 0},p.delayedLeave=()=>{f(),delete p.delayedLeave,o=void 0}}:o=void 0}else o&&(o=void 0);return a}}};function xh(i){let s=i[0];if(i.length>1){for(const e of i)if(e.type!==Zi){s=e;break}}return s}const l2=a2;function Th(i,s){const{leavingVNodes:e}=i;let n=e.get(s.type);return n||(n=Object.create(null),e.set(s.type,n)),n}function Vn(i,s,e,n,t){const{appear:a,mode:l,persisted:r=!1,onBeforeEnter:h,onEnter:p,onAfterEnter:o,onEnterCancelled:d,onBeforeLeave:c,onLeave:k,onAfterLeave:f,onLeaveCancelled:u,onBeforeAppear:y,onAppear:v,onAfterAppear:D,onAppearCancelled:g}=s,C=String(i.key),L=Th(e,i),W=($,_)=>{$&&xs($,n,9,_)},V=($,_)=>{const I=_[1];W($,_),ni($)?$.every(T=>T.length<=1)&&I():$.length<=1&&I()},X={mode:l,persisted:r,beforeEnter($){let _=h;if(!e.isMounted)if(a)_=y||h;else return;$[re]&&$[re](!0);const I=L[C];I&&_e(i,I)&&I.el[re]&&I.el[re](),W(_,[$])},enter($){let _=p,I=o,T=d;if(!e.isMounted)if(a)_=v||p,I=D||o,T=g||d;else return;let J=!1;const Ei=$[At]=gi=>{J||(J=!0,gi?W(T,[$]):W(I,[$]),X.delayedLeave&&X.delayedLeave(),$[At]=void 0)};_?V(_,[$,Ei]):Ei()},leave($,_){const I=String(i.key);if($[At]&&$[At](!0),e.isUnmounting)return _();W(c,[$]);let T=!1;const J=$[re]=Ei=>{T||(T=!0,_(),Ei?W(u,[$]):W(f,[$]),$[re]=void 0,L[I]===i&&delete L[I])};L[I]=i,k?V(k,[$,J]):J()},clone($){const _=Vn($,s,e,n,t);return t&&t(_),_}};return X}function da(i){if(Qn(i))return i=Be(i),i.children=null,i}function Tr(i){if(!Qn(i))return Dh(i.type)&&i.children?xh(i.children):i;const{shapeFlag:s,children:e}=i;if(e){if(s&16)return e[0];if(s&32&&ei(e.default))return e.default()}}function Le(i,s){i.shapeFlag&6&&i.component?(i.transition=s,Le(i.component.subTree,s)):i.shapeFlag&128?(i.ssContent.transition=s.clone(i.ssContent),i.ssFallback.transition=s.clone(i.ssFallback)):i.transition=s}function Ml(i,s=!1,e){let n=[],t=0;for(let a=0;a<i.length;a++){let l=i[a];const r=e==null?l.key:String(e)+String(l.key!=null?l.key:a);l.type===Ki?(l.patchFlag&128&&t++,n=n.concat(Ml(l.children,s,r))):(s||l.type!==Zi)&&n.push(r!=null?Be(l,{key:r}):l)}if(t>1)for(let a=0;a<n.length;a++)n[a].patchFlag=-2;return n}/*! #__NO_SIDE_EFFECTS__ */function R(i,s){return ei(i)?Ri({name:i.name},s,{setup:i}):i}function Vl(i){i.ids=[i.ids[0]+i.ids[2]+++"-",0,0]}function $n(i,s,e,n,t=!1){if(ni(i)){i.forEach((f,u)=>$n(f,s&&(ni(s)?s[u]:s),e,n,t));return}if(Xe(n)&&!t){n.shapeFlag&512&&n.type.__asyncResolved&&n.component.subTree.component&&$n(i,s,e,n.component.subTree);return}const a=n.shapeFlag&4?zl(n.component):n.el,l=t?null:a,{i:r,r:h}=i,p=s&&s.r,o=r.refs===Di?r.refs={}:r.refs,d=r.setupState,c=li(d),k=d===Di?()=>!1:f=>mi(c,f);if(p!=null&&p!==h&&(xi(p)?(o[p]=null,k(p)&&(d[p]=null)):Li(p)&&(p.value=null)),ei(h))En(h,r,12,[l,o]);else{const f=xi(h),u=Li(h);if(f||u){const y=()=>{if(i.f){const v=f?k(h)?d[h]:o[h]:h.value;t?ni(v)&&Fl(v,a):ni(v)?v.includes(a)||v.push(a):f?(o[h]=[a],k(h)&&(d[h]=o[h])):(h.value=[a],i.k&&(o[i.k]=h.value))}else f?(o[h]=l,k(h)&&(d[h]=l)):u&&(h.value=l,i.k&&(o[i.k]=l))};l?(y.id=-1,rs(y,e)):y()}}}let Pr=!1;const ve=()=>{Pr||(console.error("Hydration completed but contains mismatches."),Pr=!0)},r2=i=>i.namespaceURI.includes("svg")&&i.tagName!=="foreignObject",E2=i=>i.namespaceURI.includes("MathML"),ut=i=>{if(i.nodeType===1){if(r2(i))return"svg";if(E2(i))return"mathml"}},be=i=>i.nodeType===8;function h2(i){const{mt:s,p:e,o:{patchProp:n,createText:t,nextSibling:a,parentNode:l,remove:r,insert:h,createComment:p}}=i,o=(g,C)=>{if(!C.hasChildNodes()){te("Attempting to hydrate existing markup but container is empty. Performing full mount instead."),e(null,g,C),Lt(),C._vnode=g;return}d(C.firstChild,g,null,null,null),Lt(),C._vnode=g},d=(g,C,L,W,V,X=!1)=>{X=X||!!C.dynamicChildren;const $=be(g)&&g.data==="[",_=()=>u(g,C,L,W,V,$),{type:I,ref:T,shapeFlag:J,patchFlag:Ei}=C;let gi=g.nodeType;C.el=g,Ze(g,"__vnode",C,!0),Ze(g,"__vueParentComponent",L,!0),Ei===-2&&(X=!1,C.dynamicChildren=null);let q=null;switch(I){case de:gi!==3?C.children===""?(h(C.el=t(""),l(g),g),q=g):q=_():(g.data!==C.children&&(te("Hydration text mismatch in",g.parentNode,`
  - rendered on server: ${JSON.stringify(g.data)}
  - expected on client: ${JSON.stringify(C.children)}`),ve(),g.data=C.children),q=a(g));break;case Zi:D(g)?(q=a(g),v(C.el=g.content.firstChild,g,L)):gi!==8||$?q=_():q=a(g);break;case Qe:if($&&(g=a(g),gi=g.nodeType),gi===1||gi===3){q=g;const ii=!C.children.length;for(let Y=0;Y<C.staticCount;Y++)ii&&(C.children+=q.nodeType===1?q.outerHTML:q.data),Y===C.staticCount-1&&(C.anchor=q),q=a(q);return $?a(q):q}else _();break;case Ki:$?q=f(g,C,L,W,V,X):q=_();break;default:if(J&1)(gi!==1||C.type.toLowerCase()!==g.tagName.toLowerCase())&&!D(g)?q=_():q=c(g,C,L,W,V,X);else if(J&6){C.slotScopeIds=V;const ii=l(g);if($?q=y(g):be(g)&&g.data==="teleport start"?q=y(g,g.data,"teleport end"):q=a(g),s(C,ii,null,L,W,ut(ii),X),Xe(C)&&!C.type.__asyncResolved){let Y;$?(Y=Oi(Ki),Y.anchor=q?q.previousSibling:ii.lastChild):Y=g.nodeType===3?ap(""):Oi("div"),Y.el=g,C.component.subTree=Y}}else J&64?gi!==8?q=_():q=C.type.hydrate(g,C,L,W,V,X,i,k):J&128?q=C.type.hydrate(g,C,L,W,ut(l(g)),V,X,i,d):te("Invalid HostVNode type:",I,`(${typeof I})`)}return T!=null&&$n(T,null,W,C),q},c=(g,C,L,W,V,X)=>{X=X||!!C.dynamicChildren;const{type:$,props:_,patchFlag:I,shapeFlag:T,dirs:J,transition:Ei}=C,gi=$==="input"||$==="option";if(gi||I!==-1){J&&Rs(C,null,L,"created");let q=!1;if(D(g)){q=Xh(null,Ei)&&L&&L.vnode.props&&L.vnode.props.appear;const Y=g.content.firstChild;q&&Ei.beforeEnter(Y),v(Y,g,L),C.el=g=Y}if(T&16&&!(_&&(_.innerHTML||_.textContent))){let Y=k(g.firstChild,C,g,L,W,V,X),ki=!1;for(;Y;){vn(g,1)||(ki||(te("Hydration children mismatch on",g,`
Server rendered element contains more child nodes than client vdom.`),ki=!0),ve());const Ji=Y;Y=Y.nextSibling,r(Ji)}}else if(T&8){let Y=C.children;Y[0]===`
`&&(g.tagName==="PRE"||g.tagName==="TEXTAREA")&&(Y=Y.slice(1)),g.textContent!==Y&&(vn(g,0)||(te("Hydration text content mismatch on",g,`
  - rendered on server: ${g.textContent}
  - expected on client: ${C.children}`),ve()),g.textContent=C.children)}if(_){const Y=g.tagName.includes("-");for(const ki in _)!(J&&J.some(Ji=>Ji.dir.created))&&p2(g,ki,_[ki],C,L)&&ve(),(gi&&(ki.endsWith("value")||ki==="indeterminate")||qn(ki)&&!qe(ki)||ki[0]==="."||Y)&&n(g,ki,null,_[ki],void 0,L)}let ii;(ii=_&&_.onVnodeBeforeMount)&&ks(ii,L,C),J&&Rs(C,null,L,"beforeMount"),((ii=_&&_.onVnodeMounted)||J||q)&&ep(()=>{ii&&ks(ii,L,C),q&&Ei.enter(g),J&&Rs(C,null,L,"mounted")},W)}return g.nextSibling},k=(g,C,L,W,V,X,$)=>{$=$||!!C.dynamicChildren;const _=C.children,I=_.length;let T=!1;for(let J=0;J<I;J++){const Ei=$?_[J]:_[J]=us(_[J]),gi=Ei.type===de;g?(gi&&!$&&J+1<I&&us(_[J+1]).type===de&&(h(t(g.data.slice(Ei.children.length)),L,a(g)),g.data=Ei.children),g=d(g,Ei,W,V,X,$)):gi&&!Ei.children?h(Ei.el=t(""),L):(vn(L,1)||(T||(te("Hydration children mismatch on",L,`
Server rendered element contains fewer child nodes than client vdom.`),T=!0),ve()),e(null,Ei,L,null,W,V,ut(L),X))}return g},f=(g,C,L,W,V,X)=>{const{slotScopeIds:$}=C;$&&(V=V?V.concat($):$);const _=l(g),I=k(a(g),C,_,L,W,V,X);return I&&be(I)&&I.data==="]"?a(C.anchor=I):(ve(),h(C.anchor=p("]"),_,I),I)},u=(g,C,L,W,V,X)=>{if(vn(g.parentElement,1)||(te(`Hydration node mismatch:
- rendered on server:`,g,g.nodeType===3?"(text)":be(g)&&g.data==="["?"(start of fragment)":"",`
- expected on client:`,C.type),ve()),C.el=null,X){const I=y(g);for(;;){const T=a(g);if(T&&T!==I)r(T);else break}}const $=a(g),_=l(g);return r(g),e(null,C,_,$,L,W,ut(_),V),L&&(L.vnode.el=C.el,ip(L,C.el)),$},y=(g,C="[",L="]")=>{let W=0;for(;g;)if(g=a(g),g&&be(g)&&(g.data===C&&W++,g.data===L)){if(W===0)return a(g);W--}return g},v=(g,C,L)=>{const W=C.parentNode;W&&W.replaceChild(g,C);let V=L;for(;V;)V.vnode.el===C&&(V.vnode.el=V.subTree.el=g),V=V.parent},D=g=>g.nodeType===1&&g.tagName==="TEMPLATE";return[o,d]}function p2(i,s,e,n,t){let a,l,r,h;if(s==="class")r=i.getAttribute("class"),h=jt(e),o2(Lr(r||""),Lr(h))||(a=2,l="class");else if(s==="style"){r=i.getAttribute("style")||"",h=xi(e)?e:ld(zt(e));const p=Sr(r),o=Sr(h);if(n.dirs)for(const{dir:d,value:c}of n.dirs)d.name==="show"&&!c&&o.set("display","none");t&&Ph(t,n,o),d2(p,o)||(a=3,l="style")}else(i instanceof SVGElement&&hd(s)||i instanceof HTMLElement&&(br(s)||Ed(s)))&&(br(s)?(r=i.hasAttribute(s),h=Dl(e)):e==null?(r=i.hasAttribute(s),h=!1):(i.hasAttribute(s)?r=i.getAttribute(s):s==="value"&&i.tagName==="TEXTAREA"?r=i.value:r=!1,h=pd(e)?String(e):!1),r!==h&&(a=4,l=s));if(a!=null&&!vn(i,a)){const p=c=>c===!1?"(not rendered)":`${l}="${c}"`,o=`Hydration ${Lh[a]} mismatch on`,d=`
  - rendered on server: ${p(r)}
  - expected on client: ${p(h)}
  Note: this mismatch is check-only. The DOM will not be rectified in production due to performance overhead.
  You should fix the source of the mismatch.`;return te(o,i,d),!0}return!1}function Lr(i){return new Set(i.trim().split(/\s+/))}function o2(i,s){if(i.size!==s.size)return!1;for(const e of i)if(!s.has(e))return!1;return!0}function Sr(i){const s=new Map;for(const e of i.split(";")){let[n,t]=e.split(":");n=n.trim(),t=t&&t.trim(),n&&t&&s.set(n,t)}return s}function d2(i,s){if(i.size!==s.size)return!1;for(const[e,n]of i)if(n!==s.get(e))return!1;return!0}function Ph(i,s,e){const n=i.subTree;if(i.getCssVars&&(s===n||n&&n.type===Ki&&n.children.includes(s))){const t=i.getCssVars();for(const a in t)e.set(`--${dd(a)}`,String(t[a]))}s===n&&i.parent&&Ph(i.parent,i.vnode,e)}const Or="data-allow-mismatch",Lh={0:"text",1:"children",2:"class",3:"style",4:"attribute"};function vn(i,s){if(s===0||s===1)for(;i&&!i.hasAttribute(Or);)i=i.parentElement;const e=i&&i.getAttribute(Or);if(e==null)return!1;if(e==="")return!0;{const n=e.split(",");return s===0&&n.includes("children")?!0:e.split(",").includes(Lh[s])}}Ut().requestIdleCallback;Ut().cancelIdleCallback;function c2(i,s){if(be(i)&&i.data==="["){let e=1,n=i.nextSibling;for(;n;){if(n.nodeType===1){if(s(n)===!1)break}else if(be(n))if(n.data==="]"){if(--e===0)break}else n.data==="["&&e++;n=n.nextSibling}}else s(i)}const Xe=i=>!!i.type.__asyncLoader;/*! #__NO_SIDE_EFFECTS__ */function Sh(i){ei(i)&&(i={loader:i});const{loader:s,loadingComponent:e,errorComponent:n,delay:t=200,hydrate:a,timeout:l,suspensible:r=!0,onError:h}=i;let p=null,o,d=0;const c=()=>(d++,p=null,k()),k=()=>{let f;return p||(f=p=s().catch(u=>{if(u=u instanceof Error?u:new Error(String(u)),h)return new Promise((y,v)=>{h(u,()=>y(c()),()=>v(u),d+1)});throw u}).then(u=>f!==p&&p?p:(u&&(u.__esModule||u[Symbol.toStringTag]==="Module")&&(u=u.default),o=u,u)))};return R({name:"AsyncComponentWrapper",__asyncLoader:k,__asyncHydrate(f,u,y){const v=a?()=>{const D=a(y,g=>c2(f,g));D&&(u.bum||(u.bum=[])).push(D)}:y;o?v():k().then(()=>!u.isUnmounted&&v())},get __asyncResolved(){return o},setup(){const f=Vi;if(Vl(f),o)return()=>ca(o,f);const u=g=>{p=null,Yn(g,f,13,!n)};if(r&&f.suspense||sn)return k().then(g=>()=>ca(g,f)).catch(g=>(u(g),()=>n?Oi(n,{error:g}):null));const y=G(!1),v=G(),D=G(!!t);return t&&setTimeout(()=>{D.value=!1},t),l!=null&&setTimeout(()=>{if(!y.value&&!v.value){const g=new Error(`Async component timed out after ${l}ms.`);u(g),v.value=g}},l),k().then(()=>{y.value=!0,f.parent&&Qn(f.parent.vnode)&&f.parent.update()}).catch(g=>{u(g),v.value=g}),()=>{if(y.value&&o)return ca(o,f);if(v.value&&n)return Oi(n,{error:v.value});if(e&&!D.value)return Oi(e)}}})}function ca(i,s){const{ref:e,props:n,children:t,ce:a}=s.vnode,l=Oi(i,n,t);return l.ref=e,l.ce=a,delete s.vnode.ce,l}const Qn=i=>i.type.__isKeepAlive;function B2(i,s){Oh(i,"a",s)}function k2(i,s){Oh(i,"da",s)}function Oh(i,s,e=Vi){const n=i.__wdc||(i.__wdc=()=>{let t=e;for(;t;){if(t.isDeactivated)return;t=t.parent}return i()});if(qt(s,n,e),e){let t=e.parent;for(;t&&t.parent;)Qn(t.parent.vnode)&&A2(n,s,e,t),t=t.parent}}function A2(i,s,e,n){const t=qt(s,i,n,!0);ue(()=>{Fl(n[s],t)},e)}function qt(i,s,e=Vi,n=!1){if(e){const t=e[i]||(e[i]=[]),a=s.__weh||(s.__weh=(...l)=>{Qs();const r=Jn(e),h=xs(s,e,i,l);return r(),Js(),h});return n?t.unshift(a):t.push(a),a}}const ie=i=>(s,e=Vi)=>{(!sn||i==="sp")&&qt(i,(...n)=>s(...n),e)},u2=ie("bm"),pi=ie("m"),g2=ie("bu"),Ih=ie("u"),Rh=ie("bum"),ue=ie("um"),m2=ie("sp"),f2=ie("rtg"),v2=ie("rtc");function y2(i,s=Vi){qt("ec",i,s)}const F2="components";function ms(i,s){return D2(F2,i,!0,s)||i}const C2=Symbol.for("v-ndc");function D2(i,s,e=!0,n=!1){const t=gs||Vi;if(t){const a=t.type;{const r=Ep(a,!1);if(r&&(r===s||r===es(s)||r===Kn(es(s))))return a}const l=Ir(t[i]||a[i],s)||Ir(t.appContext[i],s);return!l&&n?a:l}}function Ir(i,s){return i&&(i[s]||i[es(s)]||i[Kn(es(s))])}const za=i=>i?lp(i)?zl(i):za(i.parent):null,Tn=Ri(Object.create(null),{$:i=>i,$el:i=>i.vnode.el,$data:i=>i.data,$props:i=>i.props,$attrs:i=>i.attrs,$slots:i=>i.slots,$refs:i=>i.refs,$parent:i=>za(i.parent),$root:i=>za(i.root),$host:i=>i.ce,$emit:i=>i.emit,$options:i=>Vh(i),$forceUpdate:i=>i.f||(i.f=()=>{Il(i.update)}),$nextTick:i=>i.n||(i.n=ys.bind(i.proxy)),$watch:i=>G2.bind(i)}),Ba=(i,s)=>i!==Di&&!i.__isScriptSetup&&mi(i,s),b2={get({_:i},s){if(s==="__v_skip")return!0;const{ctx:e,setupState:n,data:t,props:a,accessCache:l,type:r,appContext:h}=i;let p;if(s[0]!=="$"){const k=l[s];if(k!==void 0)switch(k){case 1:return n[s];case 2:return t[s];case 4:return e[s];case 3:return a[s]}else{if(Ba(n,s))return l[s]=1,n[s];if(t!==Di&&mi(t,s))return l[s]=2,t[s];if((p=i.propsOptions[0])&&mi(p,s))return l[s]=3,a[s];if(e!==Di&&mi(e,s))return l[s]=4,e[s];ja&&(l[s]=0)}}const o=Tn[s];let d,c;if(o)return s==="$attrs"&&Hi(i.attrs,"get",""),o(i);if((d=r.__cssModules)&&(d=d[s]))return d;if(e!==Di&&mi(e,s))return l[s]=4,e[s];if(c=h.config.globalProperties,mi(c,s))return c[s]},set({_:i},s,e){const{data:n,setupState:t,ctx:a}=i;return Ba(t,s)?(t[s]=e,!0):n!==Di&&mi(n,s)?(n[s]=e,!0):mi(i.props,s)||s[0]==="$"&&s.slice(1)in i?!1:(a[s]=e,!0)},has({_:{data:i,setupState:s,accessCache:e,ctx:n,appContext:t,propsOptions:a}},l){let r;return!!e[l]||i!==Di&&mi(i,l)||Ba(s,l)||(r=a[0])&&mi(r,l)||mi(n,l)||mi(Tn,l)||mi(t.config.globalProperties,l)},defineProperty(i,s,e){return e.get!=null?i._.accessCache[s]=0:mi(e,"value")&&this.set(i,s,e.value,null),Reflect.defineProperty(i,s,e)}};function Rr(i){return ni(i)?i.reduce((s,e)=>(s[e]=null,s),{}):i}let ja=!0;function _2(i){const s=Vh(i),e=i.proxy,n=i.ctx;ja=!1,s.beforeCreate&&Mr(s.beforeCreate,i,"bc");const{data:t,computed:a,methods:l,watch:r,provide:h,inject:p,created:o,beforeMount:d,mounted:c,beforeUpdate:k,updated:f,activated:u,deactivated:y,beforeDestroy:v,beforeUnmount:D,destroyed:g,unmounted:C,render:L,renderTracked:W,renderTriggered:V,errorCaptured:X,serverPrefetch:$,expose:_,inheritAttrs:I,components:T,directives:J,filters:Ei}=s;if(p&&w2(p,n,null),l)for(const ii in l){const Y=l[ii];ei(Y)&&(n[ii]=Y.bind(e))}if(t){const ii=t.call(e,e);Ti(ii)&&(i.data=Xn(ii))}if(ja=!0,a)for(const ii in a){const Y=a[ii],ki=ei(Y)?Y.bind(e,e):ei(Y.get)?Y.get.bind(e,e):Vs,Ji=!ei(Y)&&ei(Y.set)?Y.set.bind(e):Vs,cs=F({get:ki,set:Ji});Object.defineProperty(n,ii,{enumerable:!0,configurable:!0,get:()=>cs.value,set:Mi=>cs.value=Mi})}if(r)for(const ii in r)Mh(r[ii],n,e,ii);if(h){const ii=ei(h)?h.call(e):h;Reflect.ownKeys(ii).forEach(Y=>{ps(Y,ii[Y])})}o&&Mr(o,i,"c");function q(ii,Y){ni(Y)?Y.forEach(ki=>ii(ki.bind(e))):Y&&ii(Y.bind(e))}if(q(u2,d),q(pi,c),q(g2,k),q(Ih,f),q(B2,u),q(k2,y),q(y2,X),q(v2,W),q(f2,V),q(Rh,D),q(ue,C),q(m2,$),ni(_))if(_.length){const ii=i.exposed||(i.exposed={});_.forEach(Y=>{Object.defineProperty(ii,Y,{get:()=>e[Y],set:ki=>e[Y]=ki})})}else i.exposed||(i.exposed={});L&&i.render===Vs&&(i.render=L),I!=null&&(i.inheritAttrs=I),T&&(i.components=T),J&&(i.directives=J),$&&Vl(i)}function w2(i,s,e=Vs){ni(i)&&(i=Ga(i));for(const n in i){const t=i[n];let a;Ti(t)?"default"in t?a=ui(t.from||n,t.default,!0):a=ui(t.from||n):a=ui(t),Li(a)?Object.defineProperty(s,n,{enumerable:!0,configurable:!0,get:()=>a.value,set:l=>a.value=l}):s[n]=a}}function Mr(i,s,e){xs(ni(i)?i.map(n=>n.bind(s.proxy)):i.bind(s.proxy),s,e)}function Mh(i,s,e,n){let t=n.includes(".")?Jh(e,n):()=>e[n];if(xi(i)){const a=s[i];ei(a)&&ti(t,a)}else if(ei(i))ti(t,i.bind(e));else if(Ti(i))if(ni(i))i.forEach(a=>Mh(a,s,e,n));else{const a=ei(i.handler)?i.handler.bind(e):s[i.handler];ei(a)&&ti(t,a,i)}}function Vh(i){const s=i.type,{mixins:e,extends:n}=s,{mixins:t,optionsCache:a,config:{optionMergeStrategies:l}}=i.appContext,r=a.get(s);let h;return r?h=r:!t.length&&!e&&!n?h=s:(h={},t.length&&t.forEach(p=>Ot(h,p,l,!0)),Ot(h,s,l)),Ti(s)&&a.set(s,h),h}function Ot(i,s,e,n=!1){const{mixins:t,extends:a}=s;a&&Ot(i,a,e,!0),t&&t.forEach(l=>Ot(i,l,e,!0));for(const l in s)if(!(n&&l==="expose")){const r=x2[l]||e&&e[l];i[l]=r?r(i[l],s[l]):s[l]}return i}const x2={data:Vr,props:$r,emits:$r,methods:yn,computed:yn,beforeCreate:ji,created:ji,beforeMount:ji,mounted:ji,beforeUpdate:ji,updated:ji,beforeDestroy:ji,beforeUnmount:ji,destroyed:ji,unmounted:ji,activated:ji,deactivated:ji,errorCaptured:ji,serverPrefetch:ji,components:yn,directives:yn,watch:P2,provide:Vr,inject:T2};function Vr(i,s){return s?i?function(){return Ri(ei(i)?i.call(this,this):i,ei(s)?s.call(this,this):s)}:s:i}function T2(i,s){return yn(Ga(i),Ga(s))}function Ga(i){if(ni(i)){const s={};for(let e=0;e<i.length;e++)s[i[e]]=i[e];return s}return i}function ji(i,s){return i?[...new Set([].concat(i,s))]:s}function yn(i,s){return i?Ri(Object.create(null),i,s):s}function $r(i,s){return i?ni(i)&&ni(s)?[...new Set([...i,...s])]:Ri(Object.create(null),Rr(i),Rr(s??{})):s}function P2(i,s){if(!i)return s;if(!s)return i;const e=Ri(Object.create(null),i);for(const n in s)e[n]=ji(i[n],s[n]);return e}function $h(){return{app:null,config:{isNativeTag:Wo,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let L2=0;function S2(i,s){return function(n,t=null){ei(n)||(n=Ri({},n)),t!=null&&!Ti(t)&&(t=null);const a=$h(),l=new WeakSet,r=[];let h=!1;const p=a.app={_uid:L2++,_component:n,_props:t,_container:null,_context:a,_instance:null,version:Wr,get config(){return a.config},set config(o){},use(o,...d){return l.has(o)||(o&&ei(o.install)?(l.add(o),o.install(p,...d)):ei(o)&&(l.add(o),o(p,...d))),p},mixin(o){return a.mixins.includes(o)||a.mixins.push(o),p},component(o,d){return d?(a.components[o]=d,p):a.components[o]},directive(o,d){return d?(a.directives[o]=d,p):a.directives[o]},mount(o,d,c){if(!h){const k=p._ceVNode||Oi(n,t);return k.appContext=a,c===!0?c="svg":c===!1&&(c=void 0),d&&s?s(k,o):i(k,o,c),h=!0,p._container=o,o.__vue_app__=p,p._instance=k.component,Qd(p,Wr),zl(k.component)}},onUnmount(o){r.push(o)},unmount(){h&&(xs(r,p._instance,16),i(null,p._container),p._instance=null,Jd(p),delete p._container.__vue_app__)},provide(o,d){return a.provides[o]=d,p},runWithContext(o){const d=Ye;Ye=p;try{return o()}finally{Ye=d}}};return p}}let Ye=null;function ps(i,s){if(Vi){let e=Vi.provides;const n=Vi.parent&&Vi.parent.provides;n===e&&(e=Vi.provides=Object.create(n)),e[i]=s}}function ui(i,s,e=!1){const n=Vi||gs;if(n||Ye){const t=Ye?Ye._context.provides:n?n.parent==null?n.vnode.appContext&&n.vnode.appContext.provides:n.parent.provides:void 0;if(t&&i in t)return t[i];if(arguments.length>1)return e&&ei(s)?s.call(n&&n.proxy):s}}const Nh={},Hh=()=>Object.create(Nh),Uh=i=>Object.getPrototypeOf(i)===Nh;function O2(i,s,e,n=!1){const t={},a=Hh();i.propsDefaults=Object.create(null),zh(i,s,t,a);for(const l in i.propsOptions[0])l in t||(t[l]=void 0);e?i.props=n?t:kh(t):i.type.props?i.props=t:i.props=a,i.attrs=a}function I2(i,s,e,n){const{props:t,attrs:a,vnode:{patchFlag:l}}=i,r=li(t),[h]=i.propsOptions;let p=!1;if((n||l>0)&&!(l&16)){if(l&8){const o=i.vnode.dynamicProps;for(let d=0;d<o.length;d++){let c=o[d];if(Kt(i.emitsOptions,c))continue;const k=s[c];if(h)if(mi(a,c))k!==a[c]&&(a[c]=k,p=!0);else{const f=es(c);t[f]=Wa(h,r,f,k,i,!1)}else k!==a[c]&&(a[c]=k,p=!0)}}}else{zh(i,s,t,a)&&(p=!0);let o;for(const d in r)(!s||!mi(s,d)&&((o=Ae(d))===d||!mi(s,o)))&&(h?e&&(e[d]!==void 0||e[o]!==void 0)&&(t[d]=Wa(h,r,d,void 0,i,!0)):delete t[d]);if(a!==r)for(const d in a)(!s||!mi(s,d))&&(delete a[d],p=!0)}p&&qs(i.attrs,"set","")}function zh(i,s,e,n){const[t,a]=i.propsOptions;let l=!1,r;if(s)for(let h in s){if(qe(h))continue;const p=s[h];let o;t&&mi(t,o=es(h))?!a||!a.includes(o)?e[o]=p:(r||(r={}))[o]=p:Kt(i.emitsOptions,h)||(!(h in n)||p!==n[h])&&(n[h]=p,l=!0)}if(a){const h=li(e),p=r||Di;for(let o=0;o<a.length;o++){const d=a[o];e[d]=Wa(t,h,d,p[d],i,!mi(p,d))}}return l}function Wa(i,s,e,n,t,a){const l=i[e];if(l!=null){const r=mi(l,"default");if(r&&n===void 0){const h=l.default;if(l.type!==Function&&!l.skipFactory&&ei(h)){const{propsDefaults:p}=t;if(e in p)n=p[e];else{const o=Jn(t);n=p[e]=h.call(null,s),o()}}else n=h;t.ce&&t.ce._setProp(e,n)}l[0]&&(a&&!r?n=!1:l[1]&&(n===""||n===Ae(e))&&(n=!0))}return n}const R2=new WeakMap;function jh(i,s,e=!1){const n=e?R2:s.propsCache,t=n.get(i);if(t)return t;const a=i.props,l={},r=[];let h=!1;if(!ei(i)){const o=d=>{h=!0;const[c,k]=jh(d,s,!0);Ri(l,c),k&&r.push(...k)};!e&&s.mixins.length&&s.mixins.forEach(o),i.extends&&o(i.extends),i.mixins&&i.mixins.forEach(o)}if(!a&&!h)return Ti(i)&&n.set(i,We),We;if(ni(a))for(let o=0;o<a.length;o++){const d=es(a[o]);Nr(d)&&(l[d]=Di)}else if(a)for(const o in a){const d=es(o);if(Nr(d)){const c=a[o],k=l[d]=ni(c)||ei(c)?{type:c}:Ri({},c),f=k.type;let u=!1,y=!0;if(ni(f))for(let v=0;v<f.length;++v){const D=f[v],g=ei(D)&&D.name;if(g==="Boolean"){u=!0;break}else g==="String"&&(y=!1)}else u=ei(f)&&f.name==="Boolean";k[0]=u,k[1]=y,(u||mi(k,"default"))&&r.push(d)}}const p=[l,r];return Ti(i)&&n.set(i,p),p}function Nr(i){return i[0]!=="$"&&!qe(i)}const Gh=i=>i[0]==="_"||i==="$stable",$l=i=>ni(i)?i.map(us):[us(i)],M2=(i,s,e)=>{if(s._n)return s;const n=n2((...t)=>$l(s(...t)),e);return n._c=!1,n},Wh=(i,s,e)=>{const n=i._ctx;for(const t in i){if(Gh(t))continue;const a=i[t];if(ei(a))s[t]=M2(t,a,n);else if(a!=null){const l=$l(a);s[t]=()=>l}}},qh=(i,s)=>{const e=$l(s);i.slots.default=()=>e},Kh=(i,s,e)=>{for(const n in s)(e||n!=="_")&&(i[n]=s[n])},V2=(i,s,e)=>{const n=i.slots=Hh();if(i.vnode.shapeFlag&32){const t=s._;t?(Kh(n,s,e),e&&Ze(n,"_",t,!0)):Wh(s,n)}else s&&qh(i,s)},$2=(i,s,e)=>{const{vnode:n,slots:t}=i;let a=!0,l=Di;if(n.shapeFlag&32){const r=s._;r?e&&r===1?a=!1:Kh(t,s,e):(a=!s.$stable,Wh(s,t)),l=s}else s&&(qh(i,s),l={default:1});if(a)for(const r in t)!Gh(r)&&l[r]==null&&delete t[r]},rs=ep;function N2(i){return H2(i,h2)}function H2(i,s){const e=Ut();e.__VUE__=!0,yh(e.__VUE_DEVTOOLS_GLOBAL_HOOK__,e);const{insert:n,remove:t,patchProp:a,createElement:l,createText:r,createComment:h,setText:p,setElementText:o,parentNode:d,nextSibling:c,setScopeId:k=Vs,insertStaticContent:f}=i,u=(A,m,b,P=null,x=null,S=null,U=void 0,N=null,M=!!m.dynamicChildren)=>{if(A===m)return;A&&!_e(A,m)&&(P=w(A),Mi(A,x,S,!0),A=null),m.patchFlag===-2&&(M=!1,m.dynamicChildren=null);const{type:O,ref:Z,shapeFlag:j}=m;switch(O){case de:y(A,m,b,P);break;case Zi:v(A,m,b,P);break;case Qe:A==null&&D(m,b,P,U);break;case Ki:T(A,m,b,P,x,S,U,N,M);break;default:j&1?L(A,m,b,P,x,S,U,N,M):j&6?J(A,m,b,P,x,S,U,N,M):(j&64||j&128)&&O.process(A,m,b,P,x,S,U,N,M,K)}Z!=null&&x&&$n(Z,A&&A.ref,S,m||A,!m)},y=(A,m,b,P)=>{if(A==null)n(m.el=r(m.children),b,P);else{const x=m.el=A.el;m.children!==A.children&&p(x,m.children)}},v=(A,m,b,P)=>{A==null?n(m.el=h(m.children||""),b,P):m.el=A.el},D=(A,m,b,P)=>{[A.el,A.anchor]=f(A.children,m,b,P,A.el,A.anchor)},g=({el:A,anchor:m},b,P)=>{let x;for(;A&&A!==m;)x=c(A),n(A,b,P),A=x;n(m,b,P)},C=({el:A,anchor:m})=>{let b;for(;A&&A!==m;)b=c(A),t(A),A=b;t(m)},L=(A,m,b,P,x,S,U,N,M)=>{m.type==="svg"?U="svg":m.type==="math"&&(U="mathml"),A==null?W(m,b,P,x,S,U,N,M):$(A,m,x,S,U,N,M)},W=(A,m,b,P,x,S,U,N)=>{let M,O;const{props:Z,shapeFlag:j,transition:Q,dirs:si}=A;if(M=A.el=l(A.type,S,Z&&Z.is,Z),j&8?o(M,A.children):j&16&&X(A.children,M,null,P,x,ka(A,S),U,N),si&&Rs(A,null,P,"created"),V(M,A,A.scopeId,U,P),Z){for(const Fi in Z)Fi!=="value"&&!qe(Fi)&&a(M,Fi,null,Z[Fi],S,P);"value"in Z&&a(M,"value",null,Z.value,S),(O=Z.onVnodeBeforeMount)&&ks(O,P,A)}Ze(M,"__vnode",A,!0),Ze(M,"__vueParentComponent",P,!0),si&&Rs(A,null,P,"beforeMount");const hi=Xh(x,Q);hi&&Q.beforeEnter(M),n(M,m,b),((O=Z&&Z.onVnodeMounted)||hi||si)&&rs(()=>{O&&ks(O,P,A),hi&&Q.enter(M),si&&Rs(A,null,P,"mounted")},x)},V=(A,m,b,P,x)=>{if(b&&k(A,b),P)for(let S=0;S<P.length;S++)k(A,P[S]);if(x){let S=x.subTree;if(m===S||sp(S.type)&&(S.ssContent===m||S.ssFallback===m)){const U=x.vnode;V(A,U,U.scopeId,U.slotScopeIds,x.parent)}}},X=(A,m,b,P,x,S,U,N,M=0)=>{for(let O=M;O<A.length;O++){const Z=A[O]=N?Ee(A[O]):us(A[O]);u(null,Z,m,b,P,x,S,U,N)}},$=(A,m,b,P,x,S,U)=>{const N=m.el=A.el;N.__vnode=m;let{patchFlag:M,dynamicChildren:O,dirs:Z}=m;M|=A.patchFlag&16;const j=A.props||Di,Q=m.props||Di;let si;if(b&&ye(b,!1),(si=Q.onVnodeBeforeUpdate)&&ks(si,b,m,A),Z&&Rs(m,A,b,"beforeUpdate"),b&&ye(b,!0),(j.innerHTML&&Q.innerHTML==null||j.textContent&&Q.textContent==null)&&o(N,""),O?_(A.dynamicChildren,O,N,b,P,ka(m,x),S):U||Y(A,m,N,null,b,P,ka(m,x),S,!1),M>0){if(M&16)I(N,j,Q,b,x);else if(M&2&&j.class!==Q.class&&a(N,"class",null,Q.class,x),M&4&&a(N,"style",j.style,Q.style,x),M&8){const hi=m.dynamicProps;for(let Fi=0;Fi<hi.length;Fi++){const fi=hi[Fi],ts=j[fi],Ni=Q[fi];(Ni!==ts||fi==="value")&&a(N,fi,ts,Ni,x,b)}}M&1&&A.children!==m.children&&o(N,m.children)}else!U&&O==null&&I(N,j,Q,b,x);((si=Q.onVnodeUpdated)||Z)&&rs(()=>{si&&ks(si,b,m,A),Z&&Rs(m,A,b,"updated")},P)},_=(A,m,b,P,x,S,U)=>{for(let N=0;N<m.length;N++){const M=A[N],O=m[N],Z=M.el&&(M.type===Ki||!_e(M,O)||M.shapeFlag&70)?d(M.el):b;u(M,O,Z,null,P,x,S,U,!0)}},I=(A,m,b,P,x)=>{if(m!==b){if(m!==Di)for(const S in m)!qe(S)&&!(S in b)&&a(A,S,m[S],null,x,P);for(const S in b){if(qe(S))continue;const U=b[S],N=m[S];U!==N&&S!=="value"&&a(A,S,N,U,x,P)}"value"in b&&a(A,"value",m.value,b.value,x)}},T=(A,m,b,P,x,S,U,N,M)=>{const O=m.el=A?A.el:r(""),Z=m.anchor=A?A.anchor:r("");let{patchFlag:j,dynamicChildren:Q,slotScopeIds:si}=m;si&&(N=N?N.concat(si):si),A==null?(n(O,b,P),n(Z,b,P),X(m.children||[],b,Z,x,S,U,N,M)):j>0&&j&64&&Q&&A.dynamicChildren?(_(A.dynamicChildren,Q,b,x,S,U,N),(m.key!=null||x&&m===x.subTree)&&Yh(A,m,!0)):Y(A,m,b,Z,x,S,U,N,M)},J=(A,m,b,P,x,S,U,N,M)=>{m.slotScopeIds=N,A==null?m.shapeFlag&512?x.ctx.activate(m,b,P,U,M):Ei(m,b,P,x,S,U,M):gi(A,m,M)},Ei=(A,m,b,P,x,S,U)=>{const N=A.component=t9(A,P,x);if(Qn(A)&&(N.ctx.renderer=K),a9(N,!1,U),N.asyncDep){if(x&&x.registerDep(N,q,U),!A.el){const M=N.subTree=Oi(Zi);v(null,M,m,b)}}else q(N,A,m,b,x,S,U)},gi=(A,m,b)=>{const P=m.component=A.component;if(Y2(A,m,b))if(P.asyncDep&&!P.asyncResolved){ii(P,m,b);return}else P.next=m,P.update();else m.el=A.el,P.vnode=m},q=(A,m,b,P,x,S,U)=>{const N=()=>{if(A.isMounted){let{next:j,bu:Q,u:si,parent:hi,vnode:Fi}=A;{const as=Qh(A);if(as){j&&(j.el=Fi.el,ii(A,j,U)),as.asyncDep.then(()=>{A.isUnmounted||N()});return}}let fi=j,ts;ye(A,!1),j?(j.el=Fi.el,ii(A,j,U)):j=Fi,Q&&ra(Q),(ts=j.props&&j.props.onVnodeBeforeUpdate)&&ks(ts,hi,j,Fi),ye(A,!0);const Ni=Aa(A),Cs=A.subTree;A.subTree=Ni,u(Cs,Ni,d(Cs.el),w(Cs),A,x,S),j.el=Ni.el,fi===null&&ip(A,Ni.el),si&&rs(si,x),(ts=j.props&&j.props.onVnodeUpdated)&&rs(()=>ks(ts,hi,j,Fi),x),Fh(A)}else{let j;const{el:Q,props:si}=m,{bm:hi,m:Fi,parent:fi,root:ts,type:Ni}=A,Cs=Xe(m);if(ye(A,!1),hi&&ra(hi),!Cs&&(j=si&&si.onVnodeBeforeMount)&&ks(j,fi,m),ye(A,!0),Q&&vi){const as=()=>{A.subTree=Aa(A),vi(Q,A.subTree,A,x,null)};Cs&&Ni.__asyncHydrate?Ni.__asyncHydrate(Q,A,as):as()}else{ts.ce&&ts.ce._injectChildStyle(Ni);const as=A.subTree=Aa(A);u(null,as,b,P,A,x,S),m.el=as.el}if(Fi&&rs(Fi,x),!Cs&&(j=si&&si.onVnodeMounted)){const as=m;rs(()=>ks(j,fi,as),x)}(m.shapeFlag&256||fi&&Xe(fi.vnode)&&fi.vnode.shapeFlag&256)&&A.a&&rs(A.a,x),A.isMounted=!0,Zd(A),m=b=P=null}};A.scope.on();const M=A.effect=new sh(N);A.scope.off();const O=A.update=M.run.bind(M),Z=A.job=M.runIfDirty.bind(M);Z.i=A,Z.id=A.uid,M.scheduler=()=>Il(Z),ye(A,!0),O()},ii=(A,m,b)=>{m.component=A;const P=A.vnode.props;A.vnode=m,A.next=null,I2(A,m.props,P,b),$2(A,m.children,b),Qs(),xr(A),Js()},Y=(A,m,b,P,x,S,U,N,M=!1)=>{const O=A&&A.children,Z=A?A.shapeFlag:0,j=m.children,{patchFlag:Q,shapeFlag:si}=m;if(Q>0){if(Q&128){Ji(O,j,b,P,x,S,U,N,M);return}else if(Q&256){ki(O,j,b,P,x,S,U,N,M);return}}si&8?(Z&16&&$i(O,x,S),j!==O&&o(b,j)):Z&16?si&16?Ji(O,j,b,P,x,S,U,N,M):$i(O,x,S,!0):(Z&8&&o(b,""),si&16&&X(j,b,P,x,S,U,N,M))},ki=(A,m,b,P,x,S,U,N,M)=>{A=A||We,m=m||We;const O=A.length,Z=m.length,j=Math.min(O,Z);let Q;for(Q=0;Q<j;Q++){const si=m[Q]=M?Ee(m[Q]):us(m[Q]);u(A[Q],si,b,null,x,S,U,N,M)}O>Z?$i(A,x,S,!0,!1,j):X(m,b,P,x,S,U,N,M,j)},Ji=(A,m,b,P,x,S,U,N,M)=>{let O=0;const Z=m.length;let j=A.length-1,Q=Z-1;for(;O<=j&&O<=Q;){const si=A[O],hi=m[O]=M?Ee(m[O]):us(m[O]);if(_e(si,hi))u(si,hi,b,null,x,S,U,N,M);else break;O++}for(;O<=j&&O<=Q;){const si=A[j],hi=m[Q]=M?Ee(m[Q]):us(m[Q]);if(_e(si,hi))u(si,hi,b,null,x,S,U,N,M);else break;j--,Q--}if(O>j){if(O<=Q){const si=Q+1,hi=si<Z?m[si].el:P;for(;O<=Q;)u(null,m[O]=M?Ee(m[O]):us(m[O]),b,hi,x,S,U,N,M),O++}}else if(O>Q)for(;O<=j;)Mi(A[O],x,S,!0),O++;else{const si=O,hi=O,Fi=new Map;for(O=hi;O<=Q;O++){const ls=m[O]=M?Ee(m[O]):us(m[O]);ls.key!=null&&Fi.set(ls.key,O)}let fi,ts=0;const Ni=Q-hi+1;let Cs=!1,as=0;const Bn=new Array(Ni);for(O=0;O<Ni;O++)Bn[O]=0;for(O=si;O<=j;O++){const ls=A[O];if(ts>=Ni){Mi(ls,x,S,!0);continue}let Ss;if(ls.key!=null)Ss=Fi.get(ls.key);else for(fi=hi;fi<=Q;fi++)if(Bn[fi-hi]===0&&_e(ls,m[fi])){Ss=fi;break}Ss===void 0?Mi(ls,x,S,!0):(Bn[Ss-hi]=O+1,Ss>=as?as=Ss:Cs=!0,u(ls,m[Ss],b,null,x,S,U,N,M),ts++)}const yr=Cs?U2(Bn):We;for(fi=yr.length-1,O=Ni-1;O>=0;O--){const ls=hi+O,Ss=m[ls],Fr=ls+1<Z?m[ls+1].el:P;Bn[O]===0?u(null,Ss,b,Fr,x,S,U,N,M):Cs&&(fi<0||O!==yr[fi]?cs(Ss,b,Fr,2):fi--)}}},cs=(A,m,b,P,x=null)=>{const{el:S,type:U,transition:N,children:M,shapeFlag:O}=A;if(O&6){cs(A.component.subTree,m,b,P);return}if(O&128){A.suspense.move(m,b,P);return}if(O&64){U.move(A,m,b,K);return}if(U===Ki){n(S,m,b);for(let j=0;j<M.length;j++)cs(M[j],m,b,P);n(A.anchor,m,b);return}if(U===Qe){g(A,m,b);return}if(P!==2&&O&1&&N)if(P===0)N.beforeEnter(S),n(S,m,b),rs(()=>N.enter(S),x);else{const{leave:j,delayLeave:Q,afterLeave:si}=N,hi=()=>n(S,m,b),Fi=()=>{j(S,()=>{hi(),si&&si()})};Q?Q(S,hi,Fi):Fi()}else n(S,m,b)},Mi=(A,m,b,P=!1,x=!1)=>{const{type:S,props:U,ref:N,children:M,dynamicChildren:O,shapeFlag:Z,patchFlag:j,dirs:Q,cacheIndex:si}=A;if(j===-2&&(x=!1),N!=null&&$n(N,null,b,A,!0),si!=null&&(m.renderCache[si]=void 0),Z&256){m.ctx.deactivate(A);return}const hi=Z&1&&Q,Fi=!Xe(A);let fi;if(Fi&&(fi=U&&U.onVnodeBeforeUnmount)&&ks(fi,m,A),Z&6)Ls(A.component,b,P);else{if(Z&128){A.suspense.unmount(b,P);return}hi&&Rs(A,null,m,"beforeUnmount"),Z&64?A.type.remove(A,m,b,K,P):O&&!O.hasOnce&&(S!==Ki||j>0&&j&64)?$i(O,m,b,!1,!0):(S===Ki&&j&384||!x&&Z&16)&&$i(M,m,b),P&&ns(A)}(Fi&&(fi=U&&U.onVnodeUnmounted)||hi)&&rs(()=>{fi&&ks(fi,m,A),hi&&Rs(A,null,m,"unmounted")},b)},ns=A=>{const{type:m,el:b,anchor:P,transition:x}=A;if(m===Ki){Hs(b,P);return}if(m===Qe){C(A);return}const S=()=>{t(b),x&&!x.persisted&&x.afterLeave&&x.afterLeave()};if(A.shapeFlag&1&&x&&!x.persisted){const{leave:U,delayLeave:N}=x,M=()=>U(b,S);N?N(A.el,S,M):M()}else S()},Hs=(A,m)=>{let b;for(;A!==m;)b=c(A),t(A),A=b;t(m)},Ls=(A,m,b)=>{const{bum:P,scope:x,job:S,subTree:U,um:N,m:M,a:O}=A;Hr(M),Hr(O),P&&ra(P),x.stop(),S&&(S.flags|=8,Mi(U,A,m,b)),N&&rs(N,m),rs(()=>{A.isUnmounted=!0},m),m&&m.pendingBranch&&!m.isUnmounted&&A.asyncDep&&!A.asyncResolved&&A.suspenseId===m.pendingId&&(m.deps--,m.deps===0&&m.resolve()),s2(A)},$i=(A,m,b,P=!1,x=!1,S=0)=>{for(let U=S;U<A.length;U++)Mi(A[U],m,b,P,x)},w=A=>{if(A.shapeFlag&6)return w(A.component.subTree);if(A.shapeFlag&128)return A.suspense.next();const m=c(A.anchor||A.el),b=m&&m[t2];return b?c(b):m};let z=!1;const H=(A,m,b)=>{A==null?m._vnode&&Mi(m._vnode,null,null,!0):u(m._vnode||null,A,m,null,null,null,b),m._vnode=A,z||(z=!0,xr(),Lt(),z=!1)},K={p:u,um:Mi,m:cs,r:ns,mt:Ei,mc:X,pc:Y,pbc:_,n:w,o:i};let oi,vi;return s&&([oi,vi]=s(K)),{render:H,hydrate:oi,createApp:S2(H,oi)}}function ka({type:i,props:s},e){return e==="svg"&&i==="foreignObject"||e==="mathml"&&i==="annotation-xml"&&s&&s.encoding&&s.encoding.includes("html")?void 0:e}function ye({effect:i,job:s},e){e?(i.flags|=32,s.flags|=4):(i.flags&=-33,s.flags&=-5)}function Xh(i,s){return(!i||i&&!i.pendingBranch)&&s&&!s.persisted}function Yh(i,s,e=!1){const n=i.children,t=s.children;if(ni(n)&&ni(t))for(let a=0;a<n.length;a++){const l=n[a];let r=t[a];r.shapeFlag&1&&!r.dynamicChildren&&((r.patchFlag<=0||r.patchFlag===32)&&(r=t[a]=Ee(t[a]),r.el=l.el),!e&&r.patchFlag!==-2&&Yh(l,r)),r.type===de&&(r.el=l.el)}}function U2(i){const s=i.slice(),e=[0];let n,t,a,l,r;const h=i.length;for(n=0;n<h;n++){const p=i[n];if(p!==0){if(t=e[e.length-1],i[t]<p){s[n]=t,e.push(n);continue}for(a=0,l=e.length-1;a<l;)r=a+l>>1,i[e[r]]<p?a=r+1:l=r;p<i[e[a]]&&(a>0&&(s[n]=e[a-1]),e[a]=n)}}for(a=e.length,l=e[a-1];a-- >0;)e[a]=l,l=s[l];return e}function Qh(i){const s=i.subTree.component;if(s)return s.asyncDep&&!s.asyncResolved?s:Qh(s)}function Hr(i){if(i)for(let s=0;s<i.length;s++)i[s].flags|=8}const z2=Symbol.for("v-scx"),j2=()=>ui(z2);function Nl(i,s){return Hl(i,null,s)}function ti(i,s,e){return Hl(i,s,e)}function Hl(i,s,e=Di){const{immediate:n,deep:t,flush:a,once:l}=e,r=Ri({},e),h=s&&n||!s&&a!=="post";let p;if(sn){if(a==="sync"){const k=j2();p=k.__watcherHandles||(k.__watcherHandles=[])}else if(!h){const k=()=>{};return k.stop=Vs,k.resume=Vs,k.pause=Vs,k}}const o=Vi;r.call=(k,f,u)=>xs(k,o,f,u);let d=!1;a==="post"?r.scheduler=k=>{rs(k,o&&o.suspense)}:a!=="sync"&&(d=!0,r.scheduler=(k,f)=>{f?k():Il(k)}),r.augmentJob=k=>{s&&(k.flags|=4),d&&(k.flags|=2,o&&(k.id=o.uid,k.i=o))};const c=zd(i,s,r);return sn&&(p?p.push(c):h&&c()),c}function G2(i,s,e){const n=this.proxy,t=xi(i)?i.includes(".")?Jh(n,i):()=>n[i]:i.bind(n,n);let a;ei(s)?a=s:(a=s.handler,e=s);const l=Jn(this),r=Hl(t,a.bind(n),e);return l(),r}function Jh(i,s){const e=s.split(".");return()=>{let n=i;for(let t=0;t<e.length&&n;t++)n=n[e[t]];return n}}const W2=(i,s)=>s==="modelValue"||s==="model-value"?i.modelModifiers:i[`${s}Modifiers`]||i[`${es(s)}Modifiers`]||i[`${Ae(s)}Modifiers`];function q2(i,s,...e){if(i.isUnmounted)return;const n=i.vnode.props||Di;let t=e;const a=s.startsWith("update:"),l=a&&W2(n,s.slice(7));l&&(l.trim&&(t=e.map(o=>xi(o)?o.trim():o)),l.number&&(t=e.map(id))),e2(i,s,t);let r,h=n[r=la(s)]||n[r=la(es(s))];!h&&a&&(h=n[r=la(Ae(s))]),h&&xs(h,i,6,t);const p=n[r+"Once"];if(p){if(!i.emitted)i.emitted={};else if(i.emitted[r])return;i.emitted[r]=!0,xs(p,i,6,t)}}function Zh(i,s,e=!1){const n=s.emitsCache,t=n.get(i);if(t!==void 0)return t;const a=i.emits;let l={},r=!1;if(!ei(i)){const h=p=>{const o=Zh(p,s,!0);o&&(r=!0,Ri(l,o))};!e&&s.mixins.length&&s.mixins.forEach(h),i.extends&&h(i.extends),i.mixins&&i.mixins.forEach(h)}return!a&&!r?(Ti(i)&&n.set(i,null),null):(ni(a)?a.forEach(h=>l[h]=null):Ri(l,a),Ti(i)&&n.set(i,l),l)}function Kt(i,s){return!i||!qn(s)?!1:(s=s.slice(2).replace(/Once$/,""),mi(i,s[0].toLowerCase()+s.slice(1))||mi(i,Ae(s))||mi(i,s))}function Aa(i){const{type:s,vnode:e,proxy:n,withProxy:t,propsOptions:[a],slots:l,attrs:r,emit:h,render:p,renderCache:o,props:d,data:c,setupState:k,ctx:f,inheritAttrs:u}=i,y=St(i);let v,D;try{if(e.shapeFlag&4){const C=t||n,L=C;v=us(p.call(L,C,o,d,k,c,f)),D=r}else{const C=s;v=us(C.length>1?C(d,{attrs:r,slots:l,emit:h}):C(d,null)),D=s.props?r:K2(r)}}catch(C){Pn.length=0,Yn(C,i,1),v=Oi(Zi)}let g=v;if(D&&u!==!1){const C=Object.keys(D),{shapeFlag:L}=g;C.length&&L&7&&(a&&C.some(yl)&&(D=X2(D,a)),g=Be(g,D,!1,!0))}return e.dirs&&(g=Be(g,null,!1,!0),g.dirs=g.dirs?g.dirs.concat(e.dirs):e.dirs),e.transition&&Le(g,e.transition),v=g,St(y),v}const K2=i=>{let s;for(const e in i)(e==="class"||e==="style"||qn(e))&&((s||(s={}))[e]=i[e]);return s},X2=(i,s)=>{const e={};for(const n in i)(!yl(n)||!(n.slice(9)in s))&&(e[n]=i[n]);return e};function Y2(i,s,e){const{props:n,children:t,component:a}=i,{props:l,children:r,patchFlag:h}=s,p=a.emitsOptions;if(s.dirs||s.transition)return!0;if(e&&h>=0){if(h&1024)return!0;if(h&16)return n?Ur(n,l,p):!!l;if(h&8){const o=s.dynamicProps;for(let d=0;d<o.length;d++){const c=o[d];if(l[c]!==n[c]&&!Kt(p,c))return!0}}}else return(t||r)&&(!r||!r.$stable)?!0:n===l?!1:n?l?Ur(n,l,p):!0:!!l;return!1}function Ur(i,s,e){const n=Object.keys(s);if(n.length!==Object.keys(i).length)return!0;for(let t=0;t<n.length;t++){const a=n[t];if(s[a]!==i[a]&&!Kt(e,a))return!0}return!1}function ip({vnode:i,parent:s},e){for(;s;){const n=s.subTree;if(n.suspense&&n.suspense.activeBranch===i&&(n.el=i.el),n===i)(i=s.vnode).el=e,s=s.parent;else break}}const sp=i=>i.__isSuspense;function ep(i,s){s&&s.pendingBranch?ni(i)?s.effects.push(...i):s.effects.push(i):Yd(i)}const Ki=Symbol.for("v-fgt"),de=Symbol.for("v-txt"),Zi=Symbol.for("v-cmt"),Qe=Symbol.for("v-stc"),Pn=[];let hs=null;function j0(i=!1){Pn.push(hs=i?null:[])}function Q2(){Pn.pop(),hs=Pn[Pn.length-1]||null}let Nn=1;function zr(i,s=!1){Nn+=i,i<0&&hs&&s&&(hs.hasOnce=!0)}function J2(i){return i.dynamicChildren=Nn>0?hs||We:null,Q2(),Nn>0&&hs&&hs.push(i),i}function G0(i,s,e,n,t,a){return J2(tp(i,s,e,n,t,a,!0))}function It(i){return i?i.__v_isVNode===!0:!1}function _e(i,s){return i.type===s.type&&i.key===s.key}const np=({key:i})=>i??null,bt=({ref:i,ref_key:s,ref_for:e})=>(typeof i=="number"&&(i=""+i),i!=null?xi(i)||Li(i)||ei(i)?{i:gs,r:i,k:s,f:!!e}:i:null);function tp(i,s=null,e=null,n=0,t=null,a=i===Ki?0:1,l=!1,r=!1){const h={__v_isVNode:!0,__v_skip:!0,type:i,props:s,key:s&&np(s),ref:s&&bt(s),scopeId:Ch,slotScopeIds:null,children:e,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetStart:null,targetAnchor:null,staticCount:0,shapeFlag:a,patchFlag:n,dynamicProps:t,dynamicChildren:null,appContext:null,ctx:gs};return r?(Ul(h,e),a&128&&i.normalize(h)):e&&(h.shapeFlag|=xi(e)?8:16),Nn>0&&!l&&hs&&(h.patchFlag>0||a&6)&&h.patchFlag!==32&&hs.push(h),h}const Oi=Z2;function Z2(i,s=null,e=null,n=0,t=null,a=!1){if((!i||i===C2)&&(i=Zi),It(i)){const r=Be(i,s,!0);return e&&Ul(r,e),Nn>0&&!a&&hs&&(r.shapeFlag&6?hs[hs.indexOf(i)]=r:hs.push(r)),r.patchFlag=-2,r}if(o9(i)&&(i=i.__vccOpts),s){s=i9(s);let{class:r,style:h}=s;r&&!xi(r)&&(s.class=jt(r)),Ti(h)&&(Sl(h)&&!ni(h)&&(h=Ri({},h)),s.style=zt(h))}const l=xi(i)?1:sp(i)?128:Dh(i)?64:Ti(i)?4:ei(i)?2:0;return tp(i,s,e,n,t,l,a,!0)}function i9(i){return i?Sl(i)||Uh(i)?Ri({},i):i:null}function Be(i,s,e=!1,n=!1){const{props:t,ref:a,patchFlag:l,children:r,transition:h}=i,p=s?s9(t||{},s):t,o={__v_isVNode:!0,__v_skip:!0,type:i.type,props:p,key:p&&np(p),ref:s&&s.ref?e&&a?ni(a)?a.concat(bt(s)):[a,bt(s)]:bt(s):a,scopeId:i.scopeId,slotScopeIds:i.slotScopeIds,children:r,target:i.target,targetStart:i.targetStart,targetAnchor:i.targetAnchor,staticCount:i.staticCount,shapeFlag:i.shapeFlag,patchFlag:s&&i.type!==Ki?l===-1?16:l|16:l,dynamicProps:i.dynamicProps,dynamicChildren:i.dynamicChildren,appContext:i.appContext,dirs:i.dirs,transition:h,component:i.component,suspense:i.suspense,ssContent:i.ssContent&&Be(i.ssContent),ssFallback:i.ssFallback&&Be(i.ssFallback),el:i.el,anchor:i.anchor,ctx:i.ctx,ce:i.ce};return h&&n&&Le(o,h.clone(o)),o}function ap(i=" ",s=0){return Oi(de,null,i,s)}function W0(i,s){const e=Oi(Qe,null,i);return e.staticCount=s,e}function us(i){return i==null||typeof i=="boolean"?Oi(Zi):ni(i)?Oi(Ki,null,i.slice()):It(i)?Ee(i):Oi(de,null,String(i))}function Ee(i){return i.el===null&&i.patchFlag!==-1||i.memo?i:Be(i)}function Ul(i,s){let e=0;const{shapeFlag:n}=i;if(s==null)s=null;else if(ni(s))e=16;else if(typeof s=="object")if(n&65){const t=s.default;t&&(t._c&&(t._d=!1),Ul(i,t()),t._c&&(t._d=!0));return}else{e=32;const t=s._;!t&&!Uh(s)?s._ctx=gs:t===3&&gs&&(gs.slots._===1?s._=1:(s._=2,i.patchFlag|=1024))}else ei(s)?(s={default:s,_ctx:gs},e=32):(s=String(s),n&64?(e=16,s=[ap(s)]):e=8);i.children=s,i.shapeFlag|=e}function s9(...i){const s={};for(let e=0;e<i.length;e++){const n=i[e];for(const t in n)if(t==="class")s.class!==n.class&&(s.class=jt([s.class,n.class]));else if(t==="style")s.style=zt([s.style,n.style]);else if(qn(t)){const a=s[t],l=n[t];l&&a!==l&&!(ni(a)&&a.includes(l))&&(s[t]=a?[].concat(a,l):l)}else t!==""&&(s[t]=n[t])}return s}function ks(i,s,e,n=null){xs(i,s,7,[e,n])}const e9=$h();let n9=0;function t9(i,s,e){const n=i.type,t=(s?s.appContext:i.appContext)||e9,a={uid:n9++,vnode:i,type:n,parent:s,appContext:t,root:null,next:null,subTree:null,effect:null,update:null,job:null,scope:new cd(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:s?s.provides:Object.create(t.provides),ids:s?s.ids:["",0,0],accessCache:null,renderCache:[],components:null,directives:null,propsOptions:jh(n,t),emitsOptions:Zh(n,t),emit:null,emitted:null,propsDefaults:Di,inheritAttrs:n.inheritAttrs,ctx:Di,data:Di,props:Di,attrs:Di,slots:Di,refs:Di,setupState:Di,setupContext:null,suspense:e,suspenseId:e?e.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return a.ctx={_:a},a.root=s?s.root:a,a.emit=q2.bind(null,a),i.ce&&i.ce(a),a}let Vi=null;const ge=()=>Vi||gs;let Rt,qa;{const i=Ut(),s=(e,n)=>{let t;return(t=i[e])||(t=i[e]=[]),t.push(n),a=>{t.length>1?t.forEach(l=>l(a)):t[0](a)}};Rt=s("__VUE_INSTANCE_SETTERS__",e=>Vi=e),qa=s("__VUE_SSR_SETTERS__",e=>sn=e)}const Jn=i=>{const s=Vi;return Rt(i),i.scope.on(),()=>{i.scope.off(),Rt(s)}},jr=()=>{Vi&&Vi.scope.off(),Rt(null)};function lp(i){return i.vnode.shapeFlag&4}let sn=!1;function a9(i,s=!1,e=!1){s&&qa(s);const{props:n,children:t}=i.vnode,a=lp(i);O2(i,n,a,s),V2(i,t,e);const l=a?l9(i,s):void 0;return s&&qa(!1),l}function l9(i,s){const e=i.type;i.accessCache=Object.create(null),i.proxy=new Proxy(i.ctx,b2);const{setup:n}=e;if(n){Qs();const t=i.setupContext=n.length>1?E9(i):null,a=Jn(i),l=En(n,i,0,[i.props,t]),r=JE(l);if(Js(),a(),(r||i.sp)&&!Xe(i)&&Vl(i),r){if(l.then(jr,jr),s)return l.then(h=>{Gr(i,h)}).catch(h=>{Yn(h,i,0)});i.asyncDep=l}else Gr(i,l)}else rp(i)}function Gr(i,s,e){ei(s)?i.type.__ssrInlineRender?i.ssrRender=s:i.render=s:Ti(s)&&(i.devtoolsRawSetupState=s,i.setupState=uh(s)),rp(i)}function rp(i,s,e){const n=i.type;i.render||(i.render=n.render||Vs);{const t=Jn(i);Qs();try{_2(i)}finally{Js(),t()}}}const r9={get(i,s){return Hi(i,"get",""),i[s]}};function E9(i){const s=e=>{i.exposed=e||{}};return{attrs:new Proxy(i.attrs,r9),slots:i.slots,emit:i.emit,expose:s}}function zl(i){return i.exposed?i.exposeProxy||(i.exposeProxy=new Proxy(uh(Sd(i.exposed)),{get(s,e){if(e in s)return s[e];if(e in Tn)return Tn[e](i)},has(s,e){return e in s||e in Tn}})):i.proxy}const h9=/(?:^|[-_])(\w)/g,p9=i=>i.replace(h9,s=>s.toUpperCase()).replace(/[-_]/g,"");function Ep(i,s=!0){return ei(i)?i.displayName||i.name:i.name||s&&i.__name}function hp(i,s,e=!1){let n=Ep(s);if(!n&&s.__file){const t=s.__file.match(/([^/\\]+)\.\w+$/);t&&(n=t[1])}if(!n&&i&&i.parent){const t=a=>{for(const l in a)if(a[l]===s)return l};n=t(i.components||i.parent.type.components)||t(i.appContext.components)}return n?p9(n):e?"App":"Anonymous"}function o9(i){return ei(i)&&"__vccOpts"in i}const F=(i,s)=>Hd(i,s,sn);function E(i,s,e){const n=arguments.length;return n===2?Ti(s)&&!ni(s)?It(s)?Oi(i,null,[s]):Oi(i,s):Oi(i,null,s):(n>3?e=Array.prototype.slice.call(arguments,2):n===3&&It(e)&&(e=[e]),Oi(i,s,e))}const Wr="3.5.13";/**
* @vue/runtime-dom v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let Ka;const qr=typeof window<"u"&&window.trustedTypes;if(qr)try{Ka=qr.createPolicy("vue",{createHTML:i=>i})}catch{}const pp=Ka?i=>Ka.createHTML(i):i=>i,d9="http://www.w3.org/2000/svg",c9="http://www.w3.org/1998/Math/MathML",Gs=typeof document<"u"?document:null,Kr=Gs&&Gs.createElement("template"),B9={insert:(i,s,e)=>{s.insertBefore(i,e||null)},remove:i=>{const s=i.parentNode;s&&s.removeChild(i)},createElement:(i,s,e,n)=>{const t=s==="svg"?Gs.createElementNS(d9,i):s==="mathml"?Gs.createElementNS(c9,i):e?Gs.createElement(i,{is:e}):Gs.createElement(i);return i==="select"&&n&&n.multiple!=null&&t.setAttribute("multiple",n.multiple),t},createText:i=>Gs.createTextNode(i),createComment:i=>Gs.createComment(i),setText:(i,s)=>{i.nodeValue=s},setElementText:(i,s)=>{i.textContent=s},parentNode:i=>i.parentNode,nextSibling:i=>i.nextSibling,querySelector:i=>Gs.querySelector(i),setScopeId(i,s){i.setAttribute(s,"")},insertStaticContent(i,s,e,n,t,a){const l=e?e.previousSibling:s.lastChild;if(t&&(t===a||t.nextSibling))for(;s.insertBefore(t.cloneNode(!0),e),!(t===a||!(t=t.nextSibling)););else{Kr.innerHTML=pp(n==="svg"?`<svg>${i}</svg>`:n==="mathml"?`<math>${i}</math>`:i);const r=Kr.content;if(n==="svg"||n==="mathml"){const h=r.firstChild;for(;h.firstChild;)r.appendChild(h.firstChild);r.removeChild(h)}s.insertBefore(r,e)}return[l?l.nextSibling:s.firstChild,e?e.previousSibling:s.lastChild]}},se="transition",An="animation",en=Symbol("_vtc"),op={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},dp=Ri({},_h,op),k9=i=>(i.displayName="Transition",i.props=dp,i),Se=k9((i,{slots:s})=>E(l2,cp(i),s)),Fe=(i,s=[])=>{ni(i)?i.forEach(e=>e(...s)):i&&i(...s)},Xr=i=>i?ni(i)?i.some(s=>s.length>1):i.length>1:!1;function cp(i){const s={};for(const T in i)T in op||(s[T]=i[T]);if(i.css===!1)return s;const{name:e="v",type:n,duration:t,enterFromClass:a=`${e}-enter-from`,enterActiveClass:l=`${e}-enter-active`,enterToClass:r=`${e}-enter-to`,appearFromClass:h=a,appearActiveClass:p=l,appearToClass:o=r,leaveFromClass:d=`${e}-leave-from`,leaveActiveClass:c=`${e}-leave-active`,leaveToClass:k=`${e}-leave-to`}=i,f=A9(t),u=f&&f[0],y=f&&f[1],{onBeforeEnter:v,onEnter:D,onEnterCancelled:g,onLeave:C,onLeaveCancelled:L,onBeforeAppear:W=v,onAppear:V=D,onAppearCancelled:X=g}=s,$=(T,J,Ei,gi)=>{T._enterCancelled=gi,ae(T,J?o:r),ae(T,J?p:l),Ei&&Ei()},_=(T,J)=>{T._isLeaving=!1,ae(T,d),ae(T,k),ae(T,c),J&&J()},I=T=>(J,Ei)=>{const gi=T?V:D,q=()=>$(J,T,Ei);Fe(gi,[J,q]),Yr(()=>{ae(J,T?h:a),Os(J,T?o:r),Xr(gi)||Qr(J,n,u,q)})};return Ri(s,{onBeforeEnter(T){Fe(v,[T]),Os(T,a),Os(T,l)},onBeforeAppear(T){Fe(W,[T]),Os(T,h),Os(T,p)},onEnter:I(!1),onAppear:I(!0),onLeave(T,J){T._isLeaving=!0;const Ei=()=>_(T,J);Os(T,d),T._enterCancelled?(Os(T,c),Xa()):(Xa(),Os(T,c)),Yr(()=>{T._isLeaving&&(ae(T,d),Os(T,k),Xr(C)||Qr(T,n,y,Ei))}),Fe(C,[T,Ei])},onEnterCancelled(T){$(T,!1,void 0,!0),Fe(g,[T])},onAppearCancelled(T){$(T,!0,void 0,!0),Fe(X,[T])},onLeaveCancelled(T){_(T),Fe(L,[T])}})}function A9(i){if(i==null)return null;if(Ti(i))return[ua(i.enter),ua(i.leave)];{const s=ua(i);return[s,s]}}function ua(i){return sd(i)}function Os(i,s){s.split(/\s+/).forEach(e=>e&&i.classList.add(e)),(i[en]||(i[en]=new Set)).add(s)}function ae(i,s){s.split(/\s+/).forEach(n=>n&&i.classList.remove(n));const e=i[en];e&&(e.delete(s),e.size||(i[en]=void 0))}function Yr(i){requestAnimationFrame(()=>{requestAnimationFrame(i)})}let u9=0;function Qr(i,s,e,n){const t=i._endId=++u9,a=()=>{t===i._endId&&n()};if(e!=null)return setTimeout(a,e);const{type:l,timeout:r,propCount:h}=Bp(i,s);if(!l)return n();const p=l+"end";let o=0;const d=()=>{i.removeEventListener(p,c),a()},c=k=>{k.target===i&&++o>=h&&d()};setTimeout(()=>{o<h&&d()},r+1),i.addEventListener(p,c)}function Bp(i,s){const e=window.getComputedStyle(i),n=f=>(e[f]||"").split(", "),t=n(`${se}Delay`),a=n(`${se}Duration`),l=Jr(t,a),r=n(`${An}Delay`),h=n(`${An}Duration`),p=Jr(r,h);let o=null,d=0,c=0;s===se?l>0&&(o=se,d=l,c=a.length):s===An?p>0&&(o=An,d=p,c=h.length):(d=Math.max(l,p),o=d>0?l>p?se:An:null,c=o?o===se?a.length:h.length:0);const k=o===se&&/\b(transform|all)(,|$)/.test(n(`${se}Property`).toString());return{type:o,timeout:d,propCount:c,hasTransform:k}}function Jr(i,s){for(;i.length<s.length;)i=i.concat(i);return Math.max(...s.map((e,n)=>Zr(e)+Zr(i[n])))}function Zr(i){return i==="auto"?0:Number(i.slice(0,-1).replace(",","."))*1e3}function Xa(){return document.body.offsetHeight}function g9(i,s,e){const n=i[en];n&&(s=(s?[s,...n]:[...n]).join(" ")),s==null?i.removeAttribute("class"):e?i.setAttribute("class",s):i.className=s}const iE=Symbol("_vod"),m9=Symbol("_vsh"),f9=Symbol(""),v9=/(^|;)\s*display\s*:/;function y9(i,s,e){const n=i.style,t=xi(e);let a=!1;if(e&&!t){if(s)if(xi(s))for(const l of s.split(";")){const r=l.slice(0,l.indexOf(":")).trim();e[r]==null&&_t(n,r,"")}else for(const l in s)e[l]==null&&_t(n,l,"");for(const l in e)l==="display"&&(a=!0),_t(n,l,e[l])}else if(t){if(s!==e){const l=n[f9];l&&(e+=";"+l),n.cssText=e,a=v9.test(e)}}else s&&i.removeAttribute("style");iE in i&&(i[iE]=a?n.display:"",i[m9]&&(n.display="none"))}const sE=/\s*!important$/;function _t(i,s,e){if(ni(e))e.forEach(n=>_t(i,s,n));else if(e==null&&(e=""),s.startsWith("--"))i.setProperty(s,e);else{const n=F9(i,s);sE.test(e)?i.setProperty(Ae(n),e.replace(sE,""),"important"):i[n]=e}}const eE=["Webkit","Moz","ms"],ga={};function F9(i,s){const e=ga[s];if(e)return e;let n=es(s);if(n!=="filter"&&n in i)return ga[s]=n;n=Kn(n);for(let t=0;t<eE.length;t++){const a=eE[t]+n;if(a in i)return ga[s]=a}return s}const nE="http://www.w3.org/1999/xlink";function tE(i,s,e,n,t,a=rd(s)){n&&s.startsWith("xlink:")?e==null?i.removeAttributeNS(nE,s.slice(6,s.length)):i.setAttributeNS(nE,s,e):e==null||a&&!Dl(e)?i.removeAttribute(s):i.setAttribute(s,a?"":rn(e)?String(e):e)}function aE(i,s,e,n,t){if(s==="innerHTML"||s==="textContent"){e!=null&&(i[s]=s==="innerHTML"?pp(e):e);return}const a=i.tagName;if(s==="value"&&a!=="PROGRESS"&&!a.includes("-")){const r=a==="OPTION"?i.getAttribute("value")||"":i.value,h=e==null?i.type==="checkbox"?"on":"":String(e);(r!==h||!("_value"in i))&&(i.value=h),e==null&&i.removeAttribute(s),i._value=e;return}let l=!1;if(e===""||e==null){const r=typeof i[s];r==="boolean"?e=Dl(e):e==null&&r==="string"?(e="",l=!0):r==="number"&&(e=0,l=!0)}try{i[s]=e}catch{}l&&i.removeAttribute(t||s)}function C9(i,s,e,n){i.addEventListener(s,e,n)}function D9(i,s,e,n){i.removeEventListener(s,e,n)}const lE=Symbol("_vei");function b9(i,s,e,n,t=null){const a=i[lE]||(i[lE]={}),l=a[s];if(n&&l)l.value=n;else{const[r,h]=_9(s);if(n){const p=a[s]=T9(n,t);C9(i,r,p,h)}else l&&(D9(i,r,l,h),a[s]=void 0)}}const rE=/(?:Once|Passive|Capture)$/;function _9(i){let s;if(rE.test(i)){s={};let n;for(;n=i.match(rE);)i=i.slice(0,i.length-n[0].length),s[n[0].toLowerCase()]=!0}return[i[2]===":"?i.slice(3):Ae(i.slice(2)),s]}let ma=0;const w9=Promise.resolve(),x9=()=>ma||(w9.then(()=>ma=0),ma=Date.now());function T9(i,s){const e=n=>{if(!n._vts)n._vts=Date.now();else if(n._vts<=e.attached)return;xs(P9(n,e.value),s,5,[n])};return e.value=i,e.attached=x9(),e}function P9(i,s){if(ni(s)){const e=i.stopImmediatePropagation;return i.stopImmediatePropagation=()=>{e.call(i),i._stopped=!0},s.map(n=>t=>!t._stopped&&n&&n(t))}else return s}const EE=i=>i.charCodeAt(0)===111&&i.charCodeAt(1)===110&&i.charCodeAt(2)>96&&i.charCodeAt(2)<123,L9=(i,s,e,n,t,a)=>{const l=t==="svg";s==="class"?g9(i,n,l):s==="style"?y9(i,e,n):qn(s)?yl(s)||b9(i,s,e,n,a):(s[0]==="."?(s=s.slice(1),!0):s[0]==="^"?(s=s.slice(1),!1):S9(i,s,n,l))?(aE(i,s,n),!i.tagName.includes("-")&&(s==="value"||s==="checked"||s==="selected")&&tE(i,s,n,l,a,s!=="value")):i._isVueCE&&(/[A-Z]/.test(s)||!xi(n))?aE(i,es(s),n,a,s):(s==="true-value"?i._trueValue=n:s==="false-value"&&(i._falseValue=n),tE(i,s,n,l))};function S9(i,s,e,n){if(n)return!!(s==="innerHTML"||s==="textContent"||s in i&&EE(s)&&ei(e));if(s==="spellcheck"||s==="draggable"||s==="translate"||s==="form"||s==="list"&&i.tagName==="INPUT"||s==="type"&&i.tagName==="TEXTAREA")return!1;if(s==="width"||s==="height"){const t=i.tagName;if(t==="IMG"||t==="VIDEO"||t==="CANVAS"||t==="SOURCE")return!1}return EE(s)&&xi(e)?!1:s in i}const kp=new WeakMap,Ap=new WeakMap,Mt=Symbol("_moveCb"),hE=Symbol("_enterCb"),O9=i=>(delete i.props.mode,i),I9=O9({name:"TransitionGroup",props:Ri({},dp,{tag:String,moveClass:String}),setup(i,{slots:s}){const e=ge(),n=bh();let t,a;return Ih(()=>{if(!t.length)return;const l=i.moveClass||`${i.name||"v"}-move`;if(!N9(t[0].el,e.vnode.el,l))return;t.forEach(M9),t.forEach(V9);const r=t.filter($9);Xa(),r.forEach(h=>{const p=h.el,o=p.style;Os(p,l),o.transform=o.webkitTransform=o.transitionDuration="";const d=p[Mt]=c=>{c&&c.target!==p||(!c||/transform$/.test(c.propertyName))&&(p.removeEventListener("transitionend",d),p[Mt]=null,ae(p,l))};p.addEventListener("transitionend",d)})}),()=>{const l=li(i),r=cp(l);let h=l.tag||Ki;if(t=[],a)for(let p=0;p<a.length;p++){const o=a[p];o.el&&o.el instanceof Element&&(t.push(o),Le(o,Vn(o,r,n,e)),kp.set(o,o.el.getBoundingClientRect()))}a=s.default?Ml(s.default()):[];for(let p=0;p<a.length;p++){const o=a[p];o.key!=null&&Le(o,Vn(o,r,n,e))}return Oi(h,null,a)}}}),R9=I9;function M9(i){const s=i.el;s[Mt]&&s[Mt](),s[hE]&&s[hE]()}function V9(i){Ap.set(i,i.el.getBoundingClientRect())}function $9(i){const s=kp.get(i),e=Ap.get(i),n=s.left-e.left,t=s.top-e.top;if(n||t){const a=i.el.style;return a.transform=a.webkitTransform=`translate(${n}px,${t}px)`,a.transitionDuration="0s",i}}function N9(i,s,e){const n=i.cloneNode(),t=i[en];t&&t.forEach(r=>{r.split(/\s+/).forEach(h=>h&&n.classList.remove(h))}),e.split(/\s+/).forEach(r=>r&&n.classList.add(r)),n.style.display="none";const a=s.nodeType===1?s:s.parentNode;a.appendChild(n);const{hasTransform:l}=Bp(n);return a.removeChild(n),l}const H9=Ri({patchProp:L9},B9);let fa,pE=!1;function U9(){return fa=pE?fa:N2(H9),pE=!0,fa}const z9=(...i)=>{const s=U9().createApp(...i),{mount:e}=s;return s.mount=n=>{const t=G9(n);if(t)return e(t,!0,j9(t))},s};function j9(i){if(i instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&i instanceof MathMLElement)return"mathml"}function G9(i){return xi(i)?document.querySelector(i):i}var Zn=i=>/^[a-z][a-z0-9+.-]*:/.test(i)||i.startsWith("//"),W9=/.md((\?|#).*)?$/,jl=(i,s="/")=>Zn(i)||i.startsWith("/")&&!i.startsWith(s)&&!W9.test(i),Ie=i=>/^(https?:)?\/\//.test(i),oE=i=>{if(!i||i.endsWith("/"))return i;let s=i.replace(/(^|\/)README.md$/i,"$1index.html");return s.endsWith(".md")?s=`${s.substring(0,s.length-3)}.html`:s.endsWith(".html")||(s=`${s}.html`),s.endsWith("/index.html")&&(s=s.substring(0,s.length-10)),s},q9="http://.",K9=(i,s)=>{if(!i.startsWith("/")&&s){const e=s.slice(0,s.lastIndexOf("/"));return oE(new URL(`${e}/${i}`,q9).pathname)}return oE(i)},X9=(i,s)=>{const e=Object.keys(i).sort((n,t)=>{const a=t.split("/").length-n.split("/").length;return a!==0?a:t.length-n.length});for(const n of e)if(s.startsWith(n))return n;return"/"},Y9=/(#|\?)/,up=i=>{const[s,...e]=i.split(Y9);return{pathname:s,hashAndQueries:e.join("")}},Q9=["link","meta","script","style","noscript","template"],J9=["title","base"],Z9=([i,s,e])=>J9.includes(i)?i:Q9.includes(i)?i==="meta"&&s.name?`${i}.${s.name}`:i==="template"&&s.id?`${i}.${s.id}`:JSON.stringify([i,Object.entries(s).map(([n,t])=>typeof t=="boolean"?t?[n,""]:null:[n,t]).filter(n=>n!=null).sort(([n],[t])=>n.localeCompare(t)),e]):null,ic=i=>{const s=new Set,e=[];return i.forEach(n=>{const t=Z9(n);t&&!s.has(t)&&(s.add(t),e.push(n))}),e},sc=i=>i.startsWith("/")?i:`/${i}`,gp=i=>i.endsWith("/")||i.endsWith(".html")?i:`${i}/`,Gl=i=>i.endsWith("/")?i.slice(0,-1):i,mp=i=>i.startsWith("/")?i.slice(1):i,ec=i=>typeof i=="function",it=i=>Object.prototype.toString.call(i)==="[object Object]",wi=i=>typeof i=="string";const nc=JSON.parse('{"/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/5.%E7%A0%94%E8%AF%BBC++%E8%AF%AD%E8%A8%80boost%E5%BA%93%E4%B8%AD%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0.html":"/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/5.%E7%A0%94%E8%AF%BBC__%E8%AF%AD%E8%A8%80boost%E5%BA%93%E4%B8%AD%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/cc++%E9%94%99%E8%AF%AF%E4%B9%8B%20Undefined%20reference%20%E6%9C%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E9%97%AE%E9%A2%98.html":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/cc__%E9%94%99%E8%AF%AF%E4%B9%8B%20Undefined%20reference%20%E6%9C%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E9%97%AE%E9%A2%98.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/1.%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/1.%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/10.%E5%AE%9A%E4%BD%8Dnew%E8%AF%A6%E8%A7%A3.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/10.%E5%AE%9A%E4%BD%8Dnew%E8%AF%A6%E8%A7%A3.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/11.%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/11.%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/12.typename%E7%94%A8%E6%B3%95.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/12.typename%E7%94%A8%E6%B3%95.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/13.POD%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/13.POD%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/14.extern%E7%9A%84%E8%AF%A6%E8%A7%A3.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/14.extern%E7%9A%84%E8%AF%A6%E8%A7%A3.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/15.explicit%E5%85%B3%E9%94%AE%E5%AD%97.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/15.explicit%E5%85%B3%E9%94%AE%E5%AD%97.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/16.emplace_back%E5%92%8Cpush_back%E5%8C%BA%E5%88%AB.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/16.emplace_back%E5%92%8Cpush_back%E5%8C%BA%E5%88%AB.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/17.cout%E4%BD%BF%E7%94%A8.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/17.cout%E4%BD%BF%E7%94%A8.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/18.c++11%E4%B9%8Benable_shared_from_this.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/18.c__11%E4%B9%8Benable_shared_from_this.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/19.c++%E8%BE%93%E5%85%A5.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/19.c__%E8%BE%93%E5%85%A5.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/2.%E5%B7%A6%E5%80%BC%E5%92%8C%E5%8F%B3%E5%80%BC.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/2.%E5%B7%A6%E5%80%BC%E5%92%8C%E5%8F%B3%E5%80%BC.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/3.const%E5%92%8Cconstexpr%E4%BD%BF%E7%94%A8.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/3.const%E5%92%8Cconstexpr%E4%BD%BF%E7%94%A8.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/4.STL%E5%AE%B9%E5%99%A8.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/4.STL%E5%AE%B9%E5%99%A8.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/5.%E9%97%AD%E5%8C%85%E5%92%8C%E4%BB%BF%E5%87%BD%E6%95%B0%E5%92%8C%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/5.%E9%97%AD%E5%8C%85%E5%92%8C%E4%BB%BF%E5%87%BD%E6%95%B0%E5%92%8C%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/6.%E5%AE%8F%E4%B8%8E%E5%86%85%E8%81%94.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/6.%E5%AE%8F%E4%B8%8E%E5%86%85%E8%81%94.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/7.%E8%99%9A%E7%BB%A7%E6%89%BF%E5%92%8C%E8%99%9A%E5%9F%BA%E7%B1%BB.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/7.%E8%99%9A%E7%BB%A7%E6%89%BF%E5%92%8C%E8%99%9A%E5%9F%BA%E7%B1%BB.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/8.%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/8.%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/9.c++11%E4%B8%ADfunction%E5%92%8Cbind%E7%9A%84%E4%BD%BF%E7%94%A8.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/9.c__11%E4%B8%ADfunction%E5%92%8Cbind%E7%9A%84%E4%BD%BF%E7%94%A8.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/1.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/1.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/10.%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/10.%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/11.%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E4%BC%98%E5%8C%96.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/11.%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E4%BC%98%E5%8C%96.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/12.%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E6%B3%A8%E6%84%8F%E7%82%B9.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/12.%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E6%B3%A8%E6%84%8F%E7%82%B9.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/13.%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/13.%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/14.%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/14.%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/15.%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%B5%AE%E7%82%B9%E6%95%B0.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/15.%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%B5%AE%E7%82%B9%E6%95%B0.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/16.%E6%97%B6%E9%97%B4%E7%BC%96%E7%A8%8B.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/16.%E6%97%B6%E9%97%B4%E7%BC%96%E7%A8%8B.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/17.%E5%BC%95%E7%94%A8%E5%92%8C%E6%8C%87%E9%92%88.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/17.%E5%BC%95%E7%94%A8%E5%92%8C%E6%8C%87%E9%92%88.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/18.%E5%BC%BA%E5%88%B6%E4%BF%AE%E6%94%B9const%20char%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/18.%E5%BC%BA%E5%88%B6%E4%BF%AE%E6%94%B9const%20char%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/19.%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%88%A0%E9%99%A4%E7%A9%BA%E6%A0%BC.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/19.%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%88%A0%E9%99%A4%E7%A9%BA%E6%A0%BC.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/2.%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/2.%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/20.%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%95%88%E7%8E%87%E5%AF%B9%E6%AF%94.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/20.%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%95%88%E7%8E%87%E5%AF%B9%E6%AF%94.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/3.%E5%85%B3%E4%BA%8E%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%97%AE%E9%A2%98.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/3.%E5%85%B3%E4%BA%8E%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%97%AE%E9%A2%98.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/4.%E5%BC%82%E5%B8%B8.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/4.%E5%BC%82%E5%B8%B8.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/5.%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%92%8Cstatic%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/5.%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%92%8Cstatic%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/6.STL%E5%AE%B9%E5%99%A8%E5%AD%98%E6%94%BE%E5%AF%B9%E8%B1%A1%E8%BF%98%E6%98%AF%E6%8C%87%E9%92%88.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/6.STL%E5%AE%B9%E5%99%A8%E5%AD%98%E6%94%BE%E5%AF%B9%E8%B1%A1%E8%BF%98%E6%98%AF%E6%8C%87%E9%92%88.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/7.scanf%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/7.scanf%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/8.c++%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/8.c__%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/9.string%E4%B8%8Ememset%E7%9A%84%E9%97%AE%E9%A2%98.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/9.string%E4%B8%8Ememset%E7%9A%84%E9%97%AE%E9%A2%98.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/1.%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/1.%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/2.%E5%85%B3%E4%BA%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/2.%E5%85%B3%E4%BA%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/3.%E5%85%B3%E4%BA%8E%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/3.%E5%85%B3%E4%BA%8E%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/4.%E6%95%B0%E6%8D%AE%E8%AF%AD%E6%84%8F.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/4.%E6%95%B0%E6%8D%AE%E8%AF%AD%E6%84%8F.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/1.coredump%E8%B0%83%E8%AF%95.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/1.coredump%E8%B0%83%E8%AF%95.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/2.gdb%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/2.gdb%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/3.gcc%E4%BD%BF%E7%94%A8.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/3.gcc%E4%BD%BF%E7%94%A8.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%86%85%E6%A0%B8/1.C++%E7%AC%A6%E5%8F%B7%E7%9A%84%E7%BC%96%E8%A7%A3%E7%A0%81.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%86%85%E6%A0%B8/1.C__%E7%AC%A6%E5%8F%B7%E7%9A%84%E7%BC%96%E8%A7%A3%E7%A0%81.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c++%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%86%85%E6%A0%B8/2.c++%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%86%85%E6%A0%B8/2.c__%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html"}'),tc=Object.fromEntries([["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/1.%E5%AF%B9%E4%BA%8E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E7%90%86%E8%A7%A3.html",{loader:()=>B(()=>import("./1.对于线程安全的理解.html-MBM0WJmM.js"),__vite__mapDeps([0,1])),meta:{e:`<h2>对于线程安全的理解</h2>
<p>对于21世纪的人类，已经不满足于单核并行的模式；提高效率，增效降本才是我们向往的。程序设计中选择什么样的数据结构体是解决某个问题的关键。如果多线程使用到的数据结构体要满足并发，则涉及到数据的线程安全问题。</p>
<ul>
<li>一种解决办法是选择单独的互斥元或外部锁来使数据结构体在某一时间段独占，且释放后没有残留。</li>
<li>另一种就是设计可以多线程同时访问的数据结构体。明显，后者在大部分场景是效率较高的。</li>
</ul>
<p>先浅谈一下为什么需要线程同步？线程安全保障的是什么安全？</p>
<h3>一、为什么需要线程同步</h3>`,r:{minutes:7.27,words:2182},t:"1. 对于线程安全的理解",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/2.%E5%AF%B9%E4%BA%8E%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%9A%84%E7%90%86%E8%A7%A3.html",{loader:()=>B(()=>import("./2.对于原子操作的理解.html-D_4oHzCc.js"),__vite__mapDeps([2,1])),meta:{e:`<h2>对于原子操作的理解</h2>
<h3>一、概念理解</h3>
<p><strong>原子操作</strong>：是一个不可分割的操作，从系统中的任何一个线程中，你都无法观察到完成了一半的这种操作，它要么做完了，要么没有做完。如果读取对象值的载入操作是原子的，并且所有对该对象的修改也都是原子的，那么这个载入操作所获得得要么是对象的初始值，要么是被修改者修改后的值。</p>
<p><strong>CAS</strong> 的意思：是 <code>Compare &amp; Set</code> 或者 <code>Compare &amp; Swap</code>。整个过程是原子的。现代几乎所有的CPU指令都支持 CAS 的原子操作，X86 下对应的是 CMPXCHG 汇编指令。</p>`,r:{minutes:6.62,words:1986},t:"2. 对于原子操作的理解",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/3.%E5%AF%B9%E4%BA%8E%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%90%86%E8%A7%A3.html",{loader:()=>B(()=>import("./3.对于内存模型的理解.html-CJERMBan.js"),__vite__mapDeps([3,1])),meta:{e:`<h2>对于内存模型的理解</h2>
<p>多核时代，程序员们为了系统运行效率做了很多事情。并发、多线程是其中绕不开的一个话题，有了多线程，随之而来的就是线程之间的同步，临界区的出现，然后就是锁的使用。程序员随之发现锁的开销较大，于是有了缩短临界区话题，尽可能的让临界区变得更小一点。但是总归临界区的缩小是有限度的，也就是有天花板的。因此我们开始探索原子操作，无锁化编程。于是为了功能正常的情况下，还要保证良好的效率，本文探讨原子操作的背后，内存的组织形式，编译器、cpu 的执行顺序，语言为 c++ 语言。</p>
<h3>一、内存模型的由来</h3>
<p>c++11 标准提出了内存模型，而在 c++11 之前，c++ 本身没有多线程的概念，c++ 使用者使用的是操作系统为我们提供的多线程、原子操作。那时的编译器和处理器认为系统中只有一个执行流。但在多线程之后，编码变难了，开发者编写的代码和最终运行的代码之间往往存在较大的差异，而运行的结果与开发者预期的一致，只是表现而已。</p>`,r:{minutes:14.93,words:4478},t:"3. 对于内存模型的理解",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/4.%E5%AF%B9%E4%BA%8E%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C%E5%92%8CABA%E9%97%AE%E9%A2%98%E7%9A%84%E7%90%86%E8%A7%A3.html",{loader:()=>B(()=>import("./4.对于内存屏障和ABA问题的理解.html-G4az1WEa.js"),__vite__mapDeps([4,1])),meta:{e:`<h2>内存屏障和 ABA 问题</h2>
<h3>一、内存屏障</h3>
<p>内存屏障也被称为内存栅栏，都是一个意思。内存屏障是全局操作，在之前内存顺序的松散模型中，编译器或者硬件通常可以自由的进行重新排序。屏障限制了这一自由。</p>
<p>从 C++11 开始，提供了下面两个机制：</p>
<ul>
<li><code>std::atomic_thread_fence</code>：在线程间进行数据访问的同步</li>
<li><code>std::atomic_signal_fence</code>：线程和信号处理器间的同步</li>
</ul>
<p>本节我们只关注 <code>std::atomic_thread_fence</code> 。演示一段代码</p>`,r:{minutes:3.8,words:1139},t:"4. 内存屏障和 ABA 问题",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/5.%E7%A0%94%E8%AF%BBC__%E8%AF%AD%E8%A8%80boost%E5%BA%93%E4%B8%AD%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0.html",{loader:()=>B(()=>import("./5.研读C__语言boost库中无锁队列的实现.html-Bx-o3zfu.js"),__vite__mapDeps([5,1])),meta:{e:`<h2>研读 C++ 语言 boost 库中无锁队列的实现</h2>
<p>lockfree.queue（c++ boost）实现。</p>
<p>C++语言本身没有提供线程安全的容器，而高质量的 boost 库中有实现线程安全队列，而且还是无锁的实现，以下代码基于 boost 库 1.78.0 版本。</p>
<h3>一、lockfree.queue 的实现</h3>
<p>我只保留了主要的代码逻辑，方便理解代码含义。</p>
<p>queue 采用链表为底层实现方式，包括头节点 head 和尾节点 tail。通过预先分配一个不存储数据的傀儡节点，可以少掉很多边界条件的判断，保证队列中总是至少会有一个节点，将在头尾的两个节点访问分开。对于一个空队列，head 和 tail 都指向这个傀儡节点，而不是 null。</p>`,r:{minutes:6.67,words:2e3},t:"5. 研读 C++ 语言 boost 库中无锁队列的实现",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/6.%E7%A0%94%E8%AF%BBGo%E8%AF%AD%E8%A8%80channel%E7%9A%84%E5%AE%9E%E7%8E%B0.html",{loader:()=>B(()=>import("./6.研读Go语言channel的实现.html-J712GZDs.js"),__vite__mapDeps([6,1])),meta:{e:`<h2>研读 Go 语言 channel 的实现</h2>
<p>首先明确go语言的设计模块：不要通过共享内存的方式进行通信，而是应该通过通信的方式共享内存。这样在我看来让 go 语言代码更加整洁。因此 go 语言中 Goroutine 之间会通过 Channel 传递数据。基于go 1.15 版本，Channel 的实现。</p>
<h3>一、 Channel 底层数据结构</h3>
<p>chan 的底层数据结构如下：</p>
<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> hchan</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	qcount</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">   uint</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">           // 元素个数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	dataqsiz</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> uint</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">           // 环形队列的长度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	buf</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">      unsafe</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">Pointer</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> // 指向环形队列的指针</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	elemsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> uint16</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">         // 环形队列中每个元素的大小</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	closed</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">   uint32</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">         // chan 是否被关闭</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	elemtype</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">_type</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">         // 环形队列中元素的类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	sendx</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    uint</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">           // 环形队列中发送操作处理到的位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	recvx</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    uint</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">           // 环形队列中接收操作处理到的位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	recvq</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">    waitq</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">          // 处于阻塞状态的接收 Goroutine 双向链表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	sendq</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">    waitq</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">  	    // 处于阻塞状态的发送 Goroutine 双向链表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	lock</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> mutex</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">	            // 互斥锁</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:7.12,words:2135},t:"6. 研读 Go 语言 channel 的实现",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/7.%E7%A0%94%E8%AF%BBJava%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0.html",{loader:()=>B(()=>import("./7.研读Java语言中线程安全队列的实现.html-BVXr72wP.js"),__vite__mapDeps([7,1])),meta:{e:`<h2>研读 Java 语言中线程安全队列的实现</h2>
<p>BlockingQueue 和 ConcurrentLinkedQueue （java）实现</p>
<p>Java提供的线程安全的 Queue 可以分为阻塞队列和非阻塞队列，其中阻塞队列的典型例子是 BlockingQueue，非阻塞队列的典型例子是 ConcurrentLinkedQueue。以下的代码基于 <code>openjdk version "11.0.8"</code></p>
<p>BlockingQueue 是一个接口，具体的实现有很多，如 ArrayBlockingQueue、DelayQueue、LinkedBlockingDeque、LinkedBlockingQueue、PriorityBlockQueue、SynchronousQueue。就拿 ArrayBlockingQueue 来看吧</p>`,r:{minutes:7.51,words:2252},t:"7. 研读 Java 语言中线程安全队列的实现",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/8.%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%97%A0%E9%94%81%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%98%9F%E5%88%97.html",{loader:()=>B(()=>import("./8.实现一个无锁的线程安全队列.html-DDldoL4o.js"),__vite__mapDeps([8,1])),meta:{e:`<h2>实现一个无锁的线程安全队列</h2>
<p>我们前面铺垫了很多基础知识，并且研读了优秀的源码。接下来我们要亲手实现一个无锁的线程安全队列，来真正的体会了解下无锁化编程。</p>
<p>我们首先说明我们的实现方式：</p>
<ul>
<li>使用数组作为数据的存储格式，也即我们的队列的底层是以数组进行存储</li>
<li>规定队列的容量，防止出现无容量上限的队列大量占用内存的情况。</li>
<li>采用环形队列的方式，即在进行写操作时，队列满了之后，从数组 0 位置继续覆盖插入</li>
<li>提供的读、写方法返回值都为 bool 类型。将更多的逻辑处理权释放给 API 使用者</li>
<li>采用 C++11 编写</li>
</ul>`,r:{minutes:11.15,words:3346},t:"8. 实现一个无锁的线程安全队列",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/9.%E6%80%9D%E8%80%83%E4%B8%8E%E5%B1%95%E6%9C%9B.html",{loader:()=>B(()=>import("./9.思考与展望.html-BdvzNEv0.js"),__vite__mapDeps([9,1])),meta:{e:`<h2>思考与展望</h2>
<h3>一、无锁队列一定优于有锁队列吗？</h3>
<p>不一定，对于 CAS 实现的硬件级的互斥，其单次操作性能比相同条件下的应用层的较为高效，但当多个线程并发时，硬件级的互斥引入的代价与应用层的锁争用同样令人惋惜。因此如果纯粹希望通过使用 CAS 无锁算法及相关数据结构而带来程序性能的大量提升是不可能的，硬件级原子操作使应用层操作变慢，而且无法再度优化。相反通过对有锁多线程程序的良好设计，可以使程序性能没有任何下降，可以实现高度的并发性。</p>
<p>但是我们也要看到应用层无锁的好处，比如不需要程序员再去考虑死锁、优先级反转等棘手的问题，因此在对应用程序不太复杂，而对性能要求稍高时，可以采用有锁多线程。而程序较为复杂，性能要求满足使用的情况下，可以使用应用级无锁算法。</p>`,r:{minutes:1.68,words:504},t:"9. 思考与展望",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/1.%E8%87%AA%E7%A0%94%E7%A6%BB%E6%95%A3%E5%9E%8B%E6%A7%BD%E4%BD%8D%E5%93%88%E5%B8%8C.html",{loader:()=>B(()=>import("./1.自研离散型槽位哈希.html-kSnIVUnT.js"),__vite__mapDeps([10,1])),meta:{e:`<p>一致性哈希最早于1997年提出，用于在大规模分布式缓存、CDN和负载均衡系统中，将大量请求或数据均匀分配到一组后端节点，并在节点动态增删时最小化的重映射数据。</p>
<p>我们目前常见的一致性哈希算法，包括：ring hash、jump consistent hash、rendevous hash、maglev hash、Anchor hash等。</p>
<p>本文首先调研了业界主流的一致性哈希算法，并深入抽象CDN节点缓存场景的核心需求，自主研发了“离散型槽位哈希”算法。该算法高度契合CDN点播业务的特定需求，已成功应用于“快手点播CDN节点”的缓存调度场景，覆盖近2500台机器，直接承接并调度近20T带宽流量。</p>`,r:{minutes:65.37,words:19610},t:"1.自研离散型槽位哈希",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/1.fork%E5%8E%9F%E7%90%86.html",{loader:()=>B(()=>import("./1.fork原理.html-DyjQDZPR.js"),__vite__mapDeps([11,1])),meta:{e:`<h3>二、Linux 中 fork 的原理</h3>
<p>Linux 在创建进程时，使用 <code>fork</code> 通过拷贝当前进程创建一个子进程。子进程与父进程的区别仅仅在于 PID（每个进程唯一）、PPID（父进程的进程号）和某些资源和统计量（例如，挂起的信号，他没有必要继承）。然后使用 exec 函数读取可执行文件并将其载入地址空间开始运行。</p>
<p>Linux 的 fork 使用“写时拷贝”（<code>copy on write</code>）页实现。写时拷贝是一种可以推迟甚至免除拷贝数据的计数。内核在 fork 的时候并不复制整个进程地址空间，而是让父进程和子进程共享一个拷贝。只有在需要写入的时候，数据才会被复制，从而使各个进程拥有各自的拷贝。也就是说，资源的复制只有在需要写入的时候才进行，在此之前，只是以只读方式共享。那么，这样的话，fork 的实际开销就是复制父进程的页表以及给子进程创建唯一的进程描述符。在一般情况下，进程创建后都会马上运行一个可执行的文件，这种优化可以避免拷贝大量根本就不会被使用的数据（地址空间常常包含数十M的数据）。</p>`,r:{minutes:3.11,words:933},t:"1.fork原理",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/2.%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E4%B9%8BCFS%E7%AE%97%E6%B3%95.html",{loader:()=>B(()=>import("./2.进程调度之CFS算法.html-BMwBltND.js"),__vite__mapDeps([12,1])),meta:{e:`<p>从 <code>Linux 2.5</code> 开始，内核使用 <code>O(1)</code> 调度算法。在数以十计的多处理器的环境下性能好，可扩展性强。但是对于交互进程，也就是哪些响应时间敏感的程序表现不佳。</p>
<p>于是，从 <code>linux 2.6</code> 开始，引入了新的进程调度算法，其中最为著名的是 “反转楼梯最后期限调度算法”（<code>Rotating Staircase Deadline scheduler, RSDL</code>），该算法吸取了队列理论，将公平调度的概念引入了 Linux 调度程序，最后称为“完全公平调度算法”，简称 CFS。</p>`,r:{minutes:4.92,words:1477},t:"2.进程调度之CFS算法",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/3.%E5%86%85%E6%A0%B8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%93%BE%E8%A1%A8.html",{loader:()=>B(()=>import("./3.内核数据结构之链表.html-oelZwBAZ.js"),__vite__mapDeps([13,1])),meta:{e:`<p>链表是一种存放和操作可变数量元素（常称为节点）的数据结构。他们在内存中无须占有连续内存块，内存块之间通过指针连接。本文探讨一下 Linux 中链表的实现。</p>
<h3>一、链表的定义</h3>
<p>Linux 内核中，<strong>不是将数据结构塞入链表，而是将链表节点塞入数据结构</strong>。</p>
<p>比如我们之前定义链表，一般是有了结构体，然后在此结构体中增加 “前向指针” 或者“ 后向指针”，以达到链表将节点串联起来的目的。而 Linux 内核中，是将链表节点塞入数据结构体中，以达到同样的效果。</p>
<p>链表代码在头文件：<code>&lt;linux/include/linux/list.h&gt;</code> 中声明，数据结构如下：</p>`,r:{minutes:12.36,words:3708},t:"3.内核数据结构之链表",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/4.%E5%86%85%E6%A0%B8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%98%9F%E5%88%97.html",{loader:()=>B(()=>import("./4.内核数据结构之队列.html-DOPuipDN.js"),__vite__mapDeps([14,1])),meta:{e:`<p>队列是一种定义了 FIFO 先进先出的结构。Linux 内核的队列实现在 <code>kfifo.c</code> 中。本文以 <code>Linux 2.6.12</code> 版本来进行讨论。</p>
<p>我们还是老样子，从底层实现看起，然后再来总结规律、适用场景。</p>
<h3>一、创建队列</h3>
<p>创建队列的实现如下：</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> kfifo </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">kfifo_init</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">			 unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> __nocast </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">gfp_mask</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> spinlock_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> kfifo </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">fifo;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">	/* size must be a power of 2 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">	BUG_ON</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	fifo </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> kmalloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> kfifo), gfp_mask);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">fifo)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">		return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> ERR_PTR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">ENOMEM);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">	fifo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> buffer;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">	fifo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">size</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> size;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">	fifo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">in</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> fifo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">out</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">	fifo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">lock</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> lock;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> fifo;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> kfifo </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">kfifo_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> __nocast </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">gfp_mask</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> spinlock_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">buffer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> kfifo </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">ret;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">	/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">	 * round up to the next power of 2, since our 'let the indices</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">	 * wrap' tachnique works only in this case.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">	 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		BUG_ON</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">80000000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> roundup_pow_of_two</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(size);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> kmalloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(size, gfp_mask);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">buffer)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">		return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> ERR_PTR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">ENOMEM);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> kfifo_init</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(buffer, size, gfp_mask, lock);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">IS_ERR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(ret))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		kfree</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ret;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:6.99,words:2097},t:"4.内核数据结构之队列",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/CFS%E7%AE%97%E6%B3%95%E5%9C%A8%E5%86%85%E6%A0%B8%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0.html",{loader:()=>B(()=>import("./CFS算法在内核中的实现.html-BgR-aQjC.js"),__vite__mapDeps([15,1])),meta:{e:`<p>本文使用的内核版本为：<code>v2.6.12</code></p>
`,r:{minutes:.07,words:22},t:"CFS 算法在内核中的实现",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/%E5%86%85%E6%A0%B8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%98%A0%E5%B0%84.html",{loader:()=>B(()=>import("./内核数据结构之映射.html-BnA0DAgm.js"),__vite__mapDeps([16,1])),meta:{e:`<p>我们一般称键值对数组为映射，也称为哈希。一般查找的时间复杂度可以低至常数级别。在高频次的查询场景中，有较为优异的性能。关于映射的性质，我们不过多讨论，本文主要看看 Linux 中映射的实现，本文以 Linux 2.6.12 版本为例。</p>
<p>Linux 实现的映射，并不是一个通用的映射。他的目标是：映射一个唯一数（UID）到一个指针。</p>
<h3>一、实现结构</h3>
<p>Linux 提供了结构体 idr 用来完成这一目标。如下：</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> idr_layer {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		 bitmap;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> idr_layer	</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75">ary</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">IDR_BITS];</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">  // 64 位机器 IDR_BITS 为 6</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">			 count;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> idr {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> idr_layer </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">top;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> idr_layer </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">id_free;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		  layers;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		  id_free_cnt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">	spinlock_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	  lock;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.72,words:516},t:"内核数据结构之映射",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E4%B9%8BO1%E7%AE%97%E6%B3%95.html",{loader:()=>B(()=>import("./进程调度之O1算法.html-CThkZZgN.js"),__vite__mapDeps([17,1])),meta:{e:`<p>Linux 从 2.6 开始引入了 <code>O(1)</code> 调度器</p>
<h3>一、工作原理</h3>

<ul>
<li>系统中的 runqueue 运行队列，每个 CPU 都有一个 runqueue。这样在 SMP 系统中可以有效的避免多个 CPU 去访问同一个 runqueue。</li>
<li>每一个 runqueue 运行队列维护了两个结构体。一个是 active 结构体，存储的是运行的进程；另一个是 expired 结构题，存储的是时间片用完的进程。</li>
<li>active 和 expired 结构体中都有多个链表，分别存储着不同优先级的进程。相同优先级的进程挂在同一条链表上</li>
<li>同时在 active 和 expired 结构中，还有一个 bitmap 结构，用来指示哪些进程可以运行。</li>
<li>当 active 结构中无进程可运行时，说明系统中所有进程的时间片都已经耗光，这时候只需要变换 active 和 expire 的指针，即可运行原 expire 结构中的进程。</li>
</ul>`,r:{minutes:1.87,words:561},t:"进程调度之 O1 算法",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/1.%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAhook%E5%BA%93.html",{loader:()=>B(()=>import("./1.实现一个hook库.html-kB6lFtMR.js"),__vite__mapDeps([18,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["hook"],e:`<h2>实现一个 hook 库</h2>
<h3>一、背景</h3>
<p>在日常开发中，我们经常可能会对动态库中的函数调用做 hook（替换、拦截、监听等等），实现业务目的，比如对于 hook malloc、free 等，我们能够统计出分配了多少内存、那些内存一直被占用而没有被释放等等。</p>
<p>鉴于此，我们实现一个 hook 库，提供接口帮助业务进行 hook 相关函数调用。本文主要分享一个通过 got 方式进行 hook 的方式</p>
<h3>二、基础知识</h3>
<h4>1. LD_PRELOAD 预加载方式</h4>
<p>一般情况下，在 linux 下，动态链接库的加载顺序如下：</p>`,r:{minutes:12.24,words:3673},t:"1.实现一个hook库",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/2.preload%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98.html",{loader:()=>B(()=>import("./2.preload失效问题.html-CGxE2oxq.js"),__vite__mapDeps([19,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>一、preload 失效原因</h3>
<h4>1. RTLD_DEEPBIND 的使用</h4>
<p>来自于：<a href="http://linux.die.net/man/3/dlopen" target="_blank" rel="noopener noreferrer">http://linux.die.net/man/3/dlopen</a></p>
<p>RTLD_DEEPBIND（自 glibc 2.3.4 起）将此库中符号的查找范围置于全局范围之前。这意味着自包含库将优先使用其自己的符号，而不是已加载库中包含的具有相同名称的全局符号。该标志未在 POSIX.1-2001 中指定。</p>`,r:{minutes:1.56,words:467},t:"2.preload失效问题",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/3.%E5%A6%82%E4%BD%95hook%E5%87%BD%E6%95%B0calloc.html",{loader:()=>B(()=>import("./3.如何hook函数calloc.html-BhsmURjH.js"),__vite__mapDeps([20,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["hook"],e:`<h3>一、如何 hook calloc</h3>
<p>dlsym 内部可能使用 calloc 分配内存。如果 hook calloc 的时候，使用 dlsym 可能会导致出现死循环。</p>
<p>如下是一种解决方案：</p>
<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * 对于 hook calloc 的几点说明</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * 问题点：dlsym 底层实现调用了 calloc 进行内存分配。因此 hook calloc 时需要注意不能出现死循环</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * 当前解决方案如下：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * 1. 在全局开辟一块内存空间，用来做为 dlsym 内部需要 calloc 的空间</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * 2. 设置 my_init_calloc_hook 函数的属性为 constructor，使其自动调用，且在 main 函数之前调用，实现初始化</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> *    并且设置 constructor 构造函数的优先级为 1。constructor 的优先级，数值越小，越先调用；destructor 的优先级，数值越大，越先调用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> *    这个优先级 [1, 100] 范围是保留的，最小只能使用 101</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> *    因此 my_init_calloc_hook 函数“尽可能”保证了当前代码是当前进程第一个调用 calloc 的位置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> *    当 dlsym 内部调用 calloc 时，此时 real_calloc 为空，则使用全局提前开辟好的空间，8192 字节大小够用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * 3. 当 dlsym 寻找 calloc 符号找不到时，出错情况下，为了保证 calloc 函数的逻辑。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> *    使用全局变量 is_gather_calloc_ptr_error 做为判断。使业务调用 calloc 直接返回 null，而不是 calloc_ptr_buffer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * 4. 对于在 my_init_calloc_hook 执行前，有调用 calloc 的行为，我们一般默认返回 nullptr。如何实现呢？</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> *    使用全局变量 is_init_calloc，只有在进入 my_init_calloc_hook 后才将其置为 true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> *    保证了在 my_init_hook 之前调用 calloc 的场景都返回 nullptr</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * 存在问题：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> *    此解决方案在 my_init_calloc_hook 执行后，calloc 才可用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> calloc_ptr_buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">8192</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">static</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> calloc_type real_calloc </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> is_gather_calloc_ptr_error </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> is_init_calloc </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF">__attribute__((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">constructor</span><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF">(101)))</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> my_init_calloc_hook</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    is_init_calloc </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> calloc_type tmp_calloc_ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF"> reinterpret_cast</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">calloc_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">dlsym</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(RTLD_NEXT, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"calloc"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (tmp_calloc_ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        real_calloc </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> tmp_calloc_ptr;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // dlsym 出错的情况</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        is_gather_calloc_ptr_error </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> calloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> nmemb</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) __THROW {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (real_calloc </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (is_gather_calloc_ptr_error) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (is_init_calloc) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> calloc_ptr_buffer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> point </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> real_calloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(nmemb, size);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (point) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        default_malloc_size_func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">_msize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(point), </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> point;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.72,words:516},t:"3.如何hook函数calloc",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/ELF%E6%96%87%E4%BB%B6.html",{loader:()=>B(()=>import("./ELF文件.html-fJhzkZgE.js"),__vite__mapDeps([21,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p>ELF文件解析：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>https://www.cnblogs.com/jiqingwu/p/elf_format_research_01.html</span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://www.cnblogs.com/jiqingwu/p/elf_explore_2.html</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.12,words:36},t:"undefined",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/hook%E5%8A%A8%E6%80%81%E5%BA%93.html",{loader:()=>B(()=>import("./hook动态库.html-DIawD_Ov.js"),__vite__mapDeps([22,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p>hook so库：<a href="https://github.com/esrrhs/hookso" target="_blank" rel="noopener noreferrer">https://github.com/esrrhs/hookso</a></p>
<p>hook framework 库：<a href="https://github.com/asLody/whale" target="_blank" rel="noopener noreferrer">https://github.com/asLody/whale</a></p>
<p>linux 下 got 表 hook：<a href="https://github.com/smartdone/linux_x86_got_hook" target="_blank" rel="noopener noreferrer">https://github.com/smartdone/linux_x86_got_hook</a></p>`,r:{minutes:.17,words:50},t:"undefined",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/hook%E6%96%87%E4%BB%B6IO%E5%87%BD%E6%95%B0%E9%97%AE%E9%A2%98.html",{loader:()=>B(()=>import("./hook文件IO函数问题.html-DjdnDdHx.js"),__vite__mapDeps([23,1])),meta:{e:`<h3>一、hook 文件 IO 函数问题</h3>
<p>hook IO 函数遇到的问题，在进程退出时，exit 类函数，exit 这个函数会通过 close/fclose 来关闭打开的文件描述符，但是这个时候，业务对象可能已经被销毁，如果此时又去使用业务对象，就会导致未定义的问题。产生 core 、或者非预期的问题。</p>
<p>进程退出时的过程：</p>
`,r:{minutes:.35,words:106},t:"",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/malloc%E7%9A%84hook%E6%96%B9%E6%B3%95.html",{loader:()=>B(()=>import("./malloc的hook方法.html-BGLDdxGe.js"),__vite__mapDeps([24,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p>malloc_hook 方法：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>https://stackoverflow.com/questions/17803456/an-alternative-for-the-deprecated-malloc-hook-functionality-of-glibc/17850402#17850402</span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://stackoverflow.com/questions/71882426/how-to-correctly-interpose-malloc-allowing-for-ld-preload-chaining</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.38,words:413},t:"undefined",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/preload.html",{loader:()=>B(()=>import("./preload.html-Cfq766lP.js"),__vite__mapDeps([25,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p>hook 问题记录。（inline）</p>
<p><a href="https://zhuanlan.zhihu.com/p/44132805" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/44132805</a></p>
<p>dlsym 注意事项：</p>
<p><a href="https://blog.csdn.net/Cxinsect/article/details/100761916" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/Cxinsect/article/details/100761916</a></p>`,r:{minutes:.86,words:257},t:"undefined",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/xhook.html",{loader:()=>B(()=>import("./xhook.html-BcYqvRWk.js"),__vite__mapDeps([26,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["hook"],e:`<h3>xhook</h3>
<p>通过 hook 符号表中 .rel.dyn 和 .rel.plt 表达到替换动态链接库中符号的目的</p>
`,r:{minutes:.13,words:40},t:"xhook 学习",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/%E5%95%8A%E6%9C%AA%E6%80%BB%E7%BB%93.html",{loader:()=>B(()=>import("./啊未总结.html-WjF_3_wF.js"),__vite__mapDeps([27,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p>hook 库</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>x86/64 hook库： </span></span>
<span class="line"><span>git地址：https://github.com/stevemk14ebr/PolyHook</span></span>
<span class="line"><span>文档：https://www.codeproject.com/articles/1100579/polyhook-the-cplusplus-x-x-hooking-library</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pltgot x86/64 hook库：https://github.com/hMihaiDavid/pltgot_hook_demo</span></span>
<span class="line"><span>xhook: https://github.com/iqiyi/xHook/blob/master/README.zh-CN.md</span></span>
<span class="line"><span>hookso: https://github.com/esrrhs/hookso</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.53,words:158},t:"undefined",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/%E5%BA%93%E5%87%BD%E6%95%B0%E6%89%93%E6%A1%A9.html",{loader:()=>B(()=>import("./库函数打桩.html-CkVp7vIZ.js"),__vite__mapDeps([28,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>linux 的库函数打桩机制</h2>
<p>在程序编译、链接、运行等过程都可使用库打桩机制</p>
<h3>一、编译时打桩</h3>
`,r:{minutes:.16,words:47},t:"undefined",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/%E6%8F%92%E6%A1%A9.html",{loader:()=>B(()=>import("./插桩.html-DMMm5_mQ.js"),__vite__mapDeps([29,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>插桩</h2>
<p>可以利用 clang/gcc 的 <code>-finstrument-functions</code> 编译参数，使得每个函数都会在出口和入口以此执行 <code>__cyg_profile_func_enter</code> 函数和 <code>__cyg_profile_func_exit</code> 函数。</p>
<p>使用 dladdr 将函数的地址转换成符号</p>
<p>hook.cpp</p>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;dlfcn.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;cxxabi.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> char*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> get_funcname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> status </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 99</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> abi</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">__cxa_demangle</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(src, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">status);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> nullptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> src </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> f;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">extern</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "C"</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> __cyg_profile_func_enter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> func, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> caller) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    Dl_info info1, info2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">dladdr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(func, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">info1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> dladdr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(caller, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">info2)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        fprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(stdout, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"enter func: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> father: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">get_funcname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">info1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">dli_sname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">get_funcname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">info2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">dli_sname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">extern</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "C"</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> __cyg_profile_func_exit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> func, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> caller) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    Dl_info info1, info2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">dladdr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(func, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">info1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> dladdr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(caller, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">info2)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        fprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(stdout, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"exit func: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> father: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">get_funcname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">info1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">dli_sname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">get_funcname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">info2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">dli_sname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.78,words:233},t:"插桩",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/%E9%87%8D%E8%BD%BDnew%E5%92%8Cdelete.html",{loader:()=>B(()=>import("./重载new和delete.html-D2ToHjXF.js"),__vite__mapDeps([30,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p>c++中重载 new 和 delete 的使用：<a href="https://blog.csdn.net/fengbingchun/article/details/78991749" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/fengbingchun/article/details/78991749</a></p>
`,r:{minutes:.08,words:23},t:"undefined",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%98%9F%E5%88%97/1.%E6%B5%85%E8%B0%88%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%98%9F%E5%88%97.html",{loader:()=>B(()=>import("./1.浅谈线程安全队列.html-J7QT_xM_.js"),__vite__mapDeps([31,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>一、背景</h2>
<p>对于21世纪的人类，已经不满足于单核并行的模式；提高效率，增效降本才是我们向往的。程序设计中选择什么样的数据结构体是解决某个问题的关键。如果多线程使用到的数据结构体要满足并发，则涉及到数据的线程安全问题，一种解决办法是选择单独的互斥元或外部锁来使数据结构体在某一时间段独占，且释放后没有残留。另一种就是设计可以多线程同时访问的数据结构体。明显，后者在大部分场景是效率较高的。</p>
<h3>1. 工作中遇到的场景</h3>
<p>腾讯云云监控团队对于自定义监控的场景没有一个适应现代化的上报组件，历史上例如 monitor、巴拉多、哈勃等监控系统，由于年代比较久远，只支持单维度上报、无法支持多维度的场景或改造困难，以及对于业界比较流行的统计方式(histogram、summary)无法支持，性能相对较差，页面老旧，无法覆盖业务场景，因此迫切需要一个上报组件，在业务和监控中台之间做一个连接。采集业务的指标数据进行处理、聚合后上报到监控中台。</p>`,r:{minutes:43.24,words:12971},t:"1.浅谈线程安全队列",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1.%E5%AF%B9%E4%BA%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E7%90%86%E8%A7%A3.html",{loader:()=>B(()=>import("./1.对于并发编程的理解.html-CXpcZ-JV.js"),__vite__mapDeps([32,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["并发编程"],e:`<h2>对于并发编程的理解</h2>
<h4>1. 为什么使用并发</h4>
<ul>
<li>功能需求，比如我们的用户界面，既要同时处理用户请求；又要在后台做一些工作。</li>
<li>性能需求，比如讲单个任务分成几部分且各自并行运行，从而降低总运行时间</li>
</ul>
<h4>2. 并发可能导致的问题</h4>
<ul>
<li>并发编程的难度较高，可能会存在潜在的 bug，如果并发带来的收益足够大，可以尝试</li>
<li>线程会在系统中存在固有的开销，操作系统必须分配相关的内核资源和堆栈空间，然后将其加入调度器中，这个过程有一定的时间开销。如果任务实际运行时间远远小于启动线程的开销时间，使用多线程反而会降低效率</li>
<li>多线程之间需要操作系统做上下文切换，每个上下文切换都需要耗费CPU时间。因此需要参考硬件（CPU数量）调整运行线程的数量</li>
</ul>`,r:{minutes:6.38,words:1914},t:"1. 对于并发编程的理解",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2.%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%90%8C%E6%AD%A5.html",{loader:()=>B(()=>import("./2.线程间同步.html-DRMFal-g.js"),__vite__mapDeps([33,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["线程"],e:`<h2>线程间同步</h2>
<p>如果多个任务间有相互依赖关系，那么任务或者线程之间需要同步。C++ 标准库中提供了条件变量和 feature 来帮助我们处理这种场景</p>
<h3>一、条件变量</h3>
<p>库 <code>#include &lt;condition_variable&gt;</code> 中有两个条件变量的实现： <code>std::condition_variable</code> 和 <code>std::condition_variable_any</code></p>
<ul>
<li><code>std::condition_variable</code> 仅限于和 <code>std::mutex</code> 一起工作。<code>std::condition_variable_any</code> 更加灵活，可以组合的条件比较广泛。</li>
</ul>`,r:{minutes:1.99,words:598},t:"2. 线程间同步",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3.%E5%9F%BA%E7%A1%80%E5%8F%98%E9%87%8F%E7%9A%84%E5%90%8C%E6%AD%A5%E9%9C%80%E8%A6%81%E5%8A%A0%E9%94%81%E5%90%97.html",{loader:()=>B(()=>import("./3.基础变量的同步需要加锁吗.html-Bzttxk6O.js"),__vite__mapDeps([34,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>基础变量的同步需要加锁吗</h2>
<p>我们在加锁时，可能会遇到这种问题，基础变量的同步是否需要加锁？</p>
<p>这个问题我们需要对齐到具体的场景，才能针对具体问题具体化。</p>
<h3>一、前置条件</h3>
<p>在针对此类问题时，我们先明确一下我们要思考那些方向。</p>
<ul>
<li>我们的机器是 64位还是 32位？</li>
<li>我们对临界区做的操作是否为原子操作？</li>
</ul>
<p>因为内存对齐，CPU 的一个读周期或者是一个写周期仅需要一个总线周期，在这个总线周期内就可以处理一个原子操作。一个总线周期结束前 CPU 不会被抢占，就是中断发生也不会导致一个总线周期执行一半时 CPU 被抢占。</p>`,r:{minutes:2.99,words:898},t:"3. 基础变量的同步需要加锁吗",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%8D%E8%BD%AC.html",{loader:()=>B(()=>import("./4.优先级反转.html-nN1Vl11c.js"),__vite__mapDeps([35,1])),meta:{e:`<p>实时操作系统的一个基本要求就是基于优先级的抢占系统，保证高优先级的线程在 “第一时间” 抢到执行权，是实时系统的第一黄金法则。</p>
<p>但是基于优先级抢占的系统，有一个著名问题就是：优先级反转。也就是说，有低优先级的线程占据了 CPU，妨碍了高优先级线程的执行。</p>
<p>有一个比较著名的案例，就是 1997 年美国宇航局的火星探路车，在登陆火星后的一段时间里无法工作，最后查明是因为优先级反转导致探路车的计算机不断重启的问题。</p>
<h3>一、什么是优先级反转</h3>
<p>如下是经典的优先级反转案例</p>

<ul>
<li>线程 A 优先级为 10（低优先级），在 T1 时刻锁定了一把互斥锁，并开始操作互斥数据</li>
<li>线程 C 优先级为 20（高优先级），在 T2 时刻被唤醒，他也需要互斥数据，当他加锁时，因为互斥锁在 T1 时刻被线程 A 锁掉了，所以线程 C 放弃了 CPU 进入了阻塞等待状态。</li>
<li>此时，优先级为 10 的线程 A 看上去 “抢了” 优先级为 20 的线程 C 的时间。但是因为程序逻辑如此，线程 C 确实需要退出 CPU 等待，直到互斥数据操作完成之后，才能获得 CPU。但是，假设有一个优先级为 15 的线程 B，在 T3 时刻醒了，因为线程 B 比线程 A 的优先级高，所以他会立即抢占 CPU。而线程 A 被迫进行 READY 状态等待。</li>
<li>假设一直到 T4 时刻，线程 B 才放弃 CPU，此时优先级为 10 的线程 A 是唯一的 READY（就绪）线程，他再次占据 CPU 继续执行，最后在 T5 时刻解锁。</li>
<li>那么在 T5 时刻，优先级最高的线程 C 此时才有机会抢占 CPU，系统才会调用线程 C 执行。</li>
</ul>`,r:{minutes:4.1,words:1231},t:"4. 优先级反转",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/5.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93.html",{loader:()=>B(()=>import("./5.多线程编程总结.html-BwWtT363.js"),__vite__mapDeps([36,1])),meta:{e:`<h3>一、线程的定义</h3>
<p>线程的定义：操作系统中能够被调度的最小单元，线程有自己的 context、stack 以及 thread local storage；但与同一进程中的其他线程共享进程资源。</p>
<p>如果从另外一个角度来思考：比如把 C 语言的指针作为机器地址的抽象的话，那么线程可以认为是 “机器流水线” 或者 “虚拟处理器” 的抽象。只是流水线之间的耦合并没有线程来的那么紧密，原因在于线程之间还是共享了很多资源，编码的时候需要注意线程安全。</p>
<h3>二、线程安全</h3>
<p>首先注意，在很多场合，“线程安全” 和 “可重入” 总是混在一起，但这两个并不是同一概念。可重入（别名：异步信号安全）是一个更严格的要求，首先他要求线程安全，其次当发生信号中断并且执行完中断处理例程后，回头继续执行线程代码需要仍然保证正确才可以。</p>`,r:{minutes:7.68,words:2305},t:"5.多线程编程总结",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E8%BF%90%E8%A1%8C%E5%BA%93/1.%E6%A0%88%E4%B8%8E%E8%B0%83%E7%94%A8%E6%83%AF%E4%BE%8B.html",{loader:()=>B(()=>import("./1.栈与调用惯例.html-BjpFFbr3.js"),__vite__mapDeps([37,1])),meta:{e:`<h2>一、栈介绍</h2>
<p>栈保存了一个函数调用所需要的维护信息，常被称为：堆栈帧（<code>Stack Frame</code>）或活动记录。堆栈帧一般包括如下内容：</p>
<ul>
<li>函数的返回地址和参数</li>
<li>临时变量：包括函数的非静态局部变量以及编译器自动生成的其他临时变量</li>
<li>保存的上下文：包括在函数调用前后需要保持不变的寄存器</li>
</ul>
<p>esp 寄存器始终指向栈的顶部，随着函数的执行而不断变化。</p>
<p>ebp 寄存器指向了函数栈帧的一个固定位置。不随这个函数的执行而变化。固定不变的 ebp 可以用来定位函数活动记录中的各个数据。在 ebp 之前首先是这个函数的返回地址，他的地址是 <code>ebp-4</code>；再往前是压入栈中的参数，他们的地址视参数数量和大小而定。ebp 所直接指向的数据是调用该函数前 ebp 的值，这样在函数返回的时候，ebp 可以通过读取这个值恢复到调用前的值。</p>`,r:{minutes:5.65,words:1696},t:"1.栈与调用惯例",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%94%81%E7%AB%9E%E4%BA%89%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/1.%E9%94%81%E7%AB%9E%E4%BA%89%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7.html",{loader:()=>B(()=>import("./1.锁竞争分析工具.html-DSwZXXWm.js"),__vite__mapDeps([38,1])),meta:{e:`<h3>一、概述</h3>
<p>当很多线程争抢同一把锁时，一些线程无法立刻获得锁，而必须睡眠直到某个线程退出临界区。这个争抢过程我们称之为<strong>contention</strong>。在多核机器上，当多个线程需要操作同一个资源却被一把锁挡住时，便无法充分发挥多个核心的并发能力。现代OS通过提供比锁更底层的同步原语，使得无竞争锁完全不需要系统调用，只是一两条 wait-free，耗时 <code>10-20ns</code> 的原子操作，非常快。而锁一旦发生竞争，一些线程就要陷入睡眠，再次醒来触发了OS的调度代码，代价至少为 <code>3-5us</code> 。所以让锁尽量无竞争，让所有线程“一起起飞”是高性能服务器的永恒话题。</p>`,r:{minutes:3.37,words:1012},t:"1.锁竞争分析工具",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/1.%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E3%80%81%E9%93%BE%E6%8E%A5%E8%BF%87%E7%A8%8B.html",{loader:()=>B(()=>import("./1.预处理、编译、汇编、链接过程.html-DJQ_zYUJ.js"),__vite__mapDeps([39,1])),meta:{e:`<h2>生成二进制文件的过程</h2>
<p>当我们踏入计算机学习的时候，大多数的同学应该都是从如下一个简单的“hello world”，生成一个 <code>a.out</code> 的可执行文件，然后执行他，屏幕上输出一行 “hello world”。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"hello world</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">		return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:11.18,words:3353},t:"1.预处理、编译、汇编、链接过程",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/2.%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9A%84%E8%A3%85%E8%BD%BD%E4%B8%8E%E6%89%A7%E8%A1%8C.html",{loader:()=>B(()=>import("./2.二进制的装载与执行.html-CR1kaq2G.js"),__vite__mapDeps([40,1])),meta:{e:`<h2>二进制的运行过程</h2>
<p>在上一篇文章中，我们知道了 Linux 下如何生成二进制文件的过程。我们知道首先需要用高级语言写代码，然后预处理器、编译器、汇编器、链接器这些处理完之后，才得到了一个可执行文件。</p>
<p>这个可执行文件运行后，输出 “hello world”。那么这个过程中又发生了什么呢？下面我们一起来学习</p>
<h3>一、装载可执行文件</h3>
<p>当我们运行一个可执行文件时，操作系统会根据可执行文件（ELF 格式）中的 ELF 头信息确定可执行文件的入口点，然后在内存中为该可执行文件分配一块虚拟地址空间，并将可执行文件装载到该空间中。在装载过程中，操作系统会完成一系列的操作，包括对可执行文件中各个段的访问权限和映射关系进行调整，将代码段、数据段和 BSS 段等映射到适当的虚拟地址空间中，等等。</p>`,r:{minutes:13.44,words:4032},t:"2.二进制的装载与执行",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/3.%E8%AE%A4%E8%AF%86ELF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%B8%80.html",{loader:()=>B(()=>import("./3.认识ELF文件格式一.html-WDp1vWo9.js"),__vite__mapDeps([41,1])),meta:{e:`<h2>认识 ELF 文件格式（一）</h2>
<p>前面用了两篇文章做引子，简单说明了二进制的生成过程，以及二进制的运行过程。我们接下来进行我们的重点话题，即 ELF 文件的格式，接下来我们一起来了解 ELF 文件的内容格式。</p>
<p>ELF 文件格式不仅针对于可执行文件，还有可重定位文件、共享库、以及核心转储（Core 文件）。</p>
<p>我们主要分享 64 位 ELF 文件格式，他是 32 位的 ELF 文件格式是比较相似的，主要区别也就是某些头部字段和其他数据结构的大小和顺序。</p>
<p>ELF 文件格式实际上可以划分为 4 个模块：ELF 头部、多个程序头、多个节、每个节对应的节头。如下：</p>`,r:{minutes:7.32,words:2196},t:"3.认识ELF文件格式（一）",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/4.%E8%AE%A4%E8%AF%86ELF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%BA%8C.html",{loader:()=>B(()=>import("./4.认识ELF文件格式二.html-tINzsL7g.js"),__vite__mapDeps([42,1])),meta:{e:`<h2>认识 ELF 文件格式（二）</h2>
<p>接下来，本篇文章我们来说一下 ELF 文件的节头、以及对应的各个节；他们所存储的数据内容。</p>
<h3>一、节头</h3>
<p>ELF 文件中的代码和数据在逻辑上被分为连续的非重叠块，称为节（Section）。节没有固定的结构体，节的结构取决于节的内容。每个节都有一个节头，这个节头中存储着这个节的属性、信息。节头的格式都是一致的。</p>
<p>需要注意的是，节只为链接器提供视图，而有些 ELF 文件不需要链接，也就不需要节，同时不需要节头。</p>
<p>如下，我们看看节头的格式，被定义在 <code>/usr/include/elf.h</code> 中，我们只看 64 位的版本。</p>`,r:{minutes:21.11,words:6332},t:"4.认识ELF文件格式（二）",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/5.%E8%AE%A4%E8%AF%86ELF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%B8%89.html",{loader:()=>B(()=>import("./5.认识ELF文件格式三.html-C1j2llV7.js"),__vite__mapDeps([43,1])),meta:{e:`<h2>认识 ELF 文件格式（三）</h2>
<p>本篇文章我们介绍 ELF 文件中的程序头</p>
<h3>一、程序头</h3>
<p>程序头提供了 ELF 文件的段视图，segment 我们将其翻译成段。与节头提供的节视图不一样。节视图仅适用于静态链接。而段视图是在将 ELF 文件加载到进程并执行的时候，定位相关代码和数据，并确定加载到虚拟内存中的内容时，操作系统和动态链接器会用到段视图。</p>
<p>ELF 的段包含零个或多个节，实际上就是把多个节捆绑成单个段。段提供的可执行视图，只有 ELF 二进制文件才会用到他们，而非二进制文件，比如可重定位对象，则用不到他们。</p>
<p>如下则是程序头以及段和节之间的映射关系。</p>`,r:{minutes:4.55,words:1366},t:"5.认识ELF文件格式（三）",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/6.%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5.html",{loader:()=>B(()=>import("./6.静态链接.html-CQAixQB7.js"),__vite__mapDeps([44,1])),meta:{e:`<p>本篇内容主要分析静态链接的概念、原理，以及对应的节，以及这些节的内容。</p>
<h2>一、链接的由来</h2>
<p>比如我们有一个"hello world" 程序，如下：</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"hello world</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:15.38,words:4614},t:"6.静态链接",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/7.%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5.html",{loader:()=>B(()=>import("./7.动态链接.html-D8z2lMUZ.js"),__vite__mapDeps([45,1])),meta:{e:`<h2>动态链接</h2>
<h3>一、为什么需要动态链接</h3>
<p>静态链接有缺陷</p>
<ul>
<li>内存占用大。如果是静态库，每个运行的程序都需要使用公共的静态库（例如 glibc.a），那么如果一个静态库 1MB，100 个进程就需要浪费 100MB 的内存</li>
<li>磁盘占用大，如果是静态库，每个二进制都包含了公共的静态库（例如 glibc.a），那么如果一个静态库 1MB，系统上 1000 个二进制，就占用 1GB 的磁盘空间</li>
<li>如果使用静态库，程序的开发、更新、部署、发布都比较困难。一个模块的改动需要整个二进制重新编译。</li>
</ul>
`,r:{minutes:27.83,words:8348},t:"7.动态链接",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/8.PLT%20hook%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.html",{loader:()=>B(()=>import("./8.PLT hook的实现机制.html-CPE5CinZ.js"),__vite__mapDeps([46,1])),meta:{e:`<h2>一、从案例说起</h2>
<p>文件：a.h</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#ifdef __cplusplus</span></span>
<span class="line"><span>extern "C" {</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void say_hello();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#ifdef __cplusplus</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>#endif</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:7.13,words:2138},t:"8.PLT hook的实现机制",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/1.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.html",{loader:()=>B(()=>import("./1.进程和环境变量.html-D6wUwz7t.js"),__vite__mapDeps([47,1])),meta:{d:1618679501e3,l:"2021年4月18日",g:["环境变量"],e:`<h2>环境变量</h2>
<p>我们首先捋一下一个进程的启动步骤，拿 C 语言来举个例子吧，当内核执行 C 程序时，在调用 main 函数前先调用一个特殊的启动例程。可执行程序文件将此启动例程指定为程序的起始地址---这是由链接编辑器设置的，而链接编辑器则由C编译器调用。启动例程丛内核取得命令行参数和环境变量值，然后为按上述方式调用main函数做好安排。</p>
<p>一个进程的环境变量是在调用main函数之前，由启动例程帮这个进程设置好的。准确点说，一个进程的环境变量是继承其父进程的。在linux 下，进程的环境变量可根据 <code>cat /proc/1/envrion</code> 查看。而用户启动的进程一般继承自终端shell，而终端shell的环境变量又可以被设置，常用的命令 export 也是如此，会写入当前终端shell对应的进程的环境变量的文件中。而一个进程的信息如下：</p>`,r:{minutes:4.41,words:1324},t:"1.进程和环境变量",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/2.system%E5%92%8Cpopen%E5%87%BD%E6%95%B0.html",{loader:()=>B(()=>import("./2.system和popen函数.html-C6bHYoAZ.js"),__vite__mapDeps([48,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>一、popen 函数</h3>
<p>函数定义：<code>FILE * popen( const char * command,const char * type);</code></p>
<p>说明：popen 会调用 fork 产生子进程，然后从子进程中调用 <code>/bin/sh -c</code> 来执行参数 command 的指令。参数 type 可使用 r 代表读取，w 代表写入。依照此 type 值，popen() 会建立管道连到子进程的标准输出设备或标准输入设备，然后返回一个文件指针。随后进程便可利用此文件指针来读取子进程的输出设备或是写入到子进程的标准输入设备中。此外，所有使用文件指针 (FILE*) 操作的函数也都可以使用，除了 fclose() 以外。</p>`,r:{minutes:1.45,words:434},t:"2.system和popen函数",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/3.pthread_cancel%E5%92%8Cpthread_kill%E5%8C%BA%E5%88%AB.html",{loader:()=>B(()=>import("./3.pthread_cancel和pthread_kill区别.html-BbB1xSQh.js"),__vite__mapDeps([49,1])),meta:{e:`<h2>pthread_cancel 和 pthread_kill 的区别</h2>
<p>线程结束执行的方式共有 3 种，分别是：</p>
<ul>
<li>线程将指定函数体中的代码执行完后自行结束</li>
<li>线程执行过程中，遇到 pthread_exit 函数结束执行</li>
<li>线程执行过程中，被同一进程中的其他线程（包括主线程）强制终止</li>
</ul>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> pthread_kill</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF">pthread_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> sig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,r:{minutes:1.02,words:307},t:"3.pthread_cancel和pthread_kill区别",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/4.mlock%E5%87%BD%E6%95%B0.html",{loader:()=>B(()=>import("./4.mlock函数.html-B7pX2fO7.js"),__vite__mapDeps([50,1])),meta:{e:`<h2>mlock 相关函数详解</h2>
<h3>一、mlock 和 munlock</h3>
<p>mlock 用于对内存加锁，锁住内存是为了防止这段内存被操作系统 swap 掉。此操作只有 root 权限才能运行</p>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;sys/mman.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> mlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> mlock2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> flags</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> munlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.11,words:634},t:"4.mlock函数",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/5.exit%E5%87%BD%E6%95%B0.html",{loader:()=>B(()=>import("./5.exit函数.html-CsN6GBdX.js"),__vite__mapDeps([51,1])),meta:{e:`<h2>exit() 和 _exit()函数详解</h2>
<p><code>exit()</code> 就是让程序退出，传入的参数是程序退出时的状态码，0 表示正常退出，其他表示非正常退出。标准中有：<code>EXIT_SUCCESS</code> 和 <code>EXIT_FAILURE</code> 两个宏。</p>
<p>作为系统调用，<code>_exit</code> 和 <code>exit</code> 是基本一样的。在内核中，有如下的定义</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#define __NR__exit  __NR_exit</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,r:{minutes:2.47,words:741},t:"5.exit函数",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/6.eventfd%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E8%B7%B5.html",{loader:()=>B(()=>import("./6.eventfd原理和实践.html-gnXEz7jB.js"),__vite__mapDeps([52,1])),meta:{e:`<h2>eventfd 原理与实践</h2>
<p>事件驱动是一种高效的通信机制，在 linux 中，eventfd 是一个用来通知事件的文件描述符，timerfd 是定时器事件的文件描述符。二者都是内核向用户空间的应用发送通知的机制，可以高效的用来实现用户空间的事件/通知驱动的应用程序。</p>
<p>用于进程间通信和同步。他的主要作用是通过文件描述符来实现进程间的时间通知机制，类似于信号量或者条件变量，但比他们更加高效和简单。如下的使用场景：</p>
<ul>
<li>线程同步：可以用 eventfd 实现线程间的同步，其中一个线程向 <code>eventfd</code> 写入数据，另一个线程从 <code>eventfd</code> 中读取数据，实现数据传输和同步。</li>
<li>进程间通信：可以用 <code>eventfd</code> 实现进程间通信，其中一个进程向 <code>eventfd</code> 写入数据，另一个进程从 <code>eventfd</code> 中读取数据，实现进程间数据传输和同步。</li>
<li>异步事件通知：可以用 <code>eventfd</code> 实现异步事件通知机制，例如，当一个文件描述符上有数据可读时，可以将该事件通知给另一个进程，从而实现进程间的异步通信。</li>
<li>多路复用：可以将 <code>eventfd</code> 的文件描述符添加到 epoll 或 select 中，从而实现多路复用，监控多个事件的状态，以便进一步处理。</li>
</ul>`,r:{minutes:6.01,words:1804},t:"6.eventfd原理和实践",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/7.backtrace%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E.html",{loader:()=>B(()=>import("./7.backtrace接口说明.html-1dgfzRvE.js"),__vite__mapDeps([53,1])),meta:{e:`<h2>backtrace 接口详细说明</h2>
<p>我们经常会有需求来获取调用的堆栈，来排查一些问题，或者实现一些需求。本文来介绍 <code>backtrace()</code> 和 <code>backtrace_symbols()</code> 函数的使用。</p>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;execinfo.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> backtrace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> **</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> **</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">backtrace_symbols</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> backtrace_symbols_fd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.05,words:1215},t:"7.backtrace接口说明",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/8.%E6%96%87%E4%BB%B6%E9%94%81.html",{loader:()=>B(()=>import("./8.文件锁.html-D0z1csfg.js"),__vite__mapDeps([54,1])),meta:{d:1620144701e3,l:"2021年5月5日",g:["文件锁"],e:`<h2>linux 下文件锁</h2>
<p>功能：使多个进程之间同步协调一致的访问文件的某个区域。</p>
<h3>一、fcntl</h3>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int fcntl(int fd, int cmd, struct flock* flockptr);</span></span>
<span class="line"><span>struct flock {</span></span>
<span class="line"><span>	short l_type;</span></span>
<span class="line"><span>	short l_whence;</span></span>
<span class="line"><span>	off_t l_start;</span></span>
<span class="line"><span>	off_t l_len;</span></span>
<span class="line"><span>	pid_t l_pid;</span></span>
<span class="line"><span>}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.92,words:577},t:"8.文件锁",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/9.pthread_cond_timedwait%E5%87%BD%E6%95%B0.html",{loader:()=>B(()=>import("./9.pthread_cond_timedwait函数.html-DnEK7pV-.js"),__vite__mapDeps([55,1])),meta:{e:`<h2>pthread_cond_timedwait 函数</h2>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> pthread_cond_timedwait</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">pthread_cond_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *restrict</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> cond</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">           pthread_mutex_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *restrict</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> mutex</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">           const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> timespec </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*restrict</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> abstime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> pthread_cond_wait</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">pthread_cond_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *restrict</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> cond</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">           pthread_mutex_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *restrict</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> mutex</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.92,words:277},t:"9.pthread_cond_timedwait函数",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/Linux%E4%B9%8Bsyslog%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E8%AF%A6%E8%A7%A3.html",{loader:()=>B(()=>import("./Linux之syslog日志服务详解.html-_4B7L0PS.js"),__vite__mapDeps([56,1])),meta:{d:1607022701e3,l:"2020年12月4日",g:["syslog日志服务"],e:`<h2>Linux 之 syslog 日志服务详解</h2>
<p>syslog 和 rsyslog 是 Linux 下默认的日志守护进程。rsyslog 是 syslog 的升级版。同时 syslog 是标准协议，可以用来记录设备的日志。在UNIX系统，路由器、交换机等网络设备中，系统日志(System Log)记录系统中任何时间发生的大小事件。管理者可以通过查看系统记录，随时掌握系统状况。UNIX的系统日志是通过syslogd这个进程记录系统有关事件记录，也可以记录应用程序运作事件。通过适当的配置，我们还可以实现运行syslog协议的机器间通信，通过分析这些网络行为日志，藉以追踪掌握与设备和网络有关的状况。</p>`,r:{minutes:9.33,words:2799},t:"Linux之syslog日志服务详解",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/netlink.html",{loader:()=>B(()=>import("./netlink.html-BLUuz3ZL.js"),__vite__mapDeps([57,1])),meta:{e:`<p>使用 netlink 的 libnl 库：<a href="https://www.infradead.org/~tgr/libnl/" target="_blank" rel="noopener noreferrer">https://www.infradead.org/~tgr/libnl/</a></p>
`,r:{minutes:.03,words:9},t:"",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/pselect%E5%87%BD%E6%95%B0.html",{loader:()=>B(()=>import("./pselect函数.html-D_4l7Lcw.js"),__vite__mapDeps([58,1])),meta:{e:`<h2>pselect 函数详解</h2>
<p><a href="https://blog.csdn.net/code_peak/article/details/118657022" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/code_peak/article/details/118657022</a></p>
`,r:{minutes:.04,words:13},t:"pselect 函数详解",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/sysconf.html",{loader:()=>B(()=>import("./sysconf.html-Dbmd8AUg.js"),__vite__mapDeps([59,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p>sysconf 调用说明：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>  sysconf( _SC_PAGESIZE );  此宏查看缓存内存页面的大小；打印用%ld长整型。</span></span>
<span class="line"><span>  sysconf( _SC_PHYS_PAGES ) 此宏查看内存的总页数；打印用%ld长整型。</span></span>
<span class="line"><span>  sysconf( _SC_AVPHYS_PAGES ) 此宏查看可以利用的总页数；打印用%ld长整型。</span></span>
<span class="line"><span>  sysconf( _SC_NPROCESSORS_CONF ) 查看cpu的个数；打印用%ld长整。</span></span>
<span class="line"><span>  sysconf( _SC_NPROCESSORS_ONLN ) 查看在使用的cpu个数；打印用%ld长整。</span></span>
<span class="line"><span>  (long long)sysconf(_SC_PAGESIZE) * (long long)sysconf(_SC_PHYS_PAGES) 计算内存大小。</span></span>
<span class="line"><span>  sysconf( _SC_LOGIN_NAME_MAX ) 查看最大登录名长度；打印用%ld长整。</span></span>
<span class="line"><span>  sysconf( _SC_HOST_NAME_MAX ) 查看最大主机长度；打印用%ld长整。</span></span>
<span class="line"><span>  sysconf( _SC_OPEN_MAX )  每个进程运行时打开的文件数目；打印用%ld长整。</span></span>
<span class="line"><span>  sysconf(_SC_CLK_TCK) 查看每秒中跑过的运算速率；打印用%ld长整。</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span> 返回值：</span></span>
<span class="line"><span>     若成功则返回相应值；若出错则返回-1</span></span>
<span class="line"><span>     _SC_CLK_TCK的返回值是每秒钟的时钟滴答数，以用于times函数的返回值</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.81,words:242},t:"undefined",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/1.%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98.html",{loader:()=>B(()=>import("./1.多进程的死锁问题.html-CNBSXdAe.js"),__vite__mapDeps([60,1])),meta:{e:`<h2>多进程的死锁问题</h2>
<p>我曾经在编码开发时遇到过这样一个问题，代码中产生了死锁，可是我 review 了多次加锁、解锁的地方，却暂时没有发现有什么问题。最终发现是因为在代码中使用了 popen 系统调用，我把遇到的这个问题浓缩成如下的代码。</p>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF">pthread_mutex_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> mtx;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> my_fork</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> pid;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ((pid </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> fork</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"fork failed</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (pid </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"id </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> (child)</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">getpid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (;;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">            printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"child start lock</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">            pthread_mutex_lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">mtx);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">            sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">            printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"child run business magic</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">            pthread_mutex_unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">mtx);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">            printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"child end lock</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    pthread_mutex_init</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">mtx, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    pthread_mutex_lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">mtx);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    my_fork</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (;;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"id </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> (parent)</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">getpid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        pthread_mutex_unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">mtx);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"parent end lock</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"parent start lock</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        pthread_mutex_lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">mtx);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.49,words:1347},t:"1.多进程的死锁问题",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/2.%E6%8E%92%E6%9F%A5%E8%BF%9B%E7%A8%8B%E7%BB%88%E6%AD%A2%E7%9A%84%E5%8E%9F%E5%9B%A0.html",{loader:()=>B(()=>import("./2.排查进程终止的原因.html-dwZugBzW.js"),__vite__mapDeps([61,1])),meta:{d:1603653101e3,l:"2020年10月26日",g:["进程丢失"],e:`<p>最近线上遇到一个很抓狂的问题，线上跑的服务端进程突然没有了。虽然及时发现重启解决问题，但是必须要查查为什么进程没了。</p>
<h2>1. 进程终止的原因</h2>
<p>一共有 8 种方式让进程终止，其中有 5 种是正常终止</p>
<ol>
<li>从 main 函数返回</li>
<li>调用 exit</li>
<li>调用 _exit 或者 _Exit</li>
<li>最后一个线程从其启动例程返回</li>
<li>从最后一个线程调用 pthread_exit</li>
</ol>
<p>异常终止有 3 种</p>
<ol>
<li>调用 abort</li>
<li>接到一个信号</li>
<li>最后一个线程对取消请求作出响应</li>
</ol>`,r:{minutes:6.13,words:1840},t:"2.排查进程终止的原因",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/3.linux%E4%B8%8B%E6%AE%B5%E9%94%99%E8%AF%AF%E7%9A%84%E4%BA%A7%E7%94%9F%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95.html",{loader:()=>B(()=>import("./3.linux下段错误的产生原因及调试方法.html-CDx5ggju.js"),__vite__mapDeps([62,1])),meta:{d:1603645901e3,l:"2020年10月26日",g:["段错误 core"],e:`<p>linux下 c/c++ 编程最常见的就是错误就是段错误了，本文来分析一下段错误为什么产生？产生的原因以及如何处理。</p>
<h2>1. 段错误介绍</h2>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>A segmentation fault (often shortened to segfault) is a particular error condition that can occur during the operation of computer software. In short, a segmentation fault occurs when a program attempts to access a memory location that it is not allowed to access, or attempts to access a memory location in a way that is not allowed (e.g., attempts to write to a read-only location, or to overwrite part of the operating system). Systems based on processors like the Motorola 68000 tend to refer to these events as Address or Bus errors.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Segmentation is one approach to memory management and protection in the operating system. It has been superseded by paging for most purposes, but much of the terminology of segmentation is still used, "segmentation fault" being an example. Some operating systems still have segmentation at some logical level although paging is used as the main memory management policy.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>On Unix-like operating systems, a process that accesses invalid memory receives the SIGSEGV signal. On Microsoft Windows, a process that accesses invalid memory receives the STATUS_ACCESS_VIOLATION exception.</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:8.82,words:2647},t:"3.linux下段错误的产生原因及调试方法",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/4.load%E4%B8%8D%E5%88%B0%E5%85%B1%E4%BA%AB%E5%BA%93.html",{loader:()=>B(()=>import("./4.load不到共享库.html-BX0mnaz0.js"),__vite__mapDeps([63,1])),meta:{d:1615151501e3,l:"2021年3月8日",g:["load"],e:`<h2>load不到共享库</h2>
<h3>问题描述</h3>
<p>我在开发机上写好了代码，引用了jsoncpp库和curl库。新手直接将两个库放在了/usr/local/lib下，并且makefile写的是/usr/local/lib，使用的动态编译。然后将编译好的二进制文件打包到运维机器上，启动运行时，出现</p>
<p><code>lcw: error while loading shared libraries: libjson.so.0: cannot open shared object file: No such file or directory</code></p>
<h3>问题解决</h3>`,r:{minutes:2.22,words:666},t:"4.load不到共享库",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/Linux%E4%B9%8Bproc%E4%B8%8Bkcore%E6%96%87%E4%BB%B6%E8%A7%A3%E9%87%8A.html",{loader:()=>B(()=>import("./Linux之proc下kcore文件解释.html-DPajteJO.js"),__vite__mapDeps([64,1])),meta:{d:1603638684e3,l:"2020年10月25日",g:["linux"],e:`<p>当有一天，我看到 Linux 下 /proc/kcore 文件有 128T 的时候，直接惊呆。</p>
<p>找到原文去看了看。</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>/proc/kcore is like an "alias" for the memory in your computer. Its size is the same as the amount of RAM you have, and if you read it as a file, the kernel does memory reads.</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,r:{minutes:.65,words:196},t:"/proc/kcore文件解释",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/cc__%E9%94%99%E8%AF%AF%E4%B9%8B%20Undefined%20reference%20%E6%9C%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E9%97%AE%E9%A2%98.html",{loader:()=>B(()=>import("./cc__错误之 Undefined reference 未定义的问题.html-Ku6N_Joe.js"),__vite__mapDeps([65,1])),meta:{d:1602001157e3,l:"2020年10月7日",g:["c++链接"],e:`<h3>c/c++错误之 Undefined reference 未定义的问题</h3>
<p>首先看一看链接器的作用。在构建c++程序的时候，几乎所有的程序都由多个c++源文件组成。使用c++编译器分别编译这些文件，以生成包含机器代码的目标文件(.o 或者 .obj 文件)，每个目标文件对其他文件一无所知。所以，如果从另一个目标文件中存在的一个目标文件调用函数，则编译器将无法提供被调用函数的地址。</p>
<p>一旦生成了所有的目标文件，想要生成最终的可执行文件，那么链接器就会查看他们并计算出可执行文件中函数的最终地址是什么。然后他修补了编译器无法提供的地址。对于可能使用的任何库(.a 和 .lib 文件) ，他都执行相同的操作。最后，他将可执行文件写到磁盘。</p>`,r:{minutes:2.16,words:647},t:"c和c++链接未定义的问题",y:"a"}}],["/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1.%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%8F%E4%BA%8B%E5%8A%A1ACID%E7%89%B9%E6%80%A7.html",{loader:()=>B(()=>import("./1.分布式式事务ACID特性.html-gfp7ddHu.js"),__vite__mapDeps([66,1])),meta:{e:`<p>一般认为事务必需遵从 ACID 特性。</p>
<ul>
<li>原子性（<code>Atomicity</code>）：一个事务所包含的所有操作，要么全部完成，要么全部不完成，不会在中间某个环节结束。即使事务在执行过程中发生错误，也会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，即事务中的操作不可分隔。</li>
<li>一致性（<code>Consistency</code>）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。事务必需保证数据库可以从一个一致的状态转移到另一个一致的状态。这种一致性要求不仅指常见的数据库完整性约束（例如主键、外键、触发器等约束），还需要由用户来保证。比如：A像B转100块，A是工商，B是招商，分属两个数据库，用户需要保证两个数据库中A+B=100，两个数据库的数据需要是一致的。</li>
<li>隔离性（<code>Isolation</code>）：数据库允许多个并发事务同时对其数据进行读写和修改，隔离性可以防止在多个事务并发执行时，由于交叉执行而导致数据出现异常的情况。不同的隔离级别有着不同的保证。</li>
<li>持久性（<code>Durability</code>）：事务结束后，对数据的修改就是永久的，即便系统出现故障也不会丢失数据。即会将数据写入非易失性存储设备。</li>
</ul>`,r:{minutes:3.07,words:922},t:"1.分布式式事务ACID特性",y:"a"}}],["/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/2.%E5%8E%9F%E5%AD%90%E6%80%A7%E4%BF%9D%E8%AF%81-%E5%8E%9F%E5%AD%90%E6%8F%90%E4%BA%A4.html",{loader:()=>B(()=>import("./2.原子性保证-原子提交.html-BaIqQdUt.js"),__vite__mapDeps([67,1])),meta:{e:`<p>原子性：所有的操作要么都执行，要么都不执行。程序员可以安全的将一系列相关的、不可分隔的操作组合成一个整体，实现许多业务需求。</p>
<p>“原子提交” 是为了保证分布式事务的原子性的。</p>
<h3>一、难点</h3>
<p>原子性涉及了硬件和软件，两者都可能出现意外故障。</p>
<p>常见的机械磁盘一般可以保证 512 字节的原子写，也就是说，即使遭遇突然断电等意外情况，一般的机械磁盘也可以保证当前 512 字节的成功写入。如果写入的数据大于 512 字节，则原子写得不到保障。</p>
<h3>二、方法</h3>
<p>常见的方法是使用 日志 或 WAL 这类技术。即先将操作的元数据写入一个单独的日志文件，同时还有表示操作是否完成的标记。如果系统在写入过程中发生故障，那么基于这些数据，系统恢复后依然能够识别出哪些操作在故障发生前已完成，然后通过撤销所有的操作来回滚事务；或者通过完成剩余未执行的操作来继续提交事务。</p>`,r:{minutes:2.31,words:693},t:"2.原子性保证-原子提交",y:"a"}}],["/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/3.%E5%8E%9F%E5%AD%90%E6%80%A7%E4%BF%9D%E8%AF%81-%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4.html",{loader:()=>B(()=>import("./3.原子性保证-两阶段提交.html-C-xu1A5J.js"),__vite__mapDeps([68,1])),meta:{e:`<p>两阶段提交（<code>Two-Phase Commit</code>，2PC）由两个阶段组成。</p>
<p>基本思想：先检查每个节点上的状态是否能够满足事务正确性，再进行事务操作。</p>
<h3>一、算法流程</h3>
<p>包含两个角色：协调者（<code>Coordinator</code>）和参与者（<code>Participants</code>）。</p>
<p>协调者负责协调算法的各个阶段。参与者负责执行事务操作。如下两个阶段。</p>
<ol>
<li>
<p>第一阶段：投票阶段</p>
<ul>
<li>首先协调者向所有参与者并行发送准备消息，询问参与者是否可以提交事务，并等待参与者响应。</li>
<li>参与者检查执行事务所需条件和资源（如权限验证、上锁等），一切都准备好后参与者执行事务的所有操作，并记录操作日志。</li>
<li>参与者响应协调者发起的请求。如果参与者发现事务的所有操作都执行成功，则返回一条“是”消息；如果参与者发现 “所需条件和资源” 检查失败，或者事务操作执行失败，则返回一条 “否” 消息。</li>
</ul>
</li>
<li>
<p>第二阶段：提交阶段。<br>
协调者收到所有参与者上一阶段的响应，如果所有参与者都回复 “是”，那么：</p>
<ul>
<li>协调者向所有参与者发送 “提交” 消息，指示参与者提交本次事务，等待参与者响应。</li>
<li>参与者收到提交消息后，正式提交事务。完成事务提交操作后，清理占用的资源，比如释放锁等。并记录操作日志。</li>
<li>参与者中止事务后响应协调者，协调者收到所有参与者消息后，确认事务完成。</li>
</ul>
<p>只要有一个参与者回复了 “否”，那么：</p>
<ul>
<li>协调者向所有参与者发送中止消息，指示参与者中止本次事务，等待参与者响应</li>
<li>参与者收到中止消息后，利用其第一阶段记录的日志回滚所执行的事务操作，并清理占用的资源</li>
<li>中止后参与者响应协调者，协调者收到所有参与者消息后，确认事务中止</li>
</ul>
<p>也就是说，每个参与者都有一票否决权。只有全票通过，事务才能提交。</p>
</li>
</ol>`,r:{minutes:4.32,words:1295},t:"3.原子性保证-两阶段提交",y:"a"}}],["/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/4.%E5%8E%9F%E5%AD%90%E6%80%A7%E4%BF%9D%E8%AF%81-%E4%B8%89%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4.html",{loader:()=>B(()=>import("./4.原子性保证-三阶段提交.html-TG53Or5I.js"),__vite__mapDeps([69,1])),meta:{e:`<p>两阶段提交的一个瓶颈是：协调者一旦发生故障，会使整改系统进入阻塞状态。因此也称 “两阶段提交算法” 为 “阻塞提交算法”。</p>
<p>解决思路是：在协调者失效后，能选出某个参与者来充当协调者。则需要让参与者拿到更多的信息。</p>
<p>三阶段提交的思路：既然参与者不知道第一阶段的投票结果，那么就在两阶段提交的第一阶段和第二阶段之间插入一个预提交阶段。在预提交阶段，协调者将第一阶段的投票结果发送给所有参与者。这样，如果在提交阶段协调者和收到消息的参与者发生了故障，则可以从剩下的参与者中选出一个来充当协调者。新的协调者可以根据预提交阶段的信息，判断是应该执行提交还是中止事务，从而继续安全的推进事务。</p>`,r:{minutes:4.13,words:1239},t:"4.原子性保证-三阶段提交",y:"a"}}],["/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/1.paxos%E7%AE%97%E6%B3%95.html",{loader:()=>B(()=>import("./1.paxos算法.html-Du9acljT.js"),__vite__mapDeps([70,1])),meta:{e:`<h3>一、算法流程</h3>
<p>paxos 算法将分布式系统中的节点分为几种角色：</p>
<ul>
<li>客户端：向分布式系统发送请求，并等待响应</li>
<li>提议者：提议者收到客户端的请求，提出相关的提案，试图让接受者接受该提案，并在发生冲突时进行协调，推动算法运行</li>
<li>接受者：也叫投票者，即投票接受或拒绝提议者的提案，若超过半数的接受者接受提案，则该提案被批准</li>
<li>学习者：学习者只能学习被批准的提案，不参与决议提案。一旦客户端的请求得到接受者的同意，学习者就可以学习到提案值，执行其中的请求操作并向客户端发送响应。增加多个学习者可以提高系统的可用性。</li>
</ul>`,r:{minutes:5.61,words:1684},t:"1.paxos算法",y:"a"}}],["/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/2.raft%E7%AE%97%E6%B3%95.html",{loader:()=>B(()=>import("./2.raft算法.html-DN3lLpah.js"),__vite__mapDeps([71,1])),meta:{e:`<p>raft 算法所运行的系统模型是：</p>
<ul>
<li>服务器可能宕机、停止运行，过段时间再恢复，但不存在非拜占庭故障，即节点的行为是非恶意的，不会篡改数据。</li>
<li>消息可能丢失、延迟、乱序或重复；可能有网络分区，并在一段时间之后恢复</li>
</ul>
<p>raft 算法和 multi-paxos 算法一样是基于领导者的共识算法。raft 算法中的服务器在任意时间只能处于以下三种状态之一：</p>
<ul>
<li>领导者：领导者负责处理所有客户端请求和日志复制。同一时刻最多只能有一个正常工作的领导者</li>
<li>跟随者：跟随者完全被动的处理请求，即跟随者不主动发送 RPC 请求，只响应收到的 RPC 请求，服务器在大多数情况下处于此状态</li>
<li>候选者：候选者用来选举出新的领导者，候选者是处于领导者和跟随者之间的暂时状态</li>
</ul>`,r:{minutes:5.63,words:1689},t:"2.raft算法",y:"a"}}],["/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%9E%8B/1.%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B.html",{loader:()=>B(()=>import("./1.分布式系统模型.html-DFlBunoj.js"),__vite__mapDeps([72,1])),meta:{e:`<h3>一、分布式系统存在的意义</h3>
<ol>
<li>高性能：计算机硬件无法突破物理限制，随着芯片工艺的逼近极限，摩尔定律已失效。并且多核CPU依然存在物理限制，而且成本会急剧上升。分布式系统可以实现对高性能的需求。</li>
<li>可扩展性：对于数据密集型的应用，单台计算机的容量有限，分布式存储系统可以良好的进行扩展。</li>
<li>高可用性：几乎所有的在线服务都需要不间断的运行。单机无法处理各种硬件故障、人为因素或意外情况等。分布式系统可以冗余多份数据保证数据可用性；或者通过冗余计算实现服务切换，及时进行故障切换。</li>
<li>必要性：有一些场景构建分布式系统是必然的。比如银行系统支持从北京的银行转账到纽约的银行，这时就需要一种方法来保证转账的一致性。</li>
</ol>`,r:{minutes:6.08,words:1825},t:"1.分布式系统模型",y:"a"}}],["/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%9E%8B/2.%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F.html",{loader:()=>B(()=>import("./2.数据的分布式.html-ho4Mzoam.js"),__vite__mapDeps([73,1])),meta:{e:`<p>存储数据的数据库也需要分布式，从而增加数据库的可用性、可扩展性、高性能等。</p>
<p>数据的分布式最常见的两种技术，就是数据分区和数据复制</p>
<h2>一、数据分区</h2>
<p>分区是指将一个数据集拆分为多个较小的数据集，同时将存储和处理这些较小数据集的责任分配给分布式系统中的不同节点。这样，我们可以通过向系统中增加更多节点来增加系统可以存储和处理的数据规模。分区增加了数据的可管理性、可用性和可扩展性。</p>
<p>分区分为<strong>垂直分区</strong>、<strong>水平分区</strong>。这两种分区方式也是来源于关系型数据库。</p>
<ul>
<li>垂直分区：对表的列进行拆分，将某些列的整列数据拆分到特定的分区，并放入不同的表中。垂直分区减小了表的宽度。例如：可以将不经常使用的列或者包含了大 text 类型或大 blob 类型的列垂直分区，确保数据完整性的同时提高访问性能。比如列式数据库就可以看作是垂直分区的数据库。</li>
<li>水平分区：对表的行进行拆分，将不同的行放入不同的表中。</li>
</ul>`,r:{minutes:12.31,words:3692},t:"2.数据的分布式",y:"a"}}],["/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%9E%8B/3.CAP%E5%AE%9A%E7%90%86.html",{loader:()=>B(()=>import("./3.CAP定理.html-CqdFDLnB.js"),__vite__mapDeps([74,1])),meta:{e:`<p>CAP定理指出在一个异步的网络环境中，对于一个分布式读写存储系统来说，只能满足以下三项中的两项，而不可能满足全部三项。</p>
<ul>
<li>一致性（<code>Consistency</code>）：客户端访问所有节点，返回的都是同一份最新的数据。线性一致性，读操作会返回最近一次写操作的结果。</li>
<li>可用性（<code>Availability</code>）：每次请求都能获取非错误的响应，但不保证获取的数据是最新数据。</li>
<li>分区容错性（<code>Partition Tolerance</code>）：节点之间由于网络分区而导致消息丢失的情况下，系统仍能继续正常运行。</li>
</ul>`,r:{minutes:2.06,words:618},t:"3.CAP定理",y:"a"}}],["/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%9E%8B/4.%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B.html",{loader:()=>B(()=>import("./4.一致性模型.html-CMA5PBCc.js"),__vite__mapDeps([75,1])),meta:{e:`<p>一致性模型是指：在并发编程中，系统和开发者之间的一种约定，如果开发者遵循某些规则，那么开发者执行读操作或写操作的结果是可预测的。其中，可预测保证了程序逻辑的确定性。</p>
<h3>一、线性一致性</h3>
<p>也称为强一致性、原子一致性、</p>
<p>线性一致性的定义有两种：</p>
<p>非严格定义：分布式系统的所有操作看起来都是<strong>原子的</strong>，整个分布式系统<strong>看起来好像只有一个节点</strong>。</p>
<p>严格定义：给定一个执行历史，执行历史根据并发操作可以扩展为多个顺序历史，只要从中找到一个合法的顺序历史，那么该执行历史就是线性一致性的。</p>`,r:{minutes:1.44,words:431},t:"4.分布式系统的一致性模型",y:"a"}}],["/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1.%E6%B5%85%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html",{loader:()=>B(()=>import("./1.浅谈分布式锁.html-B25xiwVs.js"),__vite__mapDeps([76,1])),meta:{e:`<h2>一、背景</h2>
<p>锁是操作系统的原语，是为了确保在多个 CPU、多个线程的环境中，在某一个时间点，只有一个线程可以进入临界区，从而保证在临界区操作数据的一致性。</p>
<p>对于分布式场景，我们希望多个实例在某个时间点可以同步，只能有一个实例运行。</p>
<p>可以看出来，锁的定义本质上没有任何的改变。只不过锁控制的对象从一个进程内部的多个线程，变成了分布式场景下的多个进程；同时，临界区的资源也从进程内多个线程共享的资源，变成了分布式系统内部共享的中心存储上的资源。</p>
<p>实际上，不管什么锁，都是借助一种资源，而锁控制的对象都可以访问这种资源。从而使并发的各种对象在某个时间点可以同步起来。</p>`,r:{minutes:48.09,words:14428},t:"1.浅谈分布式锁",y:"a"}}],["/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/2.%E5%9F%BA%E4%BA%8Eredis%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0.html",{loader:()=>B(()=>import("./2.基于redis的分布式锁的实现.html-CZ0vRSV7.js"),__vite__mapDeps([77,1])),meta:{e:`<h2>一、简述</h2>
<p>分布式锁是什么？<a href="https://zhuanlan.zhihu.com/p/684454817" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/684454817</a></p>
<p>我们之前谈到分布式服务需要在 “正确性”、“高可用”、“高性能” 这三点之间做权衡。其中正确性是最为重要的。因为分布式服务会存在 “部分失败” 和 “异步网络” 问题，所以没有办法保证 100% 的正确性。所以对于需要 100% 正确性的场景，应该避免使用分布式锁。分布式锁的定位是：可以容忍非常小概率互斥语义失效场景下的锁服务。</p>`,r:{minutes:16.5,words:4951},t:"2.基于redis的分布式锁实现",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/1.%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%92%8C%E6%94%B6%E5%8F%91%E7%BD%91%E7%BB%9C%E5%8C%85%E6%B5%81%E7%A8%8B.html",{loader:()=>B(()=>import("./1.网络模型和收发网络包流程.html-BSaZqcPp.js"),__vite__mapDeps([78,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>一、网络模型</h2>
<p>开放式系统互联通信参考模型（Open System Interconnection Reference Model），简称为 OSI 网络模型。</p>
<ul>
<li>应用层，负责为应用程序提供统一的接口。</li>
<li>表示层，负责把数据转换成兼容接收系统的格式。</li>
<li>会话层，负责维护计算机之间的通信连接。</li>
<li>传输层，负责为数据加上传输表头，形成数据包。</li>
<li>网络层，负责数据的路由和转发。</li>
<li>数据链路层，负责 MAC 寻址、错误侦测和改错。</li>
<li>物理层，负责在物理网络中传输数据帧。</li>
</ul>`,r:{minutes:4.63,words:1388},t:"1.网络模型和收发网络包流程",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/2.C10K%E5%92%8CC000K%E5%92%8CC10M%E9%97%AE%E9%A2%98.html",{loader:()=>B(()=>import("./2.C10K和C000K和C10M问题.html-COBiel69.js"),__vite__mapDeps([79,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>一、C10K问题</h2>
<p>C10K 和 C1000K 的首字母 C 是 Client 的缩写。C10K 就是单机同时处理 1 万个请求（并发连接 1 万）的问题，而 C1000K 就是单机支持处理 100 万个请求（并发连接 100 万）的问题</p>
<p>对于 C10K 问题，从资源上来说，对 2GB 内存和千兆网卡的服务器来说，同时处理 1w 个请求，只要每个请求处理占用不到 200KB（2GB/1w）的内存和 100Kbit（1000Mbit/1w）的网络带宽就可以。因此物理资源是足够的，接下来就是软件问题，特别是网络的 IO 模型</p>
<p>如何解决：</p>
<p>IO 模型优化</p>`,r:{minutes:5.18,words:1553},t:"2.C10K和C000K和C10M问题",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/3.DNS%E8%AE%A4%E8%AF%86.html",{loader:()=>B(()=>import("./3.DNS认识.html-g9jtmSAS.js"),__vite__mapDeps([80,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>一、域名和 DNS 解析</h2>
<p>域名的规则：<code>time.geekbang.org</code> 在这个域名中，最后面的 <code>org</code> 是顶级域名，中间的 <code>geekbang</code> 是二级域名，最左边的 <code>time</code> 则是三级域名。</p>

<ul>
<li>点（<code>.</code>） 是所有域名的根，也就是所有域名都以点作为后缀。在域名解析过程中，所有域名都以点结束</li>
</ul>
<p>域名解析服务（DNS），对应的服务器就是域名服务器，网络协议则是 DNS 协议。DNS 协议在 TCP/IP 栈中属于应用层，传输基于 UDP 和 TCP（UDP居多），并且域名服务器一般监听在端口 53 上</p>`,r:{minutes:4.57,words:1370},t:"3.DNS认识",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/DDos%E6%94%BB%E5%87%BB.html",{loader:()=>B(()=>import("./DDos攻击.html-C8UK9i8l.js"),__vite__mapDeps([81,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>DDoS 攻击</h2>
<p>DDoS 的前身是 DoS（Denail of Service），即拒绝服务攻击，指利用大量的合理请求，来占用过多的目标资源，从而使目标服务无法响应正常请求。</p>
<p>DDoS（Distributed Denial of Service） 则是在 DoS 的基础上，采用了分布式架构，利用多台主机同时攻击目标主机。这样，即使目标服务部署了网络防御设备，面对大量网络请求时，还是无力应对。</p>
<p>从攻击的原理来看，DDos 攻击可以分为下面几种类型：</p>
<ul>
<li>耗尽带宽。无论是服务器还是路由器、交换机等网络设备，带宽都有固定的上限。带宽耗尽后，就会发生网络拥堵，从而无法传输其他正常的网络报文</li>
<li>耗尽操作系统的资源。网络服务的正常运行，都需要一定的系统资源，像是 CPU、内存等物理资源，以及连接表等软件资源。一旦资源耗尽，系统就不能处理其他正常的网络连接。</li>
<li>消耗应用程序的运行资源。应用程序的运行，通常还需要跟其他的资源或系统交互。如果应用程序一直忙于处理无效请求，也会导致正常请求的处理变慢，甚至得不到响应。</li>
</ul>`,r:{minutes:1.18,words:353},t:"undefined",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%82%B9.html",{loader:()=>B(()=>import("./计算机网络知识点.html-BEhogowd.js"),__vite__mapDeps([82,1])),meta:{e:`<h2>计算机网络模型：</h2>
<p>TCP/IP 与 OSI 都是为了使网络中的两台计算机能够互相连接并实现通信与回应，但他们最大的不同在于，OSI 是一个理论上的网络通信模型，而 TCP/IP 则是实际上的网络通信标准。</p>
<h3>一、OSI七层模型：</h3>
<ol>
<li>
<p>物理层：实现计算机节点之间比特流的透明传输，规定传输媒体接口的标准，屏蔽掉具体传输介质和物理设备的差异，使数据链路层不必关心网络的具体传输介质，按照物理层规定的标准传输数据就行</p>
</li>
<li>
<p>数据链路层：通过差错控制、流量控制等方法，使有差错的物理线路变为无差错的数据链路。</p>
<ul>
<li>数据链路层的几个基本方法：数据封装成桢、透明传输、差错控制、流量控制。<br>
封装成桢：把网络层数据报加头和尾，封装成帧，帧头中包括源MAC地址和目的MAC地址。<br>
透明传输：零比特填充、转义字符。<br>
差错控制：接收者检测错误,如果发现差错，丢弃该帧，差错控制方法有 CRC 循环冗余码<br>
流量控制：控制发送的传输速度，使得接收方来得及接收。传输层TCP也有流量控制功能，但TCP是端到端的流量控制，链路层是点到点（比如一个路由器到下一个路由器）</li>
</ul>
</li>
<li>
<p>网络层：实现网络地址与物理地址的转换，并通过路由选择算法为分组通过通信子网选择最适当的路径</p>
<ul>
<li>网络层最重要的一个功能就是：路由选择。路由一般包括路由表和路由算法两个方面。每个路由器都必须建立和维护自身的路由表，一种是静态维护，也就是人工设置，适用于小型网络；另一种就是动态维护，是在运行过程中根据网络情况自动地动态维护路由表。</li>
</ul>
</li>
<li>
<p>传输层：提供源端与目的端之间提供可靠的透明数据传输，传输层协议为不同主机上运行的进程提供逻辑通信。</p>
<ul>
<li>网络层协议负责的是提供主机间的逻辑通信；</li>
<li>传输层协议负责的是提供进程间的逻辑通信。</li>
</ul>
</li>
<li>
<p>会话层：是用户应用程序和网络之间的接口，负责在网络中的两节点之间建立、维持、终止通信。</p>
</li>
<li>
<p>表示层：处理用户数据的表示问题，如数据的编码、格式转换、加密和解密、压缩和解压缩。</p>
</li>
<li>
<p>应用层：为用户的应用进程提供网络通信服务，完成和实现用户请求的各种服务。</p>
</li>
</ol>`,r:{minutes:7.17,words:2151},t:"计算机网络",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E7%BC%93%E5%AD%98/1.%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E7%9A%84%E6%96%B9%E5%BC%8F.html",{loader:()=>B(()=>import("./1.缓存更新的方式.html-XE-gIc8O.js"),__vite__mapDeps([83,1])),meta:{e:`<h2>缓存</h2>
<h3>错误的做法</h3>
<p>做法：更新数据时，先删除缓存，然后再更新数据库。查询操作时，发现缓存中没有数据然后会从数据库中更新到缓存中。错误的逻辑。</p>
<p>场景：两个并发操作，一个是更新操作，另一个是查询操作。更新操作删除缓存后，查询操作没有命中缓存，则把老数据读出来后放到了缓存。更新操作更新了数据库。于是，在缓存中的数据还是老的数据，导致缓存中的数据是脏的，而且一直是脏的</p>
<p>更新缓存的 Design Pattern 有四种：Cache aside，Read through，Write through，Write behind caching。</p>`,r:{minutes:6.36,words:1909},t:"1.缓存更新的方式",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E7%BC%93%E5%AD%98/2.%E7%BC%93%E5%AD%98%E4%B8%8E%E9%98%9F%E5%88%97.html",{loader:()=>B(()=>import("./2.缓存与队列.html-tvNP3ySr.js"),__vite__mapDeps([84,1])),meta:{e:`<p>缓存技术的底层原理：“空间换时间”、“内存比磁盘快”</p>
<p>我们多使用一些内存空间，提升系统的响应速度。另外，由于内存必然比磁盘的读写速度快、读写延迟低，所以我们只要把热门数据和计算结果存储在内存中，就可以提高数据的读取速度，进而提升系统总体性能。</p>
<h3>一、缓存更新策略</h3>
<p>最原始的缓存架构，如下图</p>

<p>如上的缓存架构会有几点问题。</p>
<h4>1. 缓存击穿问题</h4>
<p>比如在秒杀活动中，热点数据的缓存失效的话，瞬间会有多个请求发现读取不到缓存内容，就会直接从数据库读取，进而数据库被瞬间高压击垮。这个过程就是缓存击穿。</p>
<p>解决方案：</p>`,r:{minutes:17.22,words:5165},t:"2.缓存与队列",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/1.%E8%A1%A1%E9%87%8F%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%E5%92%8C%E5%B7%A5%E5%85%B7.html",{loader:()=>B(()=>import("./1.衡量网络性能指标和工具.html-OWPhZlN4.js"),__vite__mapDeps([85,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>一、网络的性能指标</h2>
<ul>
<li>带宽：表示链路的最大传输速率，单位通常为 b/s（比特/秒）</li>
<li>吞吐量：表示单位时间内成功传输的数据量，单位通常为 b/s（比特/秒）或者 B/s（字节/秒）。吞吐量受带宽限制，而吞吐量/带宽，就是该网络的使用率</li>
<li>延时：表示从网络请求发出后，一直到收到远端响应，所需要的时间延迟。在不同场景中，这一指标可能会有不同含义。比如，他可以表示，建立连接需要的时间（比如 TCP 握手延时），或一个数据包往返所需的时间（比如 RTT）</li>
<li>PPS：（Packet Per Second（包/秒）），表示以网络包为单位的传输速率。PPS 通常用来评估网络的转发能力，比如硬件交换机，通常可以达到线性转发（即 PPS 可以达到或者接近理论最大值）。而基于 Linux 服务器的转发，则容易受网络包大小的影响</li>
</ul>`,r:{minutes:6.03,words:1809},t:"1.衡量网络性能指标和工具",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/2.iptables%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3.html",{loader:()=>B(()=>import("./2.iptables命令详解.html-wQ-fIvkP.js"),__vite__mapDeps([86,1])),meta:{d:1584220284e3,l:"2020年3月15日",g:["iptables"],e:`<h2>iptables 命令原理使用详解</h2>
<p>iptables的主要功能是实现对网络数据包进出设备及转发的控制。当数据包需要进入设备、从设备中流出或者经该设备转发、路由时，都可以使用iptables进行控制。</p>
<h3>iptables名词和术语</h3>
<ul>
<li>容器：用来形容包含或者属于的关系</li>
<li>iptables是表的容器，iptables包含多个表</li>
<li>表(tables)又是链(chains)的容器</li>
<li>链(INPUT,OUTPUT,FORWARD,PREROUTING,POSTROUTING)是规则的容器</li>
<li>规则(Policy)就是一条条过滤的语句</li>
</ul>`,r:{minutes:10.07,words:3022},t:"2.iptables命令详解",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/3.%E8%AF%84%E4%BC%B0%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD.html",{loader:()=>B(()=>import("./3.评估系统的网络性能.html-Dw1YPdT2.js"),__vite__mapDeps([87,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>评估系统的网络性能</h2>
<p>对于各协议层的性能进行测试</p>
<h3>一、转发性能</h3>
<p>网络接口层和网络层，他们主要负责网络包的封装、寻址、路由以及发送和接收。在这两个网络协议层中，每秒可处理的网络包数 PPS，就是最重要的性能指标。特别是 64B 小包的处理能力。</p>
<p>测试网络包的处理能力，使用 pktgen 。详情：<a href="https://time.geekbang.org/column/article/81497" target="_blank" rel="noopener noreferrer">https://time.geekbang.org/column/article/81497</a></p>`,r:{minutes:2.93,words:878},t:"3.评估系统的网络性能",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/%E6%9C%AA%E6%80%BB%E7%BB%93---%E4%BD%BF%E7%94%A8wireshark%E6%8A%93%E5%8F%96TLS%E5%8C%85.html",{loader:()=>B(()=>import("./未总结---使用wireshark抓取TLS包.html-nLsRxZqf.js"),__vite__mapDeps([88,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p>如何用 wireshark 抓包 TLS 封包<br>
<a href="https://segmentfault.com/a/1190000018746027" target="_blank" rel="noopener noreferrer">https://segmentfault.com/a/1190000018746027</a></p>
<p>PCAP 报文中图片视频的自动化还原方法<br>
村中少年<br>
<a href="https://gitbook.cn/books/5b1ce272ee7ef56301f735bf/index.html" target="_blank" rel="noopener noreferrer">https://gitbook.cn/books/5b1ce272ee7ef56301f735bf/index.html</a></p>`,r:{minutes:.45,words:136},t:"undefined",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/%E7%BD%91%E7%BB%9C%E4%B8%A2%E5%8C%85%E6%80%BB%E7%BB%93.html",{loader:()=>B(()=>import("./网络丢包总结.html-CPKq4XlA.js"),__vite__mapDeps([89,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p>网络丢包：<a href="http://km.oa.com/articles/show/416051?kmref=search&amp;from_page=1&amp;no=1" target="_blank" rel="noopener noreferrer">http://km.oa.com/articles/show/416051?kmref=search&amp;from_page=1&amp;no=1</a></p>
`,r:{minutes:.08,words:23},t:"undefined",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.boot-loader/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%90%AF%E5%8A%A8.html",{loader:()=>B(()=>import("./1.计算机的启动.html-BMpOxBcc.js"),__vite__mapDeps([90,1])),meta:{e:`<h2>计算机的启动</h2>
<p>在开机的一瞬间，也就是接电的一瞬间，CPU 的 <code>cs:ip</code> 寄存器被强制初始化为 <code>OxF000:0xFFF0</code>。由于开机的时候处于实模式，在实模式下的段基址要乘以 16，也就是左移 4 位，于是 <code>0xF000:0xFFF0</code> 的等效地址将是 <code>0xFFFF0</code>。这个地址就是 BIOS 的入口地址。</p>
<h3>一、BIOS</h3>
<p>BIOS 的全称 <code>Base Input &amp; Output System</code>，即基本输入输出系统。</p>`,r:{minutes:3.79,words:1137},t:"1.计算机的启动",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.boot-loader/2.%E5%86%99%E4%B8%80%E4%B8%AAMBR%E7%A8%8B%E5%BA%8F.html",{loader:()=>B(()=>import("./2.写一个MBR程序.html-M4-uDCFA.js"),__vite__mapDeps([91,1])),meta:{e:`<h2>写一个 MBR 程序</h2>
<p>我们先来贴出程序，然后再来解释。如下这段代码的功能是在屏幕上打印字符串 "1 MBR"。背景色为黑色，前景色为绿色。</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>;主引导程序 </span></span>
<span class="line"><span>;------------------------------------------------------------</span></span>
<span class="line"><span>SECTION MBR vstart=0x7c00         </span></span>
<span class="line"><span>   mov ax,cs      </span></span>
<span class="line"><span>   mov ds,ax</span></span>
<span class="line"><span>   mov es,ax</span></span>
<span class="line"><span>   mov ss,ax</span></span>
<span class="line"><span>   mov fs,ax</span></span>
<span class="line"><span>   mov sp,0x7c00</span></span>
<span class="line"><span></span></span>
<span class="line"><span>; 清屏 利用0x06号功能，上卷全部行，则可清屏。</span></span>
<span class="line"><span>; -----------------------------------------------------------</span></span>
<span class="line"><span>;INT 0x10   功能号:0x06	   功能描述:上卷窗口</span></span>
<span class="line"><span>;------------------------------------------------------</span></span>
<span class="line"><span>;输入：</span></span>
<span class="line"><span>;AH 功能号= 0x06</span></span>
<span class="line"><span>;AL = 上卷的行数(如果为0,表示全部)</span></span>
<span class="line"><span>;BH = 上卷行属性</span></span>
<span class="line"><span>;(CL,CH) = 窗口左上角的(X,Y)位置</span></span>
<span class="line"><span>;(DL,DH) = 窗口右下角的(X,Y)位置</span></span>
<span class="line"><span>;无返回值：</span></span>
<span class="line"><span>   mov     ax, 0x600</span></span>
<span class="line"><span>   mov     bx, 0x700</span></span>
<span class="line"><span>   mov     cx, 0           ; 左上角: (0, 0)</span></span>
<span class="line"><span>   mov     dx, 0x184f	   ; 右下角: (80,25),</span></span>
<span class="line"><span>			   ; VGA文本模式中,一行只能容纳80个字符,共25行。</span></span>
<span class="line"><span>			   ; 下标从0开始,所以0x18=24,0x4f=79</span></span>
<span class="line"><span>   int     0x10            ; int 0x10</span></span>
<span class="line"><span></span></span>
<span class="line"><span>;;;;;;;;;    下面这三行代码是获取光标位置    ;;;;;;;;;</span></span>
<span class="line"><span>;.get_cursor获取当前光标位置,在光标位置处打印字符.</span></span>
<span class="line"><span>   mov ah, 3		; 输入: 3号子功能是获取光标位置,需要存入ah寄存器</span></span>
<span class="line"><span>   mov bh, 0		; bh寄存器存储的是待获取光标的页号</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   int 0x10		; 输出: ch=光标开始行,cl=光标结束行</span></span>
<span class="line"><span>							; dh=光标所在行号,dl=光标所在列号</span></span>
<span class="line"><span></span></span>
<span class="line"><span>;;;;;;;;;    获取光标位置结束    ;;;;;;;;;;;;;;;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>;;;;;;;;;     打印字符串    ;;;;;;;;;;;</span></span>
<span class="line"><span>   ;还是用10h中断,不过这次是调用13号子功能打印字符串</span></span>
<span class="line"><span>   mov ax, message </span></span>
<span class="line"><span>   mov bp, ax		; es:bp 为串首地址, es此时同cs一致，</span></span>
<span class="line"><span>								; 开头时已经为sreg初始化</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   ; 光标位置要用到dx寄存器中内容,cx中的光标位置可忽略</span></span>
<span class="line"><span>   mov cx, 5			; cx 为串长度,不包括结束符0的字符个数</span></span>
<span class="line"><span>   mov ax, 0x1301	; 子功能号13是显示字符及属性,要存入ah寄存器,</span></span>
<span class="line"><span>									; al设置写字符方式 ah=01: 显示字符串,光标跟随移动</span></span>
<span class="line"><span>   mov bx, 0x2		; bh存储要显示的页号,此处是第0页,</span></span>
<span class="line"><span>									; bl中是字符属性, 属性黑底绿字(bl = 02h)</span></span>
<span class="line"><span>   int 0x10				; 执行BIOS 0x10 号中断</span></span>
<span class="line"><span>;;;;;;;;;      打字字符串结束	 ;;;;;;;;;;;;;;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   jmp $		; 使程序悬停在此</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   message db "1 MBR"</span></span>
<span class="line"><span>   times 510-($-$$) db 0</span></span>
<span class="line"><span>   db 0x55,0xaa</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.29,words:1288},t:"2.写一个 MBR 程序",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.boot-loader/3.%E5%8A%A0%E8%BD%BD%E5%86%85%E6%A0%B8.html",{loader:()=>B(()=>import("./3.加载内核.html-BexbVpm_.js"),__vite__mapDeps([92,1])),meta:{e:`<h2>加载内核</h2>
<p>程序猿实现的一段代码，比如下：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int main(void) { while(1); }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,r:{minutes:2.23,words:670},t:"9.加载内核",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.boot-loader/4.Linux%E4%BB%8E%E5%BC%80%E6%9C%BA%E5%8A%A0%E7%94%B5%E5%88%B0%E6%89%A7%E8%A1%8Cmain%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%87%E7%A8%8B.html",{loader:()=>B(()=>import("./4.Linux从开机加电到执行main函数的过程.html-mde-WH8l.js"),__vite__mapDeps([93,1])),meta:{e:`<p>从开机到 main 函数的执行分三步完成，其目的是实现从启动盘加载操作系统程序，完成执行 main 函数所需要的准备工作。</p>
<p>第一步，启动 BIOS，准备实模式下的中断向量表和中断服务程序</p>
<p>第二步，从启动盘加载操作系统程序到内存，加载操作系统程序的工作就是利用第一步中准备的中断服务程序实现的</p>
<p>第三步，为执行 32 位的 main 函数做过渡工作</p>
<h3>一、启动 BIOS</h3>
<p>Intel 将所有 80x86 系列的 CPU 的硬件都设计为加电即进入 16 位实模式状态运行。同时，将 CPU 硬件逻辑设计为加电瞬间强行将 CS 的值置为 <code>0xFFFF</code>，IP 的值置为 <code>0x0000</code>。这样 <code>CS:IP</code> 就指向 <code>0xFFFF0</code> 这个地址位置。</p>`,r:{minutes:6.07,words:1822},t:"Linux从开机加电到执行 main 函数之前的过程",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98/1.%E8%8E%B7%E5%8F%96%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E5%AE%B9%E9%87%8F.html",{loader:()=>B(()=>import("./1.获取物理内存容量.html-Bd6CXxqQ.js"),__vite__mapDeps([94,1])),meta:{e:`<h2>获取物理内存容量</h2>
<p>linux 中获取物理内存容量是通过 BIOS 中断 0x15 实现，分别是 BIOS 中断 0x15 的 3 个子功能，子功能号要存放到寄存器 EAX 或 AX 中。如下：</p>
<ul>
<li><code>EAX=0xE820</code> ：遍历主机上全部内存</li>
<li><code>AX=0xE801</code>：分别检测低 15MB 和 16MB - 4GB 的内存，最大支持 4GB</li>
<li><code>AH=0x88</code>：最多检测出 64MB 内存，实际内存超过此容量也按照 64MB 返回</li>
</ul>`,r:{minutes:3.65,words:1096},t:"7.获取物理内存容量",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98/2.%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6.html",{loader:()=>B(()=>import("./2.内存分页机制.html-OY1xBHlL.js"),__vite__mapDeps([95,96,1])),meta:{e:`<h2>内存分页机制</h2>
<h3>一、段的换入换出</h3>
<p>在保护模式下，CPU 引用一个段时，都要先查看段描述符。很多时候，段描述符存在于描述符表（GDT 或 LDT），但与此对应的段并不在内存中，也就是说，CPU 允许在描述符中已注册的段不在内存中存在。这就是它提供给软件使用的策略，我们利用它实现段式内存管理。</p>
<figure><figcaption></figcaption></figure>
<ul>
<li>如果该描述符中的 P 位为 1，表示该段在内存中存在。访问过该段后，CPU 将段描述符中的 type 中的 A 位置 1。表示近来刚访问过该段。</li>
<li>相反，如果 P 位为 0，说明内存中并不存在该段，这时候 CPU 抛出个 NP（段不存在）异常，转而去执行中断描述符表中 NP 异常对应的中断处理程序，此中断处理程序是操作系统负责提供的，该程序的工作是将相应的段从外存（比如硬盘）中载入到内存，并将段描述符的 P 位置 1，中断处理函数结束后返回，CPU 重复执行这个检查，继续查看该段描述符的 P 位，此时已经为 1 了，再检查通过后，将段描述符的 A 位置 1</li>
</ul>`,r:{minutes:12.36,words:3709},t:"8.内存分页机制",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98/3.%E5%AE%9E%E7%8E%B0%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5.html",{loader:()=>B(()=>import("./3.实现内存分页.html-De9uZ91x.js"),__vite__mapDeps([97,1])),meta:{e:`<p>为了计算机安全，用户进程必须运行在低特权级，当用户进程需要访问硬件相关的资源时，需要向操作系统申请，由操作系统去做，之后将结果返回给用户进程。进程可以有无限多个，而操作系统只有一个，所以操作系统必须共享给所有用户进程。</p>
<p>也就是，用户的代码加上所需要的操作系统中的部分代码才算完整的程序。</p>
<p>用户进程要共享操作系统，如何共享呢？只要操作系统属于用户进程的虚拟地址空间即可。</p>
<p>我们学习 Linux 操作系统，在用户进程 4GB 虚拟地址空间中。<code>3GB-4GB</code> 划分给操作系统；<code>0-3GB</code> 是用户进程自己的虚拟空间。因此，为了实现操作系统，让所有用户进程的 <code>3GB-4GB</code> 的虚拟地址空间都指向同一个操作系统，指向同一片物理页地址，这片物理页地址是操作系统的实体代码。</p>`,r:{minutes:7.53,words:2258},t:"实现内存分页",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98/4.%E7%94%A8%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E8%AE%BF%E9%97%AE%E9%A1%B5%E8%A1%A8.html",{loader:()=>B(()=>import("./4.用虚拟地址访问页表.html-GAb58BXG.js"),__vite__mapDeps([98,1])),meta:{e:`<p>虚拟地址和物理地址是乱序映射的。</p>
<h3>一、查看分页的结果</h3>
<p>在开启分页后，我们可以使用 <code>info tab</code> 命令看到页表中虚拟地址到物理地址的映射关系。</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>cr3: 0x000000100000</span></span>
<span class="line"><span>0x00000000-0x000fffff -&gt; 0x000000000000-0x0000000fffff</span></span>
<span class="line"><span>0xc0000000-0xc00fffff -&gt; 0x000000000000-0x0000000fffff</span></span>
<span class="line"><span>0xffc00000-0xffc00fff -&gt; 0x000000101000-0x000000101fff</span></span>
<span class="line"><span>0xfff00000-0xffffefff -&gt; 0x000000101000-0x0000001fffff</span></span>
<span class="line"><span>0xfffff000-0xffffffff -&gt; 0x000000100000-0x000000100fff</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.03,words:1208},t:"用虚拟地址访问页表",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98/5.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html",{loader:()=>B(()=>import("./5.内存管理.html-D6WhXYS5.js"),__vite__mapDeps([99,96,1])),meta:{e:`<h2>一、规划内存池</h2>
<h3>1. 物理内存池规划</h3>
<p>内核和用户进程都要运行在物理内存中，我们将物理内存划分成两部分，一部分用来运行内核，一部分用来运行用户进程。操作系统为了能够正常运行，必须给自己预留出足够的内存才行，否则有可能会出现因为物理内存不足，导致内核自己都无法正常运行的情况。</p>
<p>因此我们把物理内存池分为：内核内存池、用户内存池。内存池中管理的是一个个大小为 4K 的内存块，从内存池中获取的内存大小至少为4KB 或者 4KB 的倍数。目前我们将内核内存池和用户内存池的大小设为一致，即各占一半的物理内存。</p>
<h3>2. 虚拟内存池规划</h3>`,r:{minutes:15.83,words:4748},t:"13.内存",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98/6.%E5%BF%AB%E8%A1%A8TLB.html",{loader:()=>B(()=>import("./6.快表TLB.html-BKqDc7NC.js"),__vite__mapDeps([100,1])),meta:{e:`<p>分页机制的问题：</p>
<ul>
<li>虚拟地址到物理地址的映射过程过于繁琐，步骤较多</li>
<li>CPU 和内存的速度差异非常大，页表在内存中，转换过程中频繁的内存访问，使得地址转换速度更慢，CPU 也需要停下来等待内存的响应</li>
</ul>
<p>根据程序的局部性原理，处理器准备了高速缓存 TLB（<code>Translation Lookaside Buffer</code>，也称为快表），专门用来存放虚拟页和物理页的映射。如下是结构图</p>

<p>TLB 中条目是虚拟地址的高 20 位到物理地址高 20 位的映射结果，其实就是虚拟页到物理页的映射。除此之外，TLB 中还有一些属性位，比如页表项的 RW 属性。</p>`,r:{minutes:2.2,words:661},t:"快表TLB",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.%E4%B8%AD%E6%96%AD/1.%E4%B8%AD%E6%96%AD.html",{loader:()=>B(()=>import("./1.中断.html-B-keAlhb.js"),__vite__mapDeps([101,1])),meta:{e:`<h2>中断</h2>
<h3>一、中断分类</h3>
<p>内部中断：来自 CPU 内部的中断。按中断是否正常来划分，分为“软中断” 和 “异常”</p>
<p>外部中断：来自 CPU 外部的中断。按是否导致宕机来划分，分为“可屏蔽中断” 和 “不可屏蔽中断”</p>
<h4>1. 外部中断</h4>
<p>外部的中断源必须是某个硬件。因此外部中断又称为硬件中断。</p>
<p>CPU 提供了两条信号线，分别是 INTR（INTeRrupt）和 NMI（Non Maskable Interrupt）。外部中断是通过这两根信号线通知 CPU 的。</p>
<figure><figcaption></figcaption></figure>`,r:{minutes:9.58,words:2873},t:"11.中断",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.%E4%B8%AD%E6%96%AD/2.%E5%8F%AF%E7%BC%96%E7%A8%8B%E4%B8%AD%E6%96%AD%E6%8E%A7%E5%88%B6%E5%99%A88259A.html",{loader:()=>B(()=>import("./2.可编程中断控制器8259A.html-RgI9C5-y.js"),__vite__mapDeps([102,1])),meta:{e:`<h3>一、问题来源？</h3>
<p>可屏蔽中断是通过 INTR 信号线进入 CPU 的，一般可独立运行的外部设备，如打印机、声卡等，其发出的中断都是可屏幕中断，都共享这一根 INTR 信号线通知 CPU。</p>
<p>任务是串行在 CPU 上执行的，CPU 每次只能执行一个任务。对于多个同时发生的中断应该如何处理呢？</p>
<p>如果使用 CPU 来做这个事情，不仅要占用 CPU 时间，而且还要占用内存来存储中断队列。因此 8259A 这个芯片出现了。</p>
<p>8259A 的作用是负责所有来自外设的中断，其中就包括来自时钟的中断。8259A 用于管理和控制可屏蔽中断，他表现在屏蔽外设中断，对他们实行优先级判决，向 CPU 提供中断向量号等功能。并且可以通过编程的方式来设置这些功能。</p>`,r:{minutes:5.53,words:1659},t:"可编程中断控制器8259A",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.%E4%B8%AD%E6%96%AD/3.%E5%AE%9A%E6%97%B6%E5%99%A88253.html",{loader:()=>B(()=>import("./3.定时器8253.html-CL9sA_WG.js"),__vite__mapDeps([103,1])),meta:{e:`<p>计算机中的时钟，大致可以分为两大类：内部时钟和外部时钟</p>
<h4>内部时钟</h4>
<p>内部时钟是指处理器中内部元件，如运算器、控制器的工作时序，主要用于控制、同步内部工作过程的步调。内部时钟是由晶体振荡器产生的，简称晶振，它位于主板上，其频率经过分频之后就是主板的外频，处理器和南北桥之间的通信就是基于外频。</p>
<p>Intel 处理器将此外频乘以某个倍数（也称为倍频）之后便称为主频。处理器取指令、执行指令中消耗的时钟周期，都是基于主频的。内部时钟是由处理器固件结构决定的，在出厂时就设定好了，无法改变。处理器内部元件的工作速度是最快的，所以内部时钟的时间单位粒度比较精细，通常是纳秒级别的</p>`,r:{minutes:3.28,words:985},t:"定时器 8253",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.%E4%B8%AD%E6%96%AD/4.8259A%E7%9A%84%E7%BC%96%E7%A8%8B.html",{loader:()=>B(()=>import("./4.8259A的编程.html-Dc4ihIrO.js"),__vite__mapDeps([104,1])),meta:{e:`<p>对 8259A 的编程就是对他的初始化，设置主片与从片的级联方式，指定起始中断向量号以及设置各种工作模式。</p>
<p>8259A 内部有两组寄存器，</p>
<ul>
<li>一组是初始化命令寄存器组，用来保存初始化命令字（Initialization Command Words，ICW），ICW 共 4 个，<code>ICW1 - ICW4</code>。</li>
<li>另一组是操作命令寄存器组，用来保存操作命令字（Operation Command Words，OCW），OCW 共 3 个，<code>OCW1 - OCW3</code></li>
</ul>
<p>我们对 8259A 的编程，也分为初始化和操作两部分。</p>`,r:{minutes:10.21,words:3062},t:"8259A 的编程",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/1.%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F.html",{loader:()=>B(()=>import("./1.保护模式.html-D0K85AZg.js"),__vite__mapDeps([105,1])),meta:{e:`<h2>保护模式</h2>
<p>为什么要有保护模式？</p>
<p>安全原因，用户程序和操作系统的数据可以被随意修改，一旦出现问题将是灾难性的，而且不容易排查</p>
<ul>
<li>实模式下操作系统和用户程序属于同一特权级，没有区分对待</li>
<li>用户程序所引用的地址都是指向真实的物理地址</li>
<li>用户程序可以自由修改段基址，可以访问所有内存</li>
</ul>
<p>使用的硬伤</p>
<ul>
<li>访问超过 64KB 的内存区域要切换段基址，特别麻烦</li>
<li>一次只能运行一个程序，无法充分利用计算机资源</li>
<li>共 20 条地址线，最大可用内存为 1MB，这就是最大的硬伤了。</li>
</ul>`,r:{minutes:10.47,words:3140},t:"5.保护模式",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/2.%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F2.html",{loader:()=>B(()=>import("./2.保护模式2.html-8IAGmKCT.js"),__vite__mapDeps([106,1])),meta:{e:`<h2>保护模式二</h2>
<p>保护模式的保护主要体现在段描述符的属性字段中，这些属性只是用来描述一块内存的性质，是用来给 CPU 做参考的，当有实际行动在这片内存上发生时，CPU 用这些属性来检查动作的合法性，从而起到保护的作用。</p>
<h3>一、向段寄存器加载选择子时的保护</h3>
<p>当引用一个内存段时，就是往段寄存器中加载个选择子，为了避免出现非法引用内存段的情况，CPU 会做如下检查：</p>
<h4>1. 首先根据选择子的值验证段描述符是否超越界限</h4>
<p>处理器先检查选择子 TI 位的值，如果为 0，则从全局描述符表寄存器 gdtr 中拿到 GDT 基地址和 GDT 界限值。如果 TI 为 1，则从局部描述符表寄存器 ldtr 获取。</p>`,r:{minutes:3.98,words:1195},t:"6.保护模式2",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/1.%E6%A6%82%E5%BF%B5.html",{loader:()=>B(()=>import("./1.概念.html-X17BkLwz.js"),__vite__mapDeps([107,1])),meta:{e:`<ol>
<li><strong>什么是任务调度器？</strong></li>
</ol>
<p>任务调度器就是操作系统中用于把任务轮流调度上处理器运行的一个软件模块，他是操作系统的一部分。调度器在内核中维护一个任务表（也称为进程表、线程表或调度表），然后按照一定的算法，从任务表中选择一个任务，然后把该任务放到处理器上执行，当任务运行的时间片到期后，再从任务表中找另外一个任务放到处理器上执行。</p>
<ol start="2">
<li><strong>任务调度器的重难点？</strong></li>
</ol>
<p>在多任务系统中，任务切换是软件完成的，切换工作本身要消耗 CPU，导致所有任务的总共执行时间反而更长了。</p>`,r:{minutes:5.13,words:1540},t:"概念",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/2.%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E5%BC%8F.html",{loader:()=>B(()=>import("./2.实现线程的方式.html-C1Zvr6eN.js"),__vite__mapDeps([108,1])),meta:{e:`<p><strong>实现线程的两种方式 --- 内核或用户进程</strong></p>
<p>线程的实现：</p>
<ul>
<li>由操作系统原生支持，用户进程通过系统调用使用线程。线程在 0 特权级的内核空间中实现（并不是线程所运行的代码也必须是 0 特权级的内核级代码，也可以是 3 特权级的用户级代码）</li>
<li>进程自己实现线程，线程在 3 特权级的用户空间实现。通常情况下，标准库提供了用户级线程库，我们直接调用即可</li>
</ul>
<p>线程仅仅是个执行流，在用户空间，还是在内核空间实现它，最大的区别就是线程表在哪里，由谁来调度它上处理器。</p>
<ul>
<li>如果线程在用户空间中实现，线程表就在用户进程中，用户进程就要专门写个线程用作线程调度器，由他来调度进程内部的其他线程</li>
<li>如果线程在内核空间中实现，线程表就在内核中，该线程就会由操作系统的调度器统一调度，无论该线程属于内核，还是用户进程</li>
</ul>`,r:{minutes:6.6,words:1980},t:"实现线程的方式",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/3.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6.html",{loader:()=>B(()=>import("./3.多线程调度.html-BMWhrMvP.js"),__vite__mapDeps([109,1])),meta:{e:`<p><strong>如何得到当前线程的 PCB 地址</strong>？各个线程所用的 0 级栈都是在自己的 PCB 中，因此取当前栈指针的高 20 位作为当前运行线程的 PCB。因为 PCB 有一页，PCB 的地址都对齐到 4KB 上。</p>
<p>**线程执行用户线程函数时，一定要开中断？**他是任务调度的保证，我们的任务调度机制基于时钟中断，由时钟中断这种 “不可抗力” 来中断所有任务的执行，借此将控制权交到内核手中，由内核的任务调度器考虑将处理器使用权发放到某个任务的手中，下次中断再发生时，权利将再被回收。这样保证了操作系统不会被 “架空”，而且保证所有任务都有运行的机会。**什么时候关的中断呢？**线程首次运行是由时钟中断处理函数调用任务调度器完成的，进入中断后处理器会自动关中断，因此在执行用户线程函数前要打开中断。</p>`,r:{minutes:8.58,words:2574},t:"多线程调度",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/4.%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0.html",{loader:()=>B(()=>import("./4.线程实现.html--pAnVMDW.js"),__vite__mapDeps([110,1])),meta:{e:`<h3>一、线程的实现</h3>
<p>先在内核空间中申请一页内存（4KB），用线程 PCB 结构的指针，指向这块内存。</p>
<p>我们先来看看 PCB 结构都有哪些字段：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>struct task_struct {</span></span>
<span class="line"><span>    // 内核线程所用的内核栈</span></span>
<span class="line"><span>    uint32_t* self_kernel_stack;</span></span>
<span class="line"><span>    pid_t pid;</span></span>
<span class="line"><span>    // 状态</span></span>
<span class="line"><span>    enum task_status status;</span></span>
<span class="line"><span>    char name[TASK_NAME_LEN];</span></span>
<span class="line"><span>    // 优先级</span></span>
<span class="line"><span>    uint8_t priority;</span></span>
<span class="line"><span>    // 每次在处理器上执行的时钟滴答数</span></span>
<span class="line"><span>    uint8_t ticks;</span></span>
<span class="line"><span>    // 此任务自从上 CPU 运行后至今占用了多少 cpu 滴答数</span></span>
<span class="line"><span>    // 任务运行了多久</span></span>
<span class="line"><span>    uint32_t elapsed_ticks;</span></span>
<span class="line"><span>    // 用于线程在一般队列中的节点（比如：就绪队列或者其他队列）</span></span>
<span class="line"><span>    struct list_elem general_tag;</span></span>
<span class="line"><span>    // 用于线程队列 thread_all_list 中的节点</span></span>
<span class="line"><span>    struct list_elem all_list_tag;</span></span>
<span class="line"><span>    // 进程自己页表的虚拟地址</span></span>
<span class="line"><span>    // 如果是线程，则此字段为 NULL</span></span>
<span class="line"><span>    uint32_t* pg_dir;</span></span>
<span class="line"><span>    // 用户进程的虚拟地址</span></span>
<span class="line"><span>    struct virtual_addr user_process_vaddr;</span></span>
<span class="line"><span>    // 用户进程内存块描述符</span></span>
<span class="line"><span>    struct mem_block_desc u_block_desc[DESC_CNT];</span></span>
<span class="line"><span>    // 已打开文件数组</span></span>
<span class="line"><span>    int32_t fd_table[MAX_FILES_OPEN_PER_PROC];</span></span>
<span class="line"><span>    // 进程所在的工作目录的 inode 编号</span></span>
<span class="line"><span>    uint32_t cwd_inode_nr;</span></span>
<span class="line"><span>    // 父进程 pid</span></span>
<span class="line"><span>    int16_t parent_pid;</span></span>
<span class="line"><span>    // 栈的边界标记，用于检测栈的溢出</span></span>
<span class="line"><span>    // 这个字段因为要作为边界标记，所以必须放在结构体的末尾</span></span>
<span class="line"><span>    // 我们的 PCB 和 0 级栈是在同一页中，栈位于页的顶端并向下发展</span></span>
<span class="line"><span>    // 因此担心压栈过程中会把 PCB 中的信息给覆盖，所以每次在线程或进程调度时要判断是否触及到了进程信息的边界</span></span>
<span class="line"><span>    // 也就是判断 stack_magic 的值是否为初始化的内容。其实 stack_magic 是一个魔数</span></span>
<span class="line"><span>    uint32_t stack_magic;</span></span>
<span class="line"><span>};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.95,words:1184},t:"线程的实现",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/5.%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html",{loader:()=>B(()=>import("./5.进程的实现方式.html-DvdB1U9d.js"),__vite__mapDeps([111,1])),meta:{e:`<h2>一、概念</h2>
<h3>1. 任务状态段 TSS</h3>
<p>任何寄存器中的内容才是任务的最新状态。采取轮流使用 CPU 的方式运行多任务，当前任务在被换下 CPU 时，任务的最新状态，也就是寄存器中的内容应该找个地方保存起来，以便下次重新将此任务调度到 CPU 上时可以恢复此任务的最新状态，这样任务才能继续执行。</p>
<p>Intel 的建议是给每个任务 “关联” 一个任务状态段，就是 TSS（Task State Segment），用它来表示任务。TSS 是由程序员提供，也就是说是程序员为任务单独定义的一个结构体遍历。TSS 由 CPU 来维护，也就是说 CPU 自动用此结构体变量保存任务的状态（任务的上下文环境、寄存器组的值）和自动从此结构体变量中载入任务的状态。当加载新任务时，CPU 自动把当前任务（旧任务）的状态存入当前任务的 TSS，然后将新任务 TSS 中的数据载入到对应的寄存器中，这就实现了任务切换。TSS 就是任务的代表，CPU 用不同的 TSS 区分不同的任务，因此任务切换的本质就是 TSS 的换来换去。</p>`,r:{minutes:6.95,words:2085},t:"进程实现",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/6.%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html",{loader:()=>B(()=>import("./6.协程的实现方式.html-CG61uxvl.js"),__vite__mapDeps([112,1])),meta:{e:`<h3>一、为什么要有协程</h3>
<p>对于操作系统来说，线程是 CPU 调度的最小单元，进程是资源管理的最小单元。</p>
<p>在多核场景下，如果是 IO 密集型场景，就算开多个线程来处理，也未必能提升 CPU 的利用率，反而会增加线程切换的开销。另外，多线程之间假如存在临界区或者共享数据，那么同步的开销也可能比较大。</p>
<p>那么协程可以解决如上的问题。</p>
<p>协程是一种比线程更加轻量化的存在，一个线程中可以拥有多个协程。协程的调度由用户实现的调度器来控制。协程拥有自己的寄存器上下文和栈。协程在做调度切换时，一般会将寄存器上下文和栈保存到某个指定地方，在切回来时，恢复先前保存的寄存器上下文和栈，这个过程都是在用户空间完成的，不需要内核的参与。所以切换过程是非常快的。</p>`,r:{minutes:1.27,words:381},t:"协程的实现",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/9.%E5%85%B6%E4%BB%96/%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6%E4%B9%8B%E9%94%81.html",{loader:()=>B(()=>import("./同步机制之锁.html-6jQzvVK_.js"),__vite__mapDeps([113,1])),meta:{e:`<p>我们的锁使用 信号量来实现。信号量包括两个操作</p>
<ul>
<li>增加操作：将信号量的值加 1，唤醒在此信号量上等待的线程</li>
<li>减少操作：判断信号量是否大于 0。若信号量大于 0，则将信号量减一；若信号量等于 0，当前线程将自己阻塞，以在此信号量上等待</li>
</ul>
<p>线程的阻塞是线程自己发出的动作，也就是线程自己阻塞自己，并不是被别人阻塞的，阻塞是线程主动的行为。已阻塞的线程是由别人来唤醒的，唤醒是被动的。</p>
<p>注意，线程阻塞时，线程的时间片还没用完，在唤醒之后，线程会继续在剩余时间片内运行，调度器不会为他充满时间片。</p>
<h3>一、线程阻塞</h3>`,r:{minutes:5,words:1499},t:"同步机制---锁",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/9.%E5%85%B6%E4%BB%96/%E7%AC%94%E8%AE%B0.html",{loader:()=>B(()=>import("./笔记.html-B_w2vOu5.js"),__vite__mapDeps([114,1])),meta:{e:`<p>boot 的汇编语言，直接编译成二进制了。内核中的汇编，最后会编译成 ELF 文件。</p>
<p>ORG：指定相对位置（物理地址）</p>
<p>bochs  （2.7）调试：<code>xchg bx, bx</code></p>
<p>清屏：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>mov ax, 3</span></span>
<span class="line"><span>int 0x10</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.34,words:102},t:"笔记",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/8.%E5%B1%8F%E5%B9%95%E5%92%8C%E6%98%BE%E5%8D%A1/1.%E6%93%8D%E4%BD%9C%E6%98%BE%E7%A4%BA%E5%99%A8.html",{loader:()=>B(()=>import("./1.操作显示器.html-C-ytG6hx.js"),__vite__mapDeps([115,1])),meta:{e:`<h2>操作显示器</h2>
<h3>一、IO 接口</h3>
<p>CPU 通过 "IO接口" 来与外设通信。“IO接口” 是连接 CPU 与外部设备的逻辑控制部件，分为硬件和软件两部分，</p>
<ul>
<li>硬件部分所做的是一些实质具体的工作，其功能是协调 CPU 和外设之间的种种不匹配，如双方由于速度不匹配，那 IO 接口就实现数据缓冲以减少等待时间；如数据不匹配，IO 接口就在这两种格式间互相转换。</li>
<li>软件部分就是用来控制接口电路工作的驱动程序以及完成内部数据传输所需要的程序。</li>
</ul>
<p>IO 接口芯片分为“可编程接口芯片”和“不可编程接口芯片”。一般我们都使用 “可编程接口”。通常使用端口读写指令 “in/out” 来实现。</p>`,r:{minutes:3.83,words:1150},t:"3.操作显示器",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E7%A1%AC%E7%9B%98/1.%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%8E%9F%E7%90%86.html",{loader:()=>B(()=>import("./1.硬盘分区原理.html-CyNFrSLx.js"),__vite__mapDeps([116,1])),meta:{e:`<h4>1. 获取安装的磁盘数</h4>
<p>在物理地址 <code>0x475</code> 处存储着主机上安装的硬盘的数量，它是由 BIOS 检测并写入的。因此当我们使用 bochs 配置好磁盘，准备调试的时候，可以先看看此处内存存储的磁盘数。如下即可查看</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>xp/b 0x475</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,r:{minutes:11.15,words:3345},t:"硬盘分区原理",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E7%A1%AC%E7%9B%98/2.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.html",{loader:()=>B(()=>import("./2.文件系统原理.html-DooIBkoz.js"),__vite__mapDeps([117,1])),meta:{e:`<h4>1. inode</h4>
<ul>
<li>硬盘的读写单位是扇区。</li>
<li>文件系统的读写单位是“块”，一个块是由多个扇区组成。</li>
<li>文件系统中的文件至少要占据一个块，当文件体积大于一个块时，文件会被拆分成多个块。</li>
</ul>
<p>因此我们需要将“块”组织起来。</p>
<p>unix 文件系统将文件以“索引结构”进行组织</p>
<ul>
<li>优点：文件中的块依然可以分散到不连续的零散空间中，保证磁盘高利用率</li>
<li>优点：文件系统为每个文件的所有块建立了一个索引表，索引表就是块地址数组，每个数组元素就是块的地址，数组元素下标就是文件块的索引，这样访问任意一个块的时候，只要从索引表中获得块地址就可以</li>
</ul>`,r:{minutes:5.7,words:1709},t:"文件系统原理",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E7%A1%AC%E7%9B%98/3.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%862.html",{loader:()=>B(()=>import("./3.文件系统原理2.html-Cvv9KQH3.js"),__vite__mapDeps([118,1])),meta:{e:`<h4>1. 文件表（文件结构）</h4>
<p>为什么要有文件表（文件结构）？</p>
<ul>
<li>操作系统应该允许一个进程同时、多次、打开同一个文件（并不关闭）</li>
<li>同样的，该文件应该被允许被多个不同的进程同时打开</li>
<li>那么，我们需要实现文件任意位置的读写，执行读写操作时，需要指定偏移量作为该文件内的起始地址。也就是说，该文件每被打开一次，文件读写的偏移量都可以任意指定。</li>
<li>注意，文件内的偏移量是互不影响的；但文件内容是共享的，对文件内容的修改是互相影响的。</li>
<li>通常情况下，对文件的操作涉及到多次读写，下一次读写的位置必须以上一次的读写位置为起始，因此文件系统需要把任意时刻的偏移量记录下来</li>
<li>那么，偏移量不应该记录在 inode 中，inode 不应该记录这些与文件操作相关的数据。</li>
</ul>`,r:{minutes:4.21,words:1263},t:"文件系统原理2",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E7%A1%AC%E7%9B%98/4.%E7%A1%AC%E7%9B%98%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F.html",{loader:()=>B(()=>import("./4.硬盘驱动程序.html-rEjX97Uy.js"),__vite__mapDeps([119,1])),meta:{e:`<p>硬盘上有两个 ATA 通道，也称为 IDE 通道。</p>
<ul>
<li>第一个 ATA 通道上的两个硬盘（主盘和从盘）的中断信号挂在 8259A 从盘的 IRQ14 上。两个硬盘共享同一个 IRQ 接口。</li>
<li>第二个 ATA 通道接在 8259A 从片的 IRQ15 上，该 ATA 通道上可支持两个硬盘。</li>
</ul>
<p>硬件发生中断时，如何区分中断来自那个硬盘？</p>
<ul>
<li>我们对硬盘发命令时，需要提前指定主盘还是从盘。这是在硬盘控制器的 device 寄存器中第 4 位的 dev 位指定的。因此也就知道是哪个硬盘来了中断信号。</li>
<li>但在硬盘完成操作后，它还得通知调用者任务执行的结果，是顺利完成，还是失败，如果是读硬盘的话，现在可以取数据了，这里是让硬盘主动发中断来通知调用者的。但一个通道只能有一个中断，却有两个硬盘。因此一次只允许通道中的一个硬盘操作。因此在通道中设置锁来实现互斥，对通道中的任何一个硬盘操作时都要申请该锁来实现独享通道。</li>
</ul>`,r:{minutes:2,words:600},t:"硬盘驱动程序",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E7%A1%AC%E7%9B%98/5.%E6%93%8D%E4%BD%9C%E7%A1%AC%E7%9B%98.html",{loader:()=>B(()=>import("./5.操作硬盘.html-Dc5KrE36.js"),__vite__mapDeps([120,1])),meta:{e:`<h2>操作硬盘</h2>
<p>如下为机械硬盘</p>
<figure><figcaption></figcaption></figure>
<h3>一、硬盘相关概念</h3>
<p>CPU 通过 IO 接口与硬盘通信，针对硬盘的 IO 接口是“硬盘控制器”。硬盘控制器和硬盘是连接在一起的，是专门驱动硬盘设备的模块电路。这种接口也称为集成设备电路（Integrated Drive Electronics，IDE）。后来，又将此接口使用的技术规范归纳成全球硬盘标准，于是产生了 ATA（Advanced Technology Attachment）。硬盘串行接口称为（Serial ATA，SATA），硬盘并行接口称为（Parallel ATA，PATA）。</p>`,r:{minutes:10.83,words:3248},t:"4.操作硬盘",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E7%A1%AC%E7%9B%98/6.%E6%89%93%E5%8D%B0%E5%87%BD%E6%95%B0.html",{loader:()=>B(()=>import("./6.打印函数.html-DAvL774r.js"),__vite__mapDeps([121,1])),meta:{e:`<h2>实现打印函数</h2>
<p>打印汇编函数的处理流程：</p>
<ol>
<li>备份寄存器现场</li>
<li>获取光标坐标值，光标坐标值是下一个可打印字符的位置</li>
<li>获取待打印的字符</li>
<li>判断字符是否为控制字符，若是回车符、换行符、退格符三种控制字符之一，则进入相应的处理流程。否则，其余字符都被认为是可见字符，进入输出流程处理</li>
<li>判断是否需要滚屏</li>
<li>更新光标坐标值，使其指向下一个打印字符的位置</li>
<li>恢复寄存器现场，退出</li>
</ol>
`,r:{minutes:.57,words:172},t:"10.实现打印函数",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/1.CPU%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.html",{loader:()=>B(()=>import("./1.CPU性能调优.html-DAuYELHy.js"),__vite__mapDeps([122,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>Linux性能调优之CPU篇</h2>
<p>针对于线上问题的快速定位以及程序的性能发现调优，主要通过CPU、内存、IO、网络四个方向去分析。本文针对CPU相关的指标罗列常用的工具以及排查问题的思路。<br>
本人对Linux了解尚浅，如有错误，可指出共同学习。</p>
<h3>一、平均负载</h3>
<h4>1. uptime命令</h4>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">root@9-134-239-95:~#</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> uptime</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> 22:52:30</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 265</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> days,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> 12:54,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">  1</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> user,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">  load</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> average:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> 0.03,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> 0.06,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0.05</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:10.74,words:3223},t:"1.CPU性能调优",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/2.%E5%B9%B3%E5%9D%87%E8%B4%9F%E8%BD%BD.html",{loader:()=>B(()=>import("./2.平均负载.html-Dm9E3a54.js"),__vite__mapDeps([123,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>一、平均负载概念</h2>
<h3>1. uptime命令</h3>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">root@9-134-239-95:~#</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> uptime</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> 22:52:30</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 265</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> days,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> 12:54,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">  1</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> user,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">  load</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> average:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> 0.03,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> 0.06,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0.05</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:5.36,words:1608},t:"2.平均负载",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/3.%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2.html",{loader:()=>B(()=>import("./3.上下文切换.html-Da7fbkQ3.js"),__vite__mapDeps([124,1])),meta:{e:`<h2>CPU 上下文切换</h2>
<h3>一、CPU上下文</h3>
<p>CPU执行任务需要知道从哪里开始，也就是说，需要系统帮它设置好<strong>CPU寄存器</strong>和<strong>程序计数器</strong>。</p>
<ul>
<li>CPU寄存器是CPU内置的容量小、速度极快的内存。</li>
<li>程序计数器用来存储CPU正在执行的指令位置、或者即将执行的下一条指令位置。</li>
</ul>
<p>他们都是CPU在运行任务前，必须的依赖环境，也叫做CPU上下文。那么，CPU上下文切换就是先把一个任务的CPU上下文(CPU寄存器和程序计数器)保存起来，然后加载新任务的上下文到这些寄存器和程序计数器，最后再跳转到程序计数器所指的新位置，运行新任务。而这些保存下来的上下文，会存储在系统内核中，并在任务重新调度执行时再次加载进来。这样就保证任务原来的状态不受影响。</p>`,r:{minutes:7.23,words:2169},t:"3.上下文切换",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/4.%E4%B8%AD%E6%96%AD.html",{loader:()=>B(()=>import("./4.中断.html-BRZ70gli.js"),__vite__mapDeps([125,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>中断</h2>
<p>从物理学的角度看，中断是一种电信号，由硬件设备生成，并直接送入中断控制器的输入引脚上。然后再由中断控制器向处理器发送相应的信号。处理器一经检测到此信号，便中断自己的当前工作转而处理中断。此后，处理器会通知操作系统已经产生中断，这样，操作系统就可以对这个中断进行适当的处理了。</p>
<p>不同的设备对应的中断不同，而每个中断都通过一个唯一的数字标识。因此，来自键盘的中断就有别于来自硬盘的中断，从而使得操作系统能够对中断进行区分，并知道哪个硬件设备产生了哪个中断。这样，操作系统才能给不同的中断提供不同的中断处理程序。</p>
<h3>一、硬中断</h3>
<p>由与系统相连的外设（比如网卡、硬盘、键盘）自动产生的。主要是用来通知操作系统外设状态发生了变化。比如，当网卡收到数据包的时候，就会发出一个中断。我们通常所说的中断指的是硬中断（hardirq）</p>`,r:{minutes:2.9,words:869},t:"4.中断",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2.html",{loader:()=>B(()=>import("./上下文切换.html-DjZE3aq4.js"),__vite__mapDeps([126,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>一、CPU上下文</h2>
<p>CPU执行任务需要知道从哪里开始，也就是说，需要系统帮它设置好CPU寄存器和程序计数器。<br>
CPU寄存器是CPU内置的容量小、速度极快的内存。程序计数器用来存储CPU正在执行的指令位置、或者即将执行的下一条指令位置。他们都是CPU在运行任务前，必须的依赖环境，也叫做CPU上下文。<br>
那么，CPU上下文切换就是先把一个任务的CPU上下文(CPU寄存器和程序计数器)保存起来，然后加载新任务的上下文到这些寄存器和程序计数器，最后再跳转到程序计数器所指的新位置，运行新任务。<br>
而这些保存下来的上下文，会存储在系统内核中，并在任务重新调度执行时再次加载进来。这样就保证任务原来的状态不受影响。</p>`,r:{minutes:4.01,words:1204},t:"undefined",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E7%B3%BB%E7%BB%9F%E4%BA%A4%E4%BA%92/1.%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%A6%82%E5%BF%B5.html",{loader:()=>B(()=>import("./1.系统调用概念.html-L720wH3v.js"),__vite__mapDeps([127,1])),meta:{e:`<h3>一、Linux 系统调用</h3>
<p>Linux 系统调用是用中断门来实现的，通过软中断指令 int 来主动发起中断信息。Linux 只占用一个中断向量号，即 <code>0x80</code>，处理器执行指令 <code>int 0x80</code> 时便触发了系统调用。为了让用户程序可以通过这一个中断门调用多种系统功能，在系统调用之前，Linux 在寄存器 eax 中写入子功能号。当用户程序通过 <code>int 0x80</code> 进行系统调用时，对应的中断处理例程会根据 eax 的值来判断用户进程申请那种系统调用。</p>
<p>我们来看 syscall 的 man 手册</p>`,r:{minutes:4.46,words:1338},t:"系统调用概念",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E7%B3%BB%E7%BB%9F%E4%BA%A4%E4%BA%92/2.fork%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0.html",{loader:()=>B(()=>import("./2.fork的原理和实现.html-DPU2b50l.js"),__vite__mapDeps([128,1])),meta:{e:`<h3>一、fork 的实现</h3>
<p>fork 利用老进程克隆出一个新进程并使新进程执行，新进程之所以能够执行，本质上是它具备程序体，这其中包括代码和数据等资源。因此 fork 就是把某个进程的全部资源复制了一份，然后让处理器的 <code>cs:eip</code> 寄存器指向新进程的指令部分。</p>
<p>因此 fork 要分两步，先复制进程资源，然后跳过去执行。</p>
<p>如下列举出我们的操作系统中进程的资源：</p>
<ul>
<li>进程的 pcb，即 task_struct</li>
<li>程序体，即代码段、数据段等，这是进程的实体</li>
<li>用户栈，编译器需要在栈中创建局部变量，并且函数调用也离不开栈</li>
<li>内核栈，进入内核态时，一方面要用它来保存上下文环境，另一方面的作用和用户栈一样</li>
<li>虚拟地址池：每个进程拥有独立的内存空间，其虚拟地址是用虚拟地址池来管理的</li>
<li>页表：让进程拥有独立的内存空间</li>
</ul>`,r:{minutes:.95,words:284},t:"fork的原理与实现",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E7%B3%BB%E7%BB%9F%E4%BA%A4%E4%BA%92/3.wait%E5%92%8Cexit%E7%9A%84%E5%8E%9F%E7%90%86.html",{loader:()=>B(()=>import("./3.wait和exit的原理.html-BpThJaql.js"),__vite__mapDeps([129,1])),meta:{e:`<h3>一、wait 和 exit 的作用</h3>
<h4>1. exit 浅析</h4>
<p>exit 时进程主动退出，结束运行。main 函数执行结束后程序流程会回到 C 运行时库，C 运行库的结束代码处会调用 exit。结束程序运行始终是通过主动调用 exit 系统调用实现的，因为这是唯一让系统重新拿回处理器控制权的机会。</p>
<p><strong>exit 由子进程调用，表面功能是使子进程结束运行并传递返回值给内核，本质上是内核会将进程除 pcb 以外的所有资源都回收。</strong></p>
<h4>2. wait 浅析</h4>
<p>wait 一是可以使调用进程阻塞，二是可以获得子进程的返回值。</p>`,r:{minutes:3.07,words:922},t:"wait 和 exit 的原理",y:"a"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E7%B3%BB%E7%BB%9F%E4%BA%A4%E4%BA%92/4.%E7%AE%A1%E9%81%93.html",{loader:()=>B(()=>import("./4.管道.html-CrwWZ0wn.js"),__vite__mapDeps([130,1])),meta:{e:`<h3>一、原理</h3>
<p>Linux 中一切皆文件，管道也被视为文件，只不过此文件存在于内存中。其实就是内核空间中的内存缓冲区，共享的原理就是所有进程在地址空间中都可以访问到他。</p>
<p>管道是个环形缓冲区。</p>
`,r:{minutes:.27,words:81},t:"管道",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/1.pidstat%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E5%8D%A0%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E6%83%85%E5%86%B5.html",{loader:()=>B(()=>import("./1.pidstat查看进程占用系统资源情况.html-CeXEeAqk.js"),__vite__mapDeps([131,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>pidstat</h2>
<p>在 sysstat 包中，pidstat 用于监控进程占用系统资源的情况。注意：pidstat 监控的是进程的指标，如果要看线程，加上 -t 选项<br>
工具使用：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[root@localhost </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">~</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]# pidstat -help</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Usage:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> pidstat</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">options</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> ]</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">interva</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">coun</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> ]</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> ]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Options</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> are:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-d</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ] [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-h</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ] [ -I ] [ -l ] [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-r</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ] [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-s</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ] [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ] [ -U [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">username</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ] ] [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-u</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[ -V ] [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-w</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ] [ -C </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">command</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ] [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-p</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">pid</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [,...] </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> SELF </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ALL } ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[ -T { TASK </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> CHILD </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ALL } ]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.55,words:765},t:"1.pidstat查看进程占用系统资源情况",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/2.mpstat%E6%9F%A5%E7%9C%8BCPU%E6%80%A7%E8%83%BD.html",{loader:()=>B(()=>import("./2.mpstat查看CPU性能.html-B18AxMM2.js"),__vite__mapDeps([132,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>mpstat</h2>
<p>sysstat 包含了常用的Linux 性能分析工具，用来监控和分析系统的性能。<br>
mpstat 是一个常见的多核CPU性能分析工具，用来实时查看每个CPU的性能指标，以及所有CPU的平均指标<br>
工具使用：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[root@localhost </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">~</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]# mpstat -h</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Usage:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> mpstat</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">options</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> ]</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">interva</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">coun</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> ]</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> ]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Options</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> are:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[ -A ] [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-u</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ] [ -V ] [ -I { SUM </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> CPU </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> SCPU </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ALL } ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[ -P { </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">cpu</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [,...] </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ON </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ALL } ]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.65,words:496},t:"2.mpstat查看CPU性能",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/3.vmstat%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7.html",{loader:()=>B(()=>import("./3.vmstat系统性能分析工具.html-nkUJOl-e.js"),__vite__mapDeps([133,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>vmstat</h2>
<p>当系统所需的内存超过实际的物理内存，内核会释放某些进程占用但未使用的部分或所有物理内存，将这部分资料存储在磁盘上直到进程下一次调用，并将释放出的内存提供给有需要的进程使用。</p>
<p>vmstat （Virtual Memory）命令的含义为显示虚拟内存状态，可以报告关于进程、内存、IO 等系统整体运行状态</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">➜</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  [/tmp] vmstat -h</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Usage:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> vmstat</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [options] [delay [count]]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Options:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -a,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --active</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">           active/inactive</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> memory</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -f,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --forks</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">            number</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> forks</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> since</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> boot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -m,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --slabs</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">            slabinfo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -n,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --one-header</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">       do</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> redisplay</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> header</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -s,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --stats</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">            event</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> counter</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> statistics</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -d,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --disk</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">             disk</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> statistics</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -D,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --disk-sum</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">         summarize</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> disk</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> statistics</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -p,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --partition</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">de</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">  partition</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> specific</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> statistics</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -S,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --unit</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">cha</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">      define</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> display</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> unit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -w,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --wide</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">             wide</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -t,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --timestamp</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">        show</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> timestamp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -h,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --help</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">     display</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> this</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> help</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> exit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -V,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --version</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">  output</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> version</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> information</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> exit</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.85,words:855},t:"3.vmstat系统性能分析工具",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/4.stress%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7.html",{loader:()=>B(()=>import("./4.stress压力测试工具.html-BaC0UASh.js"),__vite__mapDeps([134,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>stress 压力测试工具</h2>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[root@localhost </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">~</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]# stress </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">stress' imposes certain types of compute stress on your system</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Usage: stress [OPTION [ARG]] ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -?, --help         show this help statement</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">     --version      show version statement</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -v, --verbose      be verbose</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -q, --quiet        be quiet</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -n, --dry-run      show what would have been done</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -t, --timeout N    timeout after N seconds</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">     --backoff N    wait factor of N microseconds before work starts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -c, --cpu N        spawn N workers spinning on sqrt()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -i, --io N         spawn N workers spinning on sync()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -m, --vm N         spawn N workers spinning on malloc()/free()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">     --vm-bytes B   malloc B bytes per vm worker (default is 256MB)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">     --vm-stride B  touch a byte every B bytes (default is 4096)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">     --vm-hang N    sleep N secs before free (default none, 0 is inf)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">     --vm-keep      redirty memory instead of freeing and reallocating</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> -d, --hdd N        spawn N workers spinning on write()/unlink()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">     --hdd-bytes B  write B bytes per hdd worker (default is 1GB)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Example: stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 10s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Note: Numbers may be suffixed with s,m,h,d,y (time) or B,K,M,G (size).</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.26,words:379},t:"4.stress压力测试工具",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/perf%E5%91%BD%E4%BB%A4.html",{loader:()=>B(()=>import("./perf命令.html-Bh8FEK8M.js"),__vite__mapDeps([135,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p>perfperf</p>
`,r:{minutes:.04,words:12},t:"undefined",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/strace%20%E5%91%BD%E4%BB%A4.html",{loader:()=>B(()=>import("./strace 命令.html-DcxaLgDn.js"),__vite__mapDeps([136,1])),meta:{e:`<p>strace 命令可以跟踪一个进程在执行期间的系统调用和信号。</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># 跟踪一个现有的进程</span></span>
<span class="line"><span>strace -p pid </span></span>
<span class="line"><span></span></span>
<span class="line"><span># -c 参数可以将进程所有的系统调用做一个统计分析，告诉我们调用了哪些系统函数，调用次数是多少。消耗了多少时间等</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.3,words:90},t:"strace 命令",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/1.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html",{loader:()=>B(()=>import("./1.内存管理.html-BciFjUKJ.js"),__vite__mapDeps([137,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>一、内存映射</h2>
<p>Linux 内核给每个进程都提供了一个独立的虚拟地址空间，并且这个地址空间是连续的。虚拟地址空间又被分为<strong>内核空间</strong>和<strong>用户空间</strong>。不同位的处理器，虚拟地址空间布局不一样，如下是 32 位和64 位虚拟地址空间</p>

<p>进程在用户态时，只能访问用户空间内存；只有进入内核态后，才可以访问内核空间内存。虽然每个进程的地址空间都包含了内核空间，但这些内核空间都关联相同的物理内存。</p>
<p>并不是所有的虚拟内存都会分配物理内存，只有那些实际使用的虚拟内存才会分配物理内存，并且分配后的物理内存，是通过内存映射来管理的</p>`,r:{minutes:6.41,words:1922},t:"1.内存管理",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/10.mmap%E6%8A%80%E6%9C%AF.html",{loader:()=>B(()=>import("./10.mmap技术.html-BjRbNOCs.js"),__vite__mapDeps([138,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>一、Linux 内存映射 mmap</h2>
<p>mmap是一种内存映射文件的方法，将一个文件或者其它对象映射到进程的虚拟地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址一一对应的关系。实现这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自动回写脏页面到对应的文件磁盘上，即完成了对文件的操作而不必再调用read,write等系统调用函数。相反，内核空间对这段区域的修改也直接反映用户空间，从而可以实现不同进程间的文件共享</p>

<p>如上，进程的虚拟内存地址空间，由多个虚拟内存区域构成。比如 text数据段（代码段）、堆、栈 等都是一个独立的虚拟内存区域。Linux 内核使用 <code>vm_area_struct</code> 结构来表示一个独立的虚拟内存区域，各个 <code>vm_area_struct</code> 结构体使用链表或者树形结构链接</p>`,r:{minutes:14.48,words:4345},t:"10.mmap技术",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/11.coredump.html",{loader:()=>B(()=>import("./11.coredump.html-K3_O7PS0.js"),__vite__mapDeps([139,1])),meta:{e:`<p>​      core dump又叫核心转储。在程序运行过程中发生异常时，将其内存数据保存到文件中，这个过程叫做core dump。core是指记忆体也就是现场的内存。</p>
<p>​      在开发过程中，难免会遇到程序运行过程中异常退出的情况，这时候想要定位哪里出了问题，仅仅依靠程序自身的信息打印（日志记录）往往是不够的，这个时候就需要 Core Dump 文件来帮忙定位。一个完整的 Core Dump 文件实际上相当于恢复了异常现场，利用 Core Dump 文件，可以查看到程序异常时的所有信息，变量值、栈信息、内存数据，程序异常时的运行位置（甚至记录代码行号）等等，定位所需要的一切信息都可以从 Core Dump文件获取到，能够非常有效的提高定位效率。</p>`,r:{minutes:9.01,words:2704},t:"11.coredump",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/12.%E9%80%9A%E8%BF%87free%E5%91%BD%E4%BB%A4%E7%90%86%E8%A7%A3linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html",{loader:()=>B(()=>import("./12.通过free命令理解linux内存管理.html-QRSQfgeN.js"),__vite__mapDeps([140,1])),meta:{d:1602000592e3,l:"2020年10月7日",g:["内存管理"],e:`<h2>简介</h2>
<p>linux 下面查看内存状态可以使用 free 命令，但是如果不了解 linux 内存管理机制的话，对输出也会摸不着头脑，这篇文章就说明一下各个数据的意思。</p>
<p>下面是我电脑上虚拟机，直接使用 free 命令的数据结果。</p>
<p>vagrant@precise64:~$ free        total    used    free   shared  buffers   cached Mem:    374256   330952   43304     0   14400   238128 -/+ buffers/cache:   78424   295832 Swap:    786428    2224   784204</p>`,r:{minutes:5.54,words:1661},t:"12.通过free命令理解linux内存管理",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/13.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html",{loader:()=>B(()=>import("./13.垃圾回收.html-UeP9xDry.js"),__vite__mapDeps([141,1])),meta:{e:`<h3>一、概念和定义</h3>
<p>GC 算法中最重要的两个角色就是 Mutator 和 Collector。</p>
<ul>
<li>Mutator：本意是改变者。这个词所表达的是通过程序来改变对象之间的引用关系。因为我们所写的所有 Java 程序，都有可能改变对象的存活和死亡状态，以及他们之间的引用关系，那么这些 Java 程序就是 Mutator。因为 Java 程序运行所在的这些线程，我们也称为业务线程，所以在某些情况下，Mutator 和业务线程这两个术语是可以混用的。</li>
<li>Collector：用于回收空间中的垃圾，所以叫做收集者。根据不同的 GC 算法，Collector 不仅仅是收集，例如在 Mark-Sweep 中，他还负责标记存活对象、识别垃圾对象。执行 Collector 的线程，一般称为 Collector 线程或者 GC 线程。在某些 GC 算法中，业务线程也有可能帮助做垃圾回收的工作。所以，Mutator 和 Collector 只是一种相对的说法，而不是精确的概念。</li>
</ul>`,r:{minutes:17.02,words:5105},t:"13.垃圾回收",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/2.%E5%B8%B8%E8%A7%81%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E7%AE%97%E6%B3%95.html",{loader:()=>B(()=>import("./2.常见的内存分配器算法.html-EPtGoG57.js"),__vite__mapDeps([142,1])),meta:{e:`<h3>内存管理器的核心目标是：</h3>
<ul>
<li>高效的内存分配和回收，提升单线程和多线程场景下的性能</li>
<li>减少内存碎片，包括内部碎片和外部碎片，提高内存的有效利用率</li>
</ul>
<p>Linux 中物理内存会被划分成若干个 4K 大小的内存页，物理内存的分配和回收都是基于页完成的，页内产生的内存碎片称为内部碎片，页之间产生的内存碎片称为外部碎片。</p>
<ul>
<li>内部碎片：因为内存是按 页 进行分配的，即使我们只需要很小的内存，操作系统至少也会分配 4K 大小的页，单个页内只有一部分字节被使用，剩余的字节形成了内部碎片。</li>
<li>外部碎片：在分配较大内存块时，操作系统通过分配连续的 页 才能满足要求。在程序不断运行的过程中，这些 页 被频繁的回收并分配分配，页 之间就会出现小的空闲内存块，这样就形成了外部碎片。</li>
</ul>`,r:{minutes:7.94,words:2382},t:"2.常见的内存分配器算法",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/3.%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%9A%84%E5%88%86%E6%AE%B5%E5%92%8C%E5%88%86%E9%A1%B5.html",{loader:()=>B(()=>import("./3.内存分配的分段和分页.html-CntqY2j4.js"),__vite__mapDeps([143,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>内存分配的分段和分页</h2>
<h3>一、早期的内存分配机制</h3>
<p>要运行一个程序，会把这些程序全部装入内存，程序直接运行在内存上，也就是说程序中访问的内存地址是实际的物理地址。当计算机同时运行多个程序时，必须保证这些程序用到的内存总量要小于计算机实际物理内存的大小。</p>

<p>这种简单的内存分配策略存在很多问题：</p>
<ul>
<li>问题一，进程地址空间不隔离，由于程序都是直接访问物理内存，所以恶意程序、有 bug 的程序有可能随意修改了别的进程的内存数据。我们希望使用计算机时，一个任务失败，至少不能影响其他的任务</li>
<li>问题二，内存使用效率低，比如系统有 100M 的物理空间，存在 A 和 B 程序占用了 90M，在来一个 C 程序需要 30M 的空间。此时系统物理空间不足，只能在已运行的程序中选择一个，并且将该程序的数据暂时拷贝到硬盘上，释放空间来将程序 C 的数据全部装入内存中运行。这个过程中，有大量的数据在装入装出，导致效率十分低下。</li>
<li>问题三，程序运行的地址不确定，系统会在物理空间中随机分配一段连续的空间给程序使用，因为是随机分配，所以程序运行的地址不确定</li>
</ul>`,r:{minutes:7.03,words:2108},t:"3.内存分配的分段和分页",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/4.%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.html",{loader:()=>B(()=>import("./4.进程内存布局.html-BQ28U2-S.js"),__vite__mapDeps([144,1])),meta:{e:`<p>本文简单介绍下 x86 平台 Linux 进程内存布局</p>
<h3>一、X86 平台 Linux 进程内存布局</h3>
<p>Linux 系统在装载 <code>elf</code> 格式的程序文件时，会调用 <code>loader</code> 把可执行文件中的各个段依次载入到从某一地址开始的空间中（载入地址取决<code>link editor(ld)</code> 和机器地址位数，在 32 位机器上是 <code>0x8048000</code>，即 <code>128M</code> 处）。如下图所示，以 <code>32</code> 位机器为例，首先被载入的是 <code>.text</code> 段，然后是 <code>.data</code> 段，最后是 <code>.bss</code> 段。这可以看作是程序的开始空间。程序所能访问的最后的地址是 <code>0xbfffffff</code>，也就是到 3G 地址处，3G 以上的 1G 空间是内核使用的，应用程序不可以直接访问。应用程序的堆栈从最高地址处开始向下生长，<code>.bss</code> 段与堆栈之间的空间是空闲的，空闲空间被分成两部分，一部分为 heap，一部分为 mmap 映射区域，mmap 映射区域一般从<code>TASK_SIZE/3</code> 的地方开始，但在不同的 Linux 内核和机器上，mmap 区域的开始位置一般是不同的。Heap 和 mmap 区域都可以供用户自由使用，但是它在刚开始的时候并没有映射到内存空间内，是不可访问的。在向内核请求分配该空间之前，对这个空间的访问会导致<code>segmentation fault</code>。用户程序可以直接使用系统调用来管理 heap 和 mmap 映射区域，但更多的时候程序都是使用 C 语言提供的<code>malloc()</code> 和 <code>free()</code> 函数来动态的分配和释放内存。Stack 区域是唯一不需要映射，用户却可以访问的内存区域，这也是利用堆栈溢出进行攻击的基础。</p>`,r:{minutes:3.45,words:1036},t:"4.进程内存布局",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/5.%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%9A%84%E5%8E%9F%E7%90%86.html",{loader:()=>B(()=>import("./5.共享内存的原理.html-Dooc7_tY.js"),__vite__mapDeps([145,1])),meta:{e:`<p>本文主要说一下共享内存的原理</p>
<p>本文源码来自于 <code>glibc 2.27</code></p>
<h3>一、共享内存的底层实现</h3>
<p>我们看一下 <code>shm_open</code> 的源码实现。</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int shm_open (const char *name, int oflag, mode_t mode) {</span></span>
<span class="line"><span>  SHM_GET_NAME (EINVAL, -1, "");</span></span>
<span class="line"><span>  oflag |= O_NOFOLLOW | O_CLOEXEC;</span></span>
<span class="line"><span>  /* Disable asynchronous cancellation.  */</span></span>
<span class="line"><span>  int state;</span></span>
<span class="line"><span>  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &amp;state);</span></span>
<span class="line"><span>  int fd = open (shm_name, oflag, mode);</span></span>
<span class="line"><span>  if (fd == -1 &amp;&amp; __glibc_unlikely (errno == EISDIR))</span></span>
<span class="line"><span>    /* It might be better to fold this error with EINVAL since</span></span>
<span class="line"><span>       directory names are just another example for unsuitable shared</span></span>
<span class="line"><span>       object names and the standard does not mention EISDIR.  */</span></span>
<span class="line"><span>    __set_errno (EINVAL);</span></span>
<span class="line"><span>  pthread_setcancelstate (state, NULL);</span></span>
<span class="line"><span>  return fd;</span></span>
<span class="line"><span>}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.6,words:1079},t:"5.共享内存的原理",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/6.buff%E5%92%8Ccache.html",{loader:()=>B(()=>import("./6.buff和cache.html-CA1hk8Bq.js"),__vite__mapDeps([146,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>buff 和 cache</h2>
<h3>一、概念</h3>
<p>man free 得到如下</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>buffers</span></span>
<span class="line"><span>	Memory used by kernel buffers (Buffers in /proc/meminfo)</span></span>
<span class="line"><span>cache  </span></span>
<span class="line"><span>	Memory used by the page cache and slabs (Cached and SReclaimable in /proc/meminfo)</span></span>
<span class="line"><span>buff/cache</span></span>
<span class="line"><span>	Sum of buffers and cache</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:5.77,words:1730},t:"6.buff和cache",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/7.%E7%BC%93%E5%AD%98%E7%9A%84%E5%8E%9F%E7%90%86.html",{loader:()=>B(()=>import("./7.缓存的原理.html-ys0vm-2P.js"),__vite__mapDeps([147,1])),meta:{e:`<p>我们把用于存储数据的电路叫做存储器，按照到 CPU 距离的远近，存储器主要分为寄存器、缓存和内存、磁盘。</p>
<ul>
<li><strong>CPU 中的寄存器使用触发器存储一个比特</strong>，读写速度最快，但所占电路面积最大。</li>
<li>存储器大体上可以分为只读存储器 ROM 和随机存储器 RAM 两大类。ROM 断电后信息不会丢失，RAM 断电后存储的信息后丢失。</li>
<li>早期的只读存储器往往只能写一次，不能更改。随着技术的进步，逐渐出现了紫光线可擦除 ROM 和电可擦除 ROM。从而使得 ROM 可以多次写入。现代的闪存就是 EEPROM，他是一种电可擦除的可编程 ROM。</li>
<li>RAM 可以进一步分为静态存储器 SRAM 和动态存储器 DRAM。SRAM 的存储单元多采用 6 管实现，DRAM 则采用一个开关加一个电容的方式实现。DRAM 的存储单元占用面积小，更容易集成，所以容量也更大，但是 DRAM 的电容会缓慢漏电，因此需要定期刷新。SRAM 相比 DRAM 有更好的读写速度，多用来制作 CPU 的高速缓存。</li>
<li><strong>一般缓存是由静态存储器 SRAM 组成的</strong>，他的本质是一种时序逻辑电路，具体的每个单元（比特）由一个个锁存器构成，锁存器的功能就是让电路具有记忆功能。</li>
<li><strong>一般内存是由动态存储器 DRAM 组成的</strong>，DRAM 仅需要一个晶体管和一个电容。</li>
<li>SRAM 的单位造价要远高于动态存储器 DRAM。因为 SRAM 由锁存器构成，一个锁存器需要 6 个晶体管，而实现一个 DRAM 仅需要一个晶体管和一个电容。但是 DRAM 因为结构简单，单位面积可以存放更多数据，所以更适合做内存。</li>
<li>在制造方面，DRAM 因为有电容的存在，不再是单纯的逻辑电路，所以不能用 CMOS 工艺制作，而 SRAM 可以。这也是为什么缓存可以集成到芯片内部，而内存是和芯片分开制造的。</li>
</ul>`,r:{minutes:15.96,words:4789},t:"7.缓存的原理",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/8.%E7%BC%93%E5%AD%98%E5%91%BD%E4%B8%AD%E7%8E%87.html",{loader:()=>B(()=>import("./8.缓存命中率.html-BoebbHEl.js"),__vite__mapDeps([148,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>缓存命中率</h2>
<p>这里的缓存指的是数据在内存中的临时存储</p>
<p>缓存命中率：指直接通过缓存获取数据的请求次数，占所有数据请求次数的百分比。命中率越高，表示使用缓存带来的收益越高，应用程序的性能也就越好</p>
<h3>一、工具介绍</h3>
<h4>1. cachestat 和 cachetop</h4>
<ul>
<li>cachestat：提供了整个操作系统缓存的读写命中情况</li>
<li>cachetop：提供了每个进程的缓存命中情况</li>
</ul>
<p>这两个工具都是 bbc 软件包的一部分，基于 Linux 内核的 eBPF（extended Berkeley Packet Filters）机制，来跟踪内核中管理的缓存，并输出缓存的使用和命中情况。bbc-tools 需要内核为 4.1 或者更新的版本。</p>`,r:{minutes:4.7,words:1411},t:"8.缓存命中率",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/9.%E5%A4%9A%E6%A0%B8CPU%E5%90%8C%E6%AD%A5%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98.html",{loader:()=>B(()=>import("./9.多核CPU同步高速缓存.html-BMiJVWqA.js"),__vite__mapDeps([149,1])),meta:{e:`<p>在多核体系结构中，如果有一个 CPU 修改了内存中的某个值，那么必须有一种机制保证其他 CPU 能够观察到这个修改。于是人们设计了一些协议来规定一个 CPU 对缓存数据的修改，如何同步到另一个 CPU。</p>
<p>本文会介绍简单的 VI 协议和比较完善的 MESI 协议。</p>
<h3>一、缓存写策略</h3>
<p>第一种场景：当 CPU 修改了缓存中的数据，这些修改什么时候能传播到内存？有两种策略：写回（<code>Write Back</code>）和写直达（<code>Write Through</code>）。</p>
<ul>
<li>写回策略，CPU 对缓存的修改不会立刻传播到内存，只有当缓存块被替换时，这些被修改的缓存块，才会写回并覆盖内存中过时的数据。</li>
<li>写直达策略，缓存中任何一个字节的修改，都会立刻传播到内存，这种做法就像穿透缓存了一样，因此用 <code>through</code> 命名。</li>
</ul>`,r:{minutes:17.68,words:5303},t:"9.多核CPU同步高速缓存",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/swap%E5%8E%9F%E7%90%86.html",{loader:()=>B(()=>import("./swap原理.html-BU16vN1c.js"),__vite__mapDeps([150,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>一、系统内存资源回收方式</h2>
<h3>1. 系统的内存资源紧张时，系统可能会进行 内存回收、OOM杀死进程</h3>
<ul>
<li>OOM（Out Of Memory）系统杀死占用大量内存的进程，释放这些内存，再分配给其他更需要的进程</li>
<li>内存回收：系统释放掉可以回收的内存。
<ul>
<li>比如缓存和缓冲区属于可回收内存。他们在内存管理中，通常被叫做文件页。大部分文件页，都可以直接回收，以后有需要时，再从磁盘重新读取就可以了。而那些被应用程序修改过，并且暂时还没写入磁盘的数据（也就是脏页），就得先写入磁盘，然后才能进行内存释放。</li>
<li>比如内存映射的文件映射页，也是一种常见的文件页。它也可以被释放掉，下次再访问的时候，从文件重新读取</li>
<li>应用程序动态分配的堆内存，也称为 匿名页，这类内存不能直接释放回收。但是如果这些内存在分配后很少被访问，系统可能会把他们暂时存在磁盘中，释放内存给其他更需要的进程。这也是 Linux 的 Swap 机制。Swap 会把这些不常访问的内存先写到磁盘中，然后释放这些内存，给其他更需要的进程使用。再次访问这些内存时，重新从磁盘读入内存就可以了。</li>
</ul>
</li>
</ul>`,r:{minutes:7.74,words:2322},t:"undefined",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F.html",{loader:()=>B(()=>import("./内存泄漏.html-TLsFIIiY.js"),__vite__mapDeps([151,1])),meta:{e:`<p>背景</p>
<hr>
<p>对于一个c/c++程序员来说，内存泄漏是一个常见的也是令人头疼的问题。已经有许多技术被研究出来以应对这个问题，比如 Smart Pointer，Garbage Collection等。Smart Pointer技术比较成熟，STL中已经包含支持Smart Pointer的class，但是它的使用似乎并不广泛，而且它也不能解决所有的问题；Garbage Collection技术在Java 中已经比较成熟，但是在c/c++领域的发展并不顺畅，虽然很早就有人思考在C++中也加入GC的支持。</p>
<h1>内存泄露的定义</h1>
<hr>
<h4>广义的内存泄露</h4>`,r:{minutes:5.37,words:1611},t:"内存泄漏",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E5%8D%81%E4%B9%9D%E7%A7%8D%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F.html",{loader:()=>B(()=>import("./十九种内存泄漏.html-DtiEGHyH.js"),__vite__mapDeps([152,1])),meta:{e:`<p><a href="https://www.softwareverify.com/blog/the-nineteen-types-of-memory-leak/" target="_blank" rel="noopener noreferrer">https://www.softwareverify.com/blog/the-nineteen-types-of-memory-leak/</a></p>
<p>内存泄漏可能会有很多种不同的类型情况，我们总结一下内存泄漏的类型</p>
<h4>一、临时工作空间泄漏</h4>
<p>在函数或类方法内部分配的内存，函数完成前不会释放</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>HANDLE create_comms_handle() {</span></span>
<span class="line"><span>	char* name;</span></span>
<span class="line"><span>	HANDLE handle = nullptr;</span></span>
<span class="line"><span>	name = new char[10];</span></span>
<span class="line"><span>	if (name != NULL) {</span></span>
<span class="line"><span>			snprintf(name, "hello", id);</span></span>
<span class="line"><span>			handle = create_handle(name);</span></span>
<span class="line"><span>			</span></span>
<span class="line"><span>			// 如果这里不进行释放内存，会造成内存泄漏</span></span>
<span class="line"><span>			// delete[] name</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>	return handle;</span></span>
<span class="line"><span>}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.41,words:123},t:"十九种内存泄漏",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E6%9C%AA%E6%80%BB%E7%BB%93.html",{loader:()=>B(()=>import("./未总结.html-DSuC0bQv.js"),__vite__mapDeps([153,1])),meta:{e:`<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>slub </span></span>
<span class="line"><span>http://www.wowotech.net/memory_management/427.html</span></span>
<span class="line"><span>https://heapdump.cn/article/5609668</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mmap 和 madvise 的使用：https://www.cnblogs.com/wlzy/p/10665472.html</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mallopt 控制内存分配的函数：https://blog.csdn.net/u013920085/article/details/52847464</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.08,words:25},t:"",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E7%A8%8B%E5%BA%8F%E5%B1%80%E9%83%A8%E6%80%A7.html",{loader:()=>B(()=>import("./程序局部性.html-BPbDHfNd.js"),__vite__mapDeps([154,1])),meta:{e:`<h3>谈谈程序局部性</h3>
<p>程序局部性包括时间局部性和空间局部性。</p>
<ul>
<li>时间局部性是指被访问过一次的内存位置很可能在不远的将来会被再次访问</li>
<li>空间局部性是指如果一个内存位置被引用过，那么他邻近的位置在不远的将来也有很大概率会被访问</li>
</ul>
<p>利用局部性原理，人们设计了缓存，把可能会被访问到的少量数据放在缓存中，这样就大大加速了 CPU 访问内存的速度。虚拟内存的页缓存也是基于同样的原理，未来最有可能会被访问的页面会被保留在物理内存中。所以在多级存储结构中，当访问者和被访问者之间的速度不匹配时，就是缓存能够发挥作用的场景。</p>`,r:{minutes:.89,words:268},t:"程序局部性",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/1.%E5%86%85%E5%AD%98%E6%9A%B4%E5%A2%9E%E9%97%AE%E9%A2%98%E5%89%96%E6%9E%90%E8%A7%A3%E5%86%B3%E8%BF%87%E7%A8%8B.html",{loader:()=>B(()=>import("./1.内存暴增问题剖析解决过程.html-C690gNo2.js"),__vite__mapDeps([155,1])),meta:{e:`<h3>一、问题背景</h3>
<p><strong>我们的智能驾驶系统，遇到了 Glibc 的内存暴增问题。系统中实现了一个简单的内存管理模块，在高压力环境下长时间运行（加载感知模型），当内存管理模块的内存释放给 C 运行时库之后，C 运行时库并没有立即把内存归还给操作系统。比如占用的内存为 10GB，释放内存后，通过 TOP 命令查看，有时是 10GB、有时是 5GB，有时是 2GB，内存释放行为非常不确定。</strong></p>
<p>我们系统中的内存管理方式比较简单，使用全局的定长内存池，内存管理模块每次分配/释放 2MB 内存，然后分成 64KB 为单位的一个个小内存块用 hash 加链表的方式进行管理。如果申请的内存小于等于 64KB 时，直接从内存池的空闲链表中获取一个内存块，内存释放时归还空闲链表；如果申请的内存大于 64KB，直接通过C运行时库的 malloc 和 free 获取。某些数据结构涉及到很多小对象的管理，这些数据结构从全局内存池获取内存后再根据数据结构的特点进行组织。为了提高内存申请/释放的效率，减少锁冲突，为每一个线程单独保留 8MB 的内存块，每个线程优先从线程专属的 8MB 内存块获取内存，专属内存不足时才从全局的内存池获取。</p>`,r:{minutes:7.04,words:2112},t:"1.内存暴增问题剖析解决过程",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/2.%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98.html",{loader:()=>B(()=>import("./2.如何定位系统内存问题.html-CUkhKn5c.js"),__vite__mapDeps([156,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>如何快速定位系统内存问题</h2>
<h3>一、内存性能指标</h3>
<h4>1. 系统内存使用情况</h4>
<ul>
<li>已用内存和剩余内存，就是已经使用和还未使用的内存。</li>
<li>共享内存是通过 tmpfs 实现的，所以它的大小也就是 tmpfs 使用的内存大小。tmpfs 其实也是一种特殊的缓存。</li>
<li>可用内存是新进程可以使用的最大内存，它包括剩余内存和可回收缓存。</li>
<li>缓存包括两部分，一部分是磁盘读取文件的页缓存，用来缓存从磁盘读取的数据，可以加快以后再次访问的速度。另一部分，则是 Slab 分配器中的可回收内存</li>
<li>缓冲区是对原始磁盘块的临时存储，用来缓存将要写入磁盘的数据。这样，内核就可以把分散的写集中起来，统一优化磁盘写入。</li>
</ul>`,r:{minutes:2.77,words:831},t:"2.如何定位系统内存问题",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/3.%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E6%8E%92%E6%9F%A5%E4%B8%8E%E5%AE%9A%E4%BD%8D.html",{loader:()=>B(()=>import("./3.内存泄露的排查与定位.html-B9vSufXb.js"),__vite__mapDeps([157,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>内存泄露的排查与定位</h2>
<ul>
<li>栈内存由系统自动分配和管理。一旦程序运行超出了这个局部变量的作用域，栈内存就会被系统自动回收，所以不会产生内存泄露的问题</li>
<li>堆内存由应用程序自己来分配和管理。除非程序退出，这些堆内存并不会被系统自动释放，而是需要应用程序明确调用库函数 free 来释放他们。如果程序没有正确释放堆内存，就会造成内存泄露</li>
<li>只读段，包括程序的代码和常量，由于是只读的，不会再去分配新的内存，所以也不会产生内存泄漏</li>
<li>数据段，包括全局变量和静态变量，这些变量在定义时就已经确定了大小，所以也不会产生内存泄漏</li>
<li>最后一个内存映射段，包括动态链接库和共享内存，其中共享内存由程序动态分配和管理。所以，如果程序在分配后忘了回收，就会导致跟堆内存类似的泄漏问题</li>
</ul>`,r:{minutes:3.46,words:1037},t:"3.内存泄露的排查与定位",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/4.%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7.html",{loader:()=>B(()=>import("./4.内存问题检测工具.html-mKGwQCVU.js"),__vite__mapDeps([158,1])),meta:{e:`<h2>内存问题检测工具</h2>
<p>C/C++ 语言，程序员可以管理内存，十分便利，但同时灵活的内存访问也带来了很多很多的问题。尤其是那些偶现的，运行成本较高的场景，往往让我们的开发工作效率大大减慢。</p>
<p>一种办法是静态检查，但问题是很多测试场景跑不到，并且误报较多。另外一种就是动态检查工具，本文就是介绍几种 Linux 下运行时的内存检查工具。</p>
<h3>一、内存问题</h3>
<ul>
<li>memory overrun：写内存越界</li>
<li>double free：同一块内存释放两次</li>
<li>use after free：内存释放后使用</li>
<li>wild free：释放的内存指针是非法的</li>
<li>access uninitialized memory：访问未初始化内存</li>
<li>read invalid memory：读取非法内存，本质上也是内存越界</li>
<li>memory leak：内存泄漏</li>
<li>use after return：caller 访问一个指针，但该指针指向 callee 的栈内内存</li>
<li>stack overflow：栈溢出</li>
</ul>`,r:{minutes:9.25,words:2776},t:"4.内存问题检测工具",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/%E5%86%85%E5%AD%98%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E9%87%8A%E6%94%BE.html",{loader:()=>B(()=>import("./内存什么时候释放.html-Ct2KM_Kn.js"),__vite__mapDeps([159,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p>进程什么时候释放内存给操作系统</p>
<p>1.正常退出</p>
<ul>
<li>在main函数中执行return。</li>
<li>调用exit函数。</li>
<li>调用_exit函数。</li>
</ul>
<p>2.异常退出</p>
<ul>
<li>调用abort函数</li>
<li>进程收到某个信号，该信号使程序终止。（OOM）</li>
</ul>
<p>进程退出后都会将所有已打开的文件描述符关闭，释放它所占用的<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">内存</a>和其他资源</p>`,r:{minutes:.44,words:131},t:"undefined",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7.html",{loader:()=>B(()=>import("./内存分析工具.html-Cq8lmgwO.js"),__vite__mapDeps([160,1])),meta:{e:`<p>常见的内存分析工具：<a href="https://www.cnblogs.com/sjli-blog/p/15076966.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/sjli-blog/p/15076966.html</a></p>
`,r:{minutes:.04,words:12},t:"",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/1.IO%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7.html",{loader:()=>B(()=>import("./1.IO监控工具.html-CyLhDC22.js"),__vite__mapDeps([161,1])),meta:{e:`<h2>监控与分析</h2>
<h3>一、系统级 IO 监控</h3>
<h4>1. iostat 工具</h4>
<p>统计的是通用块层经过合并后，直接向设备提交的 IO 数据，可以反映系统整体的 IO 状况，但是有如下缺点：</p>
<ul>
<li>距离业务层比较遥远，和代码中的 read、write 不对应（由于系统预读、pagecache、IO 调度算法等）</li>
<li>是系统级，没有办法精确到进程，比如得知磁盘很忙，但是没办法告诉我们谁在忙？忙什么？</li>
</ul>
<h3>二、进程级别 IO 监控</h3>
<h4>1. iotop 和 pidstat 工具</h4>`,r:{minutes:1.57,words:472},t:"1.IO监控工具",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/%E5%B7%A5%E5%85%B7.html",{loader:()=>B(()=>import("./工具.html-Q6wIfLjJ.js"),__vite__mapDeps([162,1])),meta:{e:`<p>fsmon：<a href="https://github.com/nowsecure/fsmon/blob/master/README.md" target="_blank" rel="noopener noreferrer">https://github.com/nowsecure/fsmon/blob/master/README.md</a></p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>sysdig </span></span>
<span class="line"><span>https://github.com/draios/sysdig/wiki</span></span>
<span class="line"><span>sysdig 源码分析： http://blog.decbug.com/sysdig/</span></span>
<span class="line"><span>源码分析： https://www.jianshu.com/p/7cc5a2f6eae0</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.12,words:35},t:"IO相关工具",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E7%BC%96%E7%A8%8B%E8%B0%83%E8%AF%95/1.%E5%86%85%E5%AD%98%E7%94%B3%E8%AF%B7%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0.html",{loader:()=>B(()=>import("./1.内存申请相关函数.html-CZhK74FB.js"),__vite__mapDeps([163,1])),meta:{e:`<p>操作系统提供了相关的系统调用来完成相关工作。</p>
<p>对heap的操作，操作系统提供了brk()函数，C运行时库提供了sbrk()函数。</p>
<p>对mmap映射区域的操作，操作系统提供了mmap()和munmap()函数。</p>
<p>这里要提到一个很重要的概念，内存的延迟分配，只有在真正访问一个地址的时候才建立这个地址的物理映射，这是 Linux 内存管理的基本思想之一。Linux 内核在用户申请内存的时候，只是给它分配了一个线性区（也就是虚拟内存），并没有分配实际物理内存；只有当用户使用这块内存的时候，内核才会分配具体的物理页面给用户，这时候才占用宝贵的物理内存。内核释放物理页面是通过释放线性区，找到其所对应的物理页面，将其全部释放的过程。</p>`,r:{minutes:4.17,words:1250},t:"1.内存申请相关函数",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E7%BC%96%E7%A8%8B%E8%B0%83%E8%AF%95/%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E6%B3%A8%E6%84%8F.html",{loader:()=>B(()=>import("./编译选项注意.html-CbX3-Qs-.js"),__vite__mapDeps([164,1])),meta:{e:`<h2>使用第三方内存管理库时编译选项</h2>
<p>当使用第三方内存管理库（jemalloc、tcmalloc）时，用  gcc 来编译项目时，建议加上：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-fno-builtin-malloc</span></span>
<span class="line"><span>-fno-builtin-calloc</span></span>
<span class="line"><span>-fno-builtin-realloc</span></span>
<span class="line"><span>-fno-builtin-free</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.31,words:92},t:"使用第三方内存管理库时编译选项",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/1.%E7%A3%81%E7%9B%98%E5%92%8C%E6%9F%A5%E7%9C%8B%E6%80%A7%E8%83%BD.html",{loader:()=>B(()=>import("./1.磁盘和查看性能.html-CpKBRMXB.js"),__vite__mapDeps([165,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>一、磁盘</h2>
<h4>1. 按照存储介质，常见磁盘分为两类：机械磁盘和固态磁盘</h4>
<ul>
<li>机械磁盘，也称为硬盘驱动器（Hard Disk Driver），通常缩写为 HDD。机械磁盘主要由盘片和读写磁头组成，数据就存储在盘片的环状磁道中。在读写数据前，需要移动读写磁头，定位到数据所在的磁道，然后才能访问数据。
<ul>
<li>如果 I/O 请求刚好连续，那就不需要磁道寻址，自然可以获得最佳性能、</li>
<li>如果 IO 随机，需要不停地移动磁头，来定位数据位置，所以读写速度就会比较慢</li>
</ul>
</li>
<li>固态磁盘（Solid State Disk）通常缩写为 SSD。由固态电子元器件组成，固态磁盘不需要磁道寻址，所以性能比机械磁盘要好很多</li>
</ul>`,r:{minutes:9.57,words:2870},t:"1.磁盘和查看性能",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/10.linux%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90.html",{loader:()=>B(()=>import("./10.linux系统日志分析.html-CZYZR1e0.js"),__vite__mapDeps([166,1])),meta:{d:1603635084e3,l:"2020年10月25日",g:["linux 日志"],e:`<p>想要分析 linux 系统遇到的各种各样的情况，那就需要多看日志。</p>
<p>大部分的 linux 默认的日志守护进程是 syslog，位于 /etc/syslog 或者 /etc/syslogd 或者 /etc/rsyslog.d。默认配置文件为 /etc/syslog.conf 或者 rsyslog.conf。任何希望生成日志的程序都可以向 syslog 发送消息。</p>
<p>默认的配置下，日志文件通常保存在 /var/log 目录下</p>
<h4>日志类型</h4>
<p>一些常见的日志类型，但并不是所有的 linux 发行版都包含这些类型。</p>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">auth</td>
<td style="text-align:left">用户认证时产生的日志，如login命令、su命令。</td>
</tr>
<tr>
<td style="text-align:left">authpriv</td>
<td style="text-align:left">与 auth 类似，但是只能被特定用户查看。</td>
</tr>
<tr>
<td style="text-align:left">console</td>
<td style="text-align:left">针对系统控制台的消息。</td>
</tr>
<tr>
<td style="text-align:left">cron</td>
<td style="text-align:left">系统定期执行计划任务时产生的日志。</td>
</tr>
<tr>
<td style="text-align:left">daemon</td>
<td style="text-align:left">某些守护进程产生的日志。</td>
</tr>
<tr>
<td style="text-align:left">ftp</td>
<td style="text-align:left">FTP服务。</td>
</tr>
<tr>
<td style="text-align:left">kern</td>
<td style="text-align:left">系统内核消息。</td>
</tr>
<tr>
<td style="text-align:left">local0.local7</td>
<td style="text-align:left">由自定义程序使用。</td>
</tr>
<tr>
<td style="text-align:left">lpr</td>
<td style="text-align:left">与打印机活动有关。</td>
</tr>
<tr>
<td style="text-align:left">mail</td>
<td style="text-align:left">邮件日志。</td>
</tr>
<tr>
<td style="text-align:left">mark</td>
<td style="text-align:left">产生时间戳。系统每隔一段时间向日志文件中输出当前时间，每行的格式类似于 May 26 11:17:09 rs2 -- MARK --，可以由此推断系统发生故障的大概时间。</td>
</tr>
<tr>
<td style="text-align:left">news</td>
<td style="text-align:left">网络新闻传输协议(nntp)产生的消息。</td>
</tr>
<tr>
<td style="text-align:left">ntp</td>
<td style="text-align:left">网络时间协议(ntp)产生的消息。</td>
</tr>
<tr>
<td style="text-align:left">user</td>
<td style="text-align:left">用户进程。</td>
</tr>
<tr>
<td style="text-align:left">uucp</td>
<td style="text-align:left">UUCP子系统。</td>
</tr>
</tbody>
</table>`,r:{minutes:2.95,words:886},t:"10.linux系统日志分析",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/2.iowait%E7%9A%84%E7%90%86%E8%A7%A3.html",{loader:()=>B(()=>import("./2.iowait的理解.html-D6yk7kZe.js"),__vite__mapDeps([167,1])),meta:{e:`<h3>一、什么是 iowait</h3>
<p>来自 linux 中的解释</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Show the percentage of time that the CPU or CPUs were idle during which the system had an outstanding disk I/O request.</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,r:{minutes:1.48,words:443},t:"2.iowait的理解",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/3.IO%E5%A4%8D%E7%94%A8.html",{loader:()=>B(()=>import("./3.IO复用.html-Dr5NPBT3.js"),__vite__mapDeps([168,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>一、I/O复用之 select</h2>
<p>用途：在一段指定时间内，监听用户感兴趣的文件描述符上的可读、可写、异常等事件</p>
<h3>（一）、使用</h3>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> select</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> nfds</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> fd_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> readfds</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> fd_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> writefds</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> fd_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> excetfds</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> timeval</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,r:{minutes:13.16,words:3949},t:"3.IO复用",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/4.epoll%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.html",{loader:()=>B(()=>import("./4.epoll问题记录.html-D2jLY_OI.js"),__vite__mapDeps([169,1])),meta:{e:`<h2>IO 多路复用之 epoll 问题记录</h2>
<p>记录使用 epoll 时的一些疑惑和问题</p>
<h3>一、epoll 可以监听普通文件吗</h3>
<p>先以一段代码来验证</p>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;sys/epoll.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;fcntl.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> epfd, fd;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> epoll_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> ev</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">events</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> result;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    epfd </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> epoll_create</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (epfd </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        perror</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"epoll_create()"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    fd </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"./test.txt"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, O_RDONLY </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> O_CREAT);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (fd </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        perror</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"open()"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">    ev</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">events</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> EPOLLIN;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> epoll_ctl</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(epfd, EPOLL_CTL_ADD, fd, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">ev);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        perror</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"epoll_ctl()"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    epoll_wait</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(epfd, events, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.64,words:493},t:"4.epoll问题记录",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/5.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%92%8C%E6%9F%A5%E7%9C%8B%E6%80%A7%E8%83%BD.html",{loader:()=>B(()=>import("./5.文件系统和查看性能.html-DS4u4HEH.js"),__vite__mapDeps([170,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>文件系统</h2>
<h3>一、文件系统</h3>
<p>Linux 中一切皆文件，普通的文件、目录、块设备、套接字、管道等都是文件，通过统一的文件系统来管理。Linux 文件系统为每个文件都分配两个数据结构，索引节点（index node）和目录项（directory entry）。他们主要用来记录文件的元信息和目录结构。</p>
<ul>
<li>索引节点（inode）。用来记录文件的元数据，比如 inode 编号、文件大小、访问权限、修改日期、数据的位置等。索引节点和文件一一对应，它跟文件内容一样，都会被持久化存储到磁盘中。所以索引节点同样占用磁盘空间</li>
<li>目录项（dentry）。用来记录文件的名字、索引节点指针以及与其他目录项的关联关系。多个关联的目录项，就构成了文件系统的目录结构。不过，不同于索引节点，目录项是由内核维护的一个内存数据结构，所以通常也被叫做目录项缓存</li>
</ul>`,r:{minutes:8.18,words:2453},t:"5.文件系统和查看性能",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/6.DMA%E5%92%8C%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF.html",{loader:()=>B(()=>import("./6.DMA和零拷贝技术.html-BISQ4RKS.js"),__vite__mapDeps([171,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>DMA 和零拷贝技术</h2>
<h3>一、数据的四次拷贝与四次上下文切换</h3>
<p>当数据从磁盘中读出来，然后通过网络发送。中间会调用 <code>File.read(file, buf, len)</code> 和 <code>Socket.send(socket, buf, len)</code> 这两个系统调用。</p>
<p>例如消息队列 kafka 就会从磁盘中读取一批消息后原封不动的写入网卡进行发送。</p>
<p>在没有任何优化技术使用背景下，操作系统会为此进行 4 次数据拷贝，以及 4 次上下文切换</p>

<p><strong>四次拷贝</strong>：</p>`,r:{minutes:9.23,words:2770},t:"6.DMA和零拷贝技术",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/7.Inotify%E8%AF%A6%E8%A7%A3.html",{loader:()=>B(()=>import("./7.Inotify详解.html-DXCBoicR.js"),__vite__mapDeps([172,1])),meta:{e:`<h2>Inotify详解</h2>
<p>inotify 可以用来监控文件或者目录的变化，确定这些被监控的对象是否发生特定的事件。</p>
<h3>一、如何使用</h3>
<p>使用 inotify API 关键步骤如下：</p>
<ul>
<li>使用 <code>inotify_init()</code> 来创建一个 inotify 实例。系统调用会返回一个文件描述符</li>
<li>使用 <code>inotify_add_watch()</code> 来添加文件项到监控列表，通知内核自己感兴趣的文件以及事件。每个监控项都由路径名和相关联的位掩码组成。掩码指定了需要对路径监控的具体事件。返回一个监控描述符，用于后面的操作。此系统调用也可以执行相反的删除操作，将之前添加的监控项从 inotify 实例中删除。</li>
<li>要获得事件通知，需要对 inotify 文件描述符执行 read 操作，成功时返回一个或多个 inotify_event 结构体，每个结构体包含了一个文件的一个事件的详细信息</li>
<li>完成监控时，需要关闭 inotify 文件描述符。这样做会自动删除该 inotify 实例的所有监控项</li>
</ul>`,r:{minutes:7.66,words:2299},t:"7.Inotify详解",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/8.%E6%83%8A%E7%BE%A4%E6%95%88%E5%BA%94.html",{loader:()=>B(()=>import("./8.惊群效应.html-CFAwkYg2.js"),__vite__mapDeps([173,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>惊群效应</h2>
<h3>一、概念</h3>
<p>Linux 中，对设备模型进行了规范的标准化，比如设备分为字符设备、块设备、网络设备等，对于开发者而言，要给一个设备实现一个驱动程序就必须按照 linux 提供的规范来实现，其中对于跟用户层交互这里，内核要求开发者实现一个叫 file_operations 的结构，这个结构定义了一系列操作的回调指针，比如 read、write 等用户熟知的操作，当用户调用 read、write 等方法时，最终内核会回调到这个设备的 file_operations.read、file_operations.write 方法，这个方法的具体逻辑由驱动开发者实现，比如 accept 调用，实际上最终是调用了 socket 下面的 file_operations.accept 方法。</p>`,r:{minutes:11.68,words:3504},t:"8.惊群效应",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/9.linux%E6%9D%83%E9%99%90%E5%92%8Cumask%E5%80%BC.html",{loader:()=>B(()=>import("./9.linux权限和umask值.html-iCngSnxD.js"),__vite__mapDeps([174,1])),meta:{d:1584220284e3,l:"2020年3月15日",g:["umask"],e:`<h3>umask值</h3>
<p>umask值用于设置用户在创建文件时的默认权限，当我们在系统中创建目录或文件时，目录或文件所具有的默认权限就是由umask值决定的。</p>
<p>对于root用户，系统默认的umask值是0022；对于普通用户，系统默认的umask值是0002。执行umask命令可以查看当前用户的umask值。</p>
<p>umask值一共有4组数字，其中第1组数字用于定义特殊权限，我们一般不予考虑，与一般权限有关的是后3组数字。</p>
<p>默认情况下，对于目录，用户所能拥有的最大权限是777；对于文件，用户所能拥有的最大权限是目录的最大权限去掉执行权限，即666。<br>
因为x执行权限对于目录是必须的，没有执行权限就无法进入目录，而对于文件则不必默认赋予x执行权限。</p>`,r:{minutes:2.38,words:714},t:"9.linux权限和umask值",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/9.netlink%E4%BC%98%E7%BC%BA%E7%82%B9.html",{loader:()=>B(()=>import("./9.netlink优缺点.html-Bg1RO0Cq.js"),__vite__mapDeps([175,1])),meta:{e:`<h3>一、netlink 和 proc</h3>
<p>netlink 是一种在内核空间和用户空间之间进行通信的机制。它允许用户空间的进程通过 socket 接口与内核通信。通过 netlink，用户空间程序可以发送请求给内核，获取系统状态、配置参数，或者监听系统事件等。</p>
<p>proc 文件系统是一种特殊的虚拟文件系统，它提供了对系统内核运行时状态的访问。通过访问 <code>/proc</code> 目录下的文件，用户可以查看和修改内核的一些参数和状态。</p>
<h3>二、netlink 的优缺点</h3>
<p>netlink 作为 linux 内核和用户空间之间的通信机制，具有如下优缺点。</p>`,r:{minutes:2.23,words:670},t:"9.netlink优缺点",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/Linux%E7%B3%BB%E7%BB%9Ftempfs%E5%92%8Cshm%E8%AF%A6%E8%A7%A3.html",{loader:()=>B(()=>import("./Linux系统tempfs和shm详解.html-DC37XMLz.js"),__vite__mapDeps([176,1])),meta:{d:1608470357e3,l:"2020年12月20日",g:["tempfs /dev/shm"],e:`
<h2>一、tempfs文件系统</h2>
<p>文件系统有两种变体，称为<em>shm</em>和 <em>tmpfs</em>。它们都共享核心功能，并且主要用途不同。内核使用<code>shm</code>为匿名页面创建文件支持，并为<code>shmge()</code>创建的区域提供支持。该文件系统由<code>kern_mount（）</code>挂载这样它就可以在内部安装并且对用户不可见。<code>tmpfs</code>是一个临时文件系统，可以选择将其安装在/tmp/上，以具有基于RAM的快速临时文件系统。<code>tmpfs</code>的第二个用途 是将其安装在 /dev/shm/ 上。tmpfs文件系统中<code>mmap()</code>文件的进程将能够在它们之间共享信息，以作为System V IPC机制的替代方法。</p>`,r:{minutes:2.54,words:763},t:"Linux系统tempfs和/dev/shm解析",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/netlink%E7%9B%B8%E5%85%B3.html",{loader:()=>B(()=>import("./netlink相关.html-DkIGE3eF.js"),__vite__mapDeps([177,1])),meta:{e:`<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>libnl 库</span></span>
<span class="line"><span>https://www.infradead.org/~tgr/libnl/</span></span>
<span class="line"><span>https://github.com/thom311/libnl</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Generic Netlink 详解：https://blog.csdn.net/u011638528/article/details/10221557</span></span>
<span class="line"><span>Netlink 详解：https://e-mailky.github.io/2017-02-14-netlink-user-kernel1#netlink%E7%9A%84%E6%B6%88%E6%81%AF%E6%A0%BC%E5%BC%8F</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.15,words:44},t:"netlink 相关",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E4%B8%9A%E4%BD%99%E7%A0%94%E7%A9%B6.html",{loader:()=>B(()=>import("./业余研究.html-CMBjbJ2j.js"),__vite__mapDeps([178,1])),meta:{e:`<p>linux 下如何知道那个文件被那个进程写：<a href="http://blog.yufeng.info/archives/2581" target="_blank" rel="noopener noreferrer">http://blog.yufeng.info/archives/2581</a></p>
`,r:{minutes:.08,words:23},t:"业务研究",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html",{loader:()=>B(()=>import("./性能优化.html-Eh6oUdtg.js"),__vite__mapDeps([179,1])),meta:{e:`<p>Linux 性能优化实践：</p>
<p><a href="https://heapdump.cn/article/3900637" target="_blank" rel="noopener noreferrer">https://heapdump.cn/article/3900637</a></p>
<p><a href="https://mp.weixin.qq.com/s/mLEVKXShnifHbQiQrgJGSA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/mLEVKXShnifHbQiQrgJGSA</a></p>`,r:{minutes:.04,words:11},t:"",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/1.%E8%BF%9B%E7%A8%8B%E6%A0%88%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%A0%88%E5%92%8C%E5%86%85%E6%A0%B8%E6%A0%88%E5%92%8C%E4%B8%AD%E6%96%AD%E6%A0%88.html",{loader:()=>B(()=>import("./1.进程栈和线程栈和内核栈和中断栈.html-D9Btki_C.js"),__vite__mapDeps([180,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>Linux 中的各种栈：进程栈、线程栈、内核栈、中断栈</h2>
<h3>一、概述</h3>
<p>栈是一种 后入先出 的数据结构，栈的作用主要体现在：函数调用和多任务支持</p>
<h4>1. 栈的作用 -- 函数调用</h4>
<p>函数调用有三个基本过程：调用参数的传入、局部变量的空间管理、函数返回</p>
<p>函数的调用要保证高效，因此数据可以放在 <strong>CPU通用寄存器</strong>或者 <strong>RAM 内存</strong>中。以传递调用参数为例，可以选择使用 CPU 通用寄存器来存放参数，但是通用寄存器的数目都是有限的，当出现函数嵌套调用时，子函数再次使用原有的通用寄存器必然会导致冲突。因此如果想用它来传递参数，那在调用子函数前，就必须先 <strong>保存原有寄存器的值</strong>，然后当子函数退出的时候再 <strong>恢复原有寄存器的值</strong> 。</p>`,r:{minutes:7.05,words:2116},t:"1.进程栈和线程栈和内核栈和中断栈",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/2.%E7%BA%BF%E7%A8%8B%E5%B1%80%E9%83%A8%E5%AD%98%E5%82%A8%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0.html",{loader:()=>B(()=>import("./2.线程局部存储的原理与实现.html-ClH-d_jH.js"),__vite__mapDeps([181,1])),meta:{e:`<p>本文简单介绍线程局部缓存的原理，以及实现。本文代码来自于 <code>glibc 2.28</code>。</p>
<h3>一、简单介绍</h3>
<p>线程局部缓存（<code>Thread Local Storage</code>），他的特性就是线程私有的内存数据，每个线程都有，多线程场景中不会产生竞争，效率较高。</p>
<p>显式的 TLS 的 API 定义：</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">/* Functions for handling thread-specific data.  */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">/* Create a key value identifying a location in the thread-specific</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">   data area.  Each thread maintains a distinct thread-specific data</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">   area.  DESTR_FUNCTION, if non-NULL, is called with the value</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">   associated to that key when the key is destroyed.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">   DESTR_FUNCTION is not called if the value associated is NULL when</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">   the key is destroyed.  */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">extern</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> pthread_key_create</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">pthread_key_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">__key</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">                   void</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">__destr_function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">     __THROW </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">__nonnull</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ((</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">/* Destroy KEY.  */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">extern</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> pthread_key_delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">pthread_key_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> __key</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) __THROW;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">/* Return current value of the thread-specific data slot identified by KEY.  */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">extern</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">pthread_getspecific</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">pthread_key_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> __key</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) __THROW;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">/* Store POINTER in the thread-specific data slot identified by KEY. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">extern</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> pthread_setspecific</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">pthread_key_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> __key</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">                const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">__pointer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) __THROW ;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:7.17,words:2151},t:"2.线程局部存储的原理与实现",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/3.Linux%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E8%A7%A3%E6%9E%90.html",{loader:()=>B(()=>import("./3.Linux系统进程状态解析.html-COsMgWTB.js"),__vite__mapDeps([182,1])),meta:{d:1608473957e3,l:"2020年12月20日",g:["进程状态"],e:`<h2>一、Linux进程状态(R、S、D、T、Z、X)</h2>
<h4>R(TASK_RUNNING)，可执行状态</h4>
<p>Running or runnable (on run queue)</p>
<p>只有在该状态的进程才可能在CPU上运行。而同一时刻可能有多个进程处于可执行状态，这些进程的task_struct结构（进程控制块）被放入对应CPU的可执行队列中（一个进程最多只能出现在一个CPU的可执行队列中）。进程调度器的任务就是从各个CPU的可执行队列中分别选择一个进程在该CPU上运行。</p>
<p>很多操作系统教科书将正在CPU上执行的进程定义为RUNNING状态、而将可执行但是尚未被调度执行的进程定义为READY状态，这两种状态在linux下统一为 TASK_RUNNING状态。</p>`,r:{minutes:9.93,words:2979},t:"3.Linux系统进程状态解析",y:"a"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/4.fork%E5%AE%9E%E7%8E%B0.html",{loader:()=>B(()=>import("./4.fork实现.html-OJJc-oZk.js"),__vite__mapDeps([183,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>fork底层实现</h2>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">pid_t</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> fork</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">void</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"># 子进程返回 0，父进程返回子进程 id，出错返回-1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:5.33,words:1598},t:"4.fork实现",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%89%B9%E6%AE%8A%E7%9A%84IP%E5%9C%B0%E5%9D%80.html",{loader:()=>B(()=>import("./特殊的IP地址.html-fCXhAVyG.js"),__vite__mapDeps([184,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],r:{minutes:.04,words:11},t:"undefined",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/1.%E5%8F%AF%E6%89%A9%E5%B1%95%E6%9E%B6%E6%9E%84%E7%9A%84%E6%80%9D%E6%83%B3.html",{loader:()=>B(()=>import("./1.可扩展架构的思想.html-CoHFvYaW.js"),__vite__mapDeps([185,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>基本思想和模式</h2>
<p>可扩展架构的背后的核心思想就是<strong>拆</strong>。按照不同的思路来拆分软件系统，就会得到不同的架构，常见的拆分思路如下：</p>
<ul>
<li>面向流程拆分：将整个业务流程拆分成几个阶段，每个阶段作为一部分</li>
<li>面向服务拆分：将系统提供的服务拆分，每个服务作为一部分</li>
<li>面向功能拆分：即系统提供的功能拆分，每个功能作为一部分</li>
</ul>
<p>以 TCP/IP 协议栈为例，来说明流程、服务、功能的区别和联系</p>
<ul>
<li>流程，对应 TCP/IP 四层模型，因为 TCP/IP 网络通信流程是：应用层 -&gt; 传输层 -&gt; 网络层 -&gt; 物理+数据链路层，不管最上层的应用层是什么，这个流程不变</li>
<li>服务，对应应用层的 HTTP、FTP、SMTP等</li>
<li>功能，每个服务都会提供相应的功能。例如，HTTP 服务提供 GET、POST 功能，FTP 提供上传下载功能</li>
</ul>`,r:{minutes:7.46,words:2239},t:"1.可扩展架构的思想",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/2.%E5%BE%AE%E5%86%85%E6%A0%B8.html",{loader:()=>B(()=>import("./2.微内核.html-CElf60GP.js"),__vite__mapDeps([186,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>微内核架构</h2>
<p>微内核架构（Microkernel Architecture），也被称为插件化架构（Plug-in Architecture），是一种面向功能进行拆分的可扩展性架构，通常用于实现基于产品（原文为 product-based，指存在多个版本、需要下载安装才能使用，与 web-based 相对应）的应用。例如 Eclipse 这类 IDE 软件、UNIX 这类操作系统、淘宝 App 这类客户端软件等，也有一些企业将自己的业务系统设计成微内核的架构，例如保险公司的保险核算逻辑系统，不同的保险品种可以将逻辑封装成插件。</p>
<p>微内核架构包含两类组件：核心系统（core system）和插件模块（plug-in modules）。核心系统负责和具体业务功能无关的通用功能；插件模块负责实现具体的业务逻辑。</p>`,r:{minutes:5.2,words:1559},t:"2.微内核",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/3.%E5%BE%AE%E6%9C%8D%E5%8A%A1.html",{loader:()=>B(()=>import("./3.微服务.html-DXEIGVLw.js"),__vite__mapDeps([187,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>微服务</h2>
<p><strong>微服务的核心是服务治理，而服务治理的关键是服务划分。故微服务架构的本质就是对码农的分化和治理</strong></p>
<p>SOA 和微服务对比：</p>

<p>微服务就是一些协同工作小而自治的服务。2014年，<a href="https://zh.m.wikipedia.org/wiki/Martin_Fowler" target="_blank" rel="noopener noreferrer">Martin Fowler</a> 与 <a href="https://zh.m.wikipedia.org/w/index.php?title=James_Lewis&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener noreferrer">James Lewis</a> 共同提出了微服务的概念，定义了微服务是由以单一应用程序构成的小服务，自己拥有自己的进程与轻量化处理，服务依业务功能设计，以全自动的方式部署，与其他服务使用<a href="https://zh.m.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener noreferrer">HTTP API</a>通信。同时服务会使用最小的规模的集中管理 (例如 <a href="https://zh.m.wikipedia.org/wiki/Docker" target="_blank" rel="noopener noreferrer">Docker</a>) 能力，服务可以用不同的编程语言与数据库等组件实现</p>`,r:{minutes:11.99,words:3598},t:"3.微服务",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/1.%E5%AD%98%E5%82%A8%E6%9E%B6%E6%9E%84-%E9%9B%86%E7%BE%A4%E5%92%8C%E5%88%86%E5%8C%BA.html",{loader:()=>B(()=>import("./1.存储架构-集群和分区.html-UBQk9-wz.js"),__vite__mapDeps([188,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>高可用存储架构：集群和分区</h2>
<h2>一、数据集群</h2>
<p>集群就是多台机器组成在一起形成的一个统一的系统，数量上至少是3台。根据集群中机器承担的不同角色来划分，集群可以分为两类：数据集中集群、数据分散集群</p>
<h4>1. 数据集中集群</h4>

<p>也可以将数据集中集群称为1主多备或1主多从。数据只能往主机中写。</p>
<p>难点在于：</p>
<ul>
<li>
<p>主机如何将数据复制给备机？</p>
<ol>
<li>存在多条复制通道。多条复制通道首先会增大主机复制的压力</li>
<li>多条复制通道，可能会导致多个备机之间数据不一致</li>
</ol>
</li>
<li>
<p>备机如何检测主机状态？</p>
<p>多台备机都需要对主机状态进行判断，而不同的备机判断的结果可能是不同的，如何处理不同备机对主机状态的不同判断，是一个复杂的问题。</p>
</li>
<li>
<p>主机故障后，如何决定新的主机？<br>
有多台备机都可以升级为主机，但实际上只能允许一台备机升级为主机，那么究竟选择哪一台备机作为新的主机，备机之间如何协调。</p>
</li>
</ul>`,r:{minutes:5.61,words:1684},t:"1.存储架构-集群和分区",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/2.%E5%AD%98%E5%82%A8%E6%9E%B6%E6%9E%84-%E5%8F%8C%E6%9C%BA%E6%9E%B6%E6%9E%84.html",{loader:()=>B(()=>import("./2.存储架构-双机架构.html-CiA5P8Nc.js"),__vite__mapDeps([189,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>高可用存储架构-双机架构</h2>
<p>存储高可用方案的本质都是通过将数据复制到多个存储设备，通过数据冗余的方式来实现高可用，其复杂性主要体现在如何应对<strong>复制延迟</strong>和<strong>中断导致的数据不一致</strong>问题。对一个高可用存储方案，需要从以下几个方面进行思考和分析：</p>
<ul>
<li>数据如何复制？</li>
<li>各个节点的职责是什么？</li>
<li>如何应对复制延迟？</li>
<li>如何应对复制中断？</li>
</ul>
<p>常见的高可用存储架构有主备、主从、主主、集群、分区，</p>
<h3>一、主备复制</h3>`,r:{minutes:8.15,words:2445},t:"2.存储架构-双机架构",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/3.%E8%AE%A1%E7%AE%97%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84.html",{loader:()=>B(()=>import("./3.计算高可用架构.html-YAHxOCbw.js"),__vite__mapDeps([190,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>如何设计计算高可用架构</h2>
<p>计算高可用的本质是通过冗余来规避部分故障的风险，所以计算高可用的设计思想：通过增加更多服务器来达到计算高可用</p>
<p>计算高可用架构的设计复杂度主要体现在<strong>任务管理</strong>方面，即当任务在某台服务器上执行失败后，如何将任务重新分配到新的服务器进行执行</p>
<p>关键点：</p>
<ol>
<li>哪些服务器可以执行任务。
<ul>
<li>每个服务器都可以执行任务</li>
<li>只有特定服务器可以执行任务，当执行任务的服务器故障后，系统需要挑选新的服务器来执行任务，例如 Zookeeper 的 Leader 才能处理写操作请求</li>
</ul>
</li>
<li>任务如何重新执行
<ul>
<li>对于已经分配的任务即使失败也不做任何处理，系统只需要保证新的任务能够分配到其他非故障服务器上执行即可</li>
<li>设计一个任务管理器来管理需要执行的计算任务，服务器执行完任务后，需要向任务管理器反馈任务执行结果，任务管理器根据任务执行结果来决定是否需要将任务分配到另外的服务器上执行<br>
任务分配器是一个逻辑的概念，并不一定要求系统存在一个独立的任务分配器模块，比如：Zookeeper 中的 Follower 节点，当接收到写请求时会将请求转发给 Leader 节点处理，当接收到读请求时就自己处理，这里的 Follower 就相当于一个逻辑上的任务分配器</li>
</ul>
</li>
</ol>`,r:{minutes:7.75,words:2324},t:"3.计算高可用架构",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/4.%E5%BC%82%E5%9C%B0%E5%A4%9A%E6%B4%BB.html",{loader:()=>B(()=>import("./4.异地多活.html-Cte_XLtA.js"),__vite__mapDeps([191,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>业务高可用的保障：异地多活架构</h2>
<p>异地就是指地理位置上不同的地方；多活就是指不同地理位置上的系统都能够提供业务服务</p>
<p>判断一个系统是否符合异地多活，需要满足两个标准：</p>
<ul>
<li>正常情况下，用户无论访问哪一个地点的业务系统，都能够得到正确的业务服务。</li>
<li>某个地方业务异常的时候，用户访问其他地方正常的业务系统，能够得到正确的业务服务。</li>
</ul>
<p>异地多活的成本较高，要在一个或者多个机房搭建独立的一套业务系统。系统复杂度也比较高。</p>
<p>场景：支付宝就需要异地多活。但是像新闻网站异地备份就可以了，因为即使业务服务中断，对用户的影响并不会很大</p>`,r:{minutes:13.72,words:4116},t:"4.异地多活",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/5.%E6%8E%A5%E5%8F%A3%E7%BA%A7%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95.html",{loader:()=>B(()=>import("./5.接口级故障处理方法.html-WReX6NPK.js"),__vite__mapDeps([192,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>如何应对接口级的故障</h2>
<p>接口级故障的典型表现就是，系统并没有宕机、网络也没有中断，但业务却出现问题了，例如业务响应缓慢、大量访问超时和大量访问出现异常（给用户弹出提示“无法连接数据库”）</p>
<p>这类问题的主要原因在于系统压力太大、负载太高，导致无法快速处理业务请求，由此引发更多的后续问题。最常见的情况就是，数据库慢查询将数据库的服务器资源耗尽，导致读写超时，业务读写数据库时要么无法连接数据库、要么超时，最终用户看到的现象就是访问很慢，一会儿访问抛出异常，一会儿访问又是正常结果。</p>
<p>导致接口级的故障的原因可以分为两大类：</p>
<ul>
<li>内部原因：包括程序BUG 导致死循环，某个接口导致数据库慢查询，内存泄露等</li>
<li>外部原因：黑客攻击、第三方系统响应慢</li>
</ul>`,r:{minutes:10.91,words:3273},t:"5.接口级故障处理方法",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/6.CAP%E7%90%86%E8%AE%BA.html",{loader:()=>B(()=>import("./6.CAP理论.html-DxmWU9J2.js"),__vite__mapDeps([193,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>CAP理论</h2>
<p>Consistency、Availability、Partition Tolerance</p>
<p>Robert Greiner（<a href="http://robertgreiner.com/about/%EF%BC%89%E7%9A%84%E6%96%87%E7%AB%A0%E4%BD%9C%E4%B8%BA%E5%9F%BA%E7%A1%80%EF%BC%8C%E5%85%B6%E4%B8%AD%E6%9C%89%E4%B8%A4%E7%89%88%E8%A7%A3%E9%87%8A%EF%BC%9A" target="_blank" rel="noopener noreferrer">http://robertgreiner.com/about/）的文章作为基础，其中有两版解释：</a></p>`,r:{minutes:9.49,words:2848},t:"6.CAP理论",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/7.%E5%A6%82%E4%BD%95%E6%8E%92%E9%99%A4%E5%8F%AF%E7%94%A8%E6%80%A7%E9%9A%90%E6%82%A3.html",{loader:()=>B(()=>import("./7.如何排除可用性隐患.html-C-FTm41N.js"),__vite__mapDeps([194,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>FMEA 方法-排除架构可用性隐患</h2>
<p>FMEA（Failure mode and effects analysis，故障模式与影响分析）FMEA 是一种在各行各业都有广泛应用的可用性分析方法，通过对系统范围内潜在的故障模式加以分析，并按照严重程度进行分类，以确定失效对于系统的最终影响</p>
<p>在架构设计领域，FMEA 的具体分析方法是：</p>
<ul>
<li>给出初始的架构设计图</li>
<li>假设架构中某个部件发生故障</li>
<li>分析此故障对系统功能造成的影响</li>
<li>根据分析结果，判断架构是否需要进行优化</li>
</ul>
<p>FMEA 分析的方法其实很简单，就是一个 FMEA 分析表，常见的 FMEA 分析表格包含下面部分</p>`,r:{minutes:6.22,words:1865},t:"7.如何排除可用性隐患",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/1.%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9B%86%E7%BE%A4%E4%B9%8B%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.html",{loader:()=>B(()=>import("./1.数据库集群之分库分表.html-BRKnWgZb.js"),__vite__mapDeps([195,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>二、高性能数据库集群：分库分表</h3>
<p>读写分离分散了数据库的读写操作的压力，但没有分散存储压力，体现在几个方面</p>
<ul>
<li>数据量大，读写性能下降，即使有索引，索引也会很大</li>
<li>数据文件很大，数据库备份和恢复需要耗费很长时间</li>
<li>数据文件越大，极端情况下丢失数据的风险越高（例如机房火灾导致的主备机都故障）</li>
</ul>
<h4>1. 业务分库</h4>
<p>按照业务模块将数据分散到不同的数据库服务器。例如电商网站，将用户数据、商品数据、订单数据分开到三台不同的数据库服务器<br>
引入问题：</p>
<ul>
<li>无法使用 join 操作，原本在同一个数据库中的表分散到不同数据库中</li>
<li>事务问题，业务分库后，表分散到不同数据库，无法通过事务统一修改，虽然有分布式事务的解决方案（MySQL的XA），但性能太低</li>
<li>成本问题，原来需要 1 台数据库现在需要 3 台，考虑备份，需要 6 台</li>
</ul>`,r:{minutes:3.16,words:947},t:"1.数据库集群之分库分表",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/2.%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9B%86%E7%BE%A4%E4%B9%8B%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB.html",{loader:()=>B(()=>import("./2.数据库集群之读写分离.html-CMCQK1pG.js"),__vite__mapDeps([196,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>一、高性能数据库集群：读写分离</h3>
<p>基本原理是将数据库读写操作分散到不同的节点上。例如数据库主机负责读写操作，从机负责读操作。<br>
引入了两个问题：<strong>主从复制延迟</strong>和<strong>分配机制</strong></p>
<h4>1. 主从复制延迟</h4>
<p>以 MySQL 为例，主从复制延迟可能达到 1 秒，如果有大量数据同步，延迟 1 分钟也有可能。会导致从主机读取的数据和从机读取的数据不一致。</p>
<p>解决办法：</p>
<ul>
<li>写操作后的读操作指定发给主服务器。缺点：和业务强绑定，对业务的侵入和影响较大，新来的程序员可能会写出bug</li>
<li>读从机失败后再读一次主机。二次读取，无需和业务绑定，但是如果有很多二次读取，会增加主机的读压力。</li>
<li>关键业务读写操作全部指向主机，非关键业务采用读写分离。</li>
</ul>`,r:{minutes:1.95,words:585},t:"2.数据库集群之读写分离",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/3.%E9%AB%98%E6%80%A7%E8%83%BDNoSQL.html",{loader:()=>B(()=>import("./3.高性能NoSQL.html-CrrsD6Fi.js"),__vite__mapDeps([197,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>三、高性能NoSQL</h3>
<p>关系型数据库存在的缺点</p>
<ol>
<li>关系型数据库存储的是行记录，无法存储数据结构（例有序数组）</li>
<li>关系型数据库的 schema 扩展很不方便，表结构 schema 是强约束，操作不存在的列会保错；业务变化时扩充列比较麻烦，需要执行DDL（data definition language，如 CREATE、ALTER、DROP 等）语句修改，而且修改时间会长时间锁表（MySQL 可能锁表 1 个小时）</li>
<li>关系型数据库在大数据场景下 I/O 高。因为即使只针对其中某一列进行运算，关系型数据库也会将整行数据从存储设备读入内存</li>
<li>关系型数据库的全文搜索功能比较弱，使用 like 进行整表扫描，性能非常低。</li>
</ol>`,r:{minutes:4.95,words:1485},t:"3.高性能NoSQL",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/4.%E9%AB%98%E6%80%A7%E8%83%BD%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.html",{loader:()=>B(()=>import("./4.高性能负载均衡.html-D1XGBwAO.js"),__vite__mapDeps([198,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>高性能负载均衡：分类及架构</h2>
<p>通过增加更多的服务器来提升系统整体的计算能力。高性能集群的复杂性体现在需要增加一个任务分配器，以及为任务选择一个合适的任务分配算法。任务分配器也被称为负载均衡器。不同的任务分配算法目标不一样，比如：基于负载考虑、基于性能（吞吐量、响应时间）考虑、基于计算单元考虑</p>
<p>常见的负载均衡系统包括：DNS负载均衡、硬件负载均衡、软件负载均衡</p>
<h3>一、DNS负载均衡</h3>
<p>一般用来实现地理级别的均衡，本质是DNS 解析同一个域名可以返回不同的 IP 地址。</p>
<p>DNS 负载均衡实现简单、成本低，但也存在粒度太粗、负载均衡算法少等缺点<br>
优点：</p>`,r:{minutes:4.77,words:1432},t:"4.高性能负载均衡",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/5.%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%93%E5%AD%98%E6%9E%B6%E6%9E%84-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E9%9B%AA%E5%B4%A9%E7%83%AD%E7%82%B9.html",{loader:()=>B(()=>import("./5.高性能缓存架构-缓存穿透雪崩热点.html-C_D4meOy.js"),__vite__mapDeps([199,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>高性能缓存架构</h2>
<p>缓存能够带来性能的大幅提升，带来的问题</p>
<h3>一、缓存穿透</h3>
<p>业务系统虽然去缓存查询数据，但缓存中没有数据，业务系统需要去存储系统查询数据</p>
<h4>1. 存储数据不存在</h4>
<p>被访问的数据确实不存在。异常情况，比如黑客攻击，故意大量访问某些读取不存在数据的业务</p>
<p>解决：如果查询存储系统的数据没有找到，则直接设置一个默认值（可以是空值，也可以是具体的值）存到缓存中。这样第二次读取时就会获取到默认值，而不会继续访问存储系统</p>
<h4>2. 缓存数据生成耗费大量时间或资源</h4>
<p>是存储系统中存在数据，但生成缓存数据需要耗费较长时间或者耗费大量资源。如果刚好在业务访问的时候缓存失效了，那么也会出现缓存没有发挥作用，访问压力全部集中在存储系统上的情况。</p>`,r:{minutes:5.07,words:1521},t:"5.高性能缓存架构-缓存穿透雪崩热点",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/6.%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%AB%98%E6%80%A7%E8%83%BD-Reactor%E4%B8%8EProactor.html",{loader:()=>B(()=>import("./6.单服务器高性能-Reactor与Proactor.html-B_V5VOD9.js"),__vite__mapDeps([200,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>单服务器高性能模式：Reactor与Proactor</h2>
<p>IO 复用技术的两个关键点：</p>
<ul>
<li>当多条连接共用一个阻塞对象后，进程只需要在一个阻塞对象上等待，而无须在轮询所有连接，常见的实现：select、epoll、kqueue 等</li>
<li>当某条连接有新的数据可以处理时，操作系统会通知进程，进程从阻塞状态返回，开始进行业务处理</li>
</ul>
<h3>一、Reactor</h3>
<p>Reactor 模式要求主线程（IO处理单元）只负责监听文件描述符上是否有事件发生，有的话就立即将该事件通知工作线程（逻辑单元）。除此之外，主线程不做任何其他实质性的工作。读写数据、接受新的连接、处理客户请求均在工作线程中完成</p>`,r:{minutes:6.14,words:1843},t:"6.单服务器高性能-Reactor与Proactor",y:"a"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/7.%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%AB%98%E6%80%A7%E8%83%BD%E6%A8%A1%E5%BC%8F-PPC%E5%92%8CTPC.html",{loader:()=>B(()=>import("./7.单服务器高性能模式-PPC和TPC.html-Bg6I1Z1E.js"),__vite__mapDeps([201,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>单服务器高性能模式：PPC和TPC</h2>
<p>架构设计决定了系统性能的上限，代码实现细节决定了系统性能的下限</p>
<p>单服务器高性能的关键之一就是服务器采取的并发模型，并发模型有如下两个关键设计点：</p>
<ul>
<li>服务器如何管理链接</li>
<li>服务器如何处理请求</li>
</ul>
<p>这两个设计点最终都和操作系统的 I/O 模型以及进行模型相关</p>
<ul>
<li>I/O 模型：阻塞、非阻塞、同步、异步</li>
<li>进程模型：单进程、多进程、多线程</li>
</ul>
<h3>一、PPC</h3>
<p>PPC 是 Process Per Connection 的缩写，其含义是指每次有新的连接就新建一个进程去专门处理这个连接的请求。基本的流程为：</p>`,r:{minutes:2.81,words:844},t:"7.单服务器高性能模式-PPC和TPC",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/1.%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.html",{loader:()=>B(()=>import("./1.智能指针.html-D2yxw15e.js"),__vite__mapDeps([202,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>一、智能指针</h2>
<h4>auto_ptr：拷贝时转移指针的所有权</h4>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> smart_ptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">	smart_ptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (smart_ptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> other) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		ptr_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> other</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">release</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">	smart_ptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">smart_ptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> rhs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		smart_ptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(rhs).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">swap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">		return</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">	T</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> release</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		T</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ptr_;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		ptr_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ptr;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> swap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">smart_ptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> rhs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">		using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::swap;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		swap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(ptr_, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">rhs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">ptr_</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.46,words:1038},t:"1.智能指针",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/10.%E5%AE%9A%E4%BD%8Dnew%E8%AF%A6%E8%A7%A3.html",{loader:()=>B(()=>import("./10.定位new详解.html-BD28BHrq.js"),__vite__mapDeps([203,1])),meta:{e:`<h2>placement new 详解</h2>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>void* operator new(size_t, void* ptr) throw() { return ptr; }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,r:{minutes:1.53,words:458},t:"10.定位new详解",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/11.%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html",{loader:()=>B(()=>import("./11.类型转换.html-C0aTxGAq.js"),__vite__mapDeps([204,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>C++ 类型转换</h2>
<p>c++ 类型转换包括隐式类型转换和显式类型转换</p>
<h3>一、隐式类型转换</h3>
<p>自动执行，无需显式的操作符。比如函数参数到形参的类型转换、函数返回值类型的自动转换等等</p>
<h4>1. 数值类型转换</h4>
<p>小类型转成大类型不会有问题。比如从小整数类型（char、short）转换到 int，或者从 float 转换到 double，这种“提升型”的转换不会造成有任何问题。但是有些大类型转成小类型就会有可能出现问题。</p>
<ul>
<li>
<p>负数转换为无符号类型，会使数值表示的意义发生改变。通常会采用二进制补码表示（编译器不警告有符号和无符号整数类型之间的隐式转换）</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int a = -1;</span></span>
<span class="line"><span>unsigned int b = 1;  // b = 2^32 - 1 = 4294967295</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>无论是转换到 bool 类型或者是有 bool 类型进行转换。false 等价于 0（数值类型）或者空指针（指针类型）；true 等价于其他任何非 0 数值。</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int a = -2;</span></span>
<span class="line"><span>bool b = a;  // 则 b = true</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>浮点数转换为整数会采取截断操作，即移除小数部分。如果转换时发生数值溢出，可能出现未定义行为</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>float a = -1.5f;</span></span>
<span class="line"><span>int b = a;  // b = -1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>`,r:{minutes:4.46,words:1337},t:"11.类型转换",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/12.typename%E7%94%A8%E6%B3%95.html",{loader:()=>B(()=>import("./12.typename用法.html-Cs5U219J.js"),__vite__mapDeps([205,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["c++"],e:`<h2>c++ 关于 typename 的用法</h2>
<h3>一、问题的由来</h3>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>template &lt;typename T&gt;</span></span>
<span class="line"><span>DataRes BuildData(const T&amp; val);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.8,words:241},t:"12.typename用法",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/13.POD%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3.html",{loader:()=>B(()=>import("./13.POD类型详解.html-DGuuiLhP.js"),__vite__mapDeps([206,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p>C语言当前定义的基本数据类型有  int、char、float 等整数类型、浮点类型、枚举、void、指针、数组、结构等等。然后只要碰到一串 01010110010 之类的数据，编译器都可以正确的把它解析出来。但是在C++中出现继承、派生这些概念后，编译器无法解释。为了和旧的C数据相兼容，因此C++提出了POD数据结构概念。</p>
<p>POD 是 Plain Old Data 的缩写，是 C++ 定义的一类数据结构概念，比如 int、float 等都是 POD 类型的。Plain 代表它是一个普通类型，Old 代表它是旧的，与几十年前的 C 语言兼容，那么就意味着可以使用 memcpy() 这种最原始的函数进行操作。两个系统进行交换数据，如果没有办法对数据进行语义检查和解释，那就只能以非常底层的数据形式进行交互，而拥有 POD 特征的类或者结构体通过二进制拷贝后依然能保持数据结构不变。也就是说，能用 C 的 memcpy() 等函数进行操作的类、结构体就是 POD 类型的数据。</p>`,r:{minutes:3.7,words:1109},t:"13.POD类型详解",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/14.extern%E7%9A%84%E8%AF%A6%E8%A7%A3.html",{loader:()=>B(()=>import("./14.extern的详解.html-BQx69EA2.js"),__vite__mapDeps([207,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>一、extern 的由来</h3>
<p>编译器一般采用按文件编译的方式，因此在编译时，各个文件中定义的全局变量是互相不可见的。也就是说，在编译期间，全局变量的可见域限制在文件内部。如下</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// a.cpp</span></span>
<span class="line"><span>int val;</span></span>
<span class="line"><span>int main() {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// b.cpp</span></span>
<span class="line"><span>int val;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.54,words:461},t:"14.extern的详解",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/15.explicit%E5%85%B3%E9%94%AE%E5%AD%97.html",{loader:()=>B(()=>import("./15.explicit关键字.html-CRErn29j.js"),__vite__mapDeps([208,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>c++ 中 explicit 关键字详解</h2>
<p>c++ 中的 explicit 关键字只能用于修饰只有一个参数的类构造函数，他的作用是表明该构造函数是显式的。</p>
<p>与之对应的 implicit 关键字则表明构造函数是隐式的，类构造函数默认情况下即声明为 implicit 隐式的</p>
<h4>一、隐式声明的场景</h4>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> str_;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> size_;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    A</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">size_</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(size) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        str_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF"> reinterpret_cast</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(size</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        memset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(str_, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, size_</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    A</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> p</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> strlen</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(p);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        str_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF"> reinterpret_cast</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(size</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        strcpy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(str_, p);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        size_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> strlen</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(str_);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> test_A</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    A </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">a1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">24</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // 1. OK，正常用法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    A a2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">       // 2. OK，发生隐式转换，为 A 预分配 10 字节大小的内存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    A a3;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">            // 3. NO，没有默认构造函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    A </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">a4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"abc"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">     // 4. OK，正常用法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    A a5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "abc"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    // 5. OK，调用 A(const char*)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    A a6 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> 'c'</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">      // 6. OK，调用 A(int), 且 size 等于 'c' 的 ASCII 值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    a1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">          // 7. OK，发生隐式转换，为 A 预分配 2 字节大小的内存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    a3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> a1;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">         // 8. 编译正确，但应该重载 = 操作符，正确释放内存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.92,words:875},t:"15.explicit关键字",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/16.emplace_back%E5%92%8Cpush_back%E5%8C%BA%E5%88%AB.html",{loader:()=>B(()=>import("./16.emplace_back和push_back区别.html-MMdSoclk.js"),__vite__mapDeps([209,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h4>emplace_back 和 push_back 的区别</h4>
<p>push_back 会调用：先调用构造函数，再调用移动构造函数。<br>
或者：先调用构造函数，再调用拷贝构造函数。<br>
push_back 向容器尾部添加元素时，首先会创建这个元素，然后再将这个元素拷贝或者移动到容器中。（如果是拷贝的话，事后会自行销毁先前创建的这个元素）</p>
<p>emplace_back 会调用：直接调用构造函数。<br>
emplace_back 则是直接在容器尾部创建这个元素，省去了拷贝或者移动元素的过程</p>
`,r:{minutes:.54,words:162},t:"16.emplace_back和push_back区别",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/17.cout%E4%BD%BF%E7%94%A8.html",{loader:()=>B(()=>import("./17.cout使用.html-yke2OIDe.js"),__vite__mapDeps([210,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p>C / C++ 保留两位小数（setprecision(n)的一些用法总结）<br>
<a href="https://blog.csdn.net/qq_36667170/article/details/79265224" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_36667170/article/details/79265224</a></p>
<h4>1. c++ 设置浮点数精度</h4>
<p>如下，有三种方法</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 1</span></span>
<span class="line"><span>// std::cout &lt;&lt; std::setiosflags(std::ios::fixed) &lt;&lt; std::setprecision(2);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 2 </span></span>
<span class="line"><span>// std::cout.setf(std::ios::fixed);</span></span>
<span class="line"><span>// std::cout &lt;&lt; std::setprecision(3);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 3</span></span>
<span class="line"><span>std::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(4);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.71,words:212},t:"17.cout使用",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/18.c__11%E4%B9%8Benable_shared_from_this.html",{loader:()=>B(()=>import("./18.c__11之enable_shared_from_this.html-C4rY5pCE.js"),__vite__mapDeps([211,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h4>c++11 之 enable_shared_from_this</h4>
<p>enable_shared_from_this 是一个模板类</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>template&lt; class T &gt; class enable_shared_from_this;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,r:{minutes:1.26,words:377},t:"18.c++11之enable_shared_from_this",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/19.c__%E8%BE%93%E5%85%A5.html",{loader:()=>B(()=>import("./19.c__输入.html-CeUB9IZp.js"),__vite__mapDeps([212,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>c++中输入cin</h2>
<p>系统的输入都有一个缓冲区，当一次键盘输入结束时会将输入的数据存入输入缓冲区，而cin对象直接从输入缓冲区中读取数据。正因为cin对象是直接从缓冲区取数据的，所以有时候当缓冲区有残留数据的时候，cin对象会直接取得这些残留数据而不会请求键盘输入。</p>
<h4>1. cin&gt;&gt;</h4>
<ul>
<li>当 cin&gt;&gt; 从缓冲区中读取数据的时候，若缓冲区中第一个字符是空格、tab或者换行这些分隔符时，cin&gt;&gt; 会将其忽略并清除，继续取下一个字符，若缓冲区为空，则继续等待。但是如果读取成功，字符后面的分隔符是残留在缓冲区的。 cin&gt;&gt; 不做处理。</li>
<li>如果不想略过空白字符，可以使用 nosklpws 流控制。比如 cin &gt;&gt; noskipws &gt;&gt; a;</li>
<li>getline(cin, str); getline 读取数据的时候，不会忽略输入缓冲区中换行、tab 等</li>
</ul>`,r:{minutes:3.16,words:947},t:"19.c++输入",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/2.%E5%B7%A6%E5%80%BC%E5%92%8C%E5%8F%B3%E5%80%BC.html",{loader:()=>B(()=>import("./2.左值和右值.html-BJl119dd.js"),__vite__mapDeps([213,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h4>左值和右值</h4>
<figure><figcaption></figcaption></figure>
<ul>
<li>lvalue：通常是可以放在等号左边的表达式，左值</li>
<li>rvalue：通常是只能放在等号右边的表达式，右值</li>
<li>glvalue：是 generalized lvalue，广义左值</li>
<li>xvalue：是 expiring lvalue，将亡值</li>
<li>prvalue：是 pure rvalue，纯右值</li>
</ul>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>左值 lvalue 是有标识符、可以取地址的表达式，最常见的情况有：</span></span>
<span class="line"><span>1. 变量、函数或数据成员的名字</span></span>
<span class="line"><span>2. 返回左值引用的表达式，如 ++x、x = 1、count &lt;&lt; ' '</span></span>
<span class="line"><span>3. 字符串字面量如："hello world"</span></span>
<span class="line"><span>在函数调用时，左值可以绑定到左值引用的参数，如T&amp;。一个常量只能绑定到常左值引用，如 const T&amp;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>纯右值 prvalue 是没有标识符、不可以取地址的表达式，一般也称为“临时对象”，最常见的情况有：</span></span>
<span class="line"><span>1. 返回非引用类型的表达式，如 x++、x+1、make_shared&lt;int&gt;(42)</span></span>
<span class="line"><span>2. 除字符串字面量之外的字面量，如 42、true</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:4.81,words:1442},t:"2.左值和右值",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/3.const%E5%92%8Cconstexpr%E4%BD%BF%E7%94%A8.html",{loader:()=>B(()=>import("./3.const和constexpr使用.html-DtOzW6hw.js"),__vite__mapDeps([214,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>一、const 和 constexpr</h3>
<h4>1. 区别</h4>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> dis_1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    //错误，x是只读的变量，但本质上是变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    array </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,x</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> myarr{</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> myarr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> dis_2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    // 正确，x是只读变量的同时，还是个常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    array </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,x</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> myarr{</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> myarr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">   dis_1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">   dis_2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.99,words:597},t:"3.const和constexpr使用",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/4.STL%E5%AE%B9%E5%99%A8.html",{loader:()=>B(()=>import("./4.STL容器.html-eZ3MIR0R.js"),__vite__mapDeps([215,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>1. string</h3>
<p>string 是模版 basic_string 对于char 类型的特化，可以认为是一个只存放字符 char 类型数据的容器。string 一般并不被认为是一个C++的容器，但是和容器有很多共同点</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>对于对外暴露的接口，一般不建议在接口中使用 const string&amp;，除非确知调用者已经持有 string，如果函数里不对字符串做复杂处理的话，使用 const char* 可以避免在调用者只有 C 字符串时编译器自动构造 string，这种额外的构造和析构代码并不低。如果实现较为复杂、希望使用 string 的成员函数的话，那应该考虑下面的策略：</span></span>
<span class="line"><span>1. 如果如果不修改字符串的内容，使用 const string&amp; 或 C++17 的 string_view 作为参数类型。后者是最理想的情况，因为即使在只有 C 字符串的情况，也不会引发不必要的内存复制</span></span>
<span class="line"><span>2. 如果需要在函数内修改字符串内容、但不影响调用者的该字符串，使用 string 作为参数类型(自动拷贝)</span></span>
<span class="line"><span>3. 如果需要改变调用者的字符串内容，使用 string&amp; 作为参数类型(通常不推荐)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:6.99,words:2098},t:"4.STL容器",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/5.%E9%97%AD%E5%8C%85%E5%92%8C%E4%BB%BF%E5%87%BD%E6%95%B0%E5%92%8C%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0.html",{loader:()=>B(()=>import("./5.闭包和仿函数和匿名函数.html-CpZV2_-J.js"),__vite__mapDeps([216,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>一、仿函数</h2>
<p>Functor/Function Object翻译过来就是仿函数，它是通过重载()运算符模拟函数行为的类。也就是说，它不是函数（所以仿函数翻译的很贴切）。因为它重载了()运算符，因此可以像调用函数一样对它进行调用。STL中大量运用了Function Object，也提供了很多预先定义的Function Object。还是从vector遍历举例：</p>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> PrintInt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> elem</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::cout</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">elem</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">' '</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> v;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">for_each</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">v</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(),</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">v</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">end</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">PrintInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">//C++ 11 lambda stype</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">for_each</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(v), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">end</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(v), [](</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">){ cout</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">", "</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; });</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.09,words:926},t:"5.闭包和仿函数和匿名函数",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/6.%E5%AE%8F%E4%B8%8E%E5%86%85%E8%81%94.html",{loader:()=>B(()=>import("./6.宏与内联.html-DzeRBhTg.js"),__vite__mapDeps([217,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>一、宏</h2>
<h3>1. 为什么要有宏</h3>
<p>因为函数的调用必须要将程序执行的顺序转移到函数所存放在内存中的某个地址，将函数的程序内容执行完后，再返回到转去执行该函数前的地方。这种转移操作要求在转去执行前要保存现场并记忆执行的地址，转回后要恢复现场，并按原来保存地址继续执行。因此，函数调用要有一定的时间和空间方面的开销，于是将影响其效率。</p>
<p>而宏只是在预处理的地方把代码展开，不需要额外的空间和时间方面的开销，所以调用一个宏比调用一个函数更有效率</p>
<h3>2. 宏的问题</h3>
<p>缺点：</p>
<ul>
<li>宏没有类型检测，不安全</li>
<li>宏是在预处理时进行简单文本替换，并不是简单的参数传递（很难处理一些特定情况。例如：Add(x*x)，传入 (5+5, 10+3) 变成了 <code>5+5*10+3</code>）</li>
<li>使代码变长，不能进行调试</li>
</ul>`,r:{minutes:3.74,words:1121},t:"6.宏与内联",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/7.%E8%99%9A%E7%BB%A7%E6%89%BF%E5%92%8C%E8%99%9A%E5%9F%BA%E7%B1%BB.html",{loader:()=>B(()=>import("./7.虚继承和虚基类.html-B2L4K0Za.js"),__vite__mapDeps([218,1])),meta:{e:`<p>C++ 中多继承很容易产生<strong>命名冲突</strong>，也就是说基类和继承类中如果有同名变量，编译器不知道选用哪一个，就会产生歧义。</p>
<p>而且继承类对象还保留了基类的成员，但大多数情况下，这些成员是多余的，很容易造成<strong>数据冗余</strong>。</p>
<p>而且还会造成菱形继承中问题。</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>class A { int m_a; };</span></span>
<span class="line"><span>class B : public A { int m_b; }</span></span>
<span class="line"><span>class C : public A { int m_c; }</span></span>
<span class="line"><span>class D : public B, public C { int m_d; }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.67,words:502},t:"7.虚继承和虚基类",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/8.%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8.html",{loader:()=>B(()=>import("./8.断言的使用.html-Ic0ZFKpo.js"),__vite__mapDeps([219,1])),meta:{e:`<h2>断言的使用</h2>
<p>断言可以先计算表达式的真假，如果其值为假（即为 0），那么他先向 stderr 输出一条错误，然后调用 abort 终止程序运行。</p>
<p>断言分为：静态断言和动态断言。也即：编译期断言和运行期断言。</p>
<h3>一、编译期断言</h3>
<p><code>static_assert(expression, message)</code> 实现了编译器的断言，也叫静态断言。会调用 abort 终止程序的运行。</p>
<ul>
<li>如果第一个参数，常量表达式的值为 false，会产生一条编译错误</li>
<li>第二个参数就是错误提示字符串</li>
</ul>`,r:{minutes:1.23,words:369},t:"8.断言的使用",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/9.c__11%E4%B8%ADfunction%E5%92%8Cbind%E7%9A%84%E4%BD%BF%E7%94%A8.html",{loader:()=>B(()=>import("./9.c__11中function和bind的使用.html-CD2NQcYH.js"),__vite__mapDeps([220,1])),meta:{e:`<h2>c++11 中 function 和 bind 的使用</h2>
<p>在 c++11 中提供了 <code>std::function</code> 和 <code>std::bind</code> 两个方法来对可回调对象进行统一和封装。在我们设计回调函数时候，不可避免的需要传入一个函数对象或者函数指针的参数</p>
<p>c++ 有这么几种可调用对象：函数指针、lambda 表达式、仿函数。其中的 bind 机制是对旧版本中的 <code>bind1st</code> 和 <code>bind2st</code> 的合并升级。</p>
<ul>
<li>函数指针和其他指针类型一致，只不过函数指针指向某种特定类型</li>
<li>lambda 表达式是一个匿名的可调用的代码，可以较好的保证不会出现不安全的访问</li>
<li>仿函数就是重载了函数调用运算符 <code>()</code> 的类的对象</li>
</ul>`,r:{minutes:3.74,words:1123},t:"9.c++11中function和bind的使用",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/1.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.html",{loader:()=>B(()=>import("./1.并发编程.html-BLGd3m9N.js"),__vite__mapDeps([221,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>基于 thread 的多线程开发</h3>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> scoped_thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    template</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">typename</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">... </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">Arg</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    explicit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> scoped_thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">Arg</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">... </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">thread_</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">forward</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">Arg</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;(arg)...) {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    scoped_thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">scoped_thread</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&amp;&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> other</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">noexcept</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">thread_</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">move</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">other</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">thread_</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)) {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    scoped_thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> scoped_thread</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    ~scoped_thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">thread_</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">joinable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">            thread_</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">join</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">private:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::thread thread_;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:7.19,words:2158},t:"1.并发编程",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/10.%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html",{loader:()=>B(()=>import("./10.单例模式.html-EaZDxFWV.js"),__vite__mapDeps([222,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>一、单例模式实现</h2>
<h3>1. 线程不安全版本</h3>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> Singleton</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (m_instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            m_instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> m_instance;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">private:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> // 私有构造函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">public:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> Singleton</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> other</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">    Singleton</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> Singleton</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> other</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">private:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> Singleton</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> m_instance;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.35,words:1005},t:"10.单例模式",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/11.%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E4%BC%98%E5%8C%96.html",{loader:()=>B(()=>import("./11.分支预测优化.html-BJi8glIJ.js"),__vite__mapDeps([223,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>代码分支预测优化</h2>
<p>我们的代码中，<code>if/else</code> 代码编译后，一个分支的汇编代码紧随前面的代码，而另一个分支的汇编代码需要使用 JMP 指令跳转才能访问到。很明显，通过 JMP 访问需要更多的时间。</p>
<p>在复杂程序中，有很多的 <code>if/else</code> 语句，又或者是有频繁调用且有 <code>if/else</code> 语句的函数，每秒被调用几万次。通常程序员在分支预测方面做的很糟糕，编译器又不能精准的预测每一个分支，这是 JMP 指令产生的时间浪费就会很大。</p>
<h3>一、likely 和 unlikely</h3>`,r:{minutes:2.77,words:832},t:"11.分支预测优化",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/12.%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E6%B3%A8%E6%84%8F%E7%82%B9.html",{loader:()=>B(()=>import("./12.函数重载注意点.html-Dx0HnVPB.js"),__vite__mapDeps([224,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h4>一、为什么不要重载 &amp;&amp; 和 || 操作符</h4>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int a1 = 1;</span></span>
<span class="line"><span>int a2 = 0;</span></span>
<span class="line"><span>if (a1 || a2++) </span></span>
<span class="line"><span>if (a2 &amp;&amp; a1++)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.45,words:436},t:"12.函数重载注意点",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/13.%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0.html",{loader:()=>B(()=>import("./13.可变参数.html-QtKfHC8z.js"),__vite__mapDeps([225,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>一、带有可变参数的宏</h3>
<h4>1. 方法一</h4>
<p>在 1999 年版本的 ISO C 标准中，宏可以象函数一样，定义时可以带可变参数。宏的语法和函数的语法类似</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#define debug(format, ...) fprintf(stderr, format, __VA_ARGS__)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,r:{minutes:1.82,words:547},t:"13.可变参数",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/14.%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.html",{loader:()=>B(()=>import("./14.内存对齐.html-CbeCzU6Y.js"),__vite__mapDeps([226,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>内存对齐</h2>
<p>计算机对基本类型数据在内存中存放的位置有限制，会要求这些数据的首地址的值是某个数（通常它是 4 或 8 或 16）的倍数，这个就是内存对齐</p>
<h3>一、必要性</h3>
<p>假设一个 int 变量（32 位系统，4字节）存放在从地址 0x1 开始的连续 4 个字节地址中，处理器去读取数据时，得先从 0x0 地址开始读取第一个 4 字节块，剔除不想要的字节（0x0 地址），然后从地址 0x4 开始读取下一个 4 字节块，同样剔除不想要的数据（0x5、6、7 地址），最后留下的两块数据合并放入寄存器。这样的话，访问一个数据需要做很多工作。</p>
<p>在内存对齐的情况下，一个 int 变量（32 位系统，4字节），处理器可以一次性将它读出来，效率大大提高。这是性能原因</p>`,r:{minutes:3.52,words:1056},t:"14.内存对齐",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/15.%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%B5%AE%E7%82%B9%E6%95%B0.html",{loader:()=>B(()=>import("./15.生成随机浮点数.html-CFBy_hAJ.js"),__vite__mapDeps([227,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>获取随机数</h2>
<h3>一、C++11 方式</h3>
<ul>
<li>random_device 对象，他为随机引擎种子生成不确定的随机位，这对于避免产生相同的数字序列非常重要</li>
<li>random engine：生成随机的 bit 流。</li>
<li>distribution：生成满足用户需求的随机数</li>
</ul>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::random_device rd;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">default_random_engine</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> eng</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">rd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">uniform_int_distribution</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">distr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">i) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">	std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> distr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(eng) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> " "</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.23,words:369},t:"15.生成随机浮点数",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/16.%E6%97%B6%E9%97%B4%E7%BC%96%E7%A8%8B.html",{loader:()=>B(()=>import("./16.时间编程.html-8oAG-Xav.js"),__vite__mapDeps([228,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>Linux 下 C/C++ 的时间编程</h2>
<h3>一、Linux 下时间类型</h3>
<ul>
<li>
<p>real time：日历时间。对于 Linux 中，这个时间的起点是 1970年1月1日00点，Linux 上以此为起点的均为 UTC 时间。</p>
<p>格林威治时间（Greenwich Mean Time，GMT）也被称为世界标准的时间（Coordinated Universal Time，UTC）。UTC 和 GMT 两者是同一概念的时间。区别在于 UTC 是天文学上的概念，而 GMT 是基于一个原子钟。</p>
<p>GMT 是中央时区，北京在东8区，相差8小时，所以 <code>北京时间 = GMT时间 + 8小时</code></p>
<p><strong>注意：会受到修改系统时间的命令/api 或者 ntp 服务的影响，导致时间出现跳跃</strong></p>
</li>
<li>
<p>monotonic time：单调时间。意为不能被设置和影响的时间，它可以提供精确的时间信息，不会出现时间跳跃。单调时间的起点 posix 标准并没有明确指定，但在 Linux 上是以系统启动的时间为起点的。虽然说单调时钟的时间是稳定的，但它会被 adjtime 函数和 ntp 服务影响，同时当系统挂起或休眠时计时会被暂停。</p>
</li>
</ul>`,r:{minutes:9.26,words:2777},t:"16.Linux下C/C++ 的时间编程",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/17.%E5%BC%95%E7%94%A8%E5%92%8C%E6%8C%87%E9%92%88.html",{loader:()=>B(()=>import("./17.引用和指针.html-C0a6ptoZ.js"),__vite__mapDeps([229,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>c++ 中引用和指针的区别</h2>
<ul>
<li>从概念上，指针是存放变量地址的一个变量，在逻辑上是独立的。他可以被改变，包括其所指向的地址的改变和其指向的地址中所存放的数据的改变。而引用是一个别名，他的存在具有依赖性，所以引用必须在一开始就被初始化，而且其引用的对象在其整个生命周期中是不能被改变的。</li>
<li>指针传递参数和引用传递参数是有本质上的不同：
<ol>
<li>指针传递参数本质上是值传递，传递的是一个地址值。值传递的特点是被调函数对形参的任何操作都是作为局部变量进行，不会影响主调函数的实参变量的值</li>
<li>引用传递过程中，被调函数的形参虽然也作为局部变量在栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量。因此，被调函数对形参做的任何操作都影响了主调函数中的实参变量</li>
</ol>
</li>
<li>从编译角度。程序在编译时分别将指针和引用添加到符号表上，符号表上记录的是变量名及变量所对应地址。指针变量在符号表上对应的地址值为指针变量的地址值，而引用在符号表上对应的地址值为引用对象的地址值。符号表生成后就不会再改，因此指针可以改变其指向的对象（指针变量中的值可以改），而引用对象则不能修改。</li>
</ul>`,r:{minutes:2.45,words:734},t:"17.引用和指针的区别",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/18.%E5%BC%BA%E5%88%B6%E4%BF%AE%E6%94%B9const%20char%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE.html",{loader:()=>B(()=>import("./18.强制修改const char指针类型的数据.html-C4eTHxgA.js"),__vite__mapDeps([230,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>强制修改const char*类型的数据</h3>
<p>首先来说明const 的位置不同所带来的语法规则不同</p>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.45,words:435},t:"18.强制修改const char指针类型的数据",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/19.%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%88%A0%E9%99%A4%E7%A9%BA%E6%A0%BC.html",{loader:()=>B(()=>import("./19.字符串中删除空格.html-CrxmvD1D.js"),__vite__mapDeps([231,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>c++中的字符串中删除空格</h3>
<p>默认情况下，下面的字符被视为空白字符：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>1. 空格 ' '</span></span>
<span class="line"><span>2. 换行 '\\n'</span></span>
<span class="line"><span>3. 回车 '\\r'</span></span>
<span class="line"><span>4. 水平制表符 '\\t'</span></span>
<span class="line"><span>5. 换页 '\\f'</span></span>
<span class="line"><span>6. 垂直制表符 '\\v'</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.98,words:293},t:"19.字符串中删除空格",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/2.%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",{loader:()=>B(()=>import("./2.单元测试.html-JNPz7alO.js"),__vite__mapDeps([232,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>1. Boost.Test</h3>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> BOOST_TEST_MAIN</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;boost/test/unit_test.hpp&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;stdexcept&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (n </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">runtime_error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"Not the answer"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">BOOST_AUTO_TEST_CASE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(my_test) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    BOOST_TEST_MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"Testing"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    BOOST_TEST</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    BOOST_CHECK_THROW</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">41</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::runtime_error);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    BOOST_CHECK_NO_THROW</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">42</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> expected </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    BOOST_TEST</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> expected);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    BOOST_CHECK</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> expected);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		BOOST_REQUIRE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    BOOST_TEST_MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"no execute"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">BOOST_AUTO_TEST_CASE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(null_test) {}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.29,words:986},t:"2.单元测试",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/20.%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%95%88%E7%8E%87%E5%AF%B9%E6%AF%94.html",{loader:()=>B(()=>import("./20.字符串拼接效率对比.html-6NRQ3oAL.js"),__vite__mapDeps([233,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>C++字符串拼接效率</h2>
<p>c++ 提供了 <code>+=、append、stringstream、sprintf</code> 这四种方式来拼接字符串。关于他们之间的性能做一个对比</p>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> StringEfficiency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">public:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    StringEfficiency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        genStrArr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> plusTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::string res;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 10000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            res </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> vec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> appendTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::string res;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 100000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">            res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">vec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> sprintfTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        char</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">500000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> cp </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> res;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 100000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">            sprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(cp, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%s%s%s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">vec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">c_str</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(), </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">vec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">c_str</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(), </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">vec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">c_str</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            cp </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 15</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> ssTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::stringstream ss;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 100000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            ss </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> vec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            ss </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> vec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            ss </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> vec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">private:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> genStrArr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        srand</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">unsigned</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 100000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">            std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::string str;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">                str</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">push_back</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">'a'</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 27</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">            vec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">emplace_back</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(str);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">private:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::string</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> vec;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    auto</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> se </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> StringEfficiency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    // += 方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> timeval</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> startTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">{}, endTime{};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    gettimeofday</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">startTime, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        se</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">plusTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    gettimeofday</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">endTime, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    long</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> plusTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">endTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">tv_sec</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> startTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">tv_sec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1000000</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">endTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">tv_usec</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> startTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">tv_usec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "+= way cost time: "</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> plusTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> " us"</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    // append 方式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    gettimeofday</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">startTime, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        se</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">appendTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    gettimeofday</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">endTime, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    long</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> appendTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">endTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">tv_sec</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> startTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">tv_sec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1000000</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">endTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">tv_usec</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> startTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">tv_usec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "append way cost time: "</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> appendTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> " us"</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    // sprintf 方式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    gettimeofday</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">startTime, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        se</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">sprintfTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    gettimeofday</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">endTime, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    long</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> sprintfTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">endTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">tv_sec</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> startTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">tv_sec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1000000</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">endTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">tv_usec</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> startTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">tv_usec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "sprintf way cost time: "</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> sprintfTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> " us"</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    // stringstream 方式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    gettimeofday</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">startTime, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        se</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">ssTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    gettimeofday</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">endTime, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    long</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ssTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">endTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">tv_sec</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> startTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">tv_sec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1000000</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">endTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">tv_usec</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> startTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">tv_usec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "stringstream way cost time: "</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> ssTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> " us"</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> se;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.38,words:414},t:"20.字符串拼接效率对比",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/3.%E5%85%B3%E4%BA%8E%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%97%AE%E9%A2%98.html",{loader:()=>B(()=>import("./3.关于返回对象的问题.html-Ct2VOJda.js"),__vite__mapDeps([234,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p>《C++核心指南》的F.20 条款：在函数输出数值时，尽量使用返回值而非输出参数</p>
<p>之前的做法：</p>
<ol>
<li>
<p>调用者负责管理内存，接口负责生成，类似如下：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>MyObj obj;</span></span>
<span class="line"><span>ec = initialize(&amp;obj);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>缺点：啰嗦、难于组合。需要写更多的代码行，使用更多的中间变量，也就容易犯错误</p>
</li>
<li>
<p>接口负责对象的堆上生成和内存管理</p>
<p>接口提供生成和销毁对象的函数，对象在堆上维护。fopen 和 fclose 就是这样的接口的实例。注意：使用这种方法一般不推荐接口生成对象，然后由调用者通过调用 delete 来释放。在某些环境中，比如 windows 上使用不同的运行时库时，这样做会引发问题。</p>
<p>缺点：需要正确处理不同错误路径下的资源释放问题。也可以使用智能指针规避。对象永远在堆上分配，很多场合有一定的性能影响。</p>
</li>
<li>
<p>接口直接返回对象</p>
<p>优点：</p>
<ul>
<li>代码直观，容易理解</li>
<li>无需中间变量</li>
<li>性能也没有问题。实际执行中，没有复制发生。不需要动态内存，所有对象及其数据全部放在栈上</li>
</ul>
</li>
</ol>`,r:{minutes:4.02,words:1205},t:"3.关于返回对象的问题",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/4.%E5%BC%82%E5%B8%B8.html",{loader:()=>B(()=>import("./4.异常.html-CYYZc1sh.js"),__vite__mapDeps([235,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p>异常安全：指当异常发生时，既不会发生资源泄漏，系统也不会处于一个不一致的状态</p>
<h3>异常的问题</h3>
<ol>
<li>
<p>异常违反了"你不用就不需要付出代价"的C++原则。只要开启了异常，即使不使用异常你编译出的二进制代码通常也会膨胀</p>
<p>目前主流的异常实现中，都倾向于牺牲可执行文件大小、提供主流程的性能。</p>
</li>
<li>
<p>异常比较隐蔽，不容易看出来哪些地方会发生异常和发生什么异常</p>
<p>和Java 不同，C++里不会对异常规约进行编译时的检查。从C++17开始，C++甚至完全禁止了以往的动态异常规约，你不再能在函数声明里写你可能抛出某某异常。你唯一能声明的，就是某函数不会抛出异常--noexcept、noexcept(true) 或 throw()。这也是C++的运行时唯一会检查的东西。如果一个函数声明了不会抛出异常、结果却抛出了异常，C++运行时会调用 std::terminate 来终止应用程序</p>
</li>
</ol>`,r:{minutes:1.85,words:555},t:"4.异常",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/5.%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%92%8Cstatic%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98.html",{loader:()=>B(()=>import("./5.全局变量和static变量初始化问题.html-BZYdzqql.js"),__vite__mapDeps([236,1])),meta:{e:`<h2>cpp 中全局变量和 static 变量初始化问题</h2>
<h3>一、初始化时机</h3>
<ul>
<li>全局变量、文件域中的静态变量、类中的成员静态变量在 main 函数执行前初始化</li>
<li>局部变量中的静态变量在第一次调用时初始化</li>
</ul>
<p>局部静态变量，C 和 C++ 的区别：</p>
<ul>
<li>在 C 语言中是编译期间初始化并分配内存，因此不能用变量给静态局部变量赋值，只能用常量</li>
<li>在 C++ 语言中是第一次执行时初始化，因为 C++ 引入了对象的概念，对象一般需要构造函数，无法简单的分配内存，因此可以用变量赋值，并且在第一次使用时初始化</li>
</ul>`,r:{minutes:3.12,words:936},t:"5.全局变量和static变量初始化问题",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/6.STL%E5%AE%B9%E5%99%A8%E5%AD%98%E6%94%BE%E5%AF%B9%E8%B1%A1%E8%BF%98%E6%98%AF%E6%8C%87%E9%92%88.html",{loader:()=>B(()=>import("./6.STL容器存放对象还是指针.html-D59Tr26z.js"),__vite__mapDeps([237,1])),meta:{d:1634401157e3,l:"2021年10月17日",c:["编程语言"],g:["stl"],e:`<h3>问题描述</h3>
<p>c++的STL使用范围比较广泛，拿vector举一个例子，vector中可以存储对象也可以存储指针，那存储对象和存储指针分别有什么优缺点呢？</p>
<h3>问题分析</h3>
<div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;vector&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> TestObj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    explicit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> TestObj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(data) {} </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">private:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    TestObj </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">TestObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> vec;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">    vec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">push_back</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(obj);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "origin TestObj address: "</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> &lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "Address of vector: "</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> &lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">vec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.32,words:396},t:"7.STL容器使用姿势--存储对象还是指针",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/7.scanf%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F.html",{loader:()=>B(()=>import("./7.scanf使用注意.html-LUSdB_8B.js"),__vite__mapDeps([238,1])),meta:{d:1615583957e3,l:"2021年3月13日",c:["编程语言"],g:["scanf"],e:`<h3>使用 scanf 函数需要注意的点</h3>
<ol>
<li>
<p>缓冲区问题<br>
scanf 在使用的时候，回车符也会留在缓冲区，因此在用 %c 的时候可能会读到回车符。可以加上 fflush(stdin) 刷新缓冲区</p>
</li>
<li>
<p>空白符问题</p>
<p><code>scanf("%d\\n",&amp;a);</code>  这种 scanf 会跳过空白符去读下一个字符。空白符号包括：空格、制表符、换行符、回车符和换页符。</p>
</li>
<li>
<p>输入不匹配问题</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">scanf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%d%c</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">c</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">scanf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%d%c</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">c</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于scanf，在输入的时候，如果和第一个参数类型匹配，则继续从缓冲区中读取数据和第二个参数进行匹配，依次进行下去，直到匹配完所有的参数；</p>
<p>如果其中有一个参数不匹配，那就从这个地方跳出，忽略这个 scanf 后面所有的参数，而去执行下一条语句。</p>
</li>
<li>
<p>输入字符串中空格问题</p>
<p><code>%[...]</code> 表示只提取与 [ ] 中相匹配的内容，碰到其他内容则终止提取；注意：方括号两边不能空格，否则空格也会算到里面的。</p>
<p><code>%[^...]</code>（注意异或符'^'）表示提取内容，碰到[]中相匹配的内容则终止提取；可以解决 scanf 的输入中不能有空格的问题。例如: <code>scanf("%[^\\n]",strings)</code> 就可以在输入的时候忽略空格。</p>
</li>
</ol>`,r:{minutes:1.22,words:367},t:"7.scanf使用注意",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/8.c__%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.html",{loader:()=>B(()=>import("./8.c__初始化问题记录.html-ChnsH6Mr.js"),__vite__mapDeps([239,1])),meta:{d:1602001157e3,l:"2020年10月7日",c:["编程语言"],g:["c++"],e:`<p>C ++标准说：</p>
<p>可以转移到块中，但不能以初始化绕过声明的方式转移。从具有自动存储持续时间的局部变量不在范围内的点跳转到其处于范围内的点的程序是错误的，除非该变量具有POD类型（3.9）且声明时没有初始化程序。</p>
<p><code>switch(k) {   case1:   int t = 4;   break;    default:  break; }</code></p>
<p>这个代码会出现交叉初始化错误，因为可以跳过变量 t 的初始化，但是此后它仍然是在作用域内，即使它从来没有首先创建过也是如此。</p>
<p><code>switch(k) {   case1:   {     int t = 4;   }   break;   default:   break; }</code></p>`,r:{minutes:.81,words:243},t:"8.c++初始化问题记录",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/9.string%E4%B8%8Ememset%E7%9A%84%E9%97%AE%E9%A2%98.html",{loader:()=>B(()=>import("./9.string与memset的问题.html-BGbuWv2Q.js"),__vite__mapDeps([240,1])),meta:{d:1615148357e3,l:"2021年3月8日",c:["编程语言"],g:["c++"],e:`<h3>string 与memset 的问题</h3>
<p>场景：在初始化一个结构体中使用了string 这种类型，然后使用memset 对其进行赋值，全为0，结果后面使用出现段错误</p>
<p>原因：memset 函数破坏了string 的空间结构。不要使用 c语言的函数来做c++ 的对象。</p>
`,r:{minutes:.34,words:102},t:"9.string与memset的问题",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/1.%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1.html",{loader:()=>B(()=>import("./1.关于对象.html-dgrGsB_l.js"),__vite__mapDeps([241,1])),meta:{e:`<h2>关于对象</h2>
<p>C++ 在布局以及存取时间上主要的额外负担是有 virtual 引起的。包括：</p>
<ul>
<li>virtual function 机制，用以支持一个有效率的“执行期绑定”</li>
<li>virtual base class 机制，用以实现“多次出现在继承体系中的 base class，有一个单一而被共享的实例”</li>
</ul>
<p>C++ 的对象模型，我们主要讨论如下成员：</p>
<ul>
<li>数据成员：静态数据成员、非静态数据成员</li>
<li>成员函数：静态成员函数、非静态成员函数、虚函数</li>
</ul>
<h4>c++对象模型</h4>`,r:{minutes:2.15,words:645},t:"1.关于对象",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/2.%E5%85%B3%E4%BA%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html",{loader:()=>B(()=>import("./2.关于构造函数.html-Cr6Zz_LW.js"),__vite__mapDeps([242,1])),meta:{e:`<h3>一、默认的构造函数</h3>
<p>比如一段代码</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>class Foo {</span></span>
<span class="line"><span>public:</span></span>
<span class="line"><span>		int val;</span></span>
<span class="line"><span>		Foo* p_next;</span></span>
<span class="line"><span>};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:6.2,words:1859},t:"2.关于构造函数",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/3.%E5%85%B3%E4%BA%8E%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html",{loader:()=>B(()=>import("./3.关于拷贝构造函数.html-Ca1GIp1U.js"),__vite__mapDeps([243,1])),meta:{e:`<p>使用一个对象的内容作为另一个类对象的初值，有三种情况：</p>
<ul>
<li>
<p>对一个对象做显式的初始化</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>class X { ... };</span></span>
<span class="line"><span>X xx = x;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>当对象被当作一个函数的参数时</p>
</li>
<li>
<p>当函数返回一个类对象时</p>
</li>
</ul>`,r:{minutes:4.59,words:1378},t:"3.关于拷贝构造函数",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/4.%E6%95%B0%E6%8D%AE%E8%AF%AD%E6%84%8F.html",{loader:()=>B(()=>import("./4.数据语意.html-CQ5Dpaqz.js"),__vite__mapDeps([244,1])),meta:{e:`<p>本文测试代码的环境为：x86-64，ubuntu22.04，gcc7.5.0</p>
<h2>一、缘起</h2>
<p>先使用一段代码引入本文所要探讨的主题。</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>class X {};</span></span>
<span class="line"><span>class Y : public virtual X {};</span></span>
<span class="line"><span>class Z : public virtual X {};</span></span>
<span class="line"><span>class A : public Y, public Z {};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main() {</span></span>
<span class="line"><span>    std::cout &lt;&lt; "sizeof X: " &lt;&lt; sizeof(X) &lt;&lt; std::endl;</span></span>
<span class="line"><span>    std::cout &lt;&lt; "sizeof Y: " &lt;&lt; sizeof(Y) &lt;&lt; std::endl;</span></span>
<span class="line"><span>    std::cout &lt;&lt; "sizeof Z: " &lt;&lt; sizeof(Z) &lt;&lt; std::endl;</span></span>
<span class="line"><span>    std::cout &lt;&lt; "sizeof A: " &lt;&lt; sizeof(A) &lt;&lt; std::endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    X x1, x2;</span></span>
<span class="line"><span>    std::cout &lt;&lt; &amp;x1 &lt;&lt; " " &lt;&lt; &amp;x2 &lt;&lt; std::endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Y y1, y2;</span></span>
<span class="line"><span>    std::cout &lt;&lt; &amp;y1 &lt;&lt; " " &lt;&lt; &amp;y2 &lt;&lt; std::endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Z z1, z2;</span></span>
<span class="line"><span>    std::cout &lt;&lt; &amp;z1 &lt;&lt; " " &lt;&lt; &amp;z2 &lt;&lt; std::endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    A a1, a2;</span></span>
<span class="line"><span>    std::cout &lt;&lt; &amp;a1 &lt;&lt; " " &lt;&lt; &amp;a2 &lt;&lt; std::endl;</span></span>
<span class="line"><span>    return 0;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># g++ main.cpp -g -o main</span></span>
<span class="line"><span># ./main</span></span>
<span class="line"><span>sizeof X: 1</span></span>
<span class="line"><span>sizeof Y: 8</span></span>
<span class="line"><span>sizeof Z: 8</span></span>
<span class="line"><span>sizeof A: 16</span></span>
<span class="line"><span>0x7fffb23046fe 0x7fffb23046ff</span></span>
<span class="line"><span>0x7fffb2304700 0x7fffb2304708</span></span>
<span class="line"><span>0x7fffb2304710 0x7fffb2304718</span></span>
<span class="line"><span>0x7fffb2304720 0x7fffb2304730</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:6.21,words:1864},t:"4.数据语意",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/1.coredump%E8%B0%83%E8%AF%95.html",{loader:()=>B(()=>import("./1.coredump调试.html-qPqmg8Wh.js"),__vite__mapDeps([245,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>C++ code dump 调试</h2>
<p>打开 core dump 开关：<code>ulimit -c unlimited</code></p>
<h3>一、生成一个 core dump</h3>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.6,words:781},t:"1.coredump调试",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/2.gdb%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7.html",{loader:()=>B(()=>import("./2.gdb调试工具.html-CNna_x2U.js"),__vite__mapDeps([246,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>gdb调试工具</h3>
<p>在对C/C++ 程序的调试，需要在编译前加上 -g 选项</p>
<ul>
<li>调试core 文件：gdb program core.11127 ：调试 core 文件，program 就是执行文件</li>
<li>调试服务程序：gdb program PID。如果程序是一个服务程序，那么可以指定这个服务程序运行时的进程ID。gdb会自动attach 上去，并调试他，program 应该在 PATH 环境变量中搜索得到</li>
</ul>
<h2>1. gdb交互命令</h2>
<p>启动gdb后，进入到交互模式，通过以下命令完成对程序的调试；注意高频使用的命令一般都会有缩写，熟练使用这些缩写命令能提高调试的效率；</p>`,r:{minutes:5.27,words:1581},t:"2.gdb调试工具",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/3.gcc%E4%BD%BF%E7%94%A8.html",{loader:()=>B(()=>import("./3.gcc使用.html-D-UzdQ8u.js"),__vite__mapDeps([247,1])),meta:{e:`<h2>gcc 使用</h2>
<p>在windows 下动态链接库是以 .dll 后缀的文件，linux 是以 .so 为后缀的文件。</p>
<h3>一、gcc 在执行编译工作的时候，总共需要4步：</h3>
<ol>
<li>预处理。生成.i 的文件【预处理器】</li>
<li>将预处理后的文件转换成汇编语言，生成 .s 文件【编译器】</li>
<li>将汇编变为目标代码，生成 .o 文件【汇编器】</li>
<li>连接目标代码，生成可执行程序。【链接器】</li>
</ol>
<h3>二、参数</h3>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>1. -c：进行预处理、编译、和汇编。也就是把程序作成 obj 文件</span></span>
<span class="line"><span>2. -S：进行预处理、编译，把文件编译成汇编代码</span></span>
<span class="line"><span>3. -E：进行预处理。不生成文件，因此需要重定向到一个输出文件里面。 Gcc -E hello.c &gt; hello.txt</span></span>
<span class="line"><span>4. -o：制定目标名称。</span></span>
<span class="line"><span>5. -include file：包含某个代码，简单来说，就是便以某个文件，需要另一个文件的时候，就可以用它设定，功能就相当于代码中使用#include&lt;filename&gt;。 gcc hello.c -include /root/hello.h</span></span>
<span class="line"><span>6. -Idir：在使用“ #include “file” ”的时候，gcc 会在当前目录查找你所制定的头文件，如果没有找到，便回到默认的头文件目录找。如果使用 -I 制定了目录，他会先在你所制定的目录查找，然后再按常规的顺序去找。对于 #include&lt;file&gt; ，gcc/g++ 会到 -I 制定的目录查找，查找不到，然后将到系统的默认的头文件目录查找。</span></span>
<span class="line"><span>7. -idirafter dir：在 -I 的目录里面查找失败，就到这个目录里面查找</span></span>
<span class="line"><span>8. -C：在预处理的时候，不删除注释信息，一般和 -E 使用，有时候分析程序，这个很方便</span></span>
<span class="line"><span>9. -M：生成文件关联的信息。包含目标文件所依赖的所有源代码。</span></span>
<span class="line"><span>10. -MM：和-M 一样，但是它将忽略由#include&lt;file&gt; 造成的依赖。</span></span>
<span class="line"><span>11. -MD：和 -M 相同，但是输出将导入到 .d 文件里面</span></span>
<span class="line"><span>12. -MMD：和-MM 相同，但是输出将导入到 .d 文件里面</span></span>
<span class="line"><span>13. -llibrary：指定编译的时候使用的库。 gcc -lcurses hello.c ：使用 ncurses 库编译程序。</span></span>
<span class="line"><span>14. -Ldir：指定编译的时候，搜索库的路径。比如自己的库，可以用它指定目录，不然编译器将只在标准库的目录找。这个dir 就是目录的名称</span></span>
<span class="line"><span>15. -O0、-O1、-O2、-O3：编译器的优化选项的4个级别，-O0表示没有优化，-O1为默认值、-O3优化级别最高</span></span>
<span class="line"><span>16. -g：只是编译器，在编译的时候，产生调试信息，可以使用gdb</span></span>
<span class="line"><span>17. -static：此选项禁止使用动态库，所以编译出来的东西，一般都很大，也不需要什么动态链接库，就可以运行</span></span>
<span class="line"><span>18. -share：此选项尽量使用动态库，所以生成文件比较小，但是需要系统链接动态库。 </span></span>
<span class="line"><span>19. -w：不生成任何警告信息</span></span>
<span class="line"><span>20. -Wall：生成所有警告信息</span></span>
<span class="line"><span>21. -fPIC：为了在动态库中生成位置无关的代码。通过全局偏移表（GOT）访问所有常量地址。程序启动时动态加载程序解析GOT条目。</span></span>
<span class="line"><span>22. -fpic：和 -fPIC 相同，区别在于如果链接的可执行文件的GOT大小超过计算机特定的最大大小，则会从链接器收到错误消息，指示 -fpic 不起作用；在这种情况下，请使用 -fPIC 重新编译。GOT 大小根据操作系统的不同而大小不一样，SPARC上为8K，在AArch64 上为28k，x86没有限制。所以一般请使用 -fPIC选项。</span></span>
<span class="line"><span>23. -Wl,-options：把参数（options）传递给链接器 ld，如果 options 中间有逗号，就把 options 分成多个选项，然后传递给链接程序。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:3.19,words:956},t:"3.gcc使用",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%86%85%E6%A0%B8/1.C__%E7%AC%A6%E5%8F%B7%E7%9A%84%E7%BC%96%E8%A7%A3%E7%A0%81.html",{loader:()=>B(()=>import("./1.C__符号的编解码.html-DqcviPuo.js"),__vite__mapDeps([248,1])),meta:{e:`<h2>c++ 符号的编解码</h2>
<p>C++ 语言在编译的时候，符号会被编译器修改，转换成 C++ ABI 标识符，正向的过程称为 mangle，反向的过程称为为 demangle。</p>
<h3>一、ABI 说明</h3>
<p>ABI 全称为：Application Binary Interface 。 C/C++发展的过程中，二进制兼容一直是个问题。不同编译器厂商编译的二进制代码之间兼容性不好，甚至同一个编译器的不同版本之间兼容性也不好。之后 C 语言首先拥有了统一的 ABI，而 C++ 由于其特性的复杂性和 ABI 标准推进缓慢，一直没有自己的 ABI。</p>
<p>这就造成的不同的编译器或者不同的编译器版本，编译后的名称可能有所不同。</p>`,r:{minutes:2.2,words:660},t:"1.C++符号的编解码",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%86%85%E6%A0%B8/2.c__%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html",{loader:()=>B(()=>import("./2.c__内存模型.html-DYnXqgd6.js"),__vite__mapDeps([249,1])),meta:{e:`<h2>c++内存模型</h2>
<p>多核时代，程序员们为了系统运行效率做了很多事情。并发、多线程是其中绕不开的一个话题，有了多线程，随之而来的就是线程之间的同步，临界区的出现，然后就是锁的使用。程序员随之发现锁的开销较大，于是有了缩短临界区话题，尽可能的让临界区变得更小一点。但是总归临界区的缩小是有限度的，也就是有天花板的。因此我们开始探索原子操作，无锁化编程。于是为了功能正常的情况下，还要保证良好的效率，本文探讨原子操作的背后，内存的组织形式，编译器、cpu 的执行顺序，语言为 c++ 语言。</p>
<h3>一、内存模型的由来</h3>
<p>c++11 标准提出了内存模型，而在 c++11 之前，c++ 本身没有多线程的概念，c++ 使用者使用的是操作系统为我们提供的多线程、原子操作。那时的编译器和处理器认为系统中只有一个执行流。但在多线程之后，编码变难了，开发者编写的代码和最终运行的代码之间往往存在较大的差异，而运行的结果与开发者预期的一致，只是表现而已。</p>`,r:{minutes:13.82,words:4147},t:"2.c++内存模型",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/1.panic%E5%92%8Crecover.html",{loader:()=>B(()=>import("./1.panic和recover.html-BEPr4t_v.js"),__vite__mapDeps([250,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["go"],e:`<h2>panic 和 recover</h2>
<ul>
<li>panic 能够改变程序的控制流，调用 panic 后会立刻停止执行当前函数的剩余代码，并在当前 Goroutine 中递归执行调用方的 defer</li>
<li>recover 可以中止 panic 造成的程序崩溃。该函数只能在 defer 中发挥作用，在其他作用域中调用不会发挥作用</li>
</ul>
<h3>一、现象</h3>
<ul>
<li>panic 只会触发当前 Goroutine 的 defer</li>
<li>recover 只有在 defer 中调用才会生效</li>
<li>panic 允许在 defer 中嵌套多次调用</li>
</ul>`,r:{minutes:2.83,words:848},t:"1.panic和recover的使用",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/2.make%E5%92%8Cnew.html",{loader:()=>B(()=>import("./2.make和new.html-BoXNtlPr.js"),__vite__mapDeps([251,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["go"],e:`<h2>make 和 new</h2>
<p>make 的作用是初始化内置的数据结构，也就是切片、哈希表和 channel</p>
<p>new 的作用是根据传入的类型分配一块内存空间，并返回指向这块内存空间的指针</p>
<h3>一、make</h3>
<p>在编译期间的类型检查阶段，Go 语言会将代表 <code>make</code> 关键字的 <code>OMAKE</code> 节点根据参数类型的不同转换成了 <code>OMAKESLICE</code>、<code>OMAKEMAP</code> 和 <code>OMAKECHAN</code> 三种不同类型的节点，这些节点会调用不同的运行时函数来初始化相应的数据结构。</p>`,r:{minutes:1.38,words:414},t:"2.make和new的对比",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/3.go%E8%AF%AD%E8%A8%80%E4%B8%89%E4%B8%AA%E7%82%B9%E7%9A%84%E6%84%8F%E4%B9%89.html",{loader:()=>B(()=>import("./3.go语言三个点的意义.html-DtW0hXIu.js"),__vite__mapDeps([252,1])),meta:{d:1615148357e3,l:"2021年3月8日",c:["编程语言"],g:["go"],e:`<h3>golang 中的  ...  的意义</h3>
<ul>
<li>第一个用法主要是用于函数有多个不定参数的情况，表示为可变参数，可以接受任意个数但相同类型的参数。</li>
<li>第二个用法是slice可以被打散进行传递。</li>
</ul>
<p>第一个例子：</p>
<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> test1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF"> ...</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">){  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// 可以接受任意个string参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> _</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">		fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">v</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> strss</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">			"123"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">			"234"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">			"345"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">	test1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">strss</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// 切片被打散传入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.59,words:177},t:"3.go语言三个点的意义",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/4.for%E5%92%8Crange.html",{loader:()=>B(()=>import("./4.for和range.html-DTL7MvTK.js"),__vite__mapDeps([253,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["go"],e:`<h2>for 和 range</h2>
<h3>一、遍历切片或数组</h3>
<h4>1. 遍历数组的同时修改数组元素</h4>
<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">    arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> _</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">        arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">v</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">    fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">输出</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">：[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.69,words:808},t:"4.for和range的使用",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/5.cgo%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html",{loader:()=>B(()=>import("./5.cgo注意事项.html-EdXosM2v.js"),__vite__mapDeps([254,1])),meta:{e:`<h2>cgo 注意事项</h2>
<h3>一、语法格式问题</h3>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// #include &lt;stdio.h&gt; </span></span>
<span class="line"><span>// #include &lt;errno.h&gt; </span></span>
<span class="line"><span>import "C"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.17,words:52},t:"5.cgo 注意事项",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/6.%E4%B8%8B%E5%88%92%E7%BA%BF%E7%9A%84%E8%AF%AD%E4%B9%89.html",{loader:()=>B(()=>import("./6.下划线的语义.html-BYudHRO5.js"),__vite__mapDeps([255,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>Golang 中下划线的语义</h2>
<h4>1. 忽略返回值</h4>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>v1, _ := function(...)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,r:{minutes:.83,words:250},t:"6.下划线的语义",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/1.%E6%95%B0%E7%BB%84%E5%88%87%E7%89%87%E5%AD%97%E7%AC%A6%E4%B8%B2.html",{loader:()=>B(()=>import("./1.数组切片字符串.html-BG4vHBTk.js"),__vite__mapDeps([256,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["go"],e:`<h2>一、数组</h2>
<p>数组的类型：数组中存储元素类型+数组长度</p>
<p>Go 语言的数组在初始化之后长度就无法改变了，存储元素类型相同但长度不同的数组类型在 Go 语言看来也完全不同。如下，创建数组</p>
<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// NewArray returns a new fixed-length array Type.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> NewArray</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">elem</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">bound</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> int64</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> bound</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		Fatalf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"NewArray: invalid bound </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%v</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">bound</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	t</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> New</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">TARRAY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">Extra</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">Elem</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">elem</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">Bound</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">bound</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">SetNotInHeap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">elem</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">NotInHeap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> t</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// Array contains Type fields specific to array types.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	Elem</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">  *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">Type</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> // element type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	Bound</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> int64</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> // number of elements; &lt;0 if unknown yet</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:8.26,words:2477},t:"1.Go语言中数组切片字符串的实现",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/10.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html",{loader:()=>B(()=>import("./10.垃圾回收.html-iLtPIzpy.js"),__vite__mapDeps([257,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["go"],e:`<h2>垃圾回收</h2>
<p>用户程序（Mutator）会通过内存分配器（Allocator）在堆上申请内存，而垃圾收集器（Collector）负责回收堆上的内存空间，内存分配器和垃圾收集器共同管理着程序中的堆内存空间</p>

<h3>一、设计原理</h3>
<p>STW（Stop the world）暂停程序。随着用户程序申请越来越多的内存，系统中的垃圾也逐渐增多；当程序的内存占用达到一定阈值时，整个应用程序就会全部暂停，垃圾收集器会扫描已经分配的所有对象并回收不再使用的内存空间，当这个过程结束后，用户程序才可以继续执行，Go 语言在早期也使用这种策略实现垃圾收集，现在已经优化了很多</p>`,r:{minutes:12.81,words:3842},t:"10.垃圾回收",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/11.GMP%E8%B0%83%E5%BA%A6.html",{loader:()=>B(()=>import("./11.GMP调度.html-DB31cEQP.js"),__vite__mapDeps([258,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["go"],e:`<h2>Go语言调度器</h2>
<p>虽然线程比较轻量，但是在调度时也有比较大的额外开销。每个线程会都占用 1M 以上的内存空间，在切换线程时不止会消耗较多的内存，恢复寄存器中的内容还需要向操作系统申请或者销毁资源，每一次线程上下文的切换都需要消耗 ~1us 左右的时间<a href="https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#fn:1" target="_blank" rel="noopener noreferrer">1</a>，但是 Go 调度器对 Goroutine 的上下文切换约为 ~0.2us，减少了 80% 的额外开销。</p>`,r:{minutes:14.92,words:4476},t:"11.Go语言调度器",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/2.go%E8%AF%AD%E8%A8%80defer%E5%85%B3%E9%94%AE%E5%AD%97%E6%B5%85%E6%9E%90.html",{loader:()=>B(()=>import("./2.go语言defer关键字浅析.html-Dv4u2nq7.js"),__vite__mapDeps([259,1])),meta:{d:1652797157e3,l:"2022年5月17日",c:["编程语言"],g:["go"],e:`<h2>Go语言 defer 关键字浅析</h2>
<p>Go 语言中 defer 是比较常用的关键字，为了使用好他，我站在底层简单的剖析一下。</p>
<h3>一、使用现象</h3>
<h4>1. defer 的执行时机</h4>
<p>Go 官方对于 defer 的解释</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>A "defer" statement invokes a function whose execution is deferred to the moment the surrounding function returns, either because the surrounding function executed a return statement, reached the end of its function body, or because the corresponding goroutine is panicking.</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,r:{minutes:15.6,words:4681},t:"2.go语言defer关键字浅析",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/3.sync.mutex%E8%AF%A6%E8%A7%A3.html",{loader:()=>B(()=>import("./3.sync.mutex详解.html-BCHRNxXt.js"),__vite__mapDeps([260,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["go"],e:`<h2>sync.mutex 锁详解</h2>
<p>基于 Go 语言 1.15 版本</p>
<h3>一、互斥锁的性质</h3>
<p>互斥锁有两种状态：正常状态和饥饿状态</p>
<p>在正常状态下，所有等待锁的 Goroutine 按照 FIFO（先进先出）的顺序等待。唤醒的 Goroutine 不会直接拥有锁，而是会和新请求锁的 Goroutine 竞争锁的拥有。新请求锁的 Goroutine 具有优势，他正在 CPU 上执行，而且可能有好几个，所以刚刚唤醒的 Goroutine 有很大可能在锁竞争中失败。在这种情况下，这个被唤醒的 Goroutine 会加入到等待队列的前面。如果一个等待的 Goroutine 超过 1ms 没有获取到锁，那么他将会把锁变为饥饿模式</p>`,r:{minutes:7.98,words:2393},t:"3.sync.mutex锁详解",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/4.%E5%93%88%E5%B8%8C%E8%A1%A8.html",{loader:()=>B(()=>import("./4.哈希表.html-D9aCEn-n.js"),__vite__mapDeps([261,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["go"],e:`<h2>哈希表</h2>
<p>两个关键点：哈希函数和哈希冲突。解决哈希冲突的常见方法有开放寻址法、拉链法</p>
<h4>1. 开发寻址法</h4>
<p>底层数据结构是数组，依次探测和比较数组中的元素以判断目标键值对是否存在于哈希表中；如果发生冲突，就会将键值对写入写一个索引不为空的位置。</p>
<p>装载因子：数组中元素数量与数组大小的比值。当装载率超过 70% 之后，哈希表的性能就会急剧下降，而一旦装载率达到 100%，整个哈希表就会完全失效。</p>
<h4>2. 拉链法</h4>
<p>数组+链表。如果发生冲突，则在链表末尾追加新的键值对即可。</p>
<p>装载因子：元素数量 / 桶数量。一般情况下，使用拉链法的哈希表装载因子不会超过 1。当哈希表的装载因子较大时会触发哈希表扩容，创建更多桶来存储哈希表中的元素。</p>`,r:{minutes:6.19,words:1856},t:"4.哈希表的实现",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/5.chan%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0.html",{loader:()=>B(()=>import("./5.chan底层实现.html-CMZUX-op.js"),__vite__mapDeps([262,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["go"],e:`<h3>1. channel （go）实现</h3>
<p>首先明确go语言的设计模块：不要通过共享内存的方式进行通信，而是应该通过通信的方式共享内存。这样在我看来让 go 语言代码更加整洁。因此 go 语言中 Goroutine 之间会通过 Channel 传递数据。基于go 1.15 版本，Channel 的实现：</p>
<h4>1.1 Channel 底层数据结构</h4>
<p>chan 的底层数据结构如下：</p>
<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> hchan</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	qcount</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">   uint</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">           // 元素个数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	dataqsiz</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> uint</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">           // 环形队列的长度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	buf</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">      unsafe</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">Pointer</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> // 指向环形队列的指针</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	elemsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> uint16</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">         // 环形队列中每个元素的大小</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	closed</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">   uint32</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">         // chan 是否被关闭</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	elemtype</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">_type</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">         // 环形队列中元素的类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	sendx</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    uint</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">           // 环形队列中发送操作处理到的位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	recvx</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    uint</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">           // 环形队列中接收操作处理到的位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	recvq</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">    waitq</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">          // 处于阻塞状态的接收 Goroutine 双向链表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	sendq</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">    waitq</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">  	    // 处于阻塞状态的发送 Goroutine 双向链表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	lock</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> mutex</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">	            // 互斥锁</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:6.81,words:2042},t:"5.channel底层实现",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/6.select.html",{loader:()=>B(()=>import("./6.select.html-BcYiSnmh.js"),__vite__mapDeps([263,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["go"],e:`<h2>select</h2>
<ul>
<li>select 控制结构中包含 default 语句时，能在 channel 上进行非阻塞的收发操作</li>
<li>select 在遇到多个 channel 同时响应时，会随机执行一种情况。引入随机性就是为了避免饥饿问题发生</li>
</ul>
<h3>一、实现原理</h3>
<p>select 语句在编译期间会被转换成 OSELECT 节点。每个 OSELECT 节点都会持有一组 OCASE 节点，每一个 OCASE 节点既包含执行条件，也包含满足条件后执行的代码。如果 OCASE 的执行条件为空，就意味着这是一个 default 节点。</p>`,r:{minutes:4.54,words:1362},t:"6.select关键字实现",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/7.%E6%A0%88%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86.html",{loader:()=>B(()=>import("./7.栈空间管理.html-DSjFQcuW.js"),__vite__mapDeps([264,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["go"],e:`<h2>栈空间管理</h2>
<p>栈区的内存一般由编译器自动分配和释放，其中存储着函数的入参及局部变量，这些参数随函数的创建而创建，随着函数的返回而消亡。这种线性的内存分配策略效率较高。</p>
<h3>一、基础</h3>
<h4>1. 寄存器</h4>
<p>栈区的操作会用到两个以上的寄存器，栈寄存器的主要作用是跟踪函数的调用栈。Go 语言的汇编代码包含 BP 和 SP 两个栈寄存器，他们分别存储了栈的基址指针和栈顶的地址，BP 和 SP 之间的内存就是当前函数的调用栈。</p>

<p>linux 的内存布局如下：</p>

<p>栈区内存都是从高地址向低地址扩展的，当应用程序申请或者释放栈内存时，只需要修改 SP 寄存器的值，这种线性的内存分配方式比堆内存相比更加快速，仅会带来极少的额外开销。</p>`,r:{minutes:5.75,words:1726},t:"7.栈空间管理",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/8.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html",{loader:()=>B(()=>import("./8.内存管理.html-CjiOc2EE.js"),__vite__mapDeps([265,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["go"],e:`<h2>内存管理的基础</h2>
<p>程序中的数据和变量都会被分配到程序所在的虚拟内存中，内存空间包括两个重要区域：栈区、堆区。</p>
<ul>
<li>函数调用的参数、返回值以及局部变量大都会被分配到栈上，这部分内存会由编译器进行管理</li>
<li>堆中的对象由内存分配器分配并由垃圾收集器回收，或者程序员自己管理（c/c++）</li>
</ul>
<p>内存管理一般包含：用户程序（mutator）、内存分配器（allocator）、垃圾收集器（collector）。当用户程序申请内存时，会通过内存分配器申请新内存，而分配器会负责从堆中初始化相应内存区域。</p>
<h3>一、内存分配器的分配方法</h3>`,r:{minutes:12.26,words:3679},t:"8.内存管理",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/9.%E5%86%85%E5%AD%98%E9%80%83%E9%80%B8.html",{loader:()=>B(()=>import("./9.内存逃逸.html-WBel5PNT.js"),__vite__mapDeps([266,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["go"],e:`<h2>Go语言的内存逃逸</h2>
<p>Golang 程序变量会携带一组校验数据，用来证明他的整个生命周期是否在运行时完全可知。如果变量通过了这些校验，他就可以在栈上分配。否则就说它逃逸了，必须在堆上分配。</p>
<h3>一、引起变量逃逸到堆上的典型情况</h3>
<ul>
<li><strong>在方法内把局部变量指针返回</strong>，局部变量原本应该在栈中分配，在栈中回收。但是由于返回时被外部引用，因此其生命周期大于栈，则溢出。</li>
<li><strong>发送指针或带有指针的值到 channel 中。</strong> 在编译时，是没有办法知道哪个 goroutine 会在 channel 上接收数据。所以编译器没法知道变量什么时候才会被释放。</li>
<li><strong>在一个切片上存储指针或带指针的值。</strong> 一个典型的例子就是 []*string 。这会导致切片的内容逃逸。尽管其后面的数组可能是在栈上分配的，但其引用的值一定是在堆上。</li>
<li><strong>slice 的背后数组被重新分配了，因为 append 时可能会超出其容量( cap )。</strong> slice 初始化的地方在编译时是可以知道的，它最开始会在栈上分配。如果切片背后的存储要基于运行时的数据进行扩充，就会在堆上分配。</li>
<li><strong>在 interface 类型上调用方法。</strong> 在 interface 类型上调用方法都是动态调度的 —— 方法的真正实现只能在运行时知道。想像一个 io.Reader 类型的变量 r , 调用 r.Read(b) 会使得 r 的值和切片b 的背后存储都逃逸掉，所以会在堆上分配。</li>
</ul>`,r:{minutes:2.53,words:759},t:"9.内存逃逸",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/1.%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA%E6%97%B6ldflags%E5%8F%98%E9%87%8F%E6%B3%A8%E5%85%A5.html",{loader:()=>B(()=>import("./1.编译构建时ldflags变量注入.html-BmT1d8nv.js"),__vite__mapDeps([267,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["go"],e:`<h2>Go语言编译构建时 ldflags 变量注入</h2>
<p>Go 语言在编译构建时，可以注入变量。如下：</p>
<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "</span><span style="--shiki-light:#6F42C1;--shiki-dark:#98C379">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> Version</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "0.0.1"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">    fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">Version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.2,words:359},t:"1.Go语言编译构建时ldflags变量注入",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/2.go%E8%AF%AD%E8%A8%80%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%8E%B7%E5%8F%96%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6.html",{loader:()=>B(()=>import("./2.go语言正确的获取连接的文件描述符.html-Cw4DK7M_.js"),__vite__mapDeps([268,1])),meta:{d:1650104357e3,l:"2022年4月16日",c:["编程语言"],g:["go"],e:`<h2>go语言正确的获取连接的文件描述符</h2>
<h3>一、遇到的场景</h3>
<p>工作时写一个 web 服务的时候，底层使用 udp 传输协议，需要对 udp 的 socket recv buffer 进行获取和调整。用 go 语言实现，于是有了类似下面的代码</p>
<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> serve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">addr</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">    address</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> net</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">ResolveUDPAddr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"udp"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> err</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">        fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"resolve udp service address: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%v</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> failed, error: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%v</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">    udpConn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> net</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">ListenUDP</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"udp"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">address</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> err</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">        fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"listen udp address: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%v</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> failed, error: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%v</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">address</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(), </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">	// 获取文件描述符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">    fd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> udpConn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">File</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> err</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">       fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"get udp conn file err: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%v</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">       return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Close</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">    oriUdpSocketBufferSize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">GetsockoptInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">fd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Fd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()), </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">syscall</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">SOL_SOCKET</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">unix</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">SO_RCVBUF</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">    fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"get opt int fd recv buf size: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%v</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">oriUdpSocketBufferSize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">    fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"udp server create success </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    go</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">       buf</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">       for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">           n</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">caddr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> udpConn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">ReadFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">buf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">           if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> err</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">               fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"read failed"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">               continue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">           }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">           fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">caddr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">buf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">n</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">    time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">Second</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    go</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">       err</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> udpConn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Close</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">       if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> err</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">           fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"udp conn close err: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%v</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">           return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">       _</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> net</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">ListenUDP</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"udp"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">address</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">       if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> err</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">           fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"listen udp address: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%v</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> failed, error: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%v</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> \\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">address</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(), </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">       fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"repeat listen udp success"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    go</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> serve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"127.0.0.1:1234"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    select</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:8.11,words:2434},t:"2.go语言正确的获取连接的文件描述符",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/3.go%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%AD%A3%E7%A1%AE%E5%85%B3%E9%97%ADTCP%E8%BF%9E%E6%8E%A5%E4%BB%A5%E5%8F%8A%E7%AE%A1%E7%90%86%E5%AE%83%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html",{loader:()=>B(()=>import("./3.go网络编程正确关闭TCP连接以及管理它的生命周期.html-BE9N75Zs.js"),__vite__mapDeps([269,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>golang网络编程如何正确关闭TCP连接以及管理它的生命周期</h3>
<p>以下讨论的 TCP 连接对象皆为 golang 的 net.conn 对象</p>
<h4>一、结论</h4>
<ol>
<li>Read 方法返回 EOF 错误，表示本端感知到对端已经关闭连接（本端已接收到对端发送的FIN，本端属于被动关闭，则处于CLOSE_WAIT状态）。此后如果不调用Close方法，只释放本端的连接对象，则连接处于非完全关闭状态（CLOSE_WAIT）。即文件描述符发生泄漏。</li>
<li>Write 方法返回 broken pipe 错误，表示本端感知到对端已经关闭连接（本端已接收到对端发送的RST）。此后本端可不调用Close方法。连接处于完全关闭状态</li>
<li>由于 golang 里 net.conn 内部对文件描述符的所有 io 操作都有状态保护，所以即使在对端或本端关闭了连接之后，依然可以任意次数调用 Read、Write、Close 方法</li>
</ol>`,r:{minutes:3.36,words:1008},t:"3.go网络编程如何正确关闭TCP连接以及管理它的生命周期",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/4.go%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95.html",{loader:()=>B(()=>import("./4.go加密解密算法.html-B5yHyKKL.js"),__vite__mapDeps([270,1])),meta:{d:1615148357e3,l:"2021年3月8日",c:["编程语言"],g:["go"],e:`<h2>Go 加密解密算法</h2>
<h4>开始</h4>
<p>加密解密在实际开发中应用比较广泛，常用加解密分为：“<strong>对称式</strong>”、“<strong>非对称式</strong>”和”<strong>数字签名</strong>“。</p>
<p><strong>对称式</strong>：对称加密(也叫<a href="https://baike.baidu.com/item/%E7%A7%81%E9%92%A5" target="_blank" rel="noopener noreferrer">私钥</a>加密)指加密和解密使用相同<a href="https://baike.baidu.com/item/%E5%AF%86%E9%92%A5" target="_blank" rel="noopener noreferrer">密钥</a>的加密算法。具体算法主要有<a href="https://baike.baidu.com/item/DES%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">DES算法</a>，<a href="https://baike.baidu.com/item/3DES" target="_blank" rel="noopener noreferrer">3DES</a>算法，TDEA算法，<a href="https://baike.baidu.com/item/Blowfish" target="_blank" rel="noopener noreferrer">Blowfish</a>算法，<a href="https://baike.baidu.com/item/RC5" target="_blank" rel="noopener noreferrer">RC5</a>算法，<a href="https://baike.baidu.com/item/IDEA" target="_blank" rel="noopener noreferrer">IDEA</a>算法。</p>`,r:{minutes:2.05,words:614},t:"4.go语言加密解密算法",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/5.go%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",{loader:()=>B(()=>import("./5.go单元测试.html-hYeF0LNA.js"),__vite__mapDeps([271,1])),meta:{d:1616329157e3,l:"2021年3月21日",c:["编程语言"],g:["go"],e:`<h2>go语言单元测试</h2>
<h4>1. go test 工具</h4>
<ul>
<li>go test 运行整个项目的测试文件</li>
<li>go test math_test.go math.go 只运行某个测试文件。（math_test.go、math.go是一对，缺一不可，前后顺序可对调）</li>
<li>go test -v  math_test.go math.go 加上 -v 可以查看详细的结果</li>
<li>go test -v -run='TestAdd' 只测试某个函数，-run 支持正则</li>
<li>go test -v -run='TestAdd' -c 生成 test 的二进制文件，加上 -c 参数</li>
<li>go test -v -o math.test  执行这个 test 测试文件，加上 -o 参数</li>
<li>go test -i  只测试安装/重新安装 依赖包，而不运行代码，加上 -i 参数</li>
</ul>`,r:{minutes:2.02,words:606},t:"5.go语言单元测试",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/6.ticket%E4%BD%BF%E7%94%A8.html",{loader:()=>B(()=>import("./6.ticket使用.html-DIXmDSfB.js"),__vite__mapDeps([272,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>定时器</h2>
<h3>一、ticket 使用</h3>
<p>Ticker是周期性定时器，即周期性的触发一个事件，通过Ticker本身提供的管道将事件传递出去。</p>
<p>Ticker的数据结构与Timer完全一致：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>type Ticker struct {</span></span>
<span class="line"><span>	C &lt;-chan Time</span></span>
<span class="line"><span>	r runtimeTimer</span></span>
<span class="line"><span>}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:2.05,words:615},t:"6.ticket的使用",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/7.http%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E5%AE%9E%E7%8E%B0.html",{loader:()=>B(()=>import("./7.http客户端的实现.html-DoFmfCsb.js"),__vite__mapDeps([273,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>一、go http client 设置超时</h3>
<h5>1. http请求到完成响应的时间限制</h5>
<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">client</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> http</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">Client</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	Timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">second</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:1.23,words:369},t:"7.http客户端的实现",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/8.%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AE%E7%89%88%E6%9C%AC%E5%8F%B7.html",{loader:()=>B(()=>import("./8.项目设置版本号.html-BQGxWZVc.js"),__vite__mapDeps([274,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p><a href="https://jishuin.proginn.com/p/763bfbd6975c" target="_blank" rel="noopener noreferrer">https://jishuin.proginn.com/p/763bfbd6975c</a></p>
<p>我们的Go项目可以通过 Git 获得版本信息，可以通过 shell 脚本实现，最后编译 Go 项目时，将版本信息通过 -X 传递进去</p>
<p>Go 语言项目</p>
<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "</span><span style="--shiki-light:#6F42C1;--shiki-dark:#98C379">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> Version</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"Version:"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">Version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.71,words:212},t:"8.项目设置版本号",y:"a"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/9.%E6%97%B6%E9%97%B4%E6%88%B3%E5%92%8C%E6%97%B6%E9%97%B4%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2.html",{loader:()=>B(()=>import("./9.时间戳和时间之间的转换.html-Cy4841Wg.js"),__vite__mapDeps([275,1])),meta:{d:1615148357e3,l:"2021年3月8日",c:["编程语言"],g:["go"],e:`<h3>golang 时间和时间戳之间的相互转换</h3>
<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> timeToTimestamp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">date</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int64</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	loc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">_</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">LoadLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"Asia/Shanghai"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	tt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">_</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">ParseInLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"2006-01-02 15:04:05"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">date</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">loc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> tt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Unix</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> timestampTotime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">date</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> int64</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	tm</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Unix</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">date</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">	str</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> tm</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Format</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"2006-01-02 15:04:05"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> str</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.28,words:85},t:"9.go语言时间与时间戳之间的转换",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/1.TCP%E7%9A%84%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6.html",{loader:()=>B(()=>import("./1.TCP的重传机制.html-CB0lj-hy.js"),__vite__mapDeps([276,1])),meta:{e:`<p>在网络上，TCP 针对数据包丢失的情况，会用重传机制解决。常见的重传机制包括：超时重传、快速重传、SACK、D-SACK。</p>
<h3>1. 超时重传</h3>
<p>在发送数据时，设定一个定时器，当超过指定的时间后，没有收到对方的 ACK 确认应答报文，就会重发该数据。这就是超时重传。一般有两种情况：数据包丢失、确认应答丢失。</p>
<p><strong>那么超时时间应该设置为多少呢</strong>？</p>
<ul>
<li>RTT（<code>Round-Trip Time</code>）往返时延。指的是数据发送时刻到接收到确认的时刻的差值。也就是报文的往返时间。</li>
<li>RTO（<code>Retransmission Timeout</code>）超时重传时间。</li>
</ul>`,r:{minutes:6.34,words:1902},t:"1.TCP的重传机制",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/2.TCP%E7%9A%84%E4%BF%9D%E6%B4%BB%E6%9C%BA%E5%88%B6.html",{loader:()=>B(()=>import("./2.TCP的保活机制.html-CXiLVHEl.js"),__vite__mapDeps([277,1])),meta:{e:`<p>TCP 的 keepalive 机制，如果在一段时间内，客户端和服务端之间没有任何报文传输，那么 TCP 的保活机制就会开始起作用。他会每隔一定的时间间隔，发送一个探测报文，如果连续的探测报文都没有得到响应，则认为当前的 TCP 连接已经死亡，操作系统便将错误信息通知给上层应用程序。</p>
<p>内核提供了一些参数可以用来设置保活机制。包括：保活时间、保活探测的次数、保活探测的时间。</p>
<ul>
<li><code>net.ipv4.tcp_keepalive_time=7200</code> 表示保活时间是 7200 秒，也就是 2 小时内如果没有任何连接相关的报文，就会启动保活机制</li>
<li><code>net.ipv4.tcp_keepalive_intvl=75</code> 每次检测间隔为 75 秒</li>
<li><code>net.ipv4.tcp_keepalive_probes=9</code> 表示检测 9 次无响应，则认为对方是不可达的，从而中断本次的连接</li>
</ul>`,r:{minutes:2.12,words:636},t:"2.TCP的保活机制",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/3.socket%E4%B8%8E%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.html",{loader:()=>B(()=>import("./3.socket与三次握手四次挥手.html-X5qS_BJ_.js"),__vite__mapDeps([278,1])),meta:{e:`<p>本文我们结合 TCP 的三次握手、四次挥手，来谈一谈 socket 相关的系统调用。</p>
<h3>一、socket 系统调用</h3>
<p><code>socket()</code> ：负责产生一个套接字的描述符</p>
<p><code>bind()</code>：将创建好的 socket 与地址（IP 以及端口）绑定</p>
<p><code>listen()</code>：为接收用户请求做好就绪准备，比如初始化好半连接队列、全连接队列。listen 的第二个参数 backlog 与全连接队列的最大长度有关。</p>
<p><code>accept()</code>：一般情况下，如果没有请求到来，那么服务器会阻塞在 accept 函数上。当有请求时，也就是全连接队列中有已经就绪的连接时，他会返回一个新的描述符。这个新的描述符代表可以与客户端通信的 TCP 连接。</p>`,r:{minutes:5.42,words:1625},t:"3.socket与三次握手四次挥手",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/4.TCP%E5%BC%82%E5%B8%B8%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5.html",{loader:()=>B(()=>import("./4.TCP异常断开连接.html-B2AwHF7J.js"),__vite__mapDeps([279,1])),meta:{e:`<h3>一、无数据传输的场景</h3>
<h4>1. 客户端主机崩溃</h4>
<p>客户端主机崩溃了，服务端是无法感知到的。如果服务端没有开启 TCP 的保活机制，又没有进行数据交互，那么服务端的 TCP 连接将会一直处于 ESTABLISHED 连接状态，直到服务端重启进程。</p>
<p>所以，在没有 TCP 保活机制且双方不传输数据的情况下，一方的 TCP 连接处于 ESTABLISHED 状态，并不代表另一方的连接还一定正常。</p>
<h4>2. 客户端进程崩溃</h4>
<p>TCP 连接信息是由内核维护的，所以当服务端的进程崩溃后，内核需要回收该进程的所有 TCP 连接资源，于是内核会发送第一次挥手 FIN 报文，后续的挥手过程也都是在内核完成，并不需要进程的参与。所以即使服务端的进程退出了，还是能和客户端完成 TCP 四次挥手的过程。</p>`,r:{minutes:3.24,words:972},t:"4.TCP异常断开连接",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/5.%E6%8B%94%E6%8E%89%E7%BD%91%E7%BA%BF%E5%90%8E%E7%9A%84TCP%E8%BF%9E%E6%8E%A5.html",{loader:()=>B(()=>import("./5.拔掉网线后的TCP连接.html-Bui0wbIh.js"),__vite__mapDeps([280,1])),meta:{e:`<p>首先，TCP 连接在 Linux 内核中是一个名为 <code>struct socket</code> 的结构体，该结构体的内容包含 TCP 连接的状态等信息。当拔掉网线的时候，操作系统并不会变更该结构体的任何内容，所以 TCP 连接的状态暂时也不会发生改变。</p>
<p>主要得看拔掉网线后，两端做了什么动作，有没有进行数据传输。分场景来讨论：有数据传输、没有数据传输。</p>
<h3>一、拔掉网线后，有数据传输</h3>
<p>在客户端拔掉网线后，服务端向客户端发送的数据报文会得不到任何的响应，在等待一定时长后，服务端就会触发<strong>超时重传</strong>机制，重传未得到响应的数据报文。</p>`,r:{minutes:3.36,words:1008},t:"5.拔掉网线后的TCP连接",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/6.TCP%E5%92%8CUDP%E5%8D%A0%E7%94%A8%E5%90%8C%E4%B8%80%E7%AB%AF%E5%8F%A3.html",{loader:()=>B(()=>import("./6.TCP和UDP占用同一端口.html-C5m5N4xH.js"),__vite__mapDeps([281,1])),meta:{d:1615154094e3,l:"2021年3月8日",g:["端口"],e:`<h2>TCP/UDP 占用同一端口</h2>
<p>TCP/UDP 可以共用同一个端口<br>
1、tcp的端口不是物理概念，仅仅是协议栈中的两个字节<br>
2、TCP和UDP的端口完全没有任何关系，完全有可能又有一种XXP基于IP，也有端口的概念，这是完全可能的。<br>
3、TCP和UDP传输协议监听同一个端口后，接收数据互不影响，不冲突。因为数据接收时时根据五元组{传输协议，源IP，目的IP，源端口，目的端口}判断接受者的。</p>
<h4>端口是什么</h4>
<p>端口是一种抽象的软件结构（包括一些数据结构和I/O缓冲区）。<br>
应用程序（即进程）通过系统调用与某端口建立连接（binding）后，传输层传给该端口的数据都被相应进程所接收，相应进程发给传输层的数据都通过该端口输出。在TCP/IP协议的实现中，端口操作类似于一般的I/O操作，进程获取一个端口，相当于获取本地唯一的I/O文件，可以用一般的读写原语访问之。<br>
类似于文件描述符，每个端口都拥有一个叫端口号（port number）的整数型标识符，用于区别不同端口。由于TCP/IP传输层的两个协议TCP和UDP是完全独立的两个软件模块，因此各自的端口号也相互独立，如TCP有一个255号端口，UDP也可以有一个255号端口，二者并不冲突。</p>`,r:{minutes:3.12,words:935},t:"6.TCP和UDP占用同一端口",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/%E4%BC%A0%E8%BE%93%E5%B1%82.html",{loader:()=>B(()=>import("./传输层.html-BWiklgt4.js"),__vite__mapDeps([282,1])),meta:{e:`<p>传输层主要提供不同主机上进程间 逻辑通信 + 可靠传输 或者 不可靠传输的功能。</p>
<h3>一、TCP 和 UDP：</h3>
<ol>
<li>
<p>传输控制协议TCP 和 用户数据报协议UDP的区别？<br>
（1）TCP是面向字节流的，基本传输单位是TCP报文段；UDP是面向报文的，基本传输单位是是用户数据报；</p>
<ul>
<li>面向字节流：应用程序和TCP的交互是一次一个数据块（大小不等），但TCP把应用程序看成是一连串的无结构的字节流。TCP有一个缓冲，当应用程序传送的数据块太长，TCP就可以把它划分短一些再传送。</li>
<li>面向报文：面向报文的传输方式是应用层交给UDP多长的报文，UDP就照样发送。因此，应用程序必须选择合适大小的报文。<br>
（2）TCP 注重安全可靠性，连接双方在进行通信前，需进行三次握手建立连接。UDP 是无连接的，使用最大努力交付，即不保证可靠交付。<br>
（3）UDP 不需要连接等待，所以数据传输快，而 TCP 传输效率相对较低<br>
（4）TCP首部开销是20个字节；UDP的首部开销是8个字节，这也是减少网络传输开销的一方面<br>
（5）TCP有拥塞控制和流量控制，而UDP没有拥塞控制和流量控制<br>
（6）TCP支持点对点通信，提供全双工通信，不提供广播或多播服务；UDP支持一对一、一对多、多对一、多对多的通信模式。</li>
</ul>
</li>
<li>
<p>TCP 和 UDP 的适用场景：<br>
（1）当对网络通讯质量要求不高时，并且要求网络通讯速度能尽量的快，这时就可以使用UDP。比如即使通信： 语音、 视频 、直播等<br>
（2）当对网络通讯质量有要求时，要求整个数据准确无误可靠的传递给对方，这时就适用使用 TCP 协议，一般用于文件传输、发送和接收邮件等场景。比如HTTP、HTTPS、FTP等传输文件的协议，POP、SMTP等邮件传输的协议都是使用 TCP 协议</p>
</li>
<li>
<p>TCP对应的协议：<br>
FTP：文件传输协议，使用21端口<br>
Telnet：远程终端接入，使用23端口，用户可以以自己的身份远程连接到计算机上，可提供基于DOS模式下的通信服务。<br>
SMTP：邮件传送协议，用于发送邮件，使用25端口<br>
POP3：邮件传送协议，P用于接收邮件。使用110端口<br>
HTTP：万维网超文本传输协议，是从Web服务器传输超文本到本地浏览器的传送协议</p>
</li>
<li>
<p>UDP对应的协议：<br>
DNS：域名解析服务，将域名地址转换为IP地址，使用53号端口；<br>
SNMP：网络管理协议，用来管理网络设备，使用161号端口；<br>
TFTP：简单文件传输协议，提供不复杂、开销不大的文件传输服务，使用 69 端口；<br>
NFS：远程文件服务器<br>
RIP：路由信息协议<br>
DHCP：动态主机配置协议<br>
IGMP：网际组管理协议</p>
</li>
<li>
<p>TCP的首部字段</p>
</li>
</ol>`,r:{minutes:22.83,words:6848},t:"传输层",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%BC%96%E7%A8%8B%E8%B0%83%E8%AF%95/1.%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E5%85%B3%E9%97%ADTCP%E8%BF%9E%E6%8E%A5.html",{loader:()=>B(()=>import("./1.如何正确关闭TCP连接.html-h5Dq965T.js"),__vite__mapDeps([283,1])),meta:{e:`<h3>一、问题</h3>
<p>在使用 TCP 网络编程时，比如 send/write 调用成功后，调用 close 关闭 socket。这种场景中有可能出现，发送的数据，传输到对端不完整。</p>
<h3>二、原因</h3>
<p><code>send()</code> 成功返回只意味着内核接收了数据，并准备在某个特定的时间发送他们。内核在接收到数据后，还要把数据包发送到网卡等等一系列过程之后，最终数据才能到达对端主机。对端主机的内核收到数据后，然后拥有对应 socket 的进程从中读取数据。此时，数据才算是真正的完成了传输。</p>
<p>当调用 <code>close()</code> 关闭 socket 的时候，整个 TCP 连接也随之关闭。但此时可能还有数据在内核的发送缓冲区中，或者已经发送但未被确认。发送方如果 <code>send()</code> 后立即进行 <code>close()</code>，就可能出现数据其实还未发送的情况。</p>`,r:{minutes:2.63,words:788},t:"1.如何正确关闭TCP连接",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%BC%96%E7%A8%8B%E8%B0%83%E8%AF%95/tcp%E5%92%8Cudp.html",{loader:()=>B(()=>import("./tcp和udp.html-DEltxTjz.js"),__vite__mapDeps([284,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p>TCP数据包最大负载： <a href="https://segmentfault.com/a/1190000012962389" target="_blank" rel="noopener noreferrer">https://segmentfault.com/a/1190000012962389</a></p>
<p>TCP、UDP数据包大小的限制：<a href="https://blog.csdn.net/caoshangpa/article/details/51530685" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/caoshangpa/article/details/51530685</a></p>`,r:{minutes:.11,words:33},t:"undefined",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/1.https%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%AE%89%E5%85%A8.html",{loader:()=>B(()=>import("./1.https如何保证安全.html-qo9V3ugl.js"),__vite__mapDeps([285,1])),meta:{e:`<h3>一、HTTP 的不足</h3>
<ul>
<li>通信使用明文传输，内容可能会被窃听</li>
<li>不验证通信方的身份，有可能遭到伪装。服务端和客户端都有可能伪装。</li>
<li>无法证明报文的完整性，所以有可能已经遭到篡改。像这样，请求或响应在传输途中遭到攻击者拦截并篡改内容，称为“中间人攻击”</li>
</ul>
<p>通常认为，如果通信过程具备了四个特性，就可以认为是安全的，四个特性是：机密性、完整性、身份认证和不可否认</p>
<ul>
<li>机密性：对数据的保密，只能由可信的人访问，对其他人是不可见的秘密</li>
<li>完整性：也称为一致性，数据在传输过程中没有被篡改，保持原状</li>
<li>身份认证：确认对方的真实身份，保证消息只能发送给可信的人。如果通信的另一方是假冒的网站，那么数据再保密也没用，黑客完全可以使用冒充的身体套出各种信息，加密和没有加密一样</li>
<li>不可否认：也叫不可抵赖，不能否认已经发生过的行为。保证通信事务的真实性。比如小明借小红一千块，没写借条，第二天否认，小红没有证据只能认倒霉。另一种情况，小明借钱后还给了小红，但没写收条，小红不承认小明还钱的事，还要小明掏一千块。</li>
</ul>`,r:{minutes:6.26,words:1878},t:"1.https如何保证安全",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/2.HTTPS%E4%BC%98%E5%8C%96%E6%89%8B%E6%AE%B5.html",{loader:()=>B(()=>import("./2.HTTPS优化手段.html-Du7yvUji.js"),__vite__mapDeps([286,1])),meta:{e:`<h2>HTTPS 优化</h2>
<p>HTTPS 连接大致上可以划分为两个部分，第一个是建立连接时的非对称加密握手，第二个是握手后的对称加密报文传输。由于目前流行的 AES、ChaCha20 性能都很好，还有硬件优化，报文传输的性能损耗可以说是非常地小，小到几乎可以忽略不计了。</p>
<p>所以，通常所说的“HTTPS 连接慢”指的就是刚开始建立连接的那段时间。这个步骤最长可以花费两个消息往返。而且在握手消息的网络耗时之外，还会有其他的一些“隐形”消耗，比如：</p>
<ul>
<li>产生用于密钥交换的临时公私钥对（ECDHE）；</li>
<li>验证证书时访问 CA 获取 CRL 或者 OCSP；</li>
<li>非对称加密解密处理“Pre-Master”。</li>
</ul>`,r:{minutes:6.46,words:1937},t:"2.HTTPS优化手段",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/3.TLS1.2%E5%8D%8F%E8%AE%AE.html",{loader:()=>B(()=>import("./3.TLS1.2协议.html-DGivY2Ie.js"),__vite__mapDeps([287,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>TLS 1.2 协议</h2>
<p>TLS 包含几个子协议，由几个不同职责的模块组成，比较常见的有记录协议、警报协议、握手协议、变更密码规范协议等</p>
<ul>
<li>记录协议：规定了 TLS 收发数据的基本单位：记录（record）。它有点像是 TCP 里的 segment，所有的其他子协议都需要通过记录协议发出。但多个记录数据可以在一个 TCP 包里一次性发出，也并不需要像 TCP 那样返回 ACK。</li>
<li>警报协议：职责是向对方发出警报信息，有点像是 HTTP 协议里的状态码。比如，protocol_version 就是不支持旧版本，bad_certificate 就是证书有问题，收到警报后另一方可以选择继续，也可以立即终止连接。</li>
<li>握手协议：TLS 里最复杂的子协议，要比 TCP 的 SYN/ACK 复杂的多，浏览器和服务器会在握手过程中协商 TLS 版本号、随机数、密码套件等信息，然后交换证书和密钥参数，最终双方协商得到会话密钥，用于后续的混合加密系统。</li>
<li>变更密码规范协议：非常简单，就是一个“通知”（Change Cipher Spec），告诉对方，后续的数据都将使用加密保护。那么反过来，在它之前，数据都是明文的。如下图的 ChangeCipherSpec 出现后，后面的数据就是密文了。</li>
</ul>`,r:{minutes:7.08,words:2125},t:"3.TLS1.2协议",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/4.TLS1.3%E5%8D%8F%E8%AE%AE.html",{loader:()=>B(()=>import("./4.TLS1.3协议.html-BqLKosEj.js"),__vite__mapDeps([288,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>TLS 1.3 协议</h2>
<p>TLS 1.3 主要改进目标：兼容、安全和性能</p>
<h3>一、最大化兼容</h3>
<p>TLS 1.3 为了向前兼容，新增了一个扩展协议，通过在记录末尾添加一系列的“扩展字段”来增加新的功能，老版本的 TLS 不认识它可以直接忽略。</p>
<p>在记录头的Version 字段被兼容性固定的情况下，只要是 TLS 1.3 协议，握手的“Hello”消息后面就必须有“supported_version”扩展，它标记了 TLS 的版本号，使用它就可以区分新旧协议。</p>
<h3>二、强化安全</h3>
<p>TLS 1.2 在十年的应用中发现了很多漏洞和加密算法的弱点。所以在 TLS 1.3 中进行了修补，比如</p>`,r:{minutes:4.48,words:1345},t:"4.TLS1.3协议",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/CSRF%E6%94%BB%E5%87%BB.html",{loader:()=>B(()=>import("./CSRF攻击.html-CN5JATc9.js"),__vite__mapDeps([289,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<p><a href="https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html</a></p>
`,r:{minutes:.04,words:13},t:"undefined",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/%E5%9F%BA%E7%A1%80%E5%90%8D%E8%AF%8D%E8%AF%A6%E8%A7%A3.html",{loader:()=>B(()=>import("./基础名词详解.html-DDx2xfo6.js"),__vite__mapDeps([290,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>通信安全性</h3>
<p>http 传输数据是明文的，且是不安全的。整个传输过程完全透明，任何人都能够在链路中截获、修改或者伪造请求/响应报文，数据不具有可信性。对于网络购物、证券交易需要高度信任的应用场景是致命的</p>
<p>通常认为，如果通信过程具备了四个特性，就可以认为是安全的，四个特性是：机密性、完整性、身份认证和不可否认</p>
<ul>
<li>机密性：对数据的保密，只能由可信的人访问，对其他人是不可见的秘密</li>
<li>完整性：也称为一致性，数据在传输过程中没有被篡改，保持原状</li>
<li>身份认证：确认对方的真实身份，保证消息只能发送给可信的人。如果通信的另一方是假冒的网站，那么数据再保密也没用，黑客完全可以使用冒充的身体套出各种信息，加密和没有加密一样</li>
<li>不可否认：也叫不可抵赖，不能否认已经发生过的行为。保证通信事务的真实性。比如小明借小红一千块，没写借条，第二天否认，小红没有证据只能认倒霉。另一种情况，小明借钱后还给了小红，但没写收条，小红不承认小明还钱的事，还要小明掏一千块。</li>
</ul>`,r:{minutes:9.11,words:2732},t:"undefined",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/1.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E5%92%8C%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98.html",{loader:()=>B(()=>import("./1.浏览器同源和跨域问题.html-U3Tv5umi.js"),__vite__mapDeps([291,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>一、浏览器同源政策</h2>
<p>浏览器安全的基石是“同源政策”</p>
<ul>
<li>同源是指：A 网页设置的 Cookie，B 网页不能打开，除非这两个网页同源。所谓同源指的是“三个相同“（协议相同、域名相同、端口相同）</li>
<li>同源的目的是为了保证用户信息的安全，防止恶意的网站窃取数据。比如：A 网站是一家银行，用户登陆以后，又去浏览其他网站。如果其他网络可以读取 A 网站的 Cookie，是一件很危险的操作</li>
<li>如果非同源，会有三种行为收到限制
<ol>
<li>Cookie、LacalStorage 和 IndexDB 无法读取</li>
<li>DOM 无法获得</li>
<li>AJAX 请求不能发送</li>
</ol>
</li>
</ul>`,r:{minutes:6.97,words:2092},t:"1.浏览器同源和跨域问题",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/1.%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88.html",{loader:()=>B(()=>import("./1.浏览器输入URL后发生了什么.html-BcmyAAgg.js"),__vite__mapDeps([292,1])),meta:{e:`<h3>一、解析 URL</h3>
<p>首先，用户输入 URL 后浏览器根据输入的信息判断是进行 “搜索” 还是进行 “跳转网址”。如果是搜索内容，则将搜索内容加上默认的搜索引擎组合成新的 URL。如果用户输入的 URL 是合法网址，则直接跳转至输入的 URL 网址。</p>
<h3>二、DNS 域名解析</h3>
<p>浏览器通过 DNS 域名解析服务将输入的域名 解析为对应服务的 IP 地址，这样才能访问到域名指定的服务器。DNS 域名解析的过程如下：</p>
<h4>1. 本地 DNS 服务器查询</h4>
<p>客户端会依次在 浏览器缓存、本地 hosts 文件、本地 DNS 服务器缓存、本地 DNS 服务器 去查询域名，如果在任意一步查询到域名，直接返回域名对应的 IP 地址。</p>`,r:{minutes:5.77,words:1730},t:"1.浏览器输入URL后发生了什么",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/2.http2%E7%9A%84%E7%89%B9%E6%80%A7.html",{loader:()=>B(()=>import("./2.http2的特性.html-BuIxB6Pm.js"),__vite__mapDeps([293,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>HTTP2 的特性</h2>
<h3>一、头部压缩</h3>
<p>由于报文 Header 一般会携带”User Agent“、”Cookie“、”Accept“、”Server“ 等许多固定的头字段，多达几百字节甚至上千字节，但 Body 却经常只有几十字节（比如 Get 请求、204/301/304响应），而且很多的请求响应报文中有很多字段值都是重复的，非常浪费。因此压缩头部报文是应该的</p>
<p>HTTP2 开发了专门的“HPACK” 算法，专门为压缩 HTTP 头部定制的算法，与 gzip、zlib 等压缩算法不同，它是一个“有状态”的算法，需要客户端和服务器各自维护一份“索引表”，也可以说是“字典”（这有点类似 brotli），压缩和解压缩就是查表和更新表的操作。在客户端和服务器两端建立“字典”，用索引号表示重复的字符串，还采用哈夫曼编码来压缩整数和字符串，可以达到 50%-90% 的压缩率。</p>`,r:{minutes:11.45,words:3436},t:"2.http2的特性",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/3.get%E5%92%8Cpost%E7%9A%84%E5%8C%BA%E5%88%AB.html",{loader:()=>B(()=>import("./3.get和post的区别.html-CQTnR0-J.js"),__vite__mapDeps([294,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>3 POST和GET请求区别的常见误区</h3>
<h4>3.1 请求参数长度限制：GET请求长度最多1024kb，POST对请求数据没有限制</h4>
<p>关于此点，在HTTP协议中没有对URL长度进行限制，这个限制是<strong>不同的浏览器及服务器</strong>由于有不同的规范而带来的限制。</p>
<h4>3.2 GET请求一定不能用request body传输数据</h4>
<p>GET<strong>可以带request body，但不能保证一定能被接收到</strong>。如果你用GET服务，在request body偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你读出数据，有些服务器直接忽略。</p>`,r:{minutes:2.06,words:618},t:"3.get和post的区别",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/4.%E9%AA%8C%E8%AF%81HTTPS%E8%AF%81%E4%B9%A6%E5%90%88%E6%B3%95%E6%80%A7.html",{loader:()=>B(()=>import("./4.验证HTTPS证书合法性.html-yYpFPSpk.js"),__vite__mapDeps([295,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>浏览器如何验证 HTTPS 证书的合法性</h2>
<p>浏览器拿到服务端的数字证书后，如何校验该数字证书是否真实有效呢？</p>
<h3>一、数字证书和 CA 机构</h3>
<p>一个数字证书包含：</p>
<ul>
<li>公钥；</li>
<li>持有者信息；</li>
<li>证书认证机构（CA）的信息；</li>
<li>CA 对这份文件的数字签名及使用的算法；</li>
<li>证书有效期；</li>
<li>还有一些其他额外信息；</li>
</ul>
<p>那数字证书的作用，是用来认证公钥持有者的身份，以防止第三方进行冒充。说简单些，证书就是用来告诉客户端，该<a href="https://www.zhihu.com/search?q=%E6%9C%8D%E5%8A%A1%E7%AB%AF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1914075935%7D" target="_blank" rel="noopener noreferrer">服务端</a>是否是合法的，因为只有证书合法，才代表服务端身份是可信的。</p>`,r:{minutes:4.24,words:1271},t:"4.验证HTTPS证书合法性",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/http%E5%8D%8F%E8%AE%AE.html",{loader:()=>B(()=>import("./http协议.html-CYHNw9oK.js"),__vite__mapDeps([296,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>一、http协议</h3>
<p>HTTP协议客户端请求request消息包括以下格式：<code>请求行（request line）、请求头部（header）、空行、请求数据</code>；</p>
<figure><figcaption></figcaption></figure>
<p>服务端响应response也由四个部分组成，分别是：<code>响应行、响应头、空行、响应体</code>。</p>

<h4>请求方法</h4>
<p>HTTP协议定义了多种请求方式，具体如下：<br>
<code>GET</code>：<strong>获取资源</strong>，用来请求访问已被URI（统一资源标志符，和URL是包含和被包含的关系）识别的资源。<br>
<code>POST</code>：用来<strong>传输实体的主体</strong>，虽然GET也可以实现，但是一般不用。<br>
<code>PUT</code>：<strong>传输文件</strong>。但是鉴于PUT方法自身不带验证机制，任何人都可以上传文件，存在安全性问题，因此一般网站都不采用该方法。<br>
<code>HEAD</code>:<strong>获得报文首部</strong>。和GET请求一样，只是不返回报文主体部分。<br>
<code>DELETE</code>：<strong>删除文件</strong>。同样不带验证机制，存在安全性问题。<br>
<code>OPTIONS</code>:<strong>询问指定的请求URI支持哪些方法</strong>。<br>
<code>TRACE</code>:<strong>追踪路径</strong>，让Web服务器将之前的请求通信环回给客户端的方法。<br>
<code>CONNECT</code>：要求在<strong>与代理服务器通信时建立隧道</strong>，实现隧道协议进行TCP通信。</p>`,r:{minutes:1.13,words:338},t:"undefined",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/http%E5%92%8Chttps%E7%9A%84%E5%8C%BA%E5%88%AB.html",{loader:()=>B(()=>import("./http和https的区别.html-BNRocMis.js"),__vite__mapDeps([297,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h2>HTTP 和 HTTPS 区别</h2>
<p>HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。</p>
<ol>
<li>HTTPS 协议需要申请 CA 证书</li>
<li>HTTP 时超文本传输协议，信息是明文传输，安全性差；HTTPS（SSL + HTTP）数据传输过程是加密的，安全性较好</li>
<li>HTTP 页面响应速度比 HTTPS 快，主要因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器交换 3 个包即可。而 HTTPS 除了三次握手的 3 个包之外，还需要 SSL 握手的 9 个包，所以一共是 12 个包</li>
<li>HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口分别是 80 和 443</li>
<li>HTTPS 其实就是构建在 SSL/TLS 之上的 HTTP 协议，所以 HTTPS 要比 HTTP 更耗费服务器资源</li>
</ol>`,r:{minutes:1.08,words:325},t:"undefined",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/%E5%BA%94%E7%94%A8%E5%B1%82.html",{loader:()=>B(()=>import("./应用层.html-CtzLXyDD.js"),__vite__mapDeps([298,1])),meta:{e:`<p>应用层主要提供应用进程间的网络通信服务，完成用户请求的各种服务。</p>
<h3>一、HTTP 协议</h3>
<p>http协议即超文本传输协议，基于TCP协议，用于从Web服务器传输超文本到本地浏览器的传送协议。http协议是无状态协议，自身不对请求和响应直接的通信状态进行保存，但有些场景下我们需要保存用户的登陆信息，所以引入了cookie 和 session 来管理状态。</p>
<h4>1. cookie 和 session 的区别：</h4>
<p>（1）保存位置与安全性：cookie保存在客户端，session保存在服务端，所以在安全性上面，cookie存在安全隐患，可以通过拦截或本地文件找到cookie后进行攻击，而session相对更加安全。因此，可以将登陆信息等重要信息存放为session中；其他信息如果需要保留，可以放在cookie中。<br>
（2）存储容量：单个cookie最大只允许4KB，一个站点最多保存20个Cookie；session没有大小限制，个数只跟服务器的内存大小有关。<br>
（3）有效期与实现机制：cookie可长期有效存在；session依赖于cookie，过期时间默认为-1，只需关闭窗口该 session 就会失效。每个客户端对应一个session ，客户端之间的 session  相互独立；</p>`,r:{minutes:20.63,words:6188},t:"应用层协议",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/%E6%B6%88%E6%81%AF%E5%A4%B4.html",{loader:()=>B(()=>import("./消息头.html-Dgv0QkXd.js"),__vite__mapDeps([299,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h4>1. 使用 multipart/form-data 上传文件</h4>
<p>multipart/form-data 上传文件</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Content-type: multipart/form-data; boundary=------WebKitFormBoundaryX3mHuP4Uhvo8Zy3O</span></span>
<span class="line"><span>body: "--------WebKitFormBoundaryX3mHuP4Uhvo8Zy3O\\r\\n" + "xxxxxxxxx" + "--------WebKitFormBoundaryX3mHuP4Uhvo8Zy3O--\\r\\n";</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,r:{minutes:.18,words:53},t:"undefined",y:"a"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/%E8%AF%B7%E6%B1%82%E5%A4%B4Proxy-Connection.html",{loader:()=>B(()=>import("./请求头Proxy-Connection.html-BtvC5hfa.js"),__vite__mapDeps([300,1])),meta:{d:1674126701e3,l:"2023年1月19日",g:["linux"],e:`<h3>http 请求头中的 Proxy-Connection</h3>
<p><a href="https://imququ.com/post/the-proxy-connection-header-in-http-request.html" target="_blank" rel="noopener noreferrer">https://imququ.com/post/the-proxy-connection-header-in-http-request.html</a></p>
`,r:{minutes:.09,words:27},t:"undefined",y:"a"}}],["/404.html",{loader:()=>B(()=>import("./404.html-DsM25ODZ.js"),__vite__mapDeps([301,1])),meta:{t:""}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/",{loader:()=>B(()=>import("./index.html-Dhm_iTKL.js"),__vite__mapDeps([302,1])),meta:{t:"9天带你走进无锁化编程"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/",{loader:()=>B(()=>import("./index.html-CxIil7fY.js"),__vite__mapDeps([303,1])),meta:{t:"技术专题"}}],["/",{loader:()=>B(()=>import("./index.html-CClHuKp3.js"),__vite__mapDeps([304,1])),meta:{t:""}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/",{loader:()=>B(()=>import("./index.html-BWWr3eAL.js"),__vite__mapDeps([305,1])),meta:{t:"一致性哈希"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/",{loader:()=>B(()=>import("./index.html-DvBJLIu0.js"),__vite__mapDeps([306,1])),meta:{t:"Linux研究"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/",{loader:()=>B(()=>import("./index.html-D2iUFDrL.js"),__vite__mapDeps([307,1])),meta:{t:"Hook"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%98%9F%E5%88%97/",{loader:()=>B(()=>import("./index.html-C1oa389R.js"),__vite__mapDeps([308,1])),meta:{t:"线程安全队列"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/",{loader:()=>B(()=>import("./index.html-BdaI29I_.js"),__vite__mapDeps([309,1])),meta:{t:"并发编程"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E8%BF%90%E8%A1%8C%E5%BA%93/",{loader:()=>B(()=>import("./index.html-Cb7Ked8Z.js"),__vite__mapDeps([310,1])),meta:{t:"运行库"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%94%81%E7%AB%9E%E4%BA%89%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/",{loader:()=>B(()=>import("./index.html-SkapzIJd.js"),__vite__mapDeps([311,1])),meta:{t:"锁竞争分析工具"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/",{loader:()=>B(()=>import("./index.html-BdwH88BP.js"),__vite__mapDeps([312,1])),meta:{t:"链接与装载"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/",{loader:()=>B(()=>import("./index.html-BQO_cb0T.js"),__vite__mapDeps([313,1])),meta:{t:"系统编程"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",{loader:()=>B(()=>import("./index.html-BbROZJv2.js"),__vite__mapDeps([314,1])),meta:{t:"操作系统"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/",{loader:()=>B(()=>import("./index.html-Bh_Hez4M.js"),__vite__mapDeps([315,1])),meta:{t:"问题排查"}}],["/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/",{loader:()=>B(()=>import("./index.html-BnPC0YSi.js"),__vite__mapDeps([316,1])),meta:{t:"分布式事务"}}],["/%E5%88%86%E5%B8%83%E5%BC%8F/",{loader:()=>B(()=>import("./index.html-BicHlBFB.js"),__vite__mapDeps([317,1])),meta:{t:"分布式"}}],["/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/",{loader:()=>B(()=>import("./index.html-C1b2Zmzu.js"),__vite__mapDeps([318,1])),meta:{t:"分布式共识算法"}}],["/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%9E%8B/",{loader:()=>B(()=>import("./index.html-DXIYlEHX.js"),__vite__mapDeps([319,1])),meta:{t:"分布式模型"}}],["/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/",{loader:()=>B(()=>import("./index.html-avf94cXV.js"),__vite__mapDeps([320,1])),meta:{t:"分布式锁"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/",{loader:()=>B(()=>import("./index.html-C-wT_lPC.js"),__vite__mapDeps([321,1])),meta:{t:"内核原理"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",{loader:()=>B(()=>import("./index.html-Xg0gJahI.js"),__vite__mapDeps([322,1])),meta:{t:"计算机网络"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E7%BC%93%E5%AD%98/",{loader:()=>B(()=>import("./index.html-PH282HdR.js"),__vite__mapDeps([323,1])),meta:{t:"缓存"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/",{loader:()=>B(()=>import("./index.html-BCmEPTtv.js"),__vite__mapDeps([324,1])),meta:{t:"架构框架"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/",{loader:()=>B(()=>import("./index.html-uMG-T27v.js"),__vite__mapDeps([325,1])),meta:{t:"工具运维"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.boot-loader/",{loader:()=>B(()=>import("./index.html-ChMvhLEr.js"),__vite__mapDeps([326,1])),meta:{t:"1.boot Loader"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",{loader:()=>B(()=>import("./index.html-Cx0jPUh5.js"),__vite__mapDeps([327,1])),meta:{t:"手写操作系统"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98/",{loader:()=>B(()=>import("./index.html-DFYxyZGp.js"),__vite__mapDeps([328,1])),meta:{t:"4.内存"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.%E4%B8%AD%E6%96%AD/",{loader:()=>B(()=>import("./index.html-BZKGYbYe.js"),__vite__mapDeps([329,1])),meta:{t:"3.中断"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/",{loader:()=>B(()=>import("./index.html-CxpJxXiS.js"),__vite__mapDeps([330,1])),meta:{t:"2.保护模式"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/",{loader:()=>B(()=>import("./index.html-CWtNl4iD.js"),__vite__mapDeps([331,1])),meta:{t:"5.进程和线程"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/9.%E5%85%B6%E4%BB%96/",{loader:()=>B(()=>import("./index.html-eecOIF2N.js"),__vite__mapDeps([332,1])),meta:{t:"9.其他"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/8.%E5%B1%8F%E5%B9%95%E5%92%8C%E6%98%BE%E5%8D%A1/",{loader:()=>B(()=>import("./index.html-CsTuT8NM.js"),__vite__mapDeps([333,1])),meta:{t:"8.屏幕和显卡"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E7%A1%AC%E7%9B%98/",{loader:()=>B(()=>import("./index.html-Byzk1e0O.js"),__vite__mapDeps([334,1])),meta:{t:"6.硬盘"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/",{loader:()=>B(()=>import("./index.html-CLWJBlO0.js"),__vite__mapDeps([335,1])),meta:{t:"内核原理"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/",{loader:()=>B(()=>import("./index.html-BzPDSKhK.js"),__vite__mapDeps([336,1])),meta:{t:"CPU管理"}}],["/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E7%B3%BB%E7%BB%9F%E4%BA%A4%E4%BA%92/",{loader:()=>B(()=>import("./index.html-kRTZ6GSb.js"),__vite__mapDeps([337,1])),meta:{t:"7.系统交互"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/",{loader:()=>B(()=>import("./index.html-CdIY_1HH.js"),__vite__mapDeps([338,1])),meta:{t:"工具运维"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/",{loader:()=>B(()=>import("./index.html-CUV0u34D.js"),__vite__mapDeps([339,1])),meta:{t:"内核原理"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",{loader:()=>B(()=>import("./index.html-P0ebYOJV.js"),__vite__mapDeps([340,1])),meta:{t:"内存管理"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/",{loader:()=>B(()=>import("./index.html-OYnM6TJi.js"),__vite__mapDeps([341,1])),meta:{t:"工具运维"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/",{loader:()=>B(()=>import("./index.html-YOPEuSaZ.js"),__vite__mapDeps([342,1])),meta:{t:"工具运维"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/",{loader:()=>B(()=>import("./index.html-CRc36DtB.js"),__vite__mapDeps([343,1])),meta:{t:"文件管理"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E7%BC%96%E7%A8%8B%E8%B0%83%E8%AF%95/",{loader:()=>B(()=>import("./index.html-uyKuF7-9.js"),__vite__mapDeps([344,1])),meta:{t:"编程调试"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/",{loader:()=>B(()=>import("./index.html-D-VVq--o.js"),__vite__mapDeps([345,1])),meta:{t:"内核原理"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/",{loader:()=>B(()=>import("./index.html-Ba3c2bzR.js"),__vite__mapDeps([346,1])),meta:{t:"内核原理"}}],["/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/",{loader:()=>B(()=>import("./index.html-CwEXAhkl.js"),__vite__mapDeps([347,1])),meta:{t:"进程管理"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E7%BD%91%E7%BB%9C%E5%B1%82/",{loader:()=>B(()=>import("./index.html-90qofcQx.js"),__vite__mapDeps([348,1])),meta:{t:"网络层"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/",{loader:()=>B(()=>import("./index.html-2N-fNCx4.js"),__vite__mapDeps([349,1])),meta:{t:"七层模型"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/",{loader:()=>B(()=>import("./index.html-B4IX0g2J.js"),__vite__mapDeps([350,1])),meta:{t:"可扩展架构模式"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/",{loader:()=>B(()=>import("./index.html-DJuTp0Py.js"),__vite__mapDeps([351,1])),meta:{t:"架构模式"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/",{loader:()=>B(()=>import("./index.html-Cm98wNk1.js"),__vite__mapDeps([352,1])),meta:{t:"高可用架构模式"}}],["/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/",{loader:()=>B(()=>import("./index.html-jMjH_dsi.js"),__vite__mapDeps([353,1])),meta:{t:"高性能架构模式"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/",{loader:()=>B(()=>import("./index.html-BD0IX3VN.js"),__vite__mapDeps([354,1])),meta:{t:"基础语法"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/",{loader:()=>B(()=>import("./index.html-ErESQ_fH.js"),__vite__mapDeps([355,1])),meta:{t:"C 语言"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/",{loader:()=>B(()=>import("./index.html-DyGYBWLW.js"),__vite__mapDeps([356,1])),meta:{t:"编程语言"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/",{loader:()=>B(()=>import("./index.html-C2P6jElP.js"),__vite__mapDeps([357,1])),meta:{t:"编码技巧"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/",{loader:()=>B(()=>import("./index.html-D7x-C4xL.js"),__vite__mapDeps([358,1])),meta:{t:"对象模型"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/",{loader:()=>B(()=>import("./index.html-CohK65_h.js"),__vite__mapDeps([359,1])),meta:{t:"编译调试"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%86%85%E6%A0%B8/",{loader:()=>B(()=>import("./index.html-B3pgwtA_.js"),__vite__mapDeps([360,1])),meta:{t:"底层内核"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/",{loader:()=>B(()=>import("./index.html-BmGahbPi.js"),__vite__mapDeps([361,1])),meta:{t:"基础语法"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/",{loader:()=>B(()=>import("./index.html-GuDpdS82.js"),__vite__mapDeps([362,1])),meta:{t:"Go语言"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/",{loader:()=>B(()=>import("./index.html-Dit6OicL.js"),__vite__mapDeps([363,1])),meta:{t:"底层实现"}}],["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/",{loader:()=>B(()=>import("./index.html-BDzJyQ7q.js"),__vite__mapDeps([364,1])),meta:{t:"编码技巧"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/",{loader:()=>B(()=>import("./index.html-B_VlhrLi.js"),__vite__mapDeps([365,1])),meta:{t:"技术原理"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/",{loader:()=>B(()=>import("./index.html-CnR0HNwi.js"),__vite__mapDeps([366,1])),meta:{t:"传输层"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%BC%96%E7%A8%8B%E8%B0%83%E8%AF%95/",{loader:()=>B(()=>import("./index.html-Dxe9_0rf.js"),__vite__mapDeps([367,1])),meta:{t:"编程调试"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/",{loader:()=>B(()=>import("./index.html-Cyp8yu5G.js"),__vite__mapDeps([368,1])),meta:{t:"通信安全"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/",{loader:()=>B(()=>import("./index.html-BJmiu5_b.js"),__vite__mapDeps([369,1])),meta:{t:"应用层"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/",{loader:()=>B(()=>import("./index.html-BttyQDCu.js"),__vite__mapDeps([370,1])),meta:{t:"技术原理"}}],["/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/",{loader:()=>B(()=>import("./index.html-BrYUu3Uh.js"),__vite__mapDeps([371,1])),meta:{t:"基础概念"}}],["/category/",{loader:()=>B(()=>import("./index.html-CY2iXvXS.js"),__vite__mapDeps([372,1])),meta:{t:"分类",I:!1}}],["/category/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/",{loader:()=>B(()=>import("./index.html-Bqd1rq_4.js"),__vite__mapDeps([373,1])),meta:{t:"编程语言 分类",I:!1}}],["/tag/",{loader:()=>B(()=>import("./index.html-D7GiH4F5.js"),__vite__mapDeps([374,1])),meta:{t:"标签",I:!1}}],["/tag/hook/",{loader:()=>B(()=>import("./index.html-qeecfQhb.js"),__vite__mapDeps([375,1])),meta:{t:"标签: hook",I:!1}}],["/tag/linux/",{loader:()=>B(()=>import("./index.html-BS2EWzD4.js"),__vite__mapDeps([376,1])),meta:{t:"标签: linux",I:!1}}],["/tag/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/",{loader:()=>B(()=>import("./index.html-CJEH6VhZ.js"),__vite__mapDeps([377,1])),meta:{t:"标签: 并发编程",I:!1}}],["/tag/%E7%BA%BF%E7%A8%8B/",{loader:()=>B(()=>import("./index.html-BCVXPSTz.js"),__vite__mapDeps([378,1])),meta:{t:"标签: 线程",I:!1}}],["/tag/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/",{loader:()=>B(()=>import("./index.html-B-YyjubH.js"),__vite__mapDeps([379,1])),meta:{t:"标签: 环境变量",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E9%94%81/",{loader:()=>B(()=>import("./index.html-Ct7hDfhc.js"),__vite__mapDeps([380,1])),meta:{t:"标签: 文件锁",I:!1}}],["/tag/syslog%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1/",{loader:()=>B(()=>import("./index.html-BxoouiAu.js"),__vite__mapDeps([381,1])),meta:{t:"标签: syslog日志服务",I:!1}}],["/tag/%E8%BF%9B%E7%A8%8B%E4%B8%A2%E5%A4%B1/",{loader:()=>B(()=>import("./index.html-BJC7Qcf6.js"),__vite__mapDeps([382,1])),meta:{t:"标签: 进程丢失",I:!1}}],["/tag/%E6%AE%B5%E9%94%99%E8%AF%AF-core/",{loader:()=>B(()=>import("./index.html-D6CXIJ6Z.js"),__vite__mapDeps([383,1])),meta:{t:"标签: 段错误 core",I:!1}}],["/tag/load/",{loader:()=>B(()=>import("./index.html-Dj5XEsHN.js"),__vite__mapDeps([384,1])),meta:{t:"标签: load",I:!1}}],["/tag/c__%E9%93%BE%E6%8E%A5/",{loader:()=>B(()=>import("./index.html-CGGVrcU2.js"),__vite__mapDeps([385,1])),meta:{t:"标签: c++链接",I:!1}}],["/tag/iptables/",{loader:()=>B(()=>import("./index.html-BKMfWuSb.js"),__vite__mapDeps([386,1])),meta:{t:"标签: iptables",I:!1}}],["/tag/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",{loader:()=>B(()=>import("./index.html-Cs3gsDHP.js"),__vite__mapDeps([387,1])),meta:{t:"标签: 内存管理",I:!1}}],["/tag/linux-%E6%97%A5%E5%BF%97/",{loader:()=>B(()=>import("./index.html-U2PmA8po.js"),__vite__mapDeps([388,1])),meta:{t:"标签: linux 日志",I:!1}}],["/tag/umask/",{loader:()=>B(()=>import("./index.html-CafNTp1L.js"),__vite__mapDeps([389,1])),meta:{t:"标签: umask",I:!1}}],["/tag/tempfs-devshm/",{loader:()=>B(()=>import("./index.html-Bi7ehguh.js"),__vite__mapDeps([390,1])),meta:{t:"标签: tempfs /dev/shm",I:!1}}],["/tag/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81/",{loader:()=>B(()=>import("./index.html-BtjPNI8k.js"),__vite__mapDeps([391,1])),meta:{t:"标签: 进程状态",I:!1}}],["/tag/c__/",{loader:()=>B(()=>import("./index.html-CvZA6zQk.js"),__vite__mapDeps([392,1])),meta:{t:"标签: c++",I:!1}}],["/tag/stl/",{loader:()=>B(()=>import("./index.html-DLGRxmcp.js"),__vite__mapDeps([393,1])),meta:{t:"标签: stl",I:!1}}],["/tag/scanf/",{loader:()=>B(()=>import("./index.html-BnrzRa1C.js"),__vite__mapDeps([394,1])),meta:{t:"标签: scanf",I:!1}}],["/tag/go/",{loader:()=>B(()=>import("./index.html-DqP7jIRF.js"),__vite__mapDeps([395,1])),meta:{t:"标签: go",I:!1}}],["/tag/%E7%AB%AF%E5%8F%A3/",{loader:()=>B(()=>import("./index.html-DRPQzIKR.js"),__vite__mapDeps([396,1])),meta:{t:"标签: 端口",I:!1}}],["/article/",{loader:()=>B(()=>import("./index.html-DCgahhRT.js"),__vite__mapDeps([397,1])),meta:{t:"文章",I:!1}}],["/star/",{loader:()=>B(()=>import("./index.html-D79b2fFy.js"),__vite__mapDeps([398,1])),meta:{t:"星标",I:!1}}],["/timeline/",{loader:()=>B(()=>import("./index.html-BT7xB3Kl.js"),__vite__mapDeps([399,1])),meta:{t:"时间轴",I:!1}}]]);function ac(){return fp().__VUE_DEVTOOLS_GLOBAL_HOOK__}function fp(){return typeof navigator<"u"&&typeof window<"u"?window:typeof globalThis<"u"?globalThis:{}}const lc=typeof Proxy=="function",rc="devtools-plugin:setup",Ec="plugin:settings:set";let $e,Ya;function hc(){var i;return $e!==void 0||(typeof window<"u"&&window.performance?($e=!0,Ya=window.performance):typeof globalThis<"u"&&(!((i=globalThis.perf_hooks)===null||i===void 0)&&i.performance)?($e=!0,Ya=globalThis.perf_hooks.performance):$e=!1),$e}function pc(){return hc()?Ya.now():Date.now()}let oc=class{constructor(s,e){this.target=null,this.targetQueue=[],this.onQueue=[],this.plugin=s,this.hook=e;const n={};if(s.settings)for(const l in s.settings){const r=s.settings[l];n[l]=r.defaultValue}const t=`__vue-devtools-plugin-settings__${s.id}`;let a=Object.assign({},n);try{const l=localStorage.getItem(t),r=JSON.parse(l);Object.assign(a,r)}catch{}this.fallbacks={getSettings(){return a},setSettings(l){try{localStorage.setItem(t,JSON.stringify(l))}catch{}a=l},now(){return pc()}},e&&e.on(Ec,(l,r)=>{l===this.plugin.id&&this.fallbacks.setSettings(r)}),this.proxiedOn=new Proxy({},{get:(l,r)=>this.target?this.target.on[r]:(...h)=>{this.onQueue.push({method:r,args:h})}}),this.proxiedTarget=new Proxy({},{get:(l,r)=>this.target?this.target[r]:r==="on"?this.proxiedOn:Object.keys(this.fallbacks).includes(r)?(...h)=>(this.targetQueue.push({method:r,args:h,resolve:()=>{}}),this.fallbacks[r](...h)):(...h)=>new Promise(p=>{this.targetQueue.push({method:r,args:h,resolve:p})})})}async setRealTarget(s){this.target=s;for(const e of this.onQueue)this.target.on[e.method](...e.args);for(const e of this.targetQueue)e.resolve(await this.target[e.method](...e.args))}};function dc(i,s){const e=i,n=fp(),t=ac(),a=lc&&e.enableEarlyProxy;if(t&&(n.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__||!a))t.emit(rc,i,s);else{const l=a?new oc(e,t):null;(n.__VUE_DEVTOOLS_PLUGINS__=n.__VUE_DEVTOOLS_PLUGINS__||[]).push({pluginDescriptor:e,setupFn:s,proxy:l}),l&&s(l.proxiedTarget)}}/*!
  * vue-router v4.5.0
  * (c) 2024 Eduardo San Martin Morote
  * @license MIT
  */const Ws=typeof document<"u";function vp(i){return typeof i=="object"||"displayName"in i||"props"in i||"__vccOpts"in i}function cc(i){return i.__esModule||i[Symbol.toStringTag]==="Module"||i.default&&vp(i.default)}const Ai=Object.assign;function va(i,s){const e={};for(const n in s){const t=s[n];e[n]=os(t)?t.map(i):i(t)}return e}const Ln=()=>{},os=Array.isArray,yp=/#/g,Bc=/&/g,kc=/\//g,Ac=/=/g,uc=/\?/g,Fp=/\+/g,gc=/%5B/g,mc=/%5D/g,Cp=/%5E/g,fc=/%60/g,Dp=/%7B/g,vc=/%7C/g,bp=/%7D/g,yc=/%20/g;function Wl(i){return encodeURI(""+i).replace(vc,"|").replace(gc,"[").replace(mc,"]")}function Fc(i){return Wl(i).replace(Dp,"{").replace(bp,"}").replace(Cp,"^")}function Qa(i){return Wl(i).replace(Fp,"%2B").replace(yc,"+").replace(yp,"%23").replace(Bc,"%26").replace(fc,"`").replace(Dp,"{").replace(bp,"}").replace(Cp,"^")}function Cc(i){return Qa(i).replace(Ac,"%3D")}function Dc(i){return Wl(i).replace(yp,"%23").replace(uc,"%3F")}function bc(i){return i==null?"":Dc(i).replace(kc,"%2F")}function nn(i){try{return decodeURIComponent(""+i)}catch{}return""+i}const _c=/\/$/,wc=i=>i.replace(_c,"");function ya(i,s,e="/"){let n,t={},a="",l="";const r=s.indexOf("#");let h=s.indexOf("?");return r<h&&r>=0&&(h=-1),h>-1&&(n=s.slice(0,h),a=s.slice(h+1,r>-1?r:s.length),t=i(a)),r>-1&&(n=n||s.slice(0,r),l=s.slice(r,s.length)),n=Lc(n??s,e),{fullPath:n+(a&&"?")+a+l,path:n,query:t,hash:nn(l)}}function xc(i,s){const e=s.query?i(s.query):"";return s.path+(e&&"?")+e+(s.hash||"")}function dE(i,s){return!s||!i.toLowerCase().startsWith(s.toLowerCase())?i:i.slice(s.length)||"/"}function Tc(i,s,e){const n=s.matched.length-1,t=e.matched.length-1;return n>-1&&n===t&&ke(s.matched[n],e.matched[t])&&_p(s.params,e.params)&&i(s.query)===i(e.query)&&s.hash===e.hash}function ke(i,s){return(i.aliasOf||i)===(s.aliasOf||s)}function _p(i,s){if(Object.keys(i).length!==Object.keys(s).length)return!1;for(const e in i)if(!Pc(i[e],s[e]))return!1;return!0}function Pc(i,s){return os(i)?cE(i,s):os(s)?cE(s,i):i===s}function cE(i,s){return os(s)?i.length===s.length&&i.every((e,n)=>e===s[n]):i.length===1&&i[0]===s}function Lc(i,s){if(i.startsWith("/"))return i;if(!i)return s;const e=s.split("/"),n=i.split("/"),t=n[n.length-1];(t===".."||t===".")&&n.push("");let a=e.length-1,l,r;for(l=0;l<n.length;l++)if(r=n[l],r!==".")if(r==="..")a>1&&a--;else break;return e.slice(0,a).join("/")+"/"+n.slice(l).join("/")}const js={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0};var Hn;(function(i){i.pop="pop",i.push="push"})(Hn||(Hn={}));var Sn;(function(i){i.back="back",i.forward="forward",i.unknown=""})(Sn||(Sn={}));function Sc(i){if(!i)if(Ws){const s=document.querySelector("base");i=s&&s.getAttribute("href")||"/",i=i.replace(/^\w+:\/\/[^\/]+/,"")}else i="/";return i[0]!=="/"&&i[0]!=="#"&&(i="/"+i),wc(i)}const Oc=/^[^#]+#/;function Ic(i,s){return i.replace(Oc,"#")+s}function Rc(i,s){const e=document.documentElement.getBoundingClientRect(),n=i.getBoundingClientRect();return{behavior:s.behavior,left:n.left-e.left-(s.left||0),top:n.top-e.top-(s.top||0)}}const Xt=()=>({left:window.scrollX,top:window.scrollY});function Mc(i){let s;if("el"in i){const e=i.el,n=typeof e=="string"&&e.startsWith("#"),t=typeof e=="string"?n?document.getElementById(e.slice(1)):document.querySelector(e):e;if(!t)return;s=Rc(t,i)}else s=i;"scrollBehavior"in document.documentElement.style?window.scrollTo(s):window.scrollTo(s.left!=null?s.left:window.scrollX,s.top!=null?s.top:window.scrollY)}function BE(i,s){return(history.state?history.state.position-s:-1)+i}const Ja=new Map;function Vc(i,s){Ja.set(i,s)}function $c(i){const s=Ja.get(i);return Ja.delete(i),s}let Nc=()=>location.protocol+"//"+location.host;function wp(i,s){const{pathname:e,search:n,hash:t}=s,a=i.indexOf("#");if(a>-1){let r=t.includes(i.slice(a))?i.slice(a).length:1,h=t.slice(r);return h[0]!=="/"&&(h="/"+h),dE(h,"")}return dE(e,i)+n+t}function Hc(i,s,e,n){let t=[],a=[],l=null;const r=({state:c})=>{const k=wp(i,location),f=e.value,u=s.value;let y=0;if(c){if(e.value=k,s.value=c,l&&l===f){l=null;return}y=u?c.position-u.position:0}else n(k);t.forEach(v=>{v(e.value,f,{delta:y,type:Hn.pop,direction:y?y>0?Sn.forward:Sn.back:Sn.unknown})})};function h(){l=e.value}function p(c){t.push(c);const k=()=>{const f=t.indexOf(c);f>-1&&t.splice(f,1)};return a.push(k),k}function o(){const{history:c}=window;c.state&&c.replaceState(Ai({},c.state,{scroll:Xt()}),"")}function d(){for(const c of a)c();a=[],window.removeEventListener("popstate",r),window.removeEventListener("beforeunload",o)}return window.addEventListener("popstate",r),window.addEventListener("beforeunload",o,{passive:!0}),{pauseListeners:h,listen:p,destroy:d}}function kE(i,s,e,n=!1,t=!1){return{back:i,current:s,forward:e,replaced:n,position:window.history.length,scroll:t?Xt():null}}function Uc(i){const{history:s,location:e}=window,n={value:wp(i,e)},t={value:s.state};t.value||a(n.value,{back:null,current:n.value,forward:null,position:s.length-1,replaced:!0,scroll:null},!0);function a(h,p,o){const d=i.indexOf("#"),c=d>-1?(e.host&&document.querySelector("base")?i:i.slice(d))+h:Nc()+i+h;try{s[o?"replaceState":"pushState"](p,"",c),t.value=p}catch(k){console.error(k),e[o?"replace":"assign"](c)}}function l(h,p){const o=Ai({},s.state,kE(t.value.back,h,t.value.forward,!0),p,{position:t.value.position});a(h,o,!0),n.value=h}function r(h,p){const o=Ai({},t.value,s.state,{forward:h,scroll:Xt()});a(o.current,o,!0);const d=Ai({},kE(n.value,h,null),{position:o.position+1},p);a(h,d,!1),n.value=h}return{location:n,state:t,push:r,replace:l}}function zc(i){i=Sc(i);const s=Uc(i),e=Hc(i,s.state,s.location,s.replace);function n(a,l=!0){l||e.pauseListeners(),history.go(a)}const t=Ai({location:"",base:i,go:n,createHref:Ic.bind(null,i)},s,e);return Object.defineProperty(t,"location",{enumerable:!0,get:()=>s.location.value}),Object.defineProperty(t,"state",{enumerable:!0,get:()=>s.state.value}),t}function xp(i){return typeof i=="string"||i&&typeof i=="object"}function Tp(i){return typeof i=="string"||typeof i=="symbol"}const Pp=Symbol("");var AE;(function(i){i[i.aborted=4]="aborted",i[i.cancelled=8]="cancelled",i[i.duplicated=16]="duplicated"})(AE||(AE={}));function tn(i,s){return Ai(new Error,{type:i,[Pp]:!0},s)}function zs(i,s){return i instanceof Error&&Pp in i&&(s==null||!!(i.type&s))}const uE="[^/]+?",jc={sensitive:!1,strict:!1,start:!0,end:!0},Gc=/[.+*?^${}()[\]/\\]/g;function Wc(i,s){const e=Ai({},jc,s),n=[];let t=e.start?"^":"";const a=[];for(const p of i){const o=p.length?[]:[90];e.strict&&!p.length&&(t+="/");for(let d=0;d<p.length;d++){const c=p[d];let k=40+(e.sensitive?.25:0);if(c.type===0)d||(t+="/"),t+=c.value.replace(Gc,"\\$&"),k+=40;else if(c.type===1){const{value:f,repeatable:u,optional:y,regexp:v}=c;a.push({name:f,repeatable:u,optional:y});const D=v||uE;if(D!==uE){k+=10;try{new RegExp(`(${D})`)}catch(C){throw new Error(`Invalid custom RegExp for param "${f}" (${D}): `+C.message)}}let g=u?`((?:${D})(?:/(?:${D}))*)`:`(${D})`;d||(g=y&&p.length<2?`(?:/${g})`:"/"+g),y&&(g+="?"),t+=g,k+=20,y&&(k+=-8),u&&(k+=-20),D===".*"&&(k+=-50)}o.push(k)}n.push(o)}if(e.strict&&e.end){const p=n.length-1;n[p][n[p].length-1]+=.7000000000000001}e.strict||(t+="/?"),e.end?t+="$":e.strict&&!t.endsWith("/")&&(t+="(?:/|$)");const l=new RegExp(t,e.sensitive?"":"i");function r(p){const o=p.match(l),d={};if(!o)return null;for(let c=1;c<o.length;c++){const k=o[c]||"",f=a[c-1];d[f.name]=k&&f.repeatable?k.split("/"):k}return d}function h(p){let o="",d=!1;for(const c of i){(!d||!o.endsWith("/"))&&(o+="/"),d=!1;for(const k of c)if(k.type===0)o+=k.value;else if(k.type===1){const{value:f,repeatable:u,optional:y}=k,v=f in p?p[f]:"";if(os(v)&&!u)throw new Error(`Provided param "${f}" is an array but it is not repeatable (* or + modifiers)`);const D=os(v)?v.join("/"):v;if(!D)if(y)c.length<2&&(o.endsWith("/")?o=o.slice(0,-1):d=!0);else throw new Error(`Missing required param "${f}"`);o+=D}}return o||"/"}return{re:l,score:n,keys:a,parse:r,stringify:h}}function qc(i,s){let e=0;for(;e<i.length&&e<s.length;){const n=s[e]-i[e];if(n)return n;e++}return i.length<s.length?i.length===1&&i[0]===80?-1:1:i.length>s.length?s.length===1&&s[0]===80?1:-1:0}function Lp(i,s){let e=0;const n=i.score,t=s.score;for(;e<n.length&&e<t.length;){const a=qc(n[e],t[e]);if(a)return a;e++}if(Math.abs(t.length-n.length)===1){if(gE(n))return 1;if(gE(t))return-1}return t.length-n.length}function gE(i){const s=i[i.length-1];return i.length>0&&s[s.length-1]<0}const Kc={type:0,value:""},Xc=/[a-zA-Z0-9_]/;function Yc(i){if(!i)return[[]];if(i==="/")return[[Kc]];if(!i.startsWith("/"))throw new Error(`Invalid path "${i}"`);function s(k){throw new Error(`ERR (${e})/"${p}": ${k}`)}let e=0,n=e;const t=[];let a;function l(){a&&t.push(a),a=[]}let r=0,h,p="",o="";function d(){p&&(e===0?a.push({type:0,value:p}):e===1||e===2||e===3?(a.length>1&&(h==="*"||h==="+")&&s(`A repeatable param (${p}) must be alone in its segment. eg: '/:ids+.`),a.push({type:1,value:p,regexp:o,repeatable:h==="*"||h==="+",optional:h==="*"||h==="?"})):s("Invalid state to consume buffer"),p="")}function c(){p+=h}for(;r<i.length;){if(h=i[r++],h==="\\"&&e!==2){n=e,e=4;continue}switch(e){case 0:h==="/"?(p&&d(),l()):h===":"?(d(),e=1):c();break;case 4:c(),e=n;break;case 1:h==="("?e=2:Xc.test(h)?c():(d(),e=0,h!=="*"&&h!=="?"&&h!=="+"&&r--);break;case 2:h===")"?o[o.length-1]=="\\"?o=o.slice(0,-1)+h:e=3:o+=h;break;case 3:d(),e=0,h!=="*"&&h!=="?"&&h!=="+"&&r--,o="";break;default:s("Unknown state");break}}return e===2&&s(`Unfinished custom RegExp for param "${p}"`),d(),l(),t}function Qc(i,s,e){const n=Wc(Yc(i.path),e),t=Ai(n,{record:i,parent:s,children:[],alias:[]});return s&&!t.record.aliasOf==!s.record.aliasOf&&s.children.push(t),t}function Jc(i,s){const e=[],n=new Map;s=yE({strict:!1,end:!0,sensitive:!1},s);function t(d){return n.get(d)}function a(d,c,k){const f=!k,u=fE(d);u.aliasOf=k&&k.record;const y=yE(s,d),v=[u];if("alias"in d){const C=typeof d.alias=="string"?[d.alias]:d.alias;for(const L of C)v.push(fE(Ai({},u,{components:k?k.record.components:u.components,path:L,aliasOf:k?k.record:u})))}let D,g;for(const C of v){const{path:L}=C;if(c&&L[0]!=="/"){const W=c.record.path,V=W[W.length-1]==="/"?"":"/";C.path=c.record.path+(L&&V+L)}if(D=Qc(C,c,y),k?k.alias.push(D):(g=g||D,g!==D&&g.alias.push(D),f&&d.name&&!vE(D)&&l(d.name)),Sp(D)&&h(D),u.children){const W=u.children;for(let V=0;V<W.length;V++)a(W[V],D,k&&k.children[V])}k=k||D}return g?()=>{l(g)}:Ln}function l(d){if(Tp(d)){const c=n.get(d);c&&(n.delete(d),e.splice(e.indexOf(c),1),c.children.forEach(l),c.alias.forEach(l))}else{const c=e.indexOf(d);c>-1&&(e.splice(c,1),d.record.name&&n.delete(d.record.name),d.children.forEach(l),d.alias.forEach(l))}}function r(){return e}function h(d){const c=sB(d,e);e.splice(c,0,d),d.record.name&&!vE(d)&&n.set(d.record.name,d)}function p(d,c){let k,f={},u,y;if("name"in d&&d.name){if(k=n.get(d.name),!k)throw tn(1,{location:d});y=k.record.name,f=Ai(mE(c.params,k.keys.filter(g=>!g.optional).concat(k.parent?k.parent.keys.filter(g=>g.optional):[]).map(g=>g.name)),d.params&&mE(d.params,k.keys.map(g=>g.name))),u=k.stringify(f)}else if(d.path!=null)u=d.path,k=e.find(g=>g.re.test(u)),k&&(f=k.parse(u),y=k.record.name);else{if(k=c.name?n.get(c.name):e.find(g=>g.re.test(c.path)),!k)throw tn(1,{location:d,currentLocation:c});y=k.record.name,f=Ai({},c.params,d.params),u=k.stringify(f)}const v=[];let D=k;for(;D;)v.unshift(D.record),D=D.parent;return{name:y,path:u,params:f,matched:v,meta:iB(v)}}i.forEach(d=>a(d));function o(){e.length=0,n.clear()}return{addRoute:a,resolve:p,removeRoute:l,clearRoutes:o,getRoutes:r,getRecordMatcher:t}}function mE(i,s){const e={};for(const n of s)n in i&&(e[n]=i[n]);return e}function fE(i){const s={path:i.path,redirect:i.redirect,name:i.name,meta:i.meta||{},aliasOf:i.aliasOf,beforeEnter:i.beforeEnter,props:Zc(i),children:i.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in i?i.components||null:i.component&&{default:i.component}};return Object.defineProperty(s,"mods",{value:{}}),s}function Zc(i){const s={},e=i.props||!1;if("component"in i)s.default=e;else for(const n in i.components)s[n]=typeof e=="object"?e[n]:e;return s}function vE(i){for(;i;){if(i.record.aliasOf)return!0;i=i.parent}return!1}function iB(i){return i.reduce((s,e)=>Ai(s,e.meta),{})}function yE(i,s){const e={};for(const n in i)e[n]=n in s?s[n]:i[n];return e}function sB(i,s){let e=0,n=s.length;for(;e!==n;){const a=e+n>>1;Lp(i,s[a])<0?n=a:e=a+1}const t=eB(i);return t&&(n=s.lastIndexOf(t,n-1)),n}function eB(i){let s=i;for(;s=s.parent;)if(Sp(s)&&Lp(i,s)===0)return s}function Sp({record:i}){return!!(i.name||i.components&&Object.keys(i.components).length||i.redirect)}function nB(i){const s={};if(i===""||i==="?")return s;const n=(i[0]==="?"?i.slice(1):i).split("&");for(let t=0;t<n.length;++t){const a=n[t].replace(Fp," "),l=a.indexOf("="),r=nn(l<0?a:a.slice(0,l)),h=l<0?null:nn(a.slice(l+1));if(r in s){let p=s[r];os(p)||(p=s[r]=[p]),p.push(h)}else s[r]=h}return s}function FE(i){let s="";for(let e in i){const n=i[e];if(e=Cc(e),n==null){n!==void 0&&(s+=(s.length?"&":"")+e);continue}(os(n)?n.map(a=>a&&Qa(a)):[n&&Qa(n)]).forEach(a=>{a!==void 0&&(s+=(s.length?"&":"")+e,a!=null&&(s+="="+a))})}return s}function tB(i){const s={};for(const e in i){const n=i[e];n!==void 0&&(s[e]=os(n)?n.map(t=>t==null?null:""+t):n==null?n:""+n)}return s}const aB=Symbol(""),CE=Symbol(""),Yt=Symbol(""),ql=Symbol(""),Za=Symbol("");function un(){let i=[];function s(n){return i.push(n),()=>{const t=i.indexOf(n);t>-1&&i.splice(t,1)}}function e(){i=[]}return{add:s,list:()=>i.slice(),reset:e}}function he(i,s,e,n,t,a=l=>l()){const l=n&&(n.enterCallbacks[t]=n.enterCallbacks[t]||[]);return()=>new Promise((r,h)=>{const p=c=>{c===!1?h(tn(4,{from:e,to:s})):c instanceof Error?h(c):xp(c)?h(tn(2,{from:s,to:c})):(l&&n.enterCallbacks[t]===l&&typeof c=="function"&&l.push(c),r())},o=a(()=>i.call(n&&n.instances[t],s,e,p));let d=Promise.resolve(o);i.length<3&&(d=d.then(p)),d.catch(c=>h(c))})}function Fa(i,s,e,n,t=a=>a()){const a=[];for(const l of i)for(const r in l.components){let h=l.components[r];if(!(s!=="beforeRouteEnter"&&!l.instances[r]))if(vp(h)){const o=(h.__vccOpts||h)[s];o&&a.push(he(o,e,n,l,r,t))}else{let p=h();a.push(()=>p.then(o=>{if(!o)throw new Error(`Couldn't resolve component "${r}" at "${l.path}"`);const d=cc(o)?o.default:o;l.mods[r]=o,l.components[r]=d;const k=(d.__vccOpts||d)[s];return k&&he(k,e,n,l,r,t)()}))}}return a}function DE(i){const s=ui(Yt),e=ui(ql),n=F(()=>{const h=Ks(i.to);return s.resolve(h)}),t=F(()=>{const{matched:h}=n.value,{length:p}=h,o=h[p-1],d=e.matched;if(!o||!d.length)return-1;const c=d.findIndex(ke.bind(null,o));if(c>-1)return c;const k=bE(h[p-2]);return p>1&&bE(o)===k&&d[d.length-1].path!==k?d.findIndex(ke.bind(null,h[p-2])):c}),a=F(()=>t.value>-1&&pB(e.params,n.value.params)),l=F(()=>t.value>-1&&t.value===e.matched.length-1&&_p(e.params,n.value.params));function r(h={}){if(hB(h)){const p=s[Ks(i.replace)?"replace":"push"](Ks(i.to)).catch(Ln);return i.viewTransition&&typeof document<"u"&&"startViewTransition"in document&&document.startViewTransition(()=>p),p}return Promise.resolve()}if(Ws){const h=ge();if(h){const p={route:n.value,isActive:a.value,isExactActive:l.value,error:null};h.__vrl_devtools=h.__vrl_devtools||[],h.__vrl_devtools.push(p),Nl(()=>{p.route=n.value,p.isActive=a.value,p.isExactActive=l.value,p.error=xp(Ks(i.to))?null:'Invalid "to" value'},{flush:"post"})}}return{route:n,href:F(()=>n.value.href),isActive:a,isExactActive:l,navigate:r}}function lB(i){return i.length===1?i[0]:i}const rB=R({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:DE,setup(i,{slots:s}){const e=Xn(DE(i)),{options:n}=ui(Yt),t=F(()=>({[_E(i.activeClass,n.linkActiveClass,"router-link-active")]:e.isActive,[_E(i.exactActiveClass,n.linkExactActiveClass,"router-link-exact-active")]:e.isExactActive}));return()=>{const a=s.default&&lB(s.default(e));return i.custom?a:E("a",{"aria-current":e.isExactActive?i.ariaCurrentValue:null,href:e.href,onClick:e.navigate,class:t.value},a)}}}),EB=rB;function hB(i){if(!(i.metaKey||i.altKey||i.ctrlKey||i.shiftKey)&&!i.defaultPrevented&&!(i.button!==void 0&&i.button!==0)){if(i.currentTarget&&i.currentTarget.getAttribute){const s=i.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(s))return}return i.preventDefault&&i.preventDefault(),!0}}function pB(i,s){for(const e in s){const n=s[e],t=i[e];if(typeof n=="string"){if(n!==t)return!1}else if(!os(t)||t.length!==n.length||n.some((a,l)=>a!==t[l]))return!1}return!0}function bE(i){return i?i.aliasOf?i.aliasOf.path:i.path:""}const _E=(i,s,e)=>i??s??e,oB=R({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(i,{attrs:s,slots:e}){const n=ui(Za),t=F(()=>i.route||n.value),a=ui(CE,0),l=F(()=>{let p=Ks(a);const{matched:o}=t.value;let d;for(;(d=o[p])&&!d.components;)p++;return p}),r=F(()=>t.value.matched[l.value]);ps(CE,F(()=>l.value+1)),ps(aB,r),ps(Za,t);const h=G();return ti(()=>[h.value,r.value,i.name],([p,o,d],[c,k,f])=>{o&&(o.instances[d]=p,k&&k!==o&&p&&p===c&&(o.leaveGuards.size||(o.leaveGuards=k.leaveGuards),o.updateGuards.size||(o.updateGuards=k.updateGuards))),p&&o&&(!k||!ke(o,k)||!c)&&(o.enterCallbacks[d]||[]).forEach(u=>u(p))},{flush:"post"}),()=>{const p=t.value,o=i.name,d=r.value,c=d&&d.components[o];if(!c)return wE(e.default,{Component:c,route:p});const k=d.props[o],f=k?k===!0?p.params:typeof k=="function"?k(p):k:null,y=E(c,Ai({},f,s,{onVnodeUnmounted:v=>{v.component.isUnmounted&&(d.instances[o]=null)},ref:h}));if(Ws&&y.ref){const v={depth:l.value,name:d.name,path:d.path,meta:d.meta};(os(y.ref)?y.ref.map(g=>g.i):[y.ref.i]).forEach(g=>{g.__vrv_devtools=v})}return wE(e.default,{Component:y,route:p})||y}}});function wE(i,s){if(!i)return null;const e=i(s);return e.length===1?e[0]:e}const dB=oB;function gn(i,s){const e=Ai({},i,{matched:i.matched.map(n=>FB(n,["instances","children","aliasOf"]))});return{_custom:{type:null,readOnly:!0,display:i.fullPath,tooltip:s,value:e}}}function gt(i){return{_custom:{display:i}}}let cB=0;function BB(i,s,e){if(s.__hasDevtools)return;s.__hasDevtools=!0;const n=cB++;dc({id:"org.vuejs.router"+(n?"."+n:""),label:"Vue Router",packageName:"vue-router",homepage:"https://router.vuejs.org",logo:"https://router.vuejs.org/logo.png",componentStateTypes:["Routing"],app:i},t=>{typeof t.now!="function"&&console.warn("[Vue Router]: You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html."),t.on.inspectComponent((o,d)=>{o.instanceData&&o.instanceData.state.push({type:"Routing",key:"$route",editable:!1,value:gn(s.currentRoute.value,"Current Route")})}),t.on.visitComponentTree(({treeNode:o,componentInstance:d})=>{if(d.__vrv_devtools){const c=d.__vrv_devtools;o.tags.push({label:(c.name?`${c.name.toString()}: `:"")+c.path,textColor:0,tooltip:"This component is rendered by &lt;router-view&gt;",backgroundColor:Op})}os(d.__vrl_devtools)&&(d.__devtoolsApi=t,d.__vrl_devtools.forEach(c=>{let k=c.route.path,f=Mp,u="",y=0;c.error?(k=c.error,f=mB,y=fB):c.isExactActive?(f=Rp,u="This is exactly active"):c.isActive&&(f=Ip,u="This link is active"),o.tags.push({label:k,textColor:y,tooltip:u,backgroundColor:f})}))}),ti(s.currentRoute,()=>{h(),t.notifyComponentUpdate(),t.sendInspectorTree(r),t.sendInspectorState(r)});const a="router:navigations:"+n;t.addTimelineLayer({id:a,label:`Router${n?" "+n:""} Navigations`,color:4237508}),s.onError((o,d)=>{t.addTimelineEvent({layerId:a,event:{title:"Error during Navigation",subtitle:d.fullPath,logType:"error",time:t.now(),data:{error:o},groupId:d.meta.__navigationId}})});let l=0;s.beforeEach((o,d)=>{const c={guard:gt("beforeEach"),from:gn(d,"Current Location during this navigation"),to:gn(o,"Target location")};Object.defineProperty(o.meta,"__navigationId",{value:l++}),t.addTimelineEvent({layerId:a,event:{time:t.now(),title:"Start of navigation",subtitle:o.fullPath,data:c,groupId:o.meta.__navigationId}})}),s.afterEach((o,d,c)=>{const k={guard:gt("afterEach")};c?(k.failure={_custom:{type:Error,readOnly:!0,display:c?c.message:"",tooltip:"Navigation Failure",value:c}},k.status=gt("❌")):k.status=gt("✅"),k.from=gn(d,"Current Location during this navigation"),k.to=gn(o,"Target location"),t.addTimelineEvent({layerId:a,event:{title:"End of navigation",subtitle:o.fullPath,time:t.now(),data:k,logType:c?"warning":"default",groupId:o.meta.__navigationId}})});const r="router-inspector:"+n;t.addInspector({id:r,label:"Routes"+(n?" "+n:""),icon:"book",treeFilterPlaceholder:"Search routes"});function h(){if(!p)return;const o=p;let d=e.getRoutes().filter(c=>!c.parent||!c.parent.record.components);d.forEach(Np),o.filter&&(d=d.filter(c=>il(c,o.filter.toLowerCase()))),d.forEach(c=>$p(c,s.currentRoute.value)),o.rootNodes=d.map(Vp)}let p;t.on.getInspectorTree(o=>{p=o,o.app===i&&o.inspectorId===r&&h()}),t.on.getInspectorState(o=>{if(o.app===i&&o.inspectorId===r){const c=e.getRoutes().find(k=>k.record.__vd_id===o.nodeId);c&&(o.state={options:AB(c)})}}),t.sendInspectorTree(r),t.sendInspectorState(r)})}function kB(i){return i.optional?i.repeatable?"*":"?":i.repeatable?"+":""}function AB(i){const{record:s}=i,e=[{editable:!1,key:"path",value:s.path}];return s.name!=null&&e.push({editable:!1,key:"name",value:s.name}),e.push({editable:!1,key:"regexp",value:i.re}),i.keys.length&&e.push({editable:!1,key:"keys",value:{_custom:{type:null,readOnly:!0,display:i.keys.map(n=>`${n.name}${kB(n)}`).join(" "),tooltip:"Param keys",value:i.keys}}}),s.redirect!=null&&e.push({editable:!1,key:"redirect",value:s.redirect}),i.alias.length&&e.push({editable:!1,key:"aliases",value:i.alias.map(n=>n.record.path)}),Object.keys(i.record.meta).length&&e.push({editable:!1,key:"meta",value:i.record.meta}),e.push({key:"score",editable:!1,value:{_custom:{type:null,readOnly:!0,display:i.score.map(n=>n.join(", ")).join(" | "),tooltip:"Score used to sort routes",value:i.score}}}),e}const Op=15485081,Ip=2450411,Rp=8702998,uB=2282478,Mp=16486972,gB=6710886,mB=16704226,fB=12131356;function Vp(i){const s=[],{record:e}=i;e.name!=null&&s.push({label:String(e.name),textColor:0,backgroundColor:uB}),e.aliasOf&&s.push({label:"alias",textColor:0,backgroundColor:Mp}),i.__vd_match&&s.push({label:"matches",textColor:0,backgroundColor:Op}),i.__vd_exactActive&&s.push({label:"exact",textColor:0,backgroundColor:Rp}),i.__vd_active&&s.push({label:"active",textColor:0,backgroundColor:Ip}),e.redirect&&s.push({label:typeof e.redirect=="string"?`redirect: ${e.redirect}`:"redirects",textColor:16777215,backgroundColor:gB});let n=e.__vd_id;return n==null&&(n=String(vB++),e.__vd_id=n),{id:n,label:e.path,tags:s,children:i.children.map(Vp)}}let vB=0;const yB=/^\/(.*)\/([a-z]*)$/;function $p(i,s){const e=s.matched.length&&ke(s.matched[s.matched.length-1],i.record);i.__vd_exactActive=i.__vd_active=e,e||(i.__vd_active=s.matched.some(n=>ke(n,i.record))),i.children.forEach(n=>$p(n,s))}function Np(i){i.__vd_match=!1,i.children.forEach(Np)}function il(i,s){const e=String(i.re).match(yB);if(i.__vd_match=!1,!e||e.length<3)return!1;if(new RegExp(e[1].replace(/\$$/,""),e[2]).test(s))return i.children.forEach(l=>il(l,s)),i.record.path!=="/"||s==="/"?(i.__vd_match=i.re.test(s),!0):!1;const t=i.record.path.toLowerCase(),a=nn(t);return!s.startsWith("/")&&(a.includes(s)||t.includes(s))||a.startsWith(s)||t.startsWith(s)||i.record.name&&String(i.record.name).includes(s)?!0:i.children.some(l=>il(l,s))}function FB(i,s){const e={};for(const n in i)s.includes(n)||(e[n]=i[n]);return e}function CB(i){const s=Jc(i.routes,i),e=i.parseQuery||nB,n=i.stringifyQuery||FE,t=i.history,a=un(),l=un(),r=un(),h=Pi(js);let p=js;Ws&&i.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const o=va.bind(null,w=>""+w),d=va.bind(null,bc),c=va.bind(null,nn);function k(w,z){let H,K;return Tp(w)?(H=s.getRecordMatcher(w),K=z):K=w,s.addRoute(K,H)}function f(w){const z=s.getRecordMatcher(w);z&&s.removeRoute(z)}function u(){return s.getRoutes().map(w=>w.record)}function y(w){return!!s.getRecordMatcher(w)}function v(w,z){if(z=Ai({},z||h.value),typeof w=="string"){const m=ya(e,w,z.path),b=s.resolve({path:m.path},z),P=t.createHref(m.fullPath);return Ai(m,b,{params:c(b.params),hash:nn(m.hash),redirectedFrom:void 0,href:P})}let H;if(w.path!=null)H=Ai({},w,{path:ya(e,w.path,z.path).path});else{const m=Ai({},w.params);for(const b in m)m[b]==null&&delete m[b];H=Ai({},w,{params:d(m)}),z.params=d(z.params)}const K=s.resolve(H,z),oi=w.hash||"";K.params=o(c(K.params));const vi=xc(n,Ai({},w,{hash:Fc(oi),path:K.path})),A=t.createHref(vi);return Ai({fullPath:vi,hash:oi,query:n===FE?tB(w.query):w.query||{}},K,{redirectedFrom:void 0,href:A})}function D(w){return typeof w=="string"?ya(e,w,h.value.path):Ai({},w)}function g(w,z){if(p!==w)return tn(8,{from:z,to:w})}function C(w){return V(w)}function L(w){return C(Ai(D(w),{replace:!0}))}function W(w){const z=w.matched[w.matched.length-1];if(z&&z.redirect){const{redirect:H}=z;let K=typeof H=="function"?H(w):H;return typeof K=="string"&&(K=K.includes("?")||K.includes("#")?K=D(K):{path:K},K.params={}),Ai({query:w.query,hash:w.hash,params:K.path!=null?{}:w.params},K)}}function V(w,z){const H=p=v(w),K=h.value,oi=w.state,vi=w.force,A=w.replace===!0,m=W(H);if(m)return V(Ai(D(m),{state:typeof m=="object"?Ai({},oi,m.state):oi,force:vi,replace:A}),z||H);const b=H;b.redirectedFrom=z;let P;return!vi&&Tc(n,K,H)&&(P=tn(16,{to:b,from:K}),cs(K,K,!0,!1)),(P?Promise.resolve(P):_(b,K)).catch(x=>zs(x)?zs(x,2)?x:Ji(x):Y(x,b,K)).then(x=>{if(x){if(zs(x,2))return V(Ai({replace:A},D(x.to),{state:typeof x.to=="object"?Ai({},oi,x.to.state):oi,force:vi}),z||b)}else x=T(b,K,!0,A,oi);return I(b,K,x),x})}function X(w,z){const H=g(w,z);return H?Promise.reject(H):Promise.resolve()}function $(w){const z=Hs.values().next().value;return z&&typeof z.runWithContext=="function"?z.runWithContext(w):w()}function _(w,z){let H;const[K,oi,vi]=DB(w,z);H=Fa(K.reverse(),"beforeRouteLeave",w,z);for(const m of K)m.leaveGuards.forEach(b=>{H.push(he(b,w,z))});const A=X.bind(null,w,z);return H.push(A),$i(H).then(()=>{H=[];for(const m of a.list())H.push(he(m,w,z));return H.push(A),$i(H)}).then(()=>{H=Fa(oi,"beforeRouteUpdate",w,z);for(const m of oi)m.updateGuards.forEach(b=>{H.push(he(b,w,z))});return H.push(A),$i(H)}).then(()=>{H=[];for(const m of vi)if(m.beforeEnter)if(os(m.beforeEnter))for(const b of m.beforeEnter)H.push(he(b,w,z));else H.push(he(m.beforeEnter,w,z));return H.push(A),$i(H)}).then(()=>(w.matched.forEach(m=>m.enterCallbacks={}),H=Fa(vi,"beforeRouteEnter",w,z,$),H.push(A),$i(H))).then(()=>{H=[];for(const m of l.list())H.push(he(m,w,z));return H.push(A),$i(H)}).catch(m=>zs(m,8)?m:Promise.reject(m))}function I(w,z,H){r.list().forEach(K=>$(()=>K(w,z,H)))}function T(w,z,H,K,oi){const vi=g(w,z);if(vi)return vi;const A=z===js,m=Ws?history.state:{};H&&(K||A?t.replace(w.fullPath,Ai({scroll:A&&m&&m.scroll},oi)):t.push(w.fullPath,oi)),h.value=w,cs(w,z,H,A),Ji()}let J;function Ei(){J||(J=t.listen((w,z,H)=>{if(!Ls.listening)return;const K=v(w),oi=W(K);if(oi){V(Ai(oi,{replace:!0,force:!0}),K).catch(Ln);return}p=K;const vi=h.value;Ws&&Vc(BE(vi.fullPath,H.delta),Xt()),_(K,vi).catch(A=>zs(A,12)?A:zs(A,2)?(V(Ai(D(A.to),{force:!0}),K).then(m=>{zs(m,20)&&!H.delta&&H.type===Hn.pop&&t.go(-1,!1)}).catch(Ln),Promise.reject()):(H.delta&&t.go(-H.delta,!1),Y(A,K,vi))).then(A=>{A=A||T(K,vi,!1),A&&(H.delta&&!zs(A,8)?t.go(-H.delta,!1):H.type===Hn.pop&&zs(A,20)&&t.go(-1,!1)),I(K,vi,A)}).catch(Ln)}))}let gi=un(),q=un(),ii;function Y(w,z,H){Ji(w);const K=q.list();return K.length?K.forEach(oi=>oi(w,z,H)):console.error(w),Promise.reject(w)}function ki(){return ii&&h.value!==js?Promise.resolve():new Promise((w,z)=>{gi.add([w,z])})}function Ji(w){return ii||(ii=!w,Ei(),gi.list().forEach(([z,H])=>w?H(w):z()),gi.reset()),w}function cs(w,z,H,K){const{scrollBehavior:oi}=i;if(!Ws||!oi)return Promise.resolve();const vi=!H&&$c(BE(w.fullPath,0))||(K||!H)&&history.state&&history.state.scroll||null;return ys().then(()=>oi(w,z,vi)).then(A=>A&&Mc(A)).catch(A=>Y(A,w,z))}const Mi=w=>t.go(w);let ns;const Hs=new Set,Ls={currentRoute:h,listening:!0,addRoute:k,removeRoute:f,clearRoutes:s.clearRoutes,hasRoute:y,getRoutes:u,resolve:v,options:i,push:C,replace:L,go:Mi,back:()=>Mi(-1),forward:()=>Mi(1),beforeEach:a.add,beforeResolve:l.add,afterEach:r.add,onError:q.add,isReady:ki,install(w){const z=this;w.component("RouterLink",EB),w.component("RouterView",dB),w.config.globalProperties.$router=z,Object.defineProperty(w.config.globalProperties,"$route",{enumerable:!0,get:()=>Ks(h)}),Ws&&!ns&&h.value===js&&(ns=!0,C(t.location).catch(oi=>{}));const H={};for(const oi in js)Object.defineProperty(H,oi,{get:()=>h.value[oi],enumerable:!0});w.provide(Yt,z),w.provide(ql,kh(H)),w.provide(Za,h);const K=w.unmount;Hs.add(w),w.unmount=function(){Hs.delete(w),Hs.size<1&&(p=js,J&&J(),J=null,h.value=js,ns=!1,ii=!1),K()},Ws&&BB(w,z,s)}};function $i(w){return w.reduce((z,H)=>z.then(()=>$(H)),Promise.resolve())}return Ls}function DB(i,s){const e=[],n=[],t=[],a=Math.max(s.matched.length,i.matched.length);for(let l=0;l<a;l++){const r=s.matched[l];r&&(i.matched.find(p=>ke(p,r))?n.push(r):e.push(r));const h=i.matched[l];h&&(s.matched.find(p=>ke(p,h))||t.push(h))}return[e,n,t]}function me(){return ui(Yt)}function $s(i){return ui(ql)}var Kl=Symbol(""),Ps=()=>{const i=ui(Kl);if(!i)throw new Error("useClientData() is called without provider.");return i},bB=()=>Ps().pageComponent,bi=()=>Ps().pageData,Bi=()=>Ps().pageFrontmatter,_B=()=>Ps().pageHead,Xl=()=>Ps().pageLang,wB=()=>Ps().pageLayout,Fs=()=>Ps().routeLocale,xB=()=>Ps().routePath,TB=()=>Ps().routes,Hp=()=>Ps().siteData,hn=()=>Ps().siteLocaleData,PB=Symbol(""),sl=Pi(nc),Je=Pi(tc),Up=(i,s)=>{const e=K9(i,s);if(Je.value[e])return e;const n=encodeURI(e);if(Je.value[n])return n;const t=sl.value[e]||sl.value[n];return t||e},vs=(i,s)=>{const{pathname:e,hashAndQueries:n}=up(i),t=Up(e,s),a=t+n;return Je.value[t]?{...Je.value[t],path:a,notFound:!1}:{...Je.value["/404.html"],path:a,notFound:!0}},LB=(i,s)=>{const{pathname:e,hashAndQueries:n}=up(i);return Up(e,s)+n},SB=i=>{if(!(i.metaKey||i.altKey||i.ctrlKey||i.shiftKey)&&!i.defaultPrevented&&!(i.button!==void 0&&i.button!==0)){if(i.currentTarget){const s=i.currentTarget.getAttribute("target");if(s!=null&&s.match(/\b_blank\b/i))return}return i.preventDefault(),!0}},Ii=R({name:"RouteLink",props:{to:{type:String,required:!0},active:Boolean,activeClass:{type:String,default:"route-link-active"}},slots:Object,setup(i,{slots:s}){const e=me(),n=$s(),t=F(()=>i.to.startsWith("#")||i.to.startsWith("?")?i.to:`/${LB(i.to,n.path).substring(1)}`);return()=>E("a",{class:["route-link",{[i.activeClass]:i.active}],href:t.value,onClick:(a={})=>{SB(a)&&e.push(i.to).catch()}},s.default())}}),OB=R({name:"AutoLink",props:{config:{type:Object,required:!0}},slots:Object,setup(i,{slots:s}){const e=Oe(i,"config"),n=$s(),t=Hp(),a=F(()=>Zn(e.value.link)),l=F(()=>e.value.target||(a.value?"_blank":void 0)),r=F(()=>l.value==="_blank"),h=F(()=>!a.value&&!r.value),p=F(()=>e.value.rel||(r.value?"noopener noreferrer":null)),o=F(()=>e.value.ariaLabel??e.value.text),d=F(()=>{if(e.value.exact)return!1;const k=Object.keys(t.value.locales);return k.length?k.every(f=>f!==e.value.link):e.value.link!=="/"}),c=F(()=>h.value?e.value.activeMatch?(e.value.activeMatch instanceof RegExp?e.value.activeMatch:new RegExp(e.value.activeMatch,"u")).test(n.path):d.value?n.path.startsWith(e.value.link):n.path===e.value.link:!1);return()=>{const{before:k,after:f,default:u}=s,y=(u==null?void 0:u(e.value))??[k==null?void 0:k(e.value),e.value.text,f==null?void 0:f(e.value)];return h.value?E(Ii,{class:"auto-link",to:e.value.link,active:c.value,"aria-label":o.value},()=>y):E("a",{class:"auto-link external-link",href:e.value.link,"aria-label":o.value,rel:p.value,target:l.value},y)}}}),Qt=R({name:"ClientOnly",setup(i,s){const e=G(!1);return pi(()=>{e.value=!0}),()=>{var n,t;return e.value?(t=(n=s.slots).default)==null?void 0:t.call(n):null}}}),Yl=R({name:"Content",props:{path:{type:String,required:!1,default:""}},setup(i){const s=bB(),e=F(()=>{if(!i.path)return s.value;const n=vs(i.path);return Sh(async()=>n.loader().then(({comp:t})=>t))});return()=>E(e.value)}}),IB="Layout",RB="en-US",Ce=Xn({resolveLayouts:i=>i.reduce((s,e)=>({...s,...e.layouts}),{}),resolvePageHead:(i,s,e)=>{const n=wi(s.description)?s.description:e.description,t=[...Array.isArray(s.head)?s.head:[],...e.head,["title",{},i],["meta",{name:"description",content:n}]];return ic(t)},resolvePageHeadTitle:(i,s)=>[i.title,s.title].filter(e=>!!e).join(" | "),resolvePageLang:(i,s)=>i.lang||s.lang||RB,resolvePageLayout:(i,s)=>{const e=wi(i.frontmatter.layout)?i.frontmatter.layout:IB;if(!s[e])throw new Error(`[vuepress] Cannot resolve layout: ${e}`);return s[e]},resolveRouteLocale:(i,s)=>X9(i,decodeURI(s)),resolveSiteLocaleData:({base:i,locales:s,...e},n)=>{var t;return{...e,...s[n],head:[...((t=s[n])==null?void 0:t.head)??[],...e.head]}}}),ds=(i={})=>i,yi=i=>Ie(i)?i:`/${mp(i)}`;const MB=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"})),pn=i=>{const s=Fs();return F(()=>i[s.value]??{})};var Es=Uint8Array,Ge=Uint16Array,VB=Int32Array,zp=new Es([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),jp=new Es([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),$B=new Es([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Gp=function(i,s){for(var e=new Ge(31),n=0;n<31;++n)e[n]=s+=1<<i[n-1];for(var t=new VB(e[30]),n=1;n<30;++n)for(var a=e[n];a<e[n+1];++a)t[a]=a-e[n]<<5|n;return{b:e,r:t}},Wp=Gp(zp,2),qp=Wp.b,NB=Wp.r;qp[28]=258,NB[258]=28;var HB=Gp(jp,0),UB=HB.b,el=new Ge(32768);for(var _i=0;_i<32768;++_i){var ee=(_i&43690)>>1|(_i&21845)<<1;ee=(ee&52428)>>2|(ee&13107)<<2,ee=(ee&61680)>>4|(ee&3855)<<4,el[_i]=((ee&65280)>>8|(ee&255)<<8)>>1}var On=function(i,s,e){for(var n=i.length,t=0,a=new Ge(s);t<n;++t)i[t]&&++a[i[t]-1];var l=new Ge(s);for(t=1;t<s;++t)l[t]=l[t-1]+a[t-1]<<1;var r;if(e){r=new Ge(1<<s);var h=15-s;for(t=0;t<n;++t)if(i[t])for(var p=t<<4|i[t],o=s-i[t],d=l[i[t]-1]++<<o,c=d|(1<<o)-1;d<=c;++d)r[el[d]>>h]=p}else for(r=new Ge(n),t=0;t<n;++t)i[t]&&(r[t]=el[l[i[t]-1]++]>>15-i[t]);return r},st=new Es(288);for(var _i=0;_i<144;++_i)st[_i]=8;for(var _i=144;_i<256;++_i)st[_i]=9;for(var _i=256;_i<280;++_i)st[_i]=7;for(var _i=280;_i<288;++_i)st[_i]=8;var Kp=new Es(32);for(var _i=0;_i<32;++_i)Kp[_i]=5;var zB=On(st,9,1),jB=On(Kp,5,1),Ca=function(i){for(var s=i[0],e=1;e<i.length;++e)i[e]>s&&(s=i[e]);return s},Ds=function(i,s,e){var n=s/8|0;return(i[n]|i[n+1]<<8)>>(s&7)&e},Da=function(i,s){var e=s/8|0;return(i[e]|i[e+1]<<8|i[e+2]<<16)>>(s&7)},GB=function(i){return(i+7)/8|0},Xp=function(i,s,e){return(s==null||s<0)&&(s=0),(e==null||e>i.length)&&(e=i.length),new Es(i.subarray(s,e))},WB=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],As=function(i,s,e){var n=new Error(s||WB[i]);if(n.code=i,Error.captureStackTrace&&Error.captureStackTrace(n,As),!e)throw n;return n},qB=function(i,s,e,n){var t=i.length,a=0;if(!t||s.f&&!s.l)return e||new Es(0);var l=!e,r=l||s.i!=2,h=s.i;l&&(e=new Es(t*3));var p=function(oi){var vi=e.length;if(oi>vi){var A=new Es(Math.max(vi*2,oi));A.set(e),e=A}},o=s.f||0,d=s.p||0,c=s.b||0,k=s.l,f=s.d,u=s.m,y=s.n,v=t*8;do{if(!k){o=Ds(i,d,1);var D=Ds(i,d+1,3);if(d+=3,D)if(D==1)k=zB,f=jB,u=9,y=5;else if(D==2){var W=Ds(i,d,31)+257,V=Ds(i,d+10,15)+4,X=W+Ds(i,d+5,31)+1;d+=14;for(var $=new Es(X),_=new Es(19),I=0;I<V;++I)_[$B[I]]=Ds(i,d+I*3,7);d+=V*3;for(var T=Ca(_),J=(1<<T)-1,Ei=On(_,T,1),I=0;I<X;){var gi=Ei[Ds(i,d,J)];d+=gi&15;var g=gi>>4;if(g<16)$[I++]=g;else{var q=0,ii=0;for(g==16?(ii=3+Ds(i,d,3),d+=2,q=$[I-1]):g==17?(ii=3+Ds(i,d,7),d+=3):g==18&&(ii=11+Ds(i,d,127),d+=7);ii--;)$[I++]=q}}var Y=$.subarray(0,W),ki=$.subarray(W);u=Ca(Y),y=Ca(ki),k=On(Y,u,1),f=On(ki,y,1)}else As(1);else{var g=GB(d)+4,C=i[g-4]|i[g-3]<<8,L=g+C;if(L>t){h&&As(0);break}r&&p(c+C),e.set(i.subarray(g,L),c),s.b=c+=C,s.p=d=L*8,s.f=o;continue}if(d>v){h&&As(0);break}}r&&p(c+131072);for(var Ji=(1<<u)-1,cs=(1<<y)-1,Mi=d;;Mi=d){var q=k[Da(i,d)&Ji],ns=q>>4;if(d+=q&15,d>v){h&&As(0);break}if(q||As(2),ns<256)e[c++]=ns;else if(ns==256){Mi=d,k=null;break}else{var Hs=ns-254;if(ns>264){var I=ns-257,Ls=zp[I];Hs=Ds(i,d,(1<<Ls)-1)+qp[I],d+=Ls}var $i=f[Da(i,d)&cs],w=$i>>4;$i||As(3),d+=$i&15;var ki=UB[w];if(w>3){var Ls=jp[w];ki+=Da(i,d)&(1<<Ls)-1,d+=Ls}if(d>v){h&&As(0);break}r&&p(c+131072);var z=c+Hs;if(c<ki){var H=a-ki,K=Math.min(ki,z);for(H+c<0&&As(3);c<K;++c)e[c]=n[H+c]}for(;c<z;++c)e[c]=e[c-ki]}}s.l=k,s.p=Mi,s.b=c,s.f=o,k&&(o=1,s.m=u,s.d=f,s.n=y)}while(!o);return c!=e.length&&l?Xp(e,0,c):e.subarray(0,c)},KB=new Es(0),XB=function(i,s){return((i[0]&15)!=8||i[0]>>4>7||(i[0]<<8|i[1])%31)&&As(6,"invalid zlib data"),(i[1]>>5&1)==1&&As(6,"invalid zlib data: "+(i[1]&32?"need":"unexpected")+" dictionary"),(i[1]>>3&4)+2};function YB(i,s){return qB(i.subarray(XB(i),-4),{i:2},s,s)}var nl=typeof TextDecoder<"u"&&new TextDecoder,QB=0;try{nl.decode(KB,{stream:!0}),QB=1}catch{}var JB=function(i){for(var s="",e=0;;){var n=i[e++],t=(n>127)+(n>223)+(n>239);if(e+t>i.length)return{s,r:Xp(i,e-1)};t?t==3?(n=((n&15)<<18|(i[e++]&63)<<12|(i[e++]&63)<<6|i[e++]&63)-65536,s+=String.fromCharCode(55296|n>>10,56320|n&1023)):t&1?s+=String.fromCharCode((n&31)<<6|i[e++]&63):s+=String.fromCharCode((n&15)<<12|(i[e++]&63)<<6|i[e++]&63):s+=String.fromCharCode(n)}};function ZB(i,s){{for(var e=new Es(i.length),n=0;n<i.length;++n)e[n]=i.charCodeAt(n);return e}for(var t=i.length,n=0;n<t;++n);}function ik(i,s){var e;if(nl)return nl.decode(i);var n=JB(i),t=n.s,e=n.r;return e.length&&As(8),t}const tl=i=>{const s=atob(i);return ik(YB(ZB(s)))},fs=(i,s)=>{var n;const e=(n=(s==null?void 0:s._instance)||ge())==null?void 0:n.appContext.components;return e?i in e||es(i)in e||Kn(es(i))in e:!1},Yp=i=>new Promise(s=>setTimeout(s,i)),sk=i=>typeof i<"u",ba=i=>typeof i=="number",al=Array.isArray,Un=(i,s)=>wi(i)&&i.startsWith(s),ek=(i,s)=>wi(i)&&i.endsWith(s),et=Object.entries,Ys=Object.keys,Ql=i=>{if(i){if(typeof i=="number")return new Date(i);const s=Date.parse(i.toString());if(!Number.isNaN(s))return new Date(s)}return null},Jt=i=>Un(i,"/"),Qp=({type:i="info",text:s="",vertical:e,color:n},{slots:t})=>{var a;return E("span",{class:["vp-badge",i,{diy:n}],style:{verticalAlign:e??!1,backgroundColor:n??!1}},((a=t.default)==null?void 0:a.call(t))??s)};Qp.displayName="Badge";var nk=R({name:"FontIcon",props:{icon:{type:String,default:""},color:{type:String,default:""},size:{type:[String,Number],default:""}},setup(i){const s=F(()=>{const n=["font-icon icon"],t=`iconfont icon-${i.icon}`;return n.push(t),n}),e=F(()=>{const n={};return i.color&&(n.color=i.color),i.size&&(n["font-size"]=Number.isNaN(Number(i.size))?i.size:`${i.size}px`),Ys(n).length?n:null});return()=>i.icon?E("span",{key:i.icon,class:s.value,style:e.value}):null}});const tk=ds({enhance:({app:i})=>{fs("Badge")||i.component("Badge",Qp),fs("FontIcon")||i.component("FontIcon",nk)},setup:()=>{},rootComponents:[]}),ak=Object.freeze(Object.defineProperty({__proto__:null,default:tk},Symbol.toStringTag,{value:"Module"}));function Re(i){return bl()?(ih(i),!0):!1}function Yi(i){return typeof i=="function"?i():Ks(i)}const nt=typeof window<"u"&&typeof document<"u";typeof WorkerGlobalScope<"u"&&globalThis instanceof WorkerGlobalScope;const lk=i=>i!=null,rk=Object.prototype.toString,Ek=i=>rk.call(i)==="[object Object]",Xs=()=>{},ll=hk();function hk(){var i,s;return nt&&((i=window==null?void 0:window.navigator)==null?void 0:i.userAgent)&&(/iP(?:ad|hone|od)/.test(window.navigator.userAgent)||((s=window==null?void 0:window.navigator)==null?void 0:s.maxTouchPoints)>2&&/iPad|Macintosh/.test(window==null?void 0:window.navigator.userAgent))}function Jl(i,s){function e(...n){return new Promise((t,a)=>{Promise.resolve(i(()=>s.apply(this,n),{fn:s,thisArg:this,args:n})).then(t).catch(a)})}return e}const Jp=i=>i();function pk(i,s={}){let e,n,t=Xs;const a=r=>{clearTimeout(r),t(),t=Xs};return r=>{const h=Yi(i),p=Yi(s.maxWait);return e&&a(e),h<=0||p!==void 0&&p<=0?(n&&(a(n),n=null),Promise.resolve(r())):new Promise((o,d)=>{t=s.rejectOnCancel?d:o,p&&!n&&(n=setTimeout(()=>{e&&a(e),n=null,o(r())},p)),e=setTimeout(()=>{n&&a(n),n=null,o(r())},h)})}}function ok(...i){let s=0,e,n=!0,t=Xs,a,l,r,h,p;!Li(i[0])&&typeof i[0]=="object"?{delay:l,trailing:r=!0,leading:h=!0,rejectOnCancel:p=!1}=i[0]:[l,r=!0,h=!0,p=!1]=i;const o=()=>{e&&(clearTimeout(e),e=void 0,t(),t=Xs)};return c=>{const k=Yi(l),f=Date.now()-s,u=()=>a=c();return o(),k<=0?(s=Date.now(),u()):(f>k&&(h||!n)?(s=Date.now(),u()):r&&(a=new Promise((y,v)=>{t=p?v:y,e=setTimeout(()=>{s=Date.now(),n=!0,y(u()),o()},Math.max(0,k-f))})),!h&&!e&&(e=setTimeout(()=>n=!0,k)),n=!1,a)}}function dk(i=Jp){const s=G(!0);function e(){s.value=!1}function n(){s.value=!0}const t=(...a)=>{s.value&&i(...a)};return{isActive:Zs(s),pause:e,resume:n,eventFilter:t}}function ck(i){let s;function e(){return s||(s=i()),s}return e.reset=async()=>{const n=s;s=void 0,n&&await n},e}function Bk(i){return ge()}function kk(...i){if(i.length!==1)return Oe(...i);const s=i[0];return typeof s=="function"?Zs(Ol(()=>({get:s,set:Xs}))):G(s)}function Ak(i,s=200,e={}){return Jl(pk(s,e),i)}function uk(i,s=200,e=!1,n=!0,t=!1){return Jl(ok(s,e,n,t),i)}function gk(i,s,e={}){const{eventFilter:n=Jp,...t}=e;return ti(i,Jl(n,s),t)}function mk(i,s,e={}){const{eventFilter:n,...t}=e,{eventFilter:a,pause:l,resume:r,isActive:h}=dk(n);return{stop:gk(i,s,{...t,eventFilter:a}),pause:l,resume:r,isActive:h}}function Zl(i,s=!0,e){Bk()?pi(i,e):s?i():ys(i)}function fk(i,s,e={}){const{immediate:n=!0}=e,t=G(!1);let a=null;function l(){a&&(clearTimeout(a),a=null)}function r(){t.value=!1,l()}function h(...p){l(),t.value=!0,a=setTimeout(()=>{t.value=!1,a=null,i(...p)},Yi(s))}return n&&(t.value=!0,nt&&h()),Re(r),{isPending:Zs(t),start:h,stop:r}}function rl(i=!1,s={}){const{truthyValue:e=!0,falsyValue:n=!1}=s,t=Li(i),a=G(i);function l(r){if(arguments.length)return a.value=r,a.value;{const h=Yi(e);return a.value=a.value===h?Yi(n):h,a.value}}return t?l:[a,l]}function is(i){var s;const e=Yi(i);return(s=e==null?void 0:e.$el)!=null?s:e}const Ts=nt?window:void 0,vk=nt?window.document:void 0,Zp=nt?window.navigator:void 0;function Si(...i){let s,e,n,t;if(typeof i[0]=="string"||Array.isArray(i[0])?([e,n,t]=i,s=Ts):[s,e,n,t]=i,!s)return Xs;Array.isArray(e)||(e=[e]),Array.isArray(n)||(n=[n]);const a=[],l=()=>{a.forEach(o=>o()),a.length=0},r=(o,d,c,k)=>(o.addEventListener(d,c,k),()=>o.removeEventListener(d,c,k)),h=ti(()=>[is(s),Yi(t)],([o,d])=>{if(l(),!o)return;const c=Ek(d)?{...d}:d;a.push(...e.flatMap(k=>n.map(f=>r(o,k,f,c))))},{immediate:!0,flush:"post"}),p=()=>{h(),l()};return Re(p),p}let xE=!1;function yk(i,s,e={}){const{window:n=Ts,ignore:t=[],capture:a=!0,detectIframe:l=!1}=e;if(!n)return Xs;ll&&!xE&&(xE=!0,Array.from(n.document.body.children).forEach(c=>c.addEventListener("click",Xs)),n.document.documentElement.addEventListener("click",Xs));let r=!0;const h=c=>t.some(k=>{if(typeof k=="string")return Array.from(n.document.querySelectorAll(k)).some(f=>f===c.target||c.composedPath().includes(f));{const f=is(k);return f&&(c.target===f||c.composedPath().includes(f))}}),o=[Si(n,"click",c=>{const k=is(i);if(!(!k||k===c.target||c.composedPath().includes(k))){if(c.detail===0&&(r=!h(c)),!r){r=!0;return}s(c)}},{passive:!0,capture:a}),Si(n,"pointerdown",c=>{const k=is(i);r=!h(c)&&!!(k&&!c.composedPath().includes(k))},{passive:!0}),l&&Si(n,"blur",c=>{setTimeout(()=>{var k;const f=is(i);((k=n.document.activeElement)==null?void 0:k.tagName)==="IFRAME"&&!(f!=null&&f.contains(n.document.activeElement))&&s(c)},0)})].filter(Boolean);return()=>o.forEach(c=>c())}function Fk(){const i=G(!1),s=ge();return s&&pi(()=>{i.value=!0},s),i}function on(i){const s=Fk();return F(()=>(s.value,!!i()))}function Ck(i,s,e={}){const{window:n=Ts,...t}=e;let a;const l=on(()=>n&&"MutationObserver"in n),r=()=>{a&&(a.disconnect(),a=void 0)},h=F(()=>{const c=Yi(i),k=(Array.isArray(c)?c:[c]).map(is).filter(lk);return new Set(k)}),p=ti(()=>h.value,c=>{r(),l.value&&c.size&&(a=new MutationObserver(s),c.forEach(k=>a.observe(k,t)))},{immediate:!0,flush:"post"}),o=()=>a==null?void 0:a.takeRecords(),d=()=>{r(),p()};return Re(d),{isSupported:l,stop:d,takeRecords:o}}function ir(i,s={}){const{window:e=Ts}=s,n=on(()=>e&&"matchMedia"in e&&typeof e.matchMedia=="function");let t;const a=G(!1),l=p=>{a.value=p.matches},r=()=>{t&&("removeEventListener"in t?t.removeEventListener("change",l):t.removeListener(l))},h=Nl(()=>{n.value&&(r(),t=e.matchMedia(Yi(i)),"addEventListener"in t?t.addEventListener("change",l):t.addListener(l),a.value=t.matches)});return Re(()=>{h(),r(),t=void 0}),a}function TE(i,s={}){const{controls:e=!1,navigator:n=Zp}=s,t=on(()=>n&&"permissions"in n);let a;const l=typeof i=="string"?{name:i}:i,r=G(),h=()=>{a&&(r.value=a.state)},p=ck(async()=>{if(t.value){if(!a)try{a=await n.permissions.query(l),Si(a,"change",h),h()}catch{r.value="prompt"}return a}});return p(),e?{state:r,isSupported:t,query:p}:r}function Dk(i={}){const{navigator:s=Zp,read:e=!1,source:n,copiedDuring:t=1500,legacy:a=!1}=i,l=on(()=>s&&"clipboard"in s),r=TE("clipboard-read"),h=TE("clipboard-write"),p=F(()=>l.value||a),o=G(""),d=G(!1),c=fk(()=>d.value=!1,t);function k(){l.value&&v(r.value)?s.clipboard.readText().then(D=>{o.value=D}):o.value=y()}p.value&&e&&Si(["copy","cut"],k);async function f(D=Yi(n)){p.value&&D!=null&&(l.value&&v(h.value)?await s.clipboard.writeText(D):u(D),o.value=D,d.value=!0,c.start())}function u(D){const g=document.createElement("textarea");g.value=D??"",g.style.position="absolute",g.style.opacity="0",document.body.appendChild(g),g.select(),document.execCommand("copy"),g.remove()}function y(){var D,g,C;return(C=(g=(D=document==null?void 0:document.getSelection)==null?void 0:D.call(document))==null?void 0:g.toString())!=null?C:""}function v(D){return D==="granted"||D==="prompt"}return{isSupported:p,text:o,copied:d,copy:f}}const mt=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},ft="__vueuse_ssr_handlers__",bk=_k();function _k(){return ft in mt||(mt[ft]=mt[ft]||{}),mt[ft]}function wk(i,s){return bk[i]||s}function xk(i){return i==null?"any":i instanceof Set?"set":i instanceof Map?"map":i instanceof Date?"date":typeof i=="boolean"?"boolean":typeof i=="string"?"string":typeof i=="object"?"object":Number.isNaN(i)?"any":"number"}const Tk={boolean:{read:i=>i==="true",write:i=>String(i)},object:{read:i=>JSON.parse(i),write:i=>JSON.stringify(i)},number:{read:i=>Number.parseFloat(i),write:i=>String(i)},any:{read:i=>i,write:i=>String(i)},string:{read:i=>i,write:i=>String(i)},map:{read:i=>new Map(JSON.parse(i)),write:i=>JSON.stringify(Array.from(i.entries()))},set:{read:i=>new Set(JSON.parse(i)),write:i=>JSON.stringify(Array.from(i))},date:{read:i=>new Date(i),write:i=>i.toISOString()}},PE="vueuse-storage";function tt(i,s,e,n={}){var t;const{flush:a="pre",deep:l=!0,listenToStorageChanges:r=!0,writeDefaults:h=!0,mergeDefaults:p=!1,shallow:o,window:d=Ts,eventFilter:c,onError:k=_=>{console.error(_)},initOnMounted:f}=n,u=(o?Pi:G)(typeof s=="function"?s():s);if(!e)try{e=wk("getDefaultStorage",()=>{var _;return(_=Ts)==null?void 0:_.localStorage})()}catch(_){k(_)}if(!e)return u;const y=Yi(s),v=xk(y),D=(t=n.serializer)!=null?t:Tk[v],{pause:g,resume:C}=mk(u,()=>W(u.value),{flush:a,deep:l,eventFilter:c});d&&r&&Zl(()=>{Si(d,"storage",X),Si(d,PE,$),f&&X()}),f||X();function L(_,I){d&&d.dispatchEvent(new CustomEvent(PE,{detail:{key:i,oldValue:_,newValue:I,storageArea:e}}))}function W(_){try{const I=e.getItem(i);if(_==null)L(I,null),e.removeItem(i);else{const T=D.write(_);I!==T&&(e.setItem(i,T),L(I,T))}}catch(I){k(I)}}function V(_){const I=_?_.newValue:e.getItem(i);if(I==null)return h&&y!=null&&e.setItem(i,D.write(y)),y;if(!_&&p){const T=D.read(I);return typeof p=="function"?p(T,y):v==="object"&&!Array.isArray(T)?{...y,...T}:T}else return typeof I!="string"?I:D.read(I)}function X(_){if(!(_&&_.storageArea!==e)){if(_&&_.key==null){u.value=y;return}if(!(_&&_.key!==i)){g();try{(_==null?void 0:_.newValue)!==D.write(u.value)&&(u.value=V(_))}catch(I){k(I)}finally{_?ys(C):C()}}}}function $(_){X(_.detail)}return u}function Pk(i){return ir("(prefers-color-scheme: dark)",i)}function Lk(i,s,e={}){const{window:n=Ts,...t}=e;let a;const l=on(()=>n&&"ResizeObserver"in n),r=()=>{a&&(a.disconnect(),a=void 0)},h=F(()=>Array.isArray(i)?i.map(d=>is(d)):[is(i)]),p=ti(h,d=>{if(r(),l.value&&n){a=new ResizeObserver(s);for(const c of d)c&&a.observe(c,t)}},{immediate:!0,flush:"post"}),o=()=>{r(),p()};return Re(o),{isSupported:l,stop:o}}function Sk(i,s={width:0,height:0},e={}){const{window:n=Ts,box:t="content-box"}=e,a=F(()=>{var d,c;return(c=(d=is(i))==null?void 0:d.namespaceURI)==null?void 0:c.includes("svg")}),l=G(s.width),r=G(s.height),{stop:h}=Lk(i,([d])=>{const c=t==="border-box"?d.borderBoxSize:t==="content-box"?d.contentBoxSize:d.devicePixelContentBoxSize;if(n&&a.value){const k=is(i);if(k){const f=k.getBoundingClientRect();l.value=f.width,r.value=f.height}}else if(c){const k=Array.isArray(c)?c:[c];l.value=k.reduce((f,{inlineSize:u})=>f+u,0),r.value=k.reduce((f,{blockSize:u})=>f+u,0)}else l.value=d.contentRect.width,r.value=d.contentRect.height},e);Zl(()=>{const d=is(i);d&&(l.value="offsetWidth"in d?d.offsetWidth:s.width,r.value="offsetHeight"in d?d.offsetHeight:s.height)});const p=ti(()=>is(i),d=>{l.value=d?s.width:0,r.value=d?s.height:0});function o(){h(),p()}return{width:l,height:r,stop:o}}const LE=["fullscreenchange","webkitfullscreenchange","webkitendfullscreen","mozfullscreenchange","MSFullscreenChange"];function sr(i,s={}){const{document:e=vk,autoExit:n=!1}=s,t=F(()=>{var v;return(v=is(i))!=null?v:e==null?void 0:e.querySelector("html")}),a=G(!1),l=F(()=>["requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","webkitEnterFullScreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullscreen"].find(v=>e&&v in e||t.value&&v in t.value)),r=F(()=>["exitFullscreen","webkitExitFullscreen","webkitExitFullScreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen"].find(v=>e&&v in e||t.value&&v in t.value)),h=F(()=>["fullScreen","webkitIsFullScreen","webkitDisplayingFullscreen","mozFullScreen","msFullscreenElement"].find(v=>e&&v in e||t.value&&v in t.value)),p=["fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement"].find(v=>e&&v in e),o=on(()=>t.value&&e&&l.value!==void 0&&r.value!==void 0&&h.value!==void 0),d=()=>p?(e==null?void 0:e[p])===t.value:!1,c=()=>{if(h.value){if(e&&e[h.value]!=null)return e[h.value];{const v=t.value;if((v==null?void 0:v[h.value])!=null)return!!v[h.value]}}return!1};async function k(){if(!(!o.value||!a.value)){if(r.value)if((e==null?void 0:e[r.value])!=null)await e[r.value]();else{const v=t.value;(v==null?void 0:v[r.value])!=null&&await v[r.value]()}a.value=!1}}async function f(){if(!o.value||a.value)return;c()&&await k();const v=t.value;l.value&&(v==null?void 0:v[l.value])!=null&&(await v[l.value](),a.value=!0)}async function u(){await(a.value?k():f())}const y=()=>{const v=c();(!v||v&&d())&&(a.value=v)};return Si(e,LE,y,!1),Si(()=>is(t),LE,y,!1),n&&Re(k),{isSupported:o,isFullscreen:a,enter:f,exit:k,toggle:u}}function _a(i){return typeof Window<"u"&&i instanceof Window?i.document.documentElement:typeof Document<"u"&&i instanceof Document?i.documentElement:i}function i8(i){const s=window.getComputedStyle(i);if(s.overflowX==="scroll"||s.overflowY==="scroll"||s.overflowX==="auto"&&i.clientWidth<i.scrollWidth||s.overflowY==="auto"&&i.clientHeight<i.scrollHeight)return!0;{const e=i.parentNode;return!e||e.tagName==="BODY"?!1:i8(e)}}function Ok(i){const s=i||window.event,e=s.target;return i8(e)?!1:s.touches.length>1?!0:(s.preventDefault&&s.preventDefault(),!1)}const wa=new WeakMap;function s8(i,s=!1){const e=G(s);let n=null,t="";ti(kk(i),r=>{const h=_a(Yi(r));if(h){const p=h;if(wa.get(p)||wa.set(p,p.style.overflow),p.style.overflow!=="hidden"&&(t=p.style.overflow),p.style.overflow==="hidden")return e.value=!0;if(e.value)return p.style.overflow="hidden"}},{immediate:!0});const a=()=>{const r=_a(Yi(i));!r||e.value||(ll&&(n=Si(r,"touchmove",h=>{Ok(h)},{passive:!1})),r.style.overflow="hidden",e.value=!0)},l=()=>{const r=_a(Yi(i));!r||!e.value||(ll&&(n==null||n()),r.style.overflow=t,wa.delete(r),e.value=!1)};return Re(l),F({get(){return e.value},set(r){r?a():l()}})}function e8(i,s,e={}){const{window:n=Ts}=e;return tt(i,s,n==null?void 0:n.sessionStorage,e)}function Ik(i={}){const{window:s=Ts,behavior:e="auto"}=i;if(!s)return{x:G(0),y:G(0)};const n=G(s.scrollX),t=G(s.scrollY),a=F({get(){return n.value},set(r){scrollTo({left:r,behavior:e})}}),l=F({get(){return t.value},set(r){scrollTo({top:r,behavior:e})}});return Si(s,"scroll",()=>{n.value=s.scrollX,t.value=s.scrollY},{capture:!1,passive:!0}),{x:a,y:l}}function Rk(i={}){const{window:s=Ts,initialWidth:e=Number.POSITIVE_INFINITY,initialHeight:n=Number.POSITIVE_INFINITY,listenOrientation:t=!0,includeScrollbar:a=!0}=i,l=G(e),r=G(n),h=()=>{s&&(a?(l.value=s.innerWidth,r.value=s.innerHeight):(l.value=s.document.documentElement.clientWidth,r.value=s.document.documentElement.clientHeight))};if(h(),Zl(h),Si("resize",h,{passive:!0}),t){const p=ir("(orientation: portrait)");ti(p,()=>h())}return{width:l,height:r}}const SE=async(i,s)=>{const{path:e,query:n}=i.currentRoute.value,{scrollBehavior:t}=i.options;i.options.scrollBehavior=void 0,await i.replace({path:e,query:n,hash:s}),i.options.scrollBehavior=t},Mk=({headerLinkSelector:i,headerAnchorSelector:s,delay:e,offset:n=5})=>{const t=me();Si("scroll",Ak(()=>{var f,u;const l=Math.max(window.scrollY,document.documentElement.scrollTop,document.body.scrollTop);if(Math.abs(l-0)<n){SE(t,"");return}const h=window.innerHeight+l,p=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),o=Math.abs(p-h)<n,d=Array.from(document.querySelectorAll(i)),k=Array.from(document.querySelectorAll(s)).filter(y=>d.some(v=>v.hash===y.hash));for(let y=0;y<k.length;y++){const v=k[y],D=k[y+1],g=l>=(((f=v.parentElement)==null?void 0:f.offsetTop)??0)-n,C=!D||l<(((u=D.parentElement)==null?void 0:u.offsetTop)??0)-n;if(!(g&&C))continue;const W=decodeURIComponent(t.currentRoute.value.hash),V=decodeURIComponent(v.hash);if(W===V)return;if(o){for(let X=y+1;X<k.length;X++)if(W===decodeURIComponent(k[X].hash))return}SE(t,V);return}},e))},Vk=".vp-sidebar-link, .vp-toc-link",$k=".header-anchor",Nk=200,Hk=5,Uk=ds({setup(){Mk({headerLinkSelector:Vk,headerAnchorSelector:$k,delay:Nk,offset:Hk})}}),zk=Object.freeze(Object.defineProperty({__proto__:null,default:Uk},Symbol.toStringTag,{value:"Module"}));let n8=i=>wi(i.title)?{title:i.title}:null;const t8=Symbol(""),jk=i=>{n8=i},Gk=()=>ui(t8),Wk=i=>{i.provide(t8,n8)};var qk={"/":{title:"目录",empty:"暂无目录"}};const Kk=R({name:"Catalog",props:{base:{type:String,default:""},level:{type:Number,default:3},index:Boolean,hideHeading:Boolean},setup(i){const s=Gk(),e=pn(qk),n=bi(),t=TB(),a=Hp(),r=Pi(et(t.value).map(([p,{meta:o}])=>{const d=s(o);if(!d)return null;const c=p.split("/").length;return{level:ek(p,"/")?c-2:c-1,base:p.replace(/\/[^/]+\/?$/,"/"),path:p,...d}}).filter(p=>it(p)&&wi(p.title))),h=F(()=>{const p=i.base?sc(gp(i.base)):n.value.path.replace(/\/[^/]+$/,"/"),o=p.split("/").length-2,d=[];return r.value.filter(({level:c,path:k})=>{if(!Un(k,p)||k===p)return!1;if(p==="/"){const f=Ys(a.value.locales).filter(u=>u!=="/");if(k==="/404.html"||f.some(u=>Un(k,u)))return!1}return c-o<=i.level}).sort(({title:c,level:k,order:f},{title:u,level:y,order:v})=>{const D=k-y;return D||(ba(f)?ba(v)?f>0?v>0?f-v:-1:v<0?f-v:1:f:ba(v)?v:c.localeCompare(u))}).forEach(c=>{var u;const{base:k,level:f}=c;switch(f-o){case 1:{d.push(c);break}case 2:{const y=d.find(v=>v.path===k);y&&(y.children??(y.children=[])).push(c);break}default:{const y=d.find(v=>v.path===k.replace(/\/[^/]+\/$/,"/"));if(y){const v=(u=y.children)==null?void 0:u.find(D=>D.path===k);v&&(v.children??(v.children=[])).push(c)}}}}),d});return()=>{const p=h.value.some(o=>o.children);return E("div",{class:["vp-catalog-wrapper",{index:i.index}]},[i.hideHeading?null:E("h2",{class:"vp-catalog-main-title"},e.value.title),h.value.length?E(i.index?"ol":"ul",{class:["vp-catalogs",{deep:p}]},h.value.map(({children:o=[],title:d,path:c,content:k})=>{const f=E(Ii,{class:"vp-catalog-title",to:c},()=>k?E(k):d);return E("li",{class:"vp-catalog"},p?[E("h3",{id:d,class:["vp-catalog-child-title",{"has-children":o.length}]},[E("a",{href:`#${d}`,class:"vp-catalog-header-anchor","aria-hidden":!0},"#"),f]),o.length?E(i.index?"ol":"ul",{class:"vp-child-catalogs"},o.map(({children:u=[],content:y,path:v,title:D})=>E("li",{class:"vp-child-catalog"},[E("div",{class:["vp-catalog-sub-title",{"has-children":u.length}]},[E("a",{href:`#${D}`,class:"vp-catalog-header-anchor"},"#"),E(Ii,{class:"vp-catalog-title",to:v},()=>y?E(y):D)]),u.length?E(i.index?"ol":"div",{class:i.index?"vp-sub-catalogs":"vp-sub-catalogs-wrapper"},u.map(({content:g,path:C,title:L})=>i.index?E("li",{class:"vp-sub-catalog"},E(Ii,{to:C},()=>g?E(g):L)):E(Ii,{class:"vp-sub-catalog-link",to:C},()=>g?E(g):L))):null]))):null]:E("div",{class:"vp-catalog-child-title"},f))})):E("p",{class:"vp-empty-catalog"},e.value.empty)])}}}),Xk=ds({enhance:({app:i})=>{Wk(i),fs("Catalog",i)||i.component("Catalog",Kk)}}),Yk=Object.freeze(Object.defineProperty({__proto__:null,default:Xk},Symbol.toStringTag,{value:"Module"}));var Qk={"/":{backToTop:"返回顶部"}};const Jk=R({name:"BackToTop",setup(){const i=Bi(),s=pn(Qk),e=Pi(),{height:n}=Sk(e),{height:t}=Rk(),{y:a}=Ik(),l=F(()=>i.value.backToTop!==!1&&a.value>100),r=F(()=>a.value/(n.value-t.value)*100);return pi(()=>{e.value=document.body}),()=>E(Se,{name:"back-to-top"},()=>l.value?E("button",{type:"button",class:"vp-back-to-top-button","aria-label":s.value.backToTop,onClick:()=>{window.scrollTo({top:0,behavior:"smooth"})}},[E("span",{class:"vp-scroll-progress",role:"progressbar","aria-labelledby":"loadinglabel","aria-valuenow":r.value},E("svg",E("circle",{cx:"26",cy:"26",r:"24",fill:"none",stroke:"currentColor","stroke-width":"4","stroke-dasharray":`${Math.PI*r.value*.48} ${Math.PI*(100-r.value)*.48}`}))),E("div",{class:"back-to-top-icon"})]):null)}}),Zk=ds({rootComponents:[Jk]}),i6=Object.freeze(Object.defineProperty({__proto__:null,default:Zk},Symbol.toStringTag,{value:"Module"}));/**
 * NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT
 */const di={settings:{minimum:.08,easing:"ease",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,barSelector:'[role="bar"]',parent:"body",template:'<div class="bar" role="bar"></div>'},status:null,set:i=>{const s=di.isStarted();i=xa(i,di.settings.minimum,1),di.status=i===1?null:i;const e=di.render(!s),n=e.querySelector(di.settings.barSelector),t=di.settings.speed,a=di.settings.easing;return e.offsetWidth,s6(l=>{vt(n,{transform:"translate3d("+OE(i)+"%,0,0)",transition:"all "+t+"ms "+a}),i===1?(vt(e,{transition:"none",opacity:"1"}),e.offsetWidth,setTimeout(()=>{vt(e,{transition:"all "+t+"ms linear",opacity:"0"}),setTimeout(()=>{di.remove(),l()},t)},t)):setTimeout(()=>l(),t)}),di},isStarted:()=>typeof di.status=="number",start:()=>{di.status||di.set(0);const i=()=>{setTimeout(()=>{di.status&&(di.trickle(),i())},di.settings.trickleSpeed)};return di.settings.trickle&&i(),di},done:i=>!i&&!di.status?di:di.inc(.3+.5*Math.random()).set(1),inc:i=>{let s=di.status;return s?(typeof i!="number"&&(i=(1-s)*xa(Math.random()*s,.1,.95)),s=xa(s+i,0,.994),di.set(s)):di.start()},trickle:()=>di.inc(Math.random()*di.settings.trickleRate),render:i=>{if(di.isRendered())return document.getElementById("nprogress");IE(document.documentElement,"nprogress-busy");const s=document.createElement("div");s.id="nprogress",s.innerHTML=di.settings.template;const e=s.querySelector(di.settings.barSelector),n=i?"-100":OE(di.status||0),t=document.querySelector(di.settings.parent);return vt(e,{transition:"all 0 linear",transform:"translate3d("+n+"%,0,0)"}),t!==document.body&&IE(t,"nprogress-custom-parent"),t==null||t.appendChild(s),s},remove:()=>{RE(document.documentElement,"nprogress-busy"),RE(document.querySelector(di.settings.parent),"nprogress-custom-parent");const i=document.getElementById("nprogress");i&&e6(i)},isRendered:()=>!!document.getElementById("nprogress")},xa=(i,s,e)=>i<s?s:i>e?e:i,OE=i=>(-1+i)*100,s6=function(){const i=[];function s(){const e=i.shift();e&&e(s)}return function(e){i.push(e),i.length===1&&s()}}(),vt=function(){const i=["Webkit","O","Moz","ms"],s={};function e(l){return l.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,function(r,h){return h.toUpperCase()})}function n(l){const r=document.body.style;if(l in r)return l;let h=i.length;const p=l.charAt(0).toUpperCase()+l.slice(1);let o;for(;h--;)if(o=i[h]+p,o in r)return o;return l}function t(l){return l=e(l),s[l]??(s[l]=n(l))}function a(l,r,h){r=t(r),l.style[r]=h}return function(l,r){for(const h in r){const p=r[h];p!==void 0&&Object.prototype.hasOwnProperty.call(r,h)&&a(l,h,p)}}}(),a8=(i,s)=>(typeof i=="string"?i:er(i)).indexOf(" "+s+" ")>=0,IE=(i,s)=>{const e=er(i),n=e+s;a8(e,s)||(i.className=n.substring(1))},RE=(i,s)=>{const e=er(i);if(!a8(i,s))return;const n=e.replace(" "+s+" "," ");i.className=n.substring(1,n.length-1)},er=i=>(" "+(i.className||"")+" ").replace(/\s+/gi," "),e6=i=>{i&&i.parentNode&&i.parentNode.removeChild(i)},n6=()=>{pi(()=>{const i=me(),s=new Set;s.add(i.currentRoute.value.path),i.beforeEach(e=>{s.has(e.path)||di.start()}),i.afterEach(e=>{s.add(e.path),di.done()})})},t6=ds({setup(){n6()}}),a6=Object.freeze(Object.defineProperty({__proto__:null,default:t6},Symbol.toStringTag,{value:"Module"}));function l6(){return l8().__VUE_DEVTOOLS_GLOBAL_HOOK__}function l8(){return typeof navigator<"u"&&typeof window<"u"?window:typeof globalThis<"u"?globalThis:{}}const r6=typeof Proxy=="function",E6="devtools-plugin:setup",h6="plugin:settings:set";let Ne,El;function p6(){var i;return Ne!==void 0||(typeof window<"u"&&window.performance?(Ne=!0,El=window.performance):typeof globalThis<"u"&&(!((i=globalThis.perf_hooks)===null||i===void 0)&&i.performance)?(Ne=!0,El=globalThis.perf_hooks.performance):Ne=!1),Ne}function o6(){return p6()?El.now():Date.now()}class d6{constructor(s,e){this.target=null,this.targetQueue=[],this.onQueue=[],this.plugin=s,this.hook=e;const n={};if(s.settings)for(const l in s.settings){const r=s.settings[l];n[l]=r.defaultValue}const t=`__vue-devtools-plugin-settings__${s.id}`;let a=Object.assign({},n);try{const l=localStorage.getItem(t),r=JSON.parse(l);Object.assign(a,r)}catch{}this.fallbacks={getSettings(){return a},setSettings(l){try{localStorage.setItem(t,JSON.stringify(l))}catch{}a=l},now(){return o6()}},e&&e.on(h6,(l,r)=>{l===this.plugin.id&&this.fallbacks.setSettings(r)}),this.proxiedOn=new Proxy({},{get:(l,r)=>this.target?this.target.on[r]:(...h)=>{this.onQueue.push({method:r,args:h})}}),this.proxiedTarget=new Proxy({},{get:(l,r)=>this.target?this.target[r]:r==="on"?this.proxiedOn:Object.keys(this.fallbacks).includes(r)?(...h)=>(this.targetQueue.push({method:r,args:h,resolve:()=>{}}),this.fallbacks[r](...h)):(...h)=>new Promise(p=>{this.targetQueue.push({method:r,args:h,resolve:p})})})}async setRealTarget(s){this.target=s;for(const e of this.onQueue)this.target.on[e.method](...e.args);for(const e of this.targetQueue)e.resolve(await this.target[e.method](...e.args))}}function c6(i,s){const e=i,n=l8(),t=l6(),a=r6&&e.enableEarlyProxy;if(t&&(n.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__||!a))t.emit(E6,i,s);else{const l=a?new d6(e,t):null;(n.__VUE_DEVTOOLS_PLUGINS__=n.__VUE_DEVTOOLS_PLUGINS__||[]).push({pluginDescriptor:e,setupFn:s,proxy:l}),l&&s(l.proxiedTarget)}}const B6=JSON.parse('{"encrypt":{"config":{"/nice-article/itmind/ideapjazjczxjhmzcmyjjhcxgxz.html":["$2a$10$KfF5iFLL1/31efLfJD7LRuVxcKqpn6BiPqSwPGpFZPAIcbekJS2yG","$2a$10$hGLLNTQEfDYXte/Ikcr4e.IaFrdUI.MCIZqrrmK3.jgrdPMcqHwRO"],"/nice-article/itmind/webstormjhmwebstormwdzsjhmxbxt.html":["$2a$10$Hy0UT5XwyyX/P/zCU4F08uPoITwxHGUpkcLNkYoHpKcnb.j8pp97y","$2a$10$jH6GwuBbO2ws32R7AowOG.DLsNICOvWwHV2SV05pcoLLNhTTqNUh2"],"/nice-article/itmind/sublimetextzcmpjazjcqckyxbxt.html":["$2a$10$mynkcyWV3IehTzniKR7e/efUSQvwgfmE1WvdjyCRHfDqFogfJ9eBO","$2a$10$HVuCBF/70moLXh7wKlfdS.m1dXqZlxz.OB.BXa32QGFYQOmKFhEdO"]}},"logo":"./logo.png","repoLabel":"GitHub","docsDir":"docs","docsBranch":"master","breadcrumb":false,"editLink":false,"search":true,"fullscreen":true,"darkmode":"switch","author":{"name":"noahyz","url":"/about-the-author/"},"footer":"<a href=\\"https://beian.miit.gov.cn/\\" target=\\"_blank\\">豫ICP备2021038026号-4</a><img src=\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/beian.png\\" height=\\"15px\\" width=\\"15px\\" /><a target=\\"_blank\\" href=\\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=41030502000411\\"><span>豫公网安备 41030502000411号</span></a>","displayFooter":false,"pageInfo":["Author","Original","Date","Category","Tag","Word","ReadingTime"],"blog":{"intro":"/about-the-author/","sidebarDisplay":"mobile","avatar":"/assets/icon/itwanger-282.png","roundAvatar":true,"description":"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。","medias":{"Zhihu":"https://www.zhihu.com/people/zhang-yi-6-18","Github":"https://github.com/noahyz","Gitee":"https://gitee.com/noahyz"}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家","openInNewWindow":"Open in new window"},"navbar":[{"text":"知识库","icon":"lujing","link":"/"}],"sidebar":{"/":[{"text":"编程语言","prefix":"编程语言/","collapsible":true,"children":[{"text":"Go语言","collapsible":true,"prefix":"go语言/","children":[{"text":"一、基础语法","collapsible":true,"prefix":"基础语法/","children":["1.panic和recover.md","2.make和new.md","3.go语言三个点的意义.md","4.for和range.md","5.cgo注意事项.md","6.下划线的语义.md"]},{"text":"二、编码技巧","collapsible":true,"prefix":"编码技巧/","children":["1.编译构建时ldflags变量注入.md","2.go语言正确的获取连接的文件描述符.md","3.go网络编程正确关闭TCP连接以及管理它的生命周期.md","4.go加密解密算法.md","5.go单元测试.md","6.ticket使用.md","7.http客户端的实现.md","8.项目设置版本号.md","9.时间戳和时间之间的转换.md"]},{"text":"三、底层实现","collapsible":true,"prefix":"底层实现/","children":["1.数组切片字符串.md","2.go语言defer关键字浅析.md","3.sync.mutex详解.md","4.哈希表.md","5.chan底层实现.md","6.select.md","7.栈空间管理.md","8.内存管理.md","9.内存逃逸.md","10.垃圾回收.md","11.GMP调度.md"]}]},{"text":"C++语言","collapsible":true,"prefix":"c++语言/","children":[{"text":"一、基础语法","collapsible":true,"prefix":"基础语法/","children":["1.智能指针.md","2.左值和右值.md","3.const和constexpr使用.md","4.STL容器.md","5.闭包和仿函数和匿名函数.md","6.宏与内联.md","7.虚继承和虚基类.md","8.断言的使用.md","9.c++11中function和bind的使用.md","10.定位new详解.md","11.类型转换.md","12.typename用法.md","13.POD类型详解.md","14.extern的详解.md","15.explicit关键字.md","16.emplace_back和push_back区别.md","17.cout使用.md","18.c++11之enable_shared_from_this.md","19.c++输入.md"]},{"text":"二、编码技巧","collapsible":true,"prefix":"编码技巧/","children":["1.并发编程.md","2.单元测试.md","3.关于返回对象的问题.md","4.异常.md","5.全局变量和static变量初始化问题.md","6.STL容器存放对象还是指针.md","7.scanf使用注意.md","8.c++初始化问题记录.md","9.string与memset的问题.md","10.单例模式.md","11.分支预测优化.md","12.函数重载注意点.md","13.可变参数.md","14.内存对齐.md","15.生成随机浮点数.md","16.时间编程.md","17.引用和指针.md","18.强制修改const char指针类型的数据.md","19.字符串中删除空格.md","20.字符串拼接效率对比.md"]},{"text":"三、编译调试","collapsible":true,"prefix":"编译调试/","children":["1.coredump调试.md","2.gdb调试工具.md","3.gcc使用.md"]},{"text":"四、底层内核","collapsible":true,"prefix":"底层内核/","children":["1.C++符号的编解码.md","2.c++内存模型.md"]},{"text":"五、对象模型","collapsible":true,"prefix":"对象模型/","children":["1.关于对象.md","2.关于构造函数.md","3.关于拷贝构造函数.md","4.数据语意.md"]}]}]},{"text":"操作系统","prefix":"操作系统/","collapsible":true,"children":[{"text":"进程管理","collapsible":true,"prefix":"进程管理/","children":[{"text":"一、内核原理","collapsible":true,"prefix":"内核原理/","children":["1.进程栈和线程栈和内核栈和中断栈.md","2.线程局部存储的原理与实现.md","3.Linux系统进程状态解析.md","4.fork实现.md"]}]},{"text":"内存管理","collapsible":true,"prefix":"内存管理/","children":[{"text":"一、内核原理","collapsible":true,"prefix":"内核原理/","children":["1.内存管理.md","2.常见的内存分配器算法.md","3.内存分配的分段和分页.md","4.进程内存布局.md","5.共享内存的原理.md","6.buff和cache.md","7.缓存的原理.md","8.缓存命中率.md","9.多核CPU同步高速缓存.md","10.mmap技术.md","11.coredump.md","12.通过free命令理解linux内存管理.md","13.垃圾回收.md"]},{"text":"二、编程调试","collapsible":true,"prefix":"编程调试/","children":["1.内存申请相关函数.md"]},{"text":"三、工具运维","collapsible":true,"prefix":"工具运维/","children":["1.内存暴增问题剖析解决过程.md","2.如何定位系统内存问题.md","3.内存泄露的排查与定位.md","4.内存问题检测工具.md"]},{"text":"四、内存库","collapsible":true,"prefix":"内存库/","children":[]}]},{"text":"文件管理","collapsible":true,"prefix":"文件管理/","children":[{"text":"一、内核原理","collapsible":true,"prefix":"内核原理/","children":["1.磁盘和查看性能.md","2.iowait的理解.md","3.IO复用.md","4.epoll问题记录.md","5.文件系统和查看性能.md","6.DMA和零拷贝技术.md","7.Inotify详解.md","8.惊群效应.md","9.linux权限和umask值.md","9.netlink优缺点.md","10.linux系统日志分析.md"]},{"text":"二、工具运维","collapsible":true,"prefix":"工具运维/","children":["1.IO监控工具.md"]}]},{"text":"CPU管理","collapsible":true,"prefix":"CPU管理/","children":[{"text":"一、内核原理","collapsible":true,"prefix":"内核原理/","children":["1.CPU性能调优.md","2.平均负载.md","3.上下文切换.md","4.中断.md"]},{"text":"二、工具运维","collapsible":true,"prefix":"工具运维/","children":["1.pidstat查看进程占用系统资源情况.md","2.mpstat查看CPU性能.md","3.vmstat系统性能分析工具.md","4.stress压力测试工具.md"]}]},{"text":"问题排查","collapsible":true,"prefix":"问题排查/","children":["1.多进程的死锁问题.md","2.排查进程终止的原因.md","3.linux下段错误的产生原因及调试方法.md","4.load不到共享库.md"]},{"text":"系统编程","collapsible":true,"prefix":"系统编程","children":["1.进程和环境变量.md","2.system和popen函数.md","3.pthread_cancel和pthread_kill区别.md","4.mlock函数.md","5.exit函数.md","6.eventfd原理和实践.md","7.backtrace接口说明.md","8.文件锁.md","9.pthread_cond_timedwait函数.md"]}]},{"text":"计算机网络","collapsible":true,"prefix":"计算机网络/","children":[{"text":"内核原理","collapsible":true,"prefix":"内核原理","children":["1.网络模型和收发网络包流程.md","2.C10K和C000K和C10M问题.md","3.DNS认识.md"]},{"text":"工具运维","collapsible":true,"prefix":"工具运维/","children":["1.衡量网络性能指标和工具.md","2.iptables命令详解.md","3.评估系统的网络性能.md"]},{"text":"七层模型","collapsible":true,"prefix":"七层模型/","children":[{"text":"网络层","collapsible":true,"prefix":"网络层/","children":[]},{"text":"传输层","collapsible":true,"prefix":"传输层/","children":[{"text":"一、技术原理","collapsible":true,"prefix":"技术原理/","children":["1.TCP的重传机制.md","2.TCP的保活机制.md","3.socket与三次握手四次挥手.md","4.TCP异常断开连接.md","5.拔掉网线后的TCP连接.md","6.TCP和UDP占用同一端口.md"]},{"text":"二、编程调试","collapsible":true,"prefix":"编程调试/","children":["1.如何正确关闭TCP连接.md"]}]},{"text":"应用层","collapsible":true,"prefix":"应用层/","children":[{"text":"一、技术原理","collapsible":true,"prefix":"技术原理/","children":["1.浏览器同源和跨域问题.md"]},{"text":"二、基础概念","collapsible":true,"prefix":"基础概念/","children":["1.浏览器输入URL后发生了什么.md","2.http2的特性.md","3.get和post的区别.md","4.验证HTTPS证书合法性.md"]},{"text":"三、通信安全","collapsible":true,"prefix":"通信安全/","children":["1.https如何保证安全.md","2.HTTPS优化手段.md","3.TLS1.2协议.md","4.TLS1.3协议.md"]}]}]}]},{"text":"技术专题","collapsible":true,"prefix":"技术专题/","children":[{"text":"一、并发编程","collapsible":true,"prefix":"并发编程/","children":["1.对于并发编程的理解.md","2.线程间同步.md","3.基础变量的同步需要加锁吗","4.优先级反转.md","5.多线程编程总结.md"]},{"text":"二、链接与装载","collapsible":true,"prefix":"链接与装载/","children":["1.预处理、编译、汇编、链接过程.md","2.二进制的装载与执行.md","3.认识ELF文件格式一.md","4.认识ELF文件格式二.md","5.认识ELF文件格式三.md","6.静态链接.md","7.动态链接.md","8.PLT hook的实现机制"]},{"text":"三、手写操作系统","collapsible":true,"prefix":"手写操作系统/","children":[]},{"text":"四、锁竞争分析工具","prefix":"锁竞争分析工具/","collapsible":true,"children":["1.锁竞争分析工具.md"]},{"text":"五、线程安全队列","prefix":"线程安全队列/","collapsible":true,"children":["1.浅谈线程安全队列.md"]},{"text":"六、运行库","prefix":"运行库/","collapsible":true,"children":["1.栈与调用惯例.md"]},{"text":"七、hook","prefix":"hook/","collapsible":true,"children":["1.实现一个hook库.md","2.preload失效问题.md","3.如何hook函数calloc.md"]},{"text":"八、Linux研究","prefix":"Linux研究/","collapsible":true,"children":["1.fork原理.md","2.进程调度之CFS算法.md","3.内核数据结构之链表.md","4.内核数据结构之队列.md"]},{"text":"九、9天带你走近无锁化编程","collapsible":true,"prefix":"9天带你走进无锁化编程/","children":["1.对于线程安全的理解.md","2.对于原子操作的理解.md","3.对于内存模型的理解","4.对于内存屏障和ABA问题的理解.md","5.研读C++语言boost库中无锁队列的实现.md","6.研读Go语言channel的实现.md","7.研读Java语言中线程安全队列的实现.md","8.实现一个无锁的线程安全队列.md","9.思考与展望.md"]},{"text":"十、一致性哈希","collapsible":true,"prefix":"一致性哈希/","children":["1.自研离散型槽位哈希.md"]}]},{"text":"架构框架","collapsible":true,"prefix":"架构框架/","children":[{"text":"一、高可用架构模式","collapsible":true,"prefix":"高可用架构模式/","children":["1.存储架构-集群和分区.md","2.存储架构-双机架构.md","3.计算高可用架构.md","4.异地多活.md","5.接口级故障处理方法.md","6.CAP理论.md","7.如何排除可用性隐患.md"]},{"text":"二、高性能架构模式","collapsible":true,"prefix":"高性能架构模式/","children":["1.数据库集群之分库分表.md","2.数据库集群之读写分离.md","3.高性能NoSQL.md","4.高性能负载均衡.md","5.高性能缓存架构-缓存穿透雪崩热点.md","6.单服务器高性能-Reactor与Proactor.md","7.单服务器高性能模式-PPC和TPC.md"]},{"text":"三、可扩展架构模式","collapsible":true,"prefix":"可扩展架构模式/","children":["1.可扩展架构的思想.md","2.微内核.md","3.微服务.md"]},{"text":"四、缓存","collapsible":true,"prefix":"缓存/","children":["1.缓存更新的方式.md","2.缓存与队列.md"]}]},{"text":"分布式","collapsible":true,"prefix":"分布式/","children":[{"text":"一、分布式模型","collapsible":true,"prefix":"分布式模型/","children":["1.分布式系统模型.md","2.数据的分布式.md","3.CAP定理.md","4.一致性模型.md"]},{"text":"二、分布式共识算法","collapsible":true,"prefix":"分布式共识算法/","children":["1.paxos算法.md","2.raft算法.md"]},{"text":"三、分布式事务","collapsible":true,"prefix":"分布式事务/","children":["1.分布式式事务ACID特性.md","2.原子性保证-原子提交.md","3.原子性保证-两阶段提交.md","4.原子性保证-三阶段提交.md"]},{"text":"四、分布式锁","collapsible":true,"prefix":"分布式锁/","children":["1.浅谈分布式锁.md","2.基于redis的分布式锁的实现.md"]}]}]}}}}'),k6=G(B6),r8=()=>k6,E8=Symbol(""),A6=()=>{const i=ui(E8);if(!i)throw new Error("useThemeLocaleData() is called without provider.");return i},u6=(i,s)=>{const{locales:e,...n}=i;return{...n,...e==null?void 0:e[s]}},g6=ds({enhance({app:i}){const s=r8(),e=i._context.provides[Kl],n=F(()=>u6(s.value,e.routeLocale.value));i.provide(E8,n),Object.defineProperties(i.config.globalProperties,{$theme:{get(){return s.value}},$themeLocale:{get(){return n.value}}}),c6({app:i,id:"org.vuejs.vuepress.plugin-theme-data",label:"VuePress Theme Data Plugin",packageName:"@vuepress/plugin-theme-data",homepage:"https://v2.vuepress.vuejs.org",logo:"https://v2.vuepress.vuejs.org/images/hero.png",componentStateTypes:["VuePress"]},t=>{t.on.inspectComponent(a=>{a.instanceData.state.push({type:"VuePress",key:"themeData",editable:!1,value:s.value},{type:"VuePress",key:"themeLocaleData",editable:!1,value:n.value})})})}}),m6=Object.freeze(Object.defineProperty({__proto__:null,default:g6},Symbol.toStringTag,{value:"Module"}));var f6={provider:"Giscus",lightTheme:"https://unpkg.com/vuepress-theme-hope@2.0.0-rc.50/templates/giscus/light.css",darkTheme:"https://unpkg.com/vuepress-theme-hope@2.0.0-rc.50/templates/giscus/dark.css",comment:!0,repo:"noahyz/noahyz.github.io",repoId:"R_kgDOMSXgiA",category:"General",categoryId:"DIC_kwDOMSXgiM4CnArE"};const v6=f6,y6=G(v6),h8=Symbol(""),p8=()=>ui(h8),F6=p8,C6=i=>{i.provide(h8,y6)},o8=()=>E("svg",{xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32",preserveAspectRatio:"xMidYMid",viewBox:"0 0 100 100"},[E("circle",{cx:"28",cy:"75",r:"11",fill:"currentColor"},E("animate",{attributeName:"fill-opacity",begin:"0s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"})),E("path",{fill:"none",stroke:"#88baf0","stroke-width":"10",d:"M28 47a28 28 0 0 1 28 28"},E("animate",{attributeName:"stroke-opacity",begin:"0.1s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"})),E("path",{fill:"none",stroke:"#88baf0","stroke-width":"10",d:"M28 25a50 50 0 0 1 50 50"},E("animate",{attributeName:"stroke-opacity",begin:"0.2s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"}))]);o8.displayName="LoadingIcon";const ME=["ar","ca","da","de","en","eo","es","fa","fr","he","id","it","ja","ko","nl","pl","pt","ro","ru","th","tr","uk","uz","vi","zh-CN","zh-TW"],D6=R({name:"GiscusComment",props:{identifier:{type:String,required:!0},darkmode:Boolean},setup(i){const s=F6(),e=Xl(),n=F(()=>!!(s.value.repo&&s.value.repoId&&s.value.category&&s.value.categoryId)),t=G(!1),a=F(()=>{if(ME.includes(e.value))return e.value;const r=e.value.split("-")[0];return ME.includes(r)?r:"en"}),l=F(()=>({repo:s.value.repo,repoId:s.value.repoId,category:s.value.category,categoryId:s.value.categoryId,lang:a.value,theme:i.darkmode?s.value.darkTheme||"dark":s.value.lightTheme||"light",mapping:s.value.mapping||"pathname",term:i.identifier,inputPosition:s.value.inputPosition||"top",reactionsEnabled:s.value.reactionsEnabled===!1?"0":"1",strict:s.value.strict===!1?"0":"1",loading:s.value.lazyLoading===!1?"eager":"lazy",emitMetadata:"0"}));return pi(async()=>{await B(()=>import("./giscus-BelpWDEZ.js"),[]),t.value=!0}),()=>n.value?E("div",{id:"comment",class:["giscus-wrapper",{"input-top":s.value.inputPosition!=="bottom"}]},t.value?E("giscus-widget",l.value):E(o8)):null}}),b6=R({name:"CommentService",props:{darkmode:Boolean},setup(i){const s=p8(),e=bi(),n=Bi(),t=F(()=>s.value.comment!==!1),a=F(()=>n.value.comment||t.value&&n.value.comment!==!1);return()=>E(D6,{id:"vp-comment",identifier:n.value.commentID||e.value.path,darkmode:i.darkmode,style:{display:a.value?"block":"none"}})}}),_6=ds({enhance:({app:i})=>{C6(i),i.component("CommentService",b6)}}),w6=Object.freeze(Object.defineProperty({__proto__:null,default:_6},Symbol.toStringTag,{value:"Module"})),x6=/language-(shellscript|shell|bash|sh|zsh)/,T6=({delay:i=500,duration:s=2e3,locales:e,selector:n,showInMobile:t,ignoreSelector:a=[],transform:l})=>{const r=ir("(max-width: 419px)"),h=F(()=>!r.value||t),p=pn(e),o=bi(),d=y=>{var D;if(y.hasAttribute("copy-code-registered"))return;const v=document.createElement("button");v.type="button",v.classList.add("vp-copy-code-button"),v.setAttribute("aria-label",p.value.copy),v.setAttribute("data-copied",p.value.copied),(D=y.parentElement)==null||D.insertBefore(v,y),y.setAttribute("copy-code-registered","")};ti(()=>[o.value.path,h.value],async()=>{document.body.classList.toggle("copy-code-disabled",!h.value),h.value&&(await ys(),await Yp(i),document.querySelectorAll(n.join(",")).forEach(d))},{immediate:!0});const{copy:k}=Dk({legacy:!0}),f=new WeakMap,u=(y,v,D)=>{const g=v.cloneNode(!0);a.length&&g.querySelectorAll(a.join(",")).forEach(L=>L.remove()),l&&l(g);let C=g.textContent||"";x6.test(y.className)&&(C=C.replace(/^ *(\$|>) /gm,"")),k(C).then(()=>{if(s<=0)return;D.classList.add("copied"),clearTimeout(f.get(D));const L=setTimeout(()=>{D.classList.remove("copied"),D.blur(),f.delete(D)},s);f.set(D,L)})};Si("click",y=>{const v=y.target;if(h.value&&v.matches('div[class*="language-"] > button.vp-copy-code-button')){const D=v.parentElement,g=v.nextElementSibling;if(!D||!g)return;u(D,g,v)}})};var P6={"/":{copy:"复制代码",copied:"已复制"}},L6=['.theme-hope-content div[class*="language-"] pre'];const S6=ds({setup:()=>{T6({selector:L6,locales:P6,duration:2e3,delay:500,showInMobile:!1})}}),O6=Object.freeze(Object.defineProperty({__proto__:null,default:S6},Symbol.toStringTag,{value:"Module"})),I6=()=>{Si("beforeprint",()=>{document.querySelectorAll("details").forEach(i=>{i.open=!0})})},ci=({name:i="",color:s="currentColor",ariaLabel:e},{attrs:n,slots:t})=>{var a;return E("svg",{xmlns:"http://www.w3.org/2000/svg",class:["icon",`${i}-icon`],viewBox:"0 0 1024 1024",fill:s,"aria-label":e??`${i} icon`,...n},(a=t.default)==null?void 0:a.call(t))};ci.displayName="IconBase";const nr=({size:i=48,stroke:s=4,wrapper:e=!0,height:n=2*i})=>{const t=E("svg",{xmlns:"http://www.w3.org/2000/svg",width:i,height:i,preserveAspectRatio:"xMidYMid",viewBox:"25 25 50 50"},[E("animateTransform",{attributeName:"transform",type:"rotate",dur:"2s",keyTimes:"0;1",repeatCount:"indefinite",values:"0;360"}),E("circle",{cx:"50",cy:"50",r:"20",fill:"none",stroke:"currentColor","stroke-width":s,"stroke-linecap":"round"},[E("animate",{attributeName:"stroke-dasharray",dur:"1.5s",keyTimes:"0;0.5;1",repeatCount:"indefinite",values:"1,200;90,200;1,200"}),E("animate",{attributeName:"stroke-dashoffset",dur:"1.5s",keyTimes:"0;0.5;1",repeatCount:"indefinite",values:"0;-35px;-125px"})])]);return e?E("div",{class:"loading-icon-wrapper",style:`display:flex;align-items:center;justify-content:center;height:${n}px`},t):t};nr.displayName="LoadingIcon";const Zt=(i,{slots:s})=>{var e;return(e=s.default)==null?void 0:e.call(s)},R6=i=>Ie(i)?i:`https://github.com/${i}`,tr=(i="")=>!Ie(i)||/github\.com/.test(i)?"GitHub":/bitbucket\.org/.test(i)?"Bitbucket":/gitlab\.com/.test(i)?"GitLab":/gitee\.com/.test(i)?"Gitee":null,d8=()=>E(ci,{name:"github"},()=>E("path",{d:"M511.957 21.333C241.024 21.333 21.333 240.981 21.333 512c0 216.832 140.544 400.725 335.574 465.664 24.49 4.395 32.256-10.07 32.256-23.083 0-11.69.256-44.245 0-85.205-136.448 29.61-164.736-64.64-164.736-64.64-22.315-56.704-54.4-71.765-54.4-71.765-44.587-30.464 3.285-29.824 3.285-29.824 49.195 3.413 75.179 50.517 75.179 50.517 43.776 75.008 114.816 53.333 142.762 40.79 4.523-31.66 17.152-53.377 31.19-65.537-108.971-12.458-223.488-54.485-223.488-242.602 0-53.547 19.114-97.323 50.517-131.67-5.035-12.33-21.93-62.293 4.779-129.834 0 0 41.258-13.184 134.912 50.346a469.803 469.803 0 0 1 122.88-16.554c41.642.213 83.626 5.632 122.88 16.554 93.653-63.488 134.784-50.346 134.784-50.346 26.752 67.541 9.898 117.504 4.864 129.834 31.402 34.347 50.474 78.123 50.474 131.67 0 188.586-114.73 230.016-224.042 242.09 17.578 15.232 33.578 44.672 33.578 90.454v135.85c0 13.142 7.936 27.606 32.854 22.87C862.25 912.597 1002.667 728.747 1002.667 512c0-271.019-219.648-490.667-490.71-490.667z"}));d8.displayName="GitHubIcon";const c8=()=>E(ci,{name:"gitee"},()=>E("path",{d:"M512 992C246.92 992 32 777.08 32 512S246.92 32 512 32s480 214.92 480 480-214.92 480-480 480zm242.97-533.34H482.39a23.7 23.7 0 0 0-23.7 23.7l-.03 59.28c0 13.08 10.59 23.7 23.7 23.7h165.96a23.7 23.7 0 0 1 23.7 23.7v11.85a71.1 71.1 0 0 1-71.1 71.1H375.71a23.7 23.7 0 0 1-23.7-23.7V423.11a71.1 71.1 0 0 1 71.1-71.1h331.8a23.7 23.7 0 0 0 23.7-23.7l.06-59.25a23.73 23.73 0 0 0-23.7-23.73H423.11a177.78 177.78 0 0 0-177.78 177.75v331.83c0 13.08 10.62 23.7 23.7 23.7h349.62a159.99 159.99 0 0 0 159.99-159.99V482.33a23.7 23.7 0 0 0-23.7-23.7z"}));c8.displayName="GiteeIcon";const B8=()=>E(ci,{name:"bitbucket"},()=>E("path",{d:"M575.256 490.862c6.29 47.981-52.005 85.723-92.563 61.147-45.714-20.004-45.714-92.562-1.133-113.152 38.29-23.442 93.696 7.424 93.696 52.005zm63.451-11.996c-10.276-81.152-102.29-134.839-177.152-101.156-47.433 21.138-79.433 71.424-77.129 124.562 2.853 69.705 69.157 126.866 138.862 120.576S647.3 548.571 638.708 478.83zm136.558-309.723c-25.161-33.134-67.986-38.839-105.728-45.13-106.862-17.151-216.576-17.7-323.438 1.134-35.438 5.706-75.447 11.996-97.719 43.996 36.572 34.304 88.576 39.424 135.424 45.129 84.553 10.862 171.447 11.447 256 .585 47.433-5.705 99.987-10.276 135.424-45.714zm32.585 591.433c-16.018 55.99-6.839 131.438-66.304 163.986-102.29 56.576-226.304 62.867-338.87 42.862-59.43-10.862-129.135-29.696-161.72-85.723-14.3-54.858-23.442-110.848-32.585-166.84l3.438-9.142 10.276-5.157c170.277 112.567 408.576 112.567 579.438 0 26.844 8.01 6.84 40.558 6.29 60.014zm103.424-549.157c-19.42 125.148-41.728 249.71-63.415 374.272-6.29 36.572-41.728 57.162-71.424 72.558-106.862 53.724-231.424 62.866-348.562 50.286-79.433-8.558-160.585-29.696-225.134-79.433-30.28-23.443-30.28-63.415-35.986-97.134-20.005-117.138-42.862-234.277-57.161-352.585 6.839-51.42 64.585-73.728 107.447-89.71 57.16-21.138 118.272-30.866 178.87-36.571 129.134-12.58 261.157-8.01 386.304 28.562 44.581 13.13 92.563 31.415 122.844 69.705 13.714 17.7 9.143 40.01 6.29 60.014z"}));B8.displayName="BitbucketIcon";const k8=()=>E(ci,{name:"source"},()=>E("path",{d:"M601.92 475.2c0 76.428-8.91 83.754-28.512 99.594-14.652 11.88-43.956 14.058-78.012 16.434-18.81 1.386-40.392 2.97-62.172 6.534-18.612 2.97-36.432 9.306-53.064 17.424V299.772c37.818-21.978 63.36-62.766 63.36-109.692 0-69.894-56.826-126.72-126.72-126.72S190.08 120.186 190.08 190.08c0 46.926 25.542 87.714 63.36 109.692v414.216c-37.818 21.978-63.36 62.766-63.36 109.692 0 69.894 56.826 126.72 126.72 126.72s126.72-56.826 126.72-126.72c0-31.086-11.286-59.598-29.7-81.576 13.266-9.504 27.522-17.226 39.996-19.206 16.038-2.574 32.868-3.762 50.688-5.148 48.312-3.366 103.158-7.326 148.896-44.55 61.182-49.698 74.25-103.158 75.24-187.902V475.2h-126.72zM316.8 126.72c34.848 0 63.36 28.512 63.36 63.36s-28.512 63.36-63.36 63.36-63.36-28.512-63.36-63.36 28.512-63.36 63.36-63.36zm0 760.32c-34.848 0-63.36-28.512-63.36-63.36s28.512-63.36 63.36-63.36 63.36 28.512 63.36 63.36-28.512 63.36-63.36 63.36zM823.68 158.4h-95.04V63.36h-126.72v95.04h-95.04v126.72h95.04v95.04h126.72v-95.04h95.04z"}));k8.displayName="SourceIcon";const M6=({link:i,type:s=tr(i??"")})=>{if(!s)return null;const e=s.toLowerCase();return E(e==="bitbucket"?B8:e==="github"?d8:e==="gitlab"?"GitLab":e==="gitee"?c8:k8)},V6=(i,s=0)=>{let e=3735928559^s,n=1103547991^s;for(let t=0,a;t<i.length;t++)a=i.charCodeAt(t),e=Math.imul(e^a,2654435761),n=Math.imul(n^a,1597334677);return e=Math.imul(e^e>>>16,2246822507),e^=Math.imul(n^n>>>13,3266489909),n=Math.imul(n^n>>>16,2246822507),n^=Math.imul(e^e>>>13,3266489909),4294967296*(2097151&n)+(e>>>0)},at=(i,s)=>V6(i)%s;let $6=class{constructor(){aa(this,"containerElement");aa(this,"messageElements",{});const s="message-container",e=document.getElementById(s);e?this.containerElement=e:(this.containerElement=document.createElement("div"),this.containerElement.id=s,document.body.appendChild(this.containerElement))}pop(s,e=2e3){const n=document.createElement("div"),t=Date.now();return n.className="message move-in",n.innerHTML=s,this.containerElement.appendChild(n),this.messageElements[t]=n,e>0&&setTimeout(()=>{this.close(t)},e),t}close(s){if(s){const e=this.messageElements[s];e.classList.remove("move-in"),e.classList.add("move-out"),e.addEventListener("animationend",()=>{e.remove(),delete this.messageElements[s]})}else Ys(this.messageElements).forEach(e=>this.close(Number(e)))}destroy(){document.body.removeChild(this.containerElement)}};const A8=/#.*$/u,N6=i=>{const s=A8.exec(i);return s?s[0]:""},VE=i=>decodeURI(i).replace(A8,"").replace(/\/index\.html$/iu,"/").replace(/\/(README|index)\.md$/iu,"/").replace(/\.(?:html|md)$/iu,""),u8=(i,s)=>{if(!sk(s))return!1;const e=VE(i.path),n=VE(s),t=N6(s);return t?t===i.hash&&(!n||e===n):e===n};var H6=i=>Object.prototype.toString.call(i)==="[object Object]",zn=i=>typeof i=="string";const g8=Array.isArray,$E=i=>H6(i)&&zn(i.name),jn=(i,s=!1)=>i?g8(i)?i.map(e=>zn(e)?{name:e}:$E(e)?e:null).filter(e=>e!==null):zn(i)?[{name:i}]:$E(i)?[i]:(console.error(`Expect "author" to be \`AuthorInfo[] | AuthorInfo | string[] | string ${s?"":"| false"} | undefined\`, but got`,i),[]):[],m8=(i,s)=>{if(i){if(g8(i)&&i.every(zn))return i;if(zn(i))return[i];console.error(`Expect ${s} to be \`string[] | string | undefined\`, but got`,i)}return[]},f8=i=>m8(i,"category"),v8=i=>m8(i,"tag");let U6={};const y8=Symbol(""),z6=()=>ui(y8),j6=i=>{i.provide(y8,U6)},NE=()=>{const i=document.documentElement;return i.classList.contains("dark")||i.getAttribute("data-theme")==="dark"},He={useMaxWidth:!1},G6=i=>({dark:i,background:i?"#1e1e1e":"#fff",primaryColor:i?"#389d70":"#4abf8a",primaryBorderColor:i?"#389d70":"#4abf8a",primaryTextColor:i?"#fff":"#000",secondaryColor:"#ffb500",secondaryBorderColor:i?"#fff":"#000",secondaryTextColor:i?"#ddd":"#333",tertiaryColor:i?"#282828":"#efeef4",tertiaryBorderColor:i?"#bbb":"#242424",tertiaryTextColor:i?"#ddd":"#333",noteBkgColor:i?"#f6d365":"#fff5ad",noteTextColor:"#242424",noteBorderColor:i?"#f6d365":"#333",lineColor:i?"#d3d3d3":"#333",textColor:i?"#fff":"#242424",mainBkg:i?"#389d70":"#4abf8a",errorBkgColor:"#eb4d5d",errorTextColor:"#fff",nodeBorder:i?"#389d70":"#4abf8a",nodeTextColor:i?"#fff":"#242424",signalTextColor:i?"#9e9e9e":"#242424",classText:"#fff",labelColor:"#fff",attributeBackgroundColorEven:i?"#0d1117":"#fff",attributeBackgroundColorOdd:i?"#161b22":"#f8f8f8",fillType0:i?"#cf1322":"#f1636e",fillType1:"#f39c12",fillType2:"#2ecc71",fillType3:"#fa541c",fillType4:"#25a55b",fillType5:"#13c2c2",fillType6:"#096dd9",fillType7:"#aa6fe9"});var W6=R({name:"Mermaid",props:{id:{type:String,required:!0},code:{type:String,required:!0},title:{type:String,default:""}},setup(i){const{themeVariables:s,...e}=z6(),n=Pi(),t=F(()=>tl(i.code)),a=G(""),l=G(!1);let r=!1;const h=async()=>{const[{default:d}]=await Promise.all([B(()=>import("./mermaid.core-BQhMgX8m.js").then(c=>c.b8),[]),r?Promise.resolve():(r=!0,new Promise(c=>setTimeout(c,800)))]);d.initialize({theme:"base",themeVariables:{...G6(l.value),...ec(s)?s(l.value):s},flowchart:He,sequence:He,journey:He,gantt:He,er:He,pie:He,...e,startOnLoad:!1}),a.value=(await d.render(i.id,t.value)).svg},p=()=>{const{body:d}=document,c=document.createElement("div");c.classList.add("mermaid-preview"),c.innerHTML=a.value,d.appendChild(c),c.addEventListener("click",()=>{d.removeChild(c)})},o=()=>{const d=`data:image/svg+xml;charset=utf8,${a.value.replace(/<br>/g,"<br />").replace(/%/g,"%25").replace(/"/g,"%22").replace(/'/g,"%27").replace(/&/g,"%26").replace(/#/g,"%23").replace(/{/g,"%7B").replace(/}/g,"%7D").replace(/</g,"%3C").replace(/>/g,"%3E")}`,c=document.createElement("a");c.setAttribute("href",d),c.setAttribute("download",`${i.title?tl(i.title):i.id}.svg`),c.click()};return pi(()=>{l.value=NE(),h(),Ck(document.documentElement,()=>{l.value=NE()},{attributeFilter:["class","data-theme"],attributes:!0}),ti(l,()=>h())}),()=>[E("div",{class:"mermaid-actions"},[E("button",{class:"preview-button",onClick:()=>p(),title:"preview",innerHTML:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1316 1024" fill="currentColor"><path d="M658.286 0C415.89 0 0 297.106 0 512c0 214.82 415.89 512 658.286 512 242.322 0 658.285-294.839 658.285-512S900.608 0 658.286 0zm0 877.714c-161.573 0-512-221.769-512-365.714 0-144.018 350.427-365.714 512-365.714 161.572 0 512 217.16 512 365.714s-350.428 365.714-512 365.714z"/><path d="M658.286 292.571a219.429 219.429 0 1 0 0 438.858 219.429 219.429 0 0 0 0-438.858zm0 292.572a73.143 73.143 0 1 1 0-146.286 73.143 73.143 0 0 1 0 146.286z"/></svg>'}),E("button",{class:"download-button",onClick:()=>o(),title:"download",innerHTML:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024" fill="currentColor"><path d="M828.976 894.125H190.189c-70.55 0-127.754-57.185-127.754-127.753V606.674c0-17.634 14.31-31.933 31.933-31.933h63.889c17.634 0 31.932 14.299 31.932 31.933v95.822c0 35.282 28.596 63.877 63.877 63.877h511.033c35.281 0 63.877-28.595 63.877-63.877v-95.822c0-17.634 14.298-31.933 31.943-31.933h63.878c17.635 0 31.933 14.299 31.933 31.933v159.7c0 70.566-57.191 127.751-127.754 127.751zM249.939 267.51c12.921-12.92 33.885-12.92 46.807 0l148.97 148.972V94.893c0-17.634 14.302-31.947 31.934-31.947h63.876c17.638 0 31.946 14.313 31.946 31.947v321.589l148.97-148.972c12.922-12.92 33.876-12.92 46.797 0l46.814 46.818c12.922 12.922 12.922 33.874 0 46.807L552.261 624.93c-1.14 1.138-21.664 13.684-42.315 13.693-20.877.01-41.88-12.542-43.021-13.693L203.122 361.135c-12.923-12.934-12.923-33.885 0-46.807l46.817-46.818z"/></svg>'})]),E("div",{ref:n,class:"mermaid-wrapper"},a.value?E("div",{class:"mermaid-content",innerHTML:a.value}):E(nr,{class:"mermaid-loading",height:96}))]}});let q6={};const F8=Symbol(""),K6=()=>ui(F8),X6=i=>{i.provide(F8,q6)},Y6=()=>[B(()=>import("./reveal.esm-B3O8JSaZ.js"),[]),B(()=>import("./markdown.esm-DotuGrRK.js"),[])];var Q6=R({name:"RevealJs",props:{id:{type:String,required:!0},code:{type:String,required:!0},theme:{type:String,default:"auto"}},setup(i){const s=K6(),e=Bi(),n=G(""),t=G(!0),a=Pi();let l=null;const r=async h=>{const p=[new Promise(k=>setTimeout(k,800)),...Y6()],[,o,...d]=await Promise.all(p),c=new o.default(h,{backgroundTransition:"slide",hash:e.value.layout==="Slide",mouseWheel:e.value.layout==="Slide",transition:"slide",slideNumber:!0,...s,...e.value.revealJs,embedded:e.value.layout!=="Slide",markdown:{separator:`^\r?\\n---\r?
$`,verticalSeparator:`^\r?
--\r?
$`},plugins:[...d.map(({default:k})=>k),...s.plugins??[]]});return await c.initialize(),c};return pi(async()=>{const h=a.value;h&&(n.value=tl(i.code),h.setAttribute("id",i.id),h.setAttribute("data-theme",i.theme),l=await r(h),t.value=!1)}),ue(()=>{l==null||l.destroy()}),()=>E("div",{class:"vp-reveal"},[E("div",{ref:a,class:["reveal","reveal-viewport"]},E("div",{class:"slides",innerHTML:`<section data-markdown><script type="text/template">${n.value}<\/script></section>`})),t.value?E(nr,{class:"reveal-loading",height:400}):null])}});const Ta=tt("VUEPRESS_TAB_STORE",{});var J6=R({name:"Tabs",props:{active:{type:Number,default:0},data:{type:Array,required:!0},id:{type:String,required:!0},tabId:{type:String,default:""}},slots:Object,setup(i,{slots:s}){const e=G(i.active),n=Pi([]),t=()=>{i.tabId&&(Ta.value[i.tabId]=i.data[e.value].id)},a=(p=e.value)=>{e.value=p<n.value.length-1?p+1:0,n.value[e.value].focus()},l=(p=e.value)=>{e.value=p>0?p-1:n.value.length-1,n.value[e.value].focus()},r=(p,o)=>{p.key===" "||p.key==="Enter"?(p.preventDefault(),e.value=o):p.key==="ArrowRight"?(p.preventDefault(),a()):p.key==="ArrowLeft"&&(p.preventDefault(),l()),t()},h=()=>{if(i.tabId){const p=i.data.findIndex(({id:o})=>Ta.value[i.tabId]===o);if(p!==-1)return p}return i.active};return pi(()=>{e.value=h(),ti(()=>Ta.value[i.tabId],(p,o)=>{if(i.tabId&&p!==o){const d=i.data.findIndex(({id:c})=>c===p);d!==-1&&(e.value=d)}})}),()=>i.data.length?E("div",{class:"vp-tabs"},[E("div",{class:"vp-tabs-nav",role:"tablist"},i.data.map(({id:p},o)=>{const d=o===e.value;return E("button",{type:"button",ref:c=>{c&&(n.value[o]=c)},class:["vp-tab-nav",{active:d}],role:"tab","aria-controls":`tab-${i.id}-${o}`,"aria-selected":d,onClick:()=>{e.value=o,t()},onKeydown:c=>r(c,o)},s[`title${o}`]({value:p,isActive:d}))})),i.data.map(({id:p},o)=>{const d=o===e.value;return E("div",{class:["vp-tab",{active:d}],id:`tab-${i.id}-${o}`,role:"tabpanel","aria-expanded":d},[E("div",{class:"vp-tab-title"},s[`title${o}`]({value:p,isActive:d})),s[`tab${o}`]({value:p,isActive:d})])})]):null}});const Z6=ds({enhance:({app:i})=>{j6(i),i.component("Mermaid",W6),X6(i),i.component("RevealJs",Q6),i.component("Tabs",J6)},setup:()=>{I6()}}),iA=Object.freeze(Object.defineProperty({__proto__:null,default:Z6},Symbol.toStringTag,{value:"Module"})),sA=G({}),C8=Symbol(""),eA=()=>ui(C8),nA=i=>{i.provide(C8,sA)},tA='<div class="photo-swipe-loading"><svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" preserveAspectRatio="xMidYMid" viewBox="25 25 50 50"><animateTransform attributeName="transform" type="rotate" dur="2s" keyTimes="0;1" repeatCount="indefinite" values="0;360"></animateTransform><circle cx="50" cy="50" r="20" fill="none" stroke="currentColor" stroke-width="4" stroke-linecap="round"><animate attributeName="stroke-dasharray" dur="1.5s" keyTimes="0;0.5;1" repeatCount="indefinite" values="1,200;90,200;1,200"></animate><animate attributeName="stroke-dashoffset" dur="1.5s" keyTimes="0;0.5;1" repeatCount="indefinite" values="0;-35px;-125px"></animate></circle></svg></div>',aA=i=>wi(i)?Array.from(document.querySelectorAll(i)):i.map(s=>Array.from(document.querySelectorAll(s))).flat(),D8=i=>new Promise((s,e)=>{i.complete?s({type:"image",element:i,src:i.src,width:i.naturalWidth,height:i.naturalHeight,alt:i.alt,msrc:i.src}):(i.onload=()=>s(D8(i)),i.onerror=n=>e(n))}),lA=(i,{download:s=!0,fullscreen:e=!0}={})=>{i.on("uiRegister",()=>{if(i.ui.registerElement({name:"bulletsIndicator",className:"photo-swipe-bullets-indicator",appendTo:"wrapper",onInit:(n,t)=>{const a=[];let l=-1;for(let r=0;r<t.getNumItems();r++){const h=document.createElement("div");h.className="photo-swipe-bullet",h.onclick=p=>{t.goTo(a.indexOf(p.target))},a.push(h),n.appendChild(h)}t.on("change",()=>{l>=0&&a[l].classList.remove("active"),a[t.currIndex].classList.add("active"),l=t.currIndex})}}),e){const{isSupported:n,toggle:t}=sr();n.value&&i.ui.registerElement({name:"fullscreen",order:7,isButton:!0,html:'<svg class="pswp__icn" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M249.5 270.833H437v-75H212a37.5 37.5 0 0 0-37.5 37.5v225h75v-187.5zm-37.5 600h225v-75H249.5v-187.5h-75v225a37.5 37.5 0 0 0 37.5 37.5zm637.5-37.5v-225h-75v187.5H587v75h225a37.5 37.5 0 0 0 37.5-37.5zM587 270.833h187.5v187.5h75v-225a37.5 37.5 0 0 0-37.5-37.5H587v75z"/></svg>',onClick:()=>{t()}})}s&&i.ui.registerElement({name:"download",order:8,isButton:!0,tagName:"a",html:{isCustomSVG:!0,inner:'<path d="M20.5 14.3 17.1 18V10h-2.2v7.9l-3.4-3.6L10 16l6 6.1 6-6.1-1.5-1.6ZM23 23H9v2h14" id="pswp__icn-download"/>',outlineID:"pswp__icn-download"},onInit:(n,t)=>{n.setAttribute("download",""),n.setAttribute("target","_blank"),n.setAttribute("rel","noopener"),t.on("change",()=>{n.setAttribute("href",t.currSlide.data.src)})}})})},rA=(i,{scrollToClose:s=!0,download:e=!0,fullscreen:n=!0,...t})=>B(async()=>{const{default:a}=await import("./photoswipe.esm-DXWKOczD.js");return{default:a}},[]).then(({default:a})=>{let l=null;const r=i.map(h=>({html:tA,element:h,msrc:h.src}));return i.forEach((h,p)=>{const o=()=>{l==null||l.destroy(),l=new a({preloaderDelay:0,showHideAnimationType:"zoom",...t,dataSource:r,index:p,...s?{closeOnVerticalDrag:!0,wheelToZoom:!1}:{}}),lA(l,{download:e,fullscreen:n}),l.addFilter("thumbEl",()=>h),l.addFilter("placeholderSrc",()=>h.src),l.init()};h.getAttribute("photo-swipe")||(h.style.cursor="zoom-in",h.addEventListener("click",()=>{o()}),h.addEventListener("keypress",({key:d})=>{d==="Enter"&&o()}),h.setAttribute("photo-swipe","")),D8(h).then(d=>{r.splice(p,1,d),l==null||l.refreshSlideContent(p)})}),s?Si("wheel",()=>{l==null||l.close()}):()=>{}}),EA=({selector:i,locales:s,delay:e=500,download:n=!0,fullscreen:t=!0,scrollToClose:a=!0})=>{const l=eA(),r=pn(s),h=bi(),p=Bi();let o=null;const d=()=>{const{photoSwipe:c}=p.value;c!==!1&&ys().then(()=>Yp(e)).then(async()=>{const k=wi(c)?c:i;o=await rA(aA(k),{...l.value,...r.value,download:n,fullscreen:t,scrollToClose:a})})};pi(()=>{d(),ti(()=>[h.value.path,l.value],()=>{o==null||o(),d()})}),ue(()=>{o==null||o()})};var hA={"/":{closeTitle:"关闭",downloadTitle:"下载图片",fullscreenTitle:"切换全屏",zoomTitle:"缩放",arrowPrevTitle:"上一个 (左箭头)",arrowNextTitle:"下一个 (右箭头)"}};const pA=".theme-hope-content :not(a) > img:not([no-view])",oA=hA,dA=800,cA=!0,BA=!0,kA=!0,AA=ds({enhance:({app:i})=>{nA(i)},setup:()=>{EA({selector:pA,delay:dA,locales:oA,download:cA,fullscreen:BA,scrollToClose:kA})}}),uA=Object.freeze(Object.defineProperty({__proto__:null,default:AA},Symbol.toStringTag,{value:"Module"}));function gA(i){return{all:i=i||new Map,on:function(s,e){var n=i.get(s);n?n.push(e):i.set(s,[e])},off:function(s,e){var n=i.get(s);n&&(e?n.splice(n.indexOf(e)>>>0,1):i.set(s,[]))},emit:function(s,e){var n=i.get(s);n&&n.slice().map(function(t){t(e)}),(n=i.get("*"))&&n.slice().map(function(t){t(s,e)})}}}const mA=()=>{navigator.serviceWorker.getRegistration().then(i=>{i&&i.active&&(i==null||i.addEventListener("updatefound",()=>{window.location.reload(!0)}))})},fA=async(i,s={},e=!0)=>{const{register:n}=await B(async()=>{const{register:t}=await import("./index-DTEEl-sV.js");return{register:t}},[]);n(i,{ready(t){var a;e&&console.info("[Service Worker]: active"),(a=s.ready)==null||a.call(s,t)},registered(t){var a;e&&console.log("[Service Worker]: registered"),(a=s.registered)==null||a.call(s,t)},cached(t){var a;e&&console.log("[Service Worker]: cached"),(a=s.cached)==null||a.call(s,t)},async updatefound(t){var a;await navigator.serviceWorker.getRegistration()&&(e&&console.log("[Service Worker]: update found"),(a=s.updatefound)==null||a.call(s,t))},updated(t){var a;e&&console.log("[Service Worker]: updated"),(a=s.updated)==null||a.call(s,t)},offline(){var t;e&&console.log("[Service Worker]: offline"),(t=s.offline)==null||t.call(s)},error(t){var a;e&&console.error("[Service Worker]: ",t),(a=s.error)==null||a.call(s,t)}})},vA=i=>{const s=i.waiting;if(!s)return;const e=new MessageChannel;s.postMessage({type:"SKIP_WAITING"},[e.port2])},b8=Symbol(""),yA=()=>{const i=ui(b8);if(!i)throw new Error("usePwaEvent() is called without provider.");return i},FA=async(i,s)=>fA(yi(i),{ready(e){s.emit("ready",e)},registered(e){s.emit("registered",e)},cached(e){s.emit("cached",e)},updatefound(e){s.emit("updatefound",e)},updated(e){const n="service-worker-version",t=Number(localStorage.getItem(n)||0);localStorage.setItem(n,(t+1).toString()),localStorage.removeItem("manifest"),s.emit("updated",e)},offline(){s.emit("offline")},error(e){s.emit("error",e)}}),CA=(i,s=!1)=>{const e=gA();ps(b8,e),pi(async()=>{var t;let n=!1;(t=navigator.serviceWorker)!=null&&t.controller&&navigator.serviceWorker.addEventListener("controllerchange",()=>{n||(n=!0,window.location.reload())}),s&&mA(),await FA(i,e)})},DA=()=>{pi(()=>{if(window.matchMedia("(display-mode: standalone)").matches){const s=document.head.querySelector('meta[name="viewport"]');if(s){s.setAttribute("content","width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover");return}const e=document.createElement("meta");e.name="viewport",e.content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover",document.head.appendChild(e)}})},_8=({name:i="",color:s="currentColor"},{slots:e})=>{var n;return E("svg",{xmlns:"http://www.w3.org/2000/svg",class:["icon",`${i}-icon`],viewBox:"0 0 1024 1024",fill:s,"aria-label":`${i} icon`},(n=e.default)==null?void 0:n.call(e))};_8.displayName="SVGWrapper";const w8=()=>E(_8,{name:"update"},()=>E("path",{d:"M949.949 146.25v255.826c0 21.981-13.989 35.97-35.97 35.97H658.154c-13.988 0-25.983-7.992-33.973-21.981-5.997-13.989-4-27.977 7.991-39.97l79.942-77.946c-55.954-51.973-121.918-77.955-199.863-77.955-37.975 0-75.95 8.002-113.924 21.99-37.975 15.985-67.948 37.976-91.934 63.957-25.982 23.987-47.973 53.96-63.957 91.934-29.983 73.955-29.983 153.895 0 227.85 15.984 37.976 37.975 67.947 63.957 91.934 23.986 25.982 53.959 47.973 91.934 63.956 37.974 13.989 75.95 21.991 113.924 21.991 45.967 0 87.942-9.998 127.913-29.982 41.976-17.99 75.951-45.967 101.931-83.943 7.993-4 11.994-5.995 13.989-5.995 5.997 0 9.998 1.994 13.988 5.995l77.958 77.946c3.989 4 5.986 7.993 5.986 11.994 0 1.994-1.996 5.995-3.99 11.994-43.973 51.962-93.941 91.934-151.9 117.914-53.958 25.983-115.92 39.972-185.874 39.972-61.961 0-119.921-11.984-169.89-33.973-57.96-25.985-105.923-57.963-139.896-93.943-35.98-33.972-67.958-81.936-93.94-139.897-45.967-101.93-45.967-237.846 0-339.777 25.982-57.96 57.96-105.923 93.94-139.896 33.973-35.98 81.936-67.958 139.896-93.94 49.968-21.99 107.928-33.974 169.89-33.974 55.963 0 109.923 9.988 161.885 29.973 53.97 21.99 101.933 51.963 139.908 89.938l73.954-73.944c9.987-9.998 23.987-13.988 39.971-8.002 13.988 8.002 21.98 19.995 21.98 33.984z"}));w8.displayName="UpdateIcon";const bA=R({name:"PwaReadyPopup",props:{locales:{type:Object,required:!0}},slots:Object,setup(i,{slots:s}){const e=pn(i.locales),n=Pi(),t=F(()=>!!n.value),a=()=>{n.value&&(vA(n.value),n.value=void 0)};return pi(()=>{yA().on("updated",r=>{r&&(n.value=r)})}),()=>E(Se,{name:"popup"},()=>{var l;return((l=s.default)==null?void 0:l.call(s,{isReady:t.value,reload:a}))||(t.value?E("button",{type:"button",class:"sw-update-popup",tabindex:0,onClick:()=>a()},[e.value.update,E("span",{class:"icon-wrapper"},E(w8))]):null)})}});var _A={"/":{install:"安装",iOSInstall:"点击分享按钮然后点击“添加到主屏幕”",cancel:"取消",close:"关闭",prevImage:"上一张图片",nextImage:"下一张图片",desc:"详情",feature:"主要特色",explain:"该应用可以安装在你的 PC 或移动设备上。这将使该 Web 应用程序外观和行为与其他应用程序相同。它将在出现在应用程序列表中，并可以固定到主屏幕，开始菜单或任务栏。此 Web 应用程序还将能够与其他应用程序和你的操作系统安全地进行交互。",hint:"发现新内容可用",update:"新内容已就绪"}};const wA=_A,xA=()=>E(bA,{locales:wA}),TA=ds({setup:()=>{CA("service-worker.js",!1),DA()},rootComponents:[xA]}),PA=Object.freeze(Object.defineProperty({__proto__:null,default:TA},Symbol.toStringTag,{value:"Module"})),x8=()=>{const i=bi();return F(()=>i.value.readingTime??null)},T8=(i,s)=>{const{minutes:e,words:n}=i,{less1Minute:t,word:a,time:l}=s;return{time:e<1?t:l.replace("$time",Math.round(e).toString()),words:a.replace("$word",n.toString())}};var HE={"/":{word:"约 $word 字",less1Minute:"小于 1 分钟",time:"大约 $time 分钟"}};const UE={words:"",time:""},hl=typeof HE>"u"?null:HE,P8=()=>hl?pn(hl):F(()=>null),LA=()=>{if(typeof hl>"u")return F(()=>UE);const i=x8(),s=P8();return F(()=>i.value&&s.value?T8(i.value,s.value):UE)},Ns=()=>r8(),ri=()=>A6(),Qi=()=>{const i=Ns();return F(()=>!!i.value.pure)},wt=()=>null,SA="719px",OA="1440px",IA="9",dn={mobileBreakPoint:SA,pcBreakPoint:OA,colorNumber:IA},ar={},L8=i=>{const{icon:s="",color:e,size:n}=i,t=e||n?{}:null;return e&&(t.color=e),n&&(t.height=Number.isNaN(Number(n))?n:`${n}px`),Ie(s)?E("img",{class:"icon",src:s,alt:"","no-view":"",style:t}):Jt(s)?E("img",{class:"icon",src:yi(s),alt:"","aria-hidden":"","no-view":"",style:t}):E(ms("FontIcon"),i)};L8.displayName="HopeIcon";var zi=L8;const S8=()=>{const i=ri();return F(()=>i.value.author)},RA="http://.",Me=()=>{const i=me(),s=$s();return e=>{if(e)if(Jt(e))s.path!==e&&i.push(e);else if(Zn(e))window&&window.open(e);else{const n=s.path.slice(0,s.path.lastIndexOf("/"));i.push(new URL(`${n}/${encodeURI(e)}`,RA).pathname)}}},O8=()=>{const i=Bi(),s=S8();return F(()=>{const{author:e}=i.value;return e?jn(e):e===!1?[]:jn(s.value,!1)})},MA=()=>{const i=Bi(),s=ui(Symbol.for("categoryMap"));return F(()=>f8(i.value.category??i.value.categories).map(e=>{var n;return{name:e,path:((n=s==null?void 0:s.value.map[e])==null?void 0:n.path)??""}}))},VA=()=>{const i=Bi(),s=ui(Symbol.for("tagMap"));return F(()=>v8(i.value.tag??i.value.tags).map(e=>{var n;return{name:e,path:((n=s==null?void 0:s.value.map[e])==null?void 0:n.path)??""}}))},$A=()=>{const i=Bi(),s=bi();return F(()=>{const e=Ql(i.value.date);if(e)return e;const{createdTime:n}=s.value.git??{};return n?new Date(n):null})},NA=()=>{const i=ri(),s=bi(),e=Bi(),n=O8(),t=MA(),a=VA(),l=$A(),r=x8(),h=LA(),p=F(()=>({author:n.value,category:t.value,date:l.value,localizedDate:s.value.localizedDate,tag:a.value,isOriginal:e.value.isOriginal??!1,readingTime:r.value,readingTimeLocale:h.value,pageview:e.value.pageview??!0})),o=F(()=>e.value.pageInfo??i.value.pageInfo??null);return{info:p,items:o}},lr=(i,s)=>"activeMatch"in s?new RegExp(s.activeMatch,"u").test(i.path):u8(i,s.link),rr=(i,s)=>"children"in s?!!s.prefix&&u8(i,s.prefix)||s.children.some(e=>rr(i,e)):lr(i,s),pl=i=>!jl(i)&&!Zn(i);var Xi=(i=>(i.title="t",i.shortTitle="s",i.icon="i",i.index="I",i.order="O",i.breadcrumbExclude="b",i))(Xi||{}),Ui=(i=>(i.type="y",i.author="a",i.date="d",i.localizedDate="l",i.category="c",i.tag="g",i.isEncrypted="n",i.isOriginal="o",i.readingTime="r",i.excerpt="e",i.sticky="u",i.cover="v",i))(Ui||{}),I8=(i=>(i.article="a",i.home="h",i.slide="s",i.page="p",i))(I8||{});const Vt=(i,s=!1,e)=>{const{meta:n,path:t,notFound:a}=vs(i,e);return a?{text:t,link:t}:{text:!s&&n[Xi.shortTitle]?n[Xi.shortTitle]:n[Xi.title]||t,link:t,...n[Xi.icon]?{icon:n[Xi.icon]}:{}}},we=(i="",s="")=>Jt(s)||Zn(s)?s:`${gp(i)}${s}`,R8=(i,s)=>{const e=wi(i)?Vt(we(s,i)):i.link?{...i,link:pl(i.link)?vs(we(s,i.link)).path:i.link}:i;if("children"in e){const n=we(s,e.prefix),t=e.children==="structure"?ar[n]:e.children;return{...e,prefix:n,children:t.map(a=>R8(a,n))}}return{...e}},ol=({config:i,prefix:s=""})=>i.map(e=>R8(e,s)),HA=({config:i,routePath:s,headerDepth:e})=>{const n=Ys(i).sort((t,a)=>a.length-t.length);for(const t of n)if(Un(decodeURI(s),t)){const a=i[t];return ol({config:a==="structure"?ar[t]:a||[],prefix:t})}return console.warn(`${decodeURI(s)} is missing sidebar config.`),[]},UA=({config:i,headerDepth:s,routeLocale:e,routePath:n})=>i==="structure"?ol({config:ar[e],prefix:e}):al(i)?ol({config:i}):it(i)?HA({config:i,routePath:n,headerDepth:s}):[],M8=Symbol(""),zA=()=>{const i=Bi(),s=ri(),e=Fs(),n=xB(),t=F(()=>i.value.home?!1:i.value.sidebar??s.value.sidebar??"structure"),a=F(()=>i.value.headerDepth??s.value.headerDepth??2),l=F(()=>UA({config:t.value,headerDepth:a.value,routeLocale:e.value,routePath:n.value}));ps(M8,l)},Er=()=>{const i=ui(M8);if(!i)throw new Error("useSidebarItems() is called without provider.");return i},{mobileBreakPoint:jA,pcBreakPoint:GA}=dn,zE=i=>i.endsWith("px")?Number(i.slice(0,-2)):null,lt=()=>{const i=G(!1),s=G(!1),e=()=>{i.value=window.innerWidth<=(zE(jA)??719),s.value=window.innerWidth>=(zE(GA)??1440)};return Si("resize",e,!1),Si("orientationchange",e,!1),pi(()=>{e()}),{isMobile:i,isPC:s}},V8=Symbol(""),rt=()=>{const i=ui(V8);if(!i)throw new Error("useDarkmode() is called without provider.");return i},WA=i=>{const s=Ns(),e=Pk(),n=F(()=>s.value.darkmode??"switch"),t=tt("vuepress-theme-hope-scheme","auto"),a=F(()=>{const r=n.value;return r==="disable"?!1:r==="enable"?!0:r==="auto"?e.value:r==="toggle"?t.value==="dark":t.value==="dark"||t.value==="auto"&&e.value}),l=F(()=>{const r=n.value;return r==="switch"||r==="toggle"});i.provide(V8,{canToggle:l,config:n,isDarkmode:a,status:t}),Object.defineProperties(i.config.globalProperties,{$isDarkmode:{get:()=>a.value}})},qA=()=>{const{config:i,isDarkmode:s,status:e}=rt();Nl(()=>{i.value==="disable"?e.value="light":i.value==="enable"?e.value="dark":i.value==="toggle"&&e.value==="auto"&&(e.value="light")}),pi(()=>{ti(s,n=>document.documentElement.setAttribute("data-theme",n?"dark":"light"),{immediate:!0})})};var KA=R({name:"PageFooter",setup(){const i=Ns(),s=ri(),e=Bi(),n=O8(),t=F(()=>{const{copyright:p,footer:o}=e.value;return o!==!1&&!!(p||o||s.value.displayFooter)}),a=F(()=>{const{footer:p}=e.value;return p===!1?!1:wi(p)?p:s.value.footer??""}),l=F(()=>n.value.map(({name:p})=>p).join(", ")),r=p=>`Copyright © ${new Date().getFullYear()} ${l.value} ${p?`${p} Licensed`:""}`,h=F(()=>{const{copyright:p,license:o=""}=e.value,{license:d}=i.value,{copyright:c}=s.value;return p??(o?r(o):c??(l.value||d?r(d):!1))});return()=>t.value?E("footer",{class:"vp-footer-wrapper"},[a.value?E("div",{class:"vp-footer",innerHTML:a.value}):null,h.value?E("div",{class:"vp-copyright",innerHTML:h.value}):null]):null}}),ss=R({name:"AutoLink",props:{config:{type:Object,required:!0}},emits:["focusout"],slots:Object,setup(i,{emit:s,slots:e}){return()=>{const{icon:n}=i.config;return E(OB,{...i,onFocusout:()=>s("focusout")},{default:e.default?()=>e.default():null,before:e.before?()=>e.before():n?()=>E(zi,{icon:n}):null,after:e.after?()=>e.after():null})}}}),XA=R({name:"NavbarDropdown",props:{config:{type:Object,required:!0}},slots:Object,setup(i,{slots:s}){const e=bi(),n=Oe(i,"config"),t=F(()=>n.value.ariaLabel??n.value.text),a=G(!1);ti(()=>e.value.path,()=>{a.value=!1});const l=r=>{r.detail===0&&(a.value=!a.value)};return()=>{var r;return E("div",{class:["vp-dropdown-wrapper",{open:a.value}]},[E("button",{type:"button",class:"vp-dropdown-title","aria-label":t.value,onClick:l},[((r=s.title)==null?void 0:r.call(s))||[E(zi,{icon:n.value.icon}),i.config.text],E("span",{class:"arrow"}),E("ul",{class:"vp-dropdown"},n.value.children.map((h,p)=>{const o=p===n.value.children.length-1;return E("li",{class:"vp-dropdown-item"},"children"in h?[E("h4",{class:"vp-dropdown-subtitle"},h.link?E(ss,{config:h,onFocusout:()=>{h.children.length===0&&o&&(a.value=!1)}}):h.text),E("ul",{class:"vp-dropdown-subitems"},h.children.map((d,c)=>E("li",{class:"vp-dropdown-subitem"},E(ss,{config:d,onFocusout:()=>{c===h.children.length-1&&o&&(a.value=!1)}}))))]:E(ss,{config:h,onFocusout:()=>{o&&(a.value=!1)}}))}))])])}}});const $8=(i,s="")=>wi(i)?Vt(we(s,i)):"children"in i?{...i,...i.link&&pl(i.link)?{link:vs(we(s,i.link)).path}:{},children:i.children.map(e=>$8(e,we(s,i.prefix)))}:{...i,link:pl(i.link)?vs(we(s,i.link)).path:i.link},N8=()=>{const i=ri();return F(()=>(i.value.navbar||[]).map(s=>$8(s)))},YA=()=>{const i=ri(),s=F(()=>i.value.repo),e=F(()=>s.value?R6(s.value):null),n=F(()=>s.value?tr(s.value):null),t=F(()=>e.value?i.value.repoLabel??n.value??"Source":null);return F(()=>!e.value||!t.value||i.value.repoDisplay===!1?null:{type:n.value??"Source",label:t.value,link:e.value})};var QA=R({name:"NavScreenMenu",props:{config:{type:Object,required:!0}},setup(i){const s=bi(),e=Oe(i,"config"),n=F(()=>e.value.ariaLabel??e.value.text),t=G(!1);ti(()=>s.value.path,()=>{t.value=!1});const a=(l,r)=>r[r.length-1]===l;return()=>[E("button",{type:"button",class:["vp-nav-screen-menu-title",{active:t.value}],"aria-label":n.value,onClick:()=>{t.value=!t.value}},[E("span",{class:"text"},[E(zi,{icon:e.value.icon}),i.config.text]),E("span",{class:["arrow",t.value?"down":"end"]})]),E("ul",{class:["vp-nav-screen-menu",{hide:!t.value}]},e.value.children.map(l=>E("li",{class:"vp-nav-screen-menu-item"},"children"in l?[E("h4",{class:"vp-nav-screen-menu-subtitle"},l.link?E(ss,{config:l,onFocusout:()=>{a(l,e.value.children)&&l.children.length===0&&(t.value=!1)}}):l.text),E("ul",{class:"vp-nav-screen-menu-subitems"},l.children.map(r=>E("li",{class:"vp-nav-screen-menu-subitem"},E(ss,{config:r,onFocusout:()=>{a(r,l.children)&&a(l,e.value.children)&&(t.value=!1)}}))))]:E(ss,{config:l,onFocusout:()=>{a(l,e.value.children)&&(t.value=!1)}}))))]}}),JA=R({name:"NavScreenLinks",setup(){const i=N8();return()=>i.value.length?E("nav",{class:"nav-screen-links"},i.value.map(s=>E("div",{class:"navbar-links-item"},"children"in s?E(QA,{config:s}):E(ss,{config:s})))):null}});const H8=()=>E(ci,{name:"dark"},()=>E("path",{d:"M524.8 938.667h-4.267a439.893 439.893 0 0 1-313.173-134.4 446.293 446.293 0 0 1-11.093-597.334A432.213 432.213 0 0 1 366.933 90.027a42.667 42.667 0 0 1 45.227 9.386 42.667 42.667 0 0 1 10.24 42.667 358.4 358.4 0 0 0 82.773 375.893 361.387 361.387 0 0 0 376.747 82.774 42.667 42.667 0 0 1 54.187 55.04 433.493 433.493 0 0 1-99.84 154.88 438.613 438.613 0 0 1-311.467 128z"}));H8.displayName="DarkIcon";const U8=()=>E(ci,{name:"light"},()=>E("path",{d:"M952 552h-80a40 40 0 0 1 0-80h80a40 40 0 0 1 0 80zM801.88 280.08a41 41 0 0 1-57.96-57.96l57.96-58a41.04 41.04 0 0 1 58 58l-58 57.96zM512 752a240 240 0 1 1 0-480 240 240 0 0 1 0 480zm0-560a40 40 0 0 1-40-40V72a40 40 0 0 1 80 0v80a40 40 0 0 1-40 40zm-289.88 88.08-58-57.96a41.04 41.04 0 0 1 58-58l57.96 58a41 41 0 0 1-57.96 57.96zM192 512a40 40 0 0 1-40 40H72a40 40 0 0 1 0-80h80a40 40 0 0 1 40 40zm30.12 231.92a41 41 0 0 1 57.96 57.96l-57.96 58a41.04 41.04 0 0 1-58-58l58-57.96zM512 832a40 40 0 0 1 40 40v80a40 40 0 0 1-80 0v-80a40 40 0 0 1 40-40zm289.88-88.08 58 57.96a41.04 41.04 0 0 1-58 58l-57.96-58a41 41 0 0 1 57.96-57.96z"}));U8.displayName="LightIcon";const z8=()=>E(ci,{name:"auto"},()=>E("path",{d:"M512 992C246.92 992 32 777.08 32 512S246.92 32 512 32s480 214.92 480 480-214.92 480-480 480zm0-840c-198.78 0-360 161.22-360 360 0 198.84 161.22 360 360 360s360-161.16 360-360c0-198.78-161.22-360-360-360zm0 660V212c165.72 0 300 134.34 300 300 0 165.72-134.28 300-300 300z"}));z8.displayName="AutoIcon";const j8=()=>E(ci,{name:"enter-fullscreen"},()=>E("path",{d:"M762.773 90.24h-497.28c-96.106 0-174.4 78.293-174.4 174.4v497.28c0 96.107 78.294 174.4 174.4 174.4h497.28c96.107 0 175.04-78.293 174.4-174.4V264.64c0-96.213-78.186-174.4-174.4-174.4zm-387.2 761.173H215.04c-21.867 0-40.427-17.92-41.067-41.066V649.92c0-22.507 17.92-40.427 40.427-40.427 11.307 0 21.227 4.694 28.48 11.947 7.253 7.253 11.947 17.92 11.947 28.48v62.293l145.28-145.28c15.893-15.893 41.813-15.893 57.706 0 15.894 15.894 15.894 41.814 0 57.707l-145.28 145.28h62.294c22.506 0 40.426 17.92 40.426 40.427s-17.173 41.066-39.68 41.066zM650.24 165.76h160.427c21.866 0 40.426 17.92 41.066 41.067v160.426c0 22.507-17.92 40.427-40.426 40.427-11.307 0-21.227-4.693-28.48-11.947-7.254-7.253-11.947-17.92-11.947-28.48v-62.186L625.6 450.347c-15.893 15.893-41.813 15.893-57.707 0-15.893-15.894-15.893-41.814 0-57.707l145.28-145.28H650.88c-22.507 0-40.427-17.92-40.427-40.427s17.174-41.173 39.787-41.173z"}));j8.displayName="EnterFullScreenIcon";const G8=()=>E(ci,{name:"cancel-fullscreen"},()=>E("path",{d:"M778.468 78.62H247.922c-102.514 0-186.027 83.513-186.027 186.027V795.08c0 102.514 83.513 186.027 186.027 186.027h530.432c102.514 0 186.71-83.513 186.026-186.027V264.647C964.494 162.02 880.981 78.62 778.468 78.62zM250.88 574.35h171.122c23.324 0 43.122 19.115 43.804 43.805v171.121c0 24.008-19.114 43.122-43.122 43.122-12.06 0-22.641-5.006-30.378-12.743s-12.743-19.115-12.743-30.379V722.83L224.597 877.91c-16.953 16.952-44.6 16.952-61.553 0-16.953-16.954-16.953-44.602 0-61.554L318.009 661.39h-66.446c-24.007 0-43.122-19.114-43.122-43.122 0-24.12 18.432-43.918 42.439-43.918zm521.899-98.873H601.657c-23.325 0-43.122-19.114-43.805-43.804V260.55c0-24.007 19.115-43.122 43.122-43.122 12.06 0 22.642 5.007 30.379 12.743s12.743 19.115 12.743 30.38v66.445l154.965-154.965c16.953-16.953 44.601-16.953 61.554 0 16.953 16.953 16.953 44.6 0 61.554L705.536 388.55h66.446c24.007 0 43.122 19.115 43.122 43.122.114 24.007-18.318 43.804-42.325 43.804z"}));G8.displayName="CancelFullScreenIcon";const W8=()=>E(ci,{name:"outlook"},()=>[E("path",{d:"M224 800c0 9.6 3.2 44.8 6.4 54.4 6.4 48-48 76.8-48 76.8s80 41.6 147.2 0 134.4-134.4 38.4-195.2c-22.4-12.8-41.6-19.2-57.6-19.2C259.2 716.8 227.2 761.6 224 800zM560 675.2l-32 51.2c-51.2 51.2-83.2 32-83.2 32 25.6 67.2 0 112-12.8 128 25.6 6.4 51.2 9.6 80 9.6 54.4 0 102.4-9.6 150.4-32l0 0c3.2 0 3.2-3.2 3.2-3.2 22.4-16 12.8-35.2 6.4-44.8-9.6-12.8-12.8-25.6-12.8-41.6 0-54.4 60.8-99.2 137.6-99.2 6.4 0 12.8 0 22.4 0 12.8 0 38.4 9.6 48-25.6 0-3.2 0-3.2 3.2-6.4 0-3.2 3.2-6.4 3.2-6.4 6.4-16 6.4-16 6.4-19.2 9.6-35.2 16-73.6 16-115.2 0-105.6-41.6-198.4-108.8-268.8C704 396.8 560 675.2 560 675.2zM224 419.2c0-28.8 22.4-51.2 51.2-51.2 28.8 0 51.2 22.4 51.2 51.2 0 28.8-22.4 51.2-51.2 51.2C246.4 470.4 224 448 224 419.2zM320 284.8c0-22.4 19.2-41.6 41.6-41.6 22.4 0 41.6 19.2 41.6 41.6 0 22.4-19.2 41.6-41.6 41.6C339.2 326.4 320 307.2 320 284.8zM457.6 208c0-12.8 12.8-25.6 25.6-25.6 12.8 0 25.6 12.8 25.6 25.6 0 12.8-12.8 25.6-25.6 25.6C470.4 233.6 457.6 220.8 457.6 208zM128 505.6C128 592 153.6 672 201.6 736c28.8-60.8 112-60.8 124.8-60.8-16-51.2 16-99.2 16-99.2l316.8-422.4c-48-19.2-99.2-32-150.4-32C297.6 118.4 128 291.2 128 505.6zM764.8 86.4c-22.4 19.2-390.4 518.4-390.4 518.4-22.4 28.8-12.8 76.8 22.4 99.2l9.6 6.4c35.2 22.4 80 12.8 99.2-25.6 0 0 6.4-12.8 9.6-19.2 54.4-105.6 275.2-524.8 288-553.6 6.4-19.2-3.2-32-19.2-32C777.6 76.8 771.2 80 764.8 86.4z"})]);W8.displayName="OutlookIcon";var q8=R({name:"ColorModeSwitch",setup(){const{config:i,isDarkmode:s,status:e}=rt(),n=Qi(),t=()=>{i.value==="switch"?e.value={light:"dark",dark:"auto",auto:"light"}[e.value]:e.value=e.value==="light"?"dark":"light"},a=async l=>{if(!(document.startViewTransition&&!window.matchMedia("(prefers-reduced-motion: reduce)").matches&&!n.value)||!l){t();return}const r=l.clientX,h=l.clientY,p=Math.hypot(Math.max(r,innerWidth-r),Math.max(h,innerHeight-h)),o=s.value;await document.startViewTransition(async()=>{t(),await ys()}).ready,s.value!==o&&document.documentElement.animate({clipPath:s.value?[`circle(${p}px at ${r}px ${h}px)`,`circle(0px at ${r}px ${h}px)`]:[`circle(0px at ${r}px ${h}px)`,`circle(${p}px at ${r}px ${h}px)`]},{duration:400,pseudoElement:s.value?"::view-transition-old(root)":"::view-transition-new(root)"})};return()=>E("button",{type:"button",class:"vp-color-mode-switch",id:"color-mode-switch",onClick:a},[E(z8,{style:{display:e.value==="auto"?"block":"none"}}),E(H8,{style:{display:e.value==="dark"?"block":"none"}}),E(U8,{style:{display:e.value==="light"?"block":"none"}})])}}),ZA=R({name:"ColorMode",setup(){const i=ri(),{canToggle:s}=rt(),e=F(()=>i.value.outlookLocales.darkmode);return()=>s.value?E("div",{class:"vp-color-mode"},[E("label",{class:"vp-color-mode-title",for:"color-mode-switch"},e.value),E(q8)]):null}}),K8=R({name:"ToggleFullScreenButton",setup(){const i=ri(),{isSupported:s,isFullscreen:e,toggle:n}=sr(),t=F(()=>i.value.outlookLocales.fullscreen);return()=>s?E("div",{class:"full-screen-wrapper"},[E("label",{class:"full-screen-title",for:"full-screen-switch"},t.value),E("button",{type:"button",id:"full-screen-switch",class:"full-screen",ariaPressed:e.value,onClick:()=>n()},e.value?E(G8):E(j8))]):null}}),X8=R({name:"OutlookSettings",setup(){const i=Ns(),s=Qi(),e=F(()=>!s.value&&i.value.fullscreen);return()=>E(Qt,()=>[null,E(ZA),e.value?E(K8):null])}}),iu=R({name:"NavScreen",props:{show:Boolean},emits:["close"],slots:Object,setup(i,{emit:s,slots:e}){const n=bi(),{isMobile:t}=lt(),a=Pi(),l=s8(a);return pi(()=>{a.value=document.body,ti(t,r=>{!r&&i.show&&(l.value=!1,s("close"))}),ti(()=>n.value.path,()=>{l.value=!1,s("close")})}),ue(()=>{l.value=!1}),()=>E(Se,{name:"fade",onEnter:()=>{l.value=!0},onAfterLeave:()=>{l.value=!1}},()=>{var r,h;return i.show?E("div",{id:"nav-screen",class:"vp-nav-screen"},E("div",{class:"vp-nav-screen-container"},[(r=e.before)==null?void 0:r.call(e),E(JA),E("div",{class:"vp-outlook-wrapper"},E(X8)),(h=e.after)==null?void 0:h.call(e)])):null})}}),su=R({name:"NavbarBrand",setup(){const i=Fs(),s=hn(),e=ri(),n=F(()=>e.value.home??i.value),t=F(()=>s.value.title),a=F(()=>e.value.navbarTitle??t.value),l=F(()=>e.value.logo?yi(e.value.logo):null),r=F(()=>e.value.logoDark?yi(e.value.logoDark):null);return()=>E(Ii,{to:n.value,class:"vp-brand"},()=>[l.value?E("img",{class:["vp-nav-logo",{light:!!r.value}],src:l.value,alt:""}):null,r.value?E("img",{class:["vp-nav-logo dark"],src:r.value,alt:""}):null,a.value?E("span",{class:["vp-site-name",{"hide-in-pad":l.value&&(e.value.hideSiteNameOnMobile??!0)}]},a.value):null])}}),eu=R({name:"NavbarLinks",setup(){const i=N8();return()=>i.value.length?E("nav",{class:"vp-nav-links"},i.value.map(s=>E("div",{class:"vp-nav-item hide-in-mobile"},"children"in s?E(XA,{config:s}):E(ss,{config:s})))):null}}),nu=R({name:"RepoLink",setup(){const i=YA();return()=>i.value?E("div",{class:"vp-nav-item vp-action"},E("a",{class:"vp-action-link",href:i.value.link,target:"_blank",rel:"noopener noreferrer","aria-label":i.value.label},E(M6,{type:i.value.type,style:{width:"1.25rem",height:"1.25rem",verticalAlign:"middle"}}))):null}});const Y8=({active:i=!1},{emit:s})=>E("button",{type:"button",class:["vp-toggle-navbar-button",{"is-active":i}],"aria-label":"Toggle Navbar","aria-expanded":i,"aria-controls":"nav-screen",onClick:()=>s("toggle")},E("span",[E("span",{class:"vp-top"}),E("span",{class:"vp-middle"}),E("span",{class:"vp-bottom"})]));Y8.displayName="ToggleNavbarButton";const dl=(i,{emit:s})=>E("button",{type:"button",class:"vp-toggle-sidebar-button",title:"Toggle Sidebar",onClick:()=>s("toggle")},E("span",{class:"icon"}));dl.displayName="ToggleSidebarButton",dl.emits=["toggle"];var tu=R({name:"OutlookButton",setup(){const i=Ns(),s=bi(),{canToggle:e}=rt(),{isSupported:n}=sr(),t=Qi(),a=G(!1),l=F(()=>!t.value&&i.value.fullscreen&&n),r=F(()=>e.value||l.value);return ti(()=>s.value.path,()=>{a.value=!1}),()=>r.value?E("div",{class:"vp-nav-item hide-in-mobile"},e.value&&!l.value?E(q8):l.value&&!e.value?E(K8):E("button",{type:"button",class:["vp-outlook-button",{open:a.value}],tabindex:"-1","aria-hidden":!0},[E(W8),E("div",{class:"vp-outlook-dropdown"},E(X8))])):null}}),au=R({name:"NavBar",emits:["toggleSidebar"],slots:Object,setup(i,{emit:s,slots:e}){const n=ri(),{isMobile:t}=lt(),a=G(!1),l=F(()=>{const{navbarAutoHide:o="mobile"}=n.value;return o!=="none"&&(o==="always"||t.value)}),r=F(()=>n.value.navbarLayout??{start:["Brand"],center:["Links"],end:["Language","Repo","Outlook","Search"]}),h={Brand:su,Language:wt,Links:eu,Repo:nu,Outlook:tu,Search:fs("Docsearch")?ms("Docsearch"):fs("SearchBox")?ms("SearchBox"):wt},p=o=>h[o]??(fs(o)?ms(o):wt);return()=>{var o,d,c,k,f,u,y,v,D;return[E("header",{key:"navbar",id:"navbar",class:["vp-navbar",{"auto-hide":l.value}]},[E("div",{class:"vp-navbar-start"},[E(dl,{onToggle:()=>{a.value&&(a.value=!1),s("toggleSidebar")}}),(o=e.startBefore)==null?void 0:o.call(e),(d=r.value.start)==null?void 0:d.map(g=>E(p(g))),(c=e.startAfter)==null?void 0:c.call(e)]),E("div",{class:"vp-navbar-center"},[(k=e.centerBefore)==null?void 0:k.call(e),(f=r.value.center)==null?void 0:f.map(g=>E(p(g))),(u=e.centerAfter)==null?void 0:u.call(e)]),E("div",{class:"vp-navbar-end"},[(y=e.endBefore)==null?void 0:y.call(e),(v=r.value.end)==null?void 0:v.map(g=>E(p(g))),(D=e.endAfter)==null?void 0:D.call(e),E(Y8,{active:a.value,onToggle:()=>{a.value=!a.value}})])]),E(iu,{show:a.value,onClose:()=>{a.value=!1}},{before:e.screenTop?()=>e.screenTop():null,after:e.screenBottom?()=>e.screenBottom():null})]}}}),lu=R({name:"SidebarChild",props:{config:{type:Object,required:!0}},setup(i){const s=$s();return()=>wi(i.config.link)?E(ss,{class:["vp-sidebar-link",{active:lr(s,i.config)}],config:{...i.config,exact:!0}}):E("p",i,[E(zi,{icon:i.config.icon}),i.config.text])}}),ru=R({name:"SidebarGroup",props:{config:{type:Object,required:!0},open:{type:Boolean,required:!0}},emits:["toggle"],setup(i,{emit:s}){const e=$s(),n=G(!1),t=F(()=>rr(e,i.config)),a=F(()=>lr(e,i.config)),l=F(()=>i.open||i.config.expanded&&!n.value);return()=>{const{collapsible:r,children:h=[],icon:p,prefix:o,link:d,text:c}=i.config;return E("section",{class:"vp-sidebar-group"},[E(r?"button":"p",{class:["vp-sidebar-header",{clickable:r||d,exact:a.value,active:t.value}],...r?{type:"button",onClick:()=>{n.value=!0,s("toggle")}}:{}},[E(zi,{icon:p}),d?E(ss,{class:"vp-sidebar-title no-external-link-icon",config:{text:c,link:d}}):E("span",{class:"vp-sidebar-title"},c),r?E("span",{class:["vp-arrow",l.value?"down":"end"]}):null]),l.value||!r?E(Q8,{key:o,config:h}):null])}}}),Q8=R({name:"SidebarLinks",props:{config:{type:Array,required:!0}},setup(i){const s=$s(),e=G(-1),n=t=>{e.value=t===e.value?-1:t};return ti(()=>s.path,()=>{const t=i.config.findIndex(a=>rr(s,a));e.value=t},{immediate:!0,flush:"post"}),()=>E("ul",{class:"vp-sidebar-links"},i.config.map((t,a)=>E("li","children"in t?E(ru,{config:t,open:a===e.value,onToggle:()=>n(a)}):E(lu,{config:t}))))}}),Eu=R({name:"SideBar",slots:Object,setup(i,{slots:s}){const e=$s(),n=Er(),t=Pi();return pi(()=>{ti(()=>e.hash,a=>{const l=document.querySelector(`.vp-sidebar a.vp-sidebar-link[href="${e.path}${a}"]`);if(!l)return;const{top:r,height:h}=t.value.getBoundingClientRect(),{top:p,height:o}=l.getBoundingClientRect();p<r?l.scrollIntoView(!0):p+o>r+h&&l.scrollIntoView(!1)},{immediate:!0})}),()=>{var a,l,r;return E("aside",{ref:t,key:"sidebar",id:"sidebar",class:"vp-sidebar"},[(a=s.top)==null?void 0:a.call(s),((l=s.default)==null?void 0:l.call(s))??E(Q8,{config:n.value}),(r=s.bottom)==null?void 0:r.call(s)])}}}),hr=R({name:"CommonWrapper",props:{containerClass:{type:String,default:""},noNavbar:Boolean,noSidebar:Boolean,noToc:Boolean},slots:Object,setup(i,{slots:s}){const e=me(),n=Bi(),t=Ns(),a=ri(),{isMobile:l,isPC:r}=lt(),h=Qi(),[p,o]=rl(!1),[d,c]=rl(!1),k=Er(),f=G(!1),u=F(()=>i.noNavbar||n.value.navbar===!1||a.value.navbar===!1?!1:!!(a.value.logo??a.value.repo??a.value.navbar)),y=F(()=>i.noSidebar?!1:n.value.sidebar!==!1&&k.value.length!==0&&!n.value.home),v=F(()=>n.value.externalLinkIcon??t.value.externalLinkIcon??!0),D=F(()=>!i.noToc&&!n.value.home&&(n.value.toc??a.value.toc??!0)),g={x:0,y:0},C=V=>{g.x=V.changedTouches[0].clientX,g.y=V.changedTouches[0].clientY},L=V=>{const X=V.changedTouches[0].clientX-g.x,$=V.changedTouches[0].clientY-g.y;Math.abs(X)>Math.abs($)*1.5&&Math.abs(X)>40&&(X>0&&g.x<=80?o(!0):o(!1))};let W=0;return Si("scroll",uk(()=>{const V=window.scrollY;V<=58||V<W?f.value=!1:W+200<V&&!p.value&&(f.value=!0),W=V},300,!0)),ti(l,V=>{V||o(!1)}),pi(()=>{const V=s8(document.body);ti(p,$=>{V.value=$});const X=e.afterEach(()=>{o(!1)});ue(()=>{V.value=!1,X()})}),()=>E(fs("GlobalEncrypt")?ms("GlobalEncrypt"):Zt,()=>E("div",{class:["theme-container",{"hide-navbar":f.value,"no-navbar":!u.value,"sidebar-collapsed":!l.value&&!r.value&&d.value,"sidebar-open":l.value&&p.value,"no-sidebar":!y.value&&!s.sidebar&&!s.sidebarTop&&!s.sidebarBottom,"external-link-icon":v.value,pure:h.value,"has-toc":D.value},i.containerClass,n.value.containerClass??""],onTouchStart:C,onTouchEnd:L},[u.value?E(au,{onToggleSidebar:()=>o()},{startBefore:s.navbarStartBefore?()=>s.navbarStartBefore():null,startAfter:s.navbarStartAfter?()=>s.navbarStartAfter():null,centerBefore:s.navbarCenterBefore?()=>s.navbarCenterBefore():null,centerAfter:s.navbarCenterAfter?()=>s.navbarCenterAfter():null,endBefore:s.navbarEndBefore?()=>s.navbarEndBefore():null,endAfter:s.navbarEndAfter?()=>s.navbarEndAfter():null,screenTop:s.navScreenTop?()=>s.navScreenTop():null,screenBottom:s.navScreenBottom?()=>s.navScreenBottom():null}):null,E(Se,{name:"fade"},()=>p.value?E("div",{class:"vp-sidebar-mask",onClick:()=>o(!1)}):null),E(Se,{name:"fade"},()=>l.value?null:E("div",{class:"toggle-sidebar-wrapper",onClick:()=>c()},E("span",{class:["arrow",d.value?"end":"start"]}))),E(Eu,{},{default:s.sidebar?()=>s.sidebar():null,top:s.sidebarTop?()=>s.sidebarTop():null,bottom:s.sidebarBottom?()=>s.sidebarBottom():null}),s.default(),E(KA)]))}});const ai=R({name:"DropTransition",props:{type:{type:String,default:"single"},delay:{type:Number,default:0},duration:{type:Number,default:.25},appear:Boolean},slots:Object,setup(i,{slots:s}){const e=t=>{t.style.transition=`transform ${i.duration}s ease-in-out ${i.delay}s, opacity ${i.duration}s ease-in-out ${i.delay}s`,t.style.transform="translateY(-20px)",t.style.opacity="0"},n=t=>{t.style.transform="translateY(0)",t.style.opacity="1"};return()=>{const t={name:"drop",appear:i.appear,onAppear:e,onAfterAppear:n,onEnter:e,onAfterEnter:n,onBeforeLeave:e},a=()=>s.default();return i.type==="group"?E(R9,t,a):E(Se,t,a)}}}),an=({custom:i})=>E(Yl,{class:["theme-hope-content",{custom:i}]});an.displayName="MarkdownContent",an.props={custom:Boolean};const J8=()=>E(ci,{name:"author"},()=>E("path",{d:"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z"}));J8.displayName="AuthorIcon";const Z8=()=>E(ci,{name:"calendar"},()=>E("path",{d:"M716.4 110.137c0-18.753-14.72-33.473-33.472-33.473-18.753 0-33.473 14.72-33.473 33.473v33.473h66.993v-33.473zm-334.87 0c0-18.753-14.72-33.473-33.473-33.473s-33.52 14.72-33.52 33.473v33.473h66.993v-33.473zm468.81 33.52H716.4v100.465c0 18.753-14.72 33.473-33.472 33.473a33.145 33.145 0 01-33.473-33.473V143.657H381.53v100.465c0 18.753-14.72 33.473-33.473 33.473a33.145 33.145 0 01-33.473-33.473V143.657H180.6A134.314 134.314 0 0046.66 277.595v535.756A134.314 134.314 0 00180.6 947.289h669.74a134.36 134.36 0 00133.94-133.938V277.595a134.314 134.314 0 00-133.94-133.938zm33.473 267.877H147.126a33.145 33.145 0 01-33.473-33.473c0-18.752 14.72-33.473 33.473-33.473h736.687c18.752 0 33.472 14.72 33.472 33.473a33.145 33.145 0 01-33.472 33.473z"}));Z8.displayName="CalendarIcon";const io=()=>E(ci,{name:"category"},()=>E("path",{d:"M148.41 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H148.41c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.311-40.31zM147.556 553.478H429.73c22.263 0 40.311 18.048 40.311 40.31v282.176c0 22.263-18.048 40.312-40.31 40.312H147.555c-22.263 0-40.311-18.049-40.311-40.312V593.79c0-22.263 18.048-40.311 40.31-40.311zM593.927 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H593.927c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.31-40.31zM730.22 920.502H623.926c-40.925 0-74.22-33.388-74.22-74.425V623.992c0-41.038 33.387-74.424 74.425-74.424h222.085c41.038 0 74.424 33.226 74.424 74.067v114.233c0 10.244-8.304 18.548-18.547 18.548s-18.548-8.304-18.548-18.548V623.635c0-20.388-16.746-36.974-37.33-36.974H624.13c-20.585 0-37.331 16.747-37.331 37.33v222.086c0 20.585 16.654 37.331 37.126 37.331H730.22c10.243 0 18.547 8.304 18.547 18.547 0 10.244-8.304 18.547-18.547 18.547z"}));io.displayName="CategoryIcon";const so=()=>E(ci,{name:"print"},()=>E("path",{d:"M819.2 364.8h-44.8V128c0-17.067-14.933-32-32-32H281.6c-17.067 0-32 14.933-32 32v236.8h-44.8C145.067 364.8 96 413.867 96 473.6v192c0 59.733 49.067 108.8 108.8 108.8h44.8V896c0 17.067 14.933 32 32 32h460.8c17.067 0 32-14.933 32-32V774.4h44.8c59.733 0 108.8-49.067 108.8-108.8v-192c0-59.733-49.067-108.8-108.8-108.8zM313.6 160h396.8v204.8H313.6V160zm396.8 704H313.6V620.8h396.8V864zM864 665.6c0 25.6-19.2 44.8-44.8 44.8h-44.8V588.8c0-17.067-14.933-32-32-32H281.6c-17.067 0-32 14.933-32 32v121.6h-44.8c-25.6 0-44.8-19.2-44.8-44.8v-192c0-25.6 19.2-44.8 44.8-44.8h614.4c25.6 0 44.8 19.2 44.8 44.8v192z"}));so.displayName="PrintIcon";const eo=()=>E(ci,{name:"tag"},()=>E("path",{d:"M939.902 458.563L910.17 144.567c-1.507-16.272-14.465-29.13-30.737-30.737L565.438 84.098h-.402c-3.215 0-5.726 1.005-7.634 2.913l-470.39 470.39a10.004 10.004 0 000 14.164l365.423 365.424c1.909 1.908 4.42 2.913 7.132 2.913s5.223-1.005 7.132-2.913l470.39-470.39c2.01-2.11 3.014-5.023 2.813-8.036zm-240.067-72.121c-35.458 0-64.286-28.828-64.286-64.286s28.828-64.285 64.286-64.285 64.286 28.828 64.286 64.285-28.829 64.286-64.286 64.286z"}));eo.displayName="TagIcon";const no=()=>E(ci,{name:"timer"},()=>E("path",{d:"M799.387 122.15c4.402-2.978 7.38-7.897 7.38-13.463v-1.165c0-8.933-7.38-16.312-16.312-16.312H256.33c-8.933 0-16.311 7.38-16.311 16.312v1.165c0 5.825 2.977 10.874 7.637 13.592 4.143 194.44 97.22 354.963 220.201 392.763-122.204 37.542-214.893 196.511-220.2 389.397-4.661 5.049-7.638 11.651-7.638 19.03v5.825h566.49v-5.825c0-7.379-2.849-13.981-7.509-18.9-5.049-193.016-97.867-351.985-220.2-389.527 123.24-37.67 216.446-198.453 220.588-392.892zM531.16 450.445v352.632c117.674 1.553 211.787 40.778 211.787 88.676H304.097c0-48.286 95.149-87.382 213.728-88.676V450.445c-93.077-3.107-167.901-81.297-167.901-177.093 0-8.803 6.99-15.793 15.793-15.793 8.803 0 15.794 6.99 15.794 15.793 0 80.261 63.69 145.635 142.01 145.635s142.011-65.374 142.011-145.635c0-8.803 6.99-15.793 15.794-15.793s15.793 6.99 15.793 15.793c0 95.019-73.789 172.82-165.96 177.093z"}));no.displayName="TimerIcon";const to=()=>E(ci,{name:"word"},()=>[E("path",{d:"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z"}),E("path",{d:"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z"})]);to.displayName="WordIcon";const fe=()=>{const i=ri();return F(()=>i.value.metaLocales)};var hu=R({name:"AuthorInfo",inheritAttrs:!1,props:{author:{type:Array,required:!0}},setup(i){const s=fe(),e=Qi();return()=>i.author.length?E("span",{class:"page-author-info","aria-label":`${s.value.author}${e.value?"":"🖊"}`,...e.value?{}:{"data-balloon-pos":"up"}},[E(J8),E("span",i.author.map(n=>n.url?E("a",{class:"page-author-item",href:n.url,target:"_blank",rel:"noopener noreferrer"},n.name):E("span",{class:"page-author-item"},n.name))),E("span",{property:"author",content:i.author.map(n=>n.name).join(", ")})]):null}}),pu=R({name:"CategoryInfo",inheritAttrs:!1,props:{category:{type:Array,required:!0}},setup(i){const s=fe(),e=Me(),n=Qi();return()=>i.category.length?E("span",{class:"page-category-info","aria-label":`${s.value.category}${n.value?"":"🌈"}`,...n.value?{}:{"data-balloon-pos":"up"}},[E(io),i.category.map(({name:t,path:a})=>E("span",{class:["page-category-item",{[`color${at(t,Number(dn.colorNumber))}`]:!n.value,clickable:a}],role:a?"navigation":"",onClick:()=>{a&&e(a)}},t)),E("meta",{property:"articleSection",content:i.category.map(({name:t})=>t).join(",")})]):null}}),ou=R({name:"DateInfo",inheritAttrs:!1,props:{date:{type:Object,default:null},localizedDate:{type:String,default:""}},setup(i){const s=Xl(),e=fe(),n=Qi();return()=>i.date?E("span",{class:"page-date-info","aria-label":`${e.value.date}${n.value?"":"📅"}`,...n.value?{}:{"data-balloon-pos":"up"}},[E(Z8),E("span",E(Qt,()=>i.localizedDate||i.date.toLocaleDateString(s.value))),E("meta",{property:"datePublished",content:i.date.toISOString()||""})]):null}}),du=R({name:"OriginalInfo",inheritAttrs:!1,props:{isOriginal:Boolean},setup(i){const s=fe();return()=>i.isOriginal?E("span",{class:"page-original-info"},s.value.origin):null}}),cu=R({name:"ReadingTimeInfo",inheritAttrs:!1,props:{readingTime:{type:Object,default:()=>null},readingTimeLocale:{type:Object,default:()=>null}},setup(i){const s=fe(),e=Qi(),n=F(()=>{if(!i.readingTime)return null;const{minutes:t}=i.readingTime;return t<1?"PT1M":`PT${Math.round(t)}M`});return()=>{var t,a;return(t=i.readingTimeLocale)!=null&&t.time?E("span",{class:"page-reading-time-info","aria-label":`${s.value.readingTime}${e.value?"":"⌛"}`,...e.value?{}:{"data-balloon-pos":"up"}},[E(no),E("span",(a=i.readingTimeLocale)==null?void 0:a.time),E("meta",{property:"timeRequired",content:n.value})]):null}}}),Bu=R({name:"TagInfo",inheritAttrs:!1,props:{tag:{type:Array,default:()=>[]}},setup(i){const s=fe(),e=Me(),n=Qi();return()=>i.tag.length?E("span",{class:"page-tag-info","aria-label":`${s.value.tag}${n.value?"":"🏷"}`,...n.value?{}:{"data-balloon-pos":"up"}},[E(eo),i.tag.map(({name:t,path:a})=>E("span",{class:["page-tag-item",{[`color${at(t,Number(dn.colorNumber))}`]:!n.value,clickable:a}],role:a?"navigation":"",onClick:()=>{a&&e(a)}},t)),E("meta",{property:"keywords",content:i.tag.map(({name:t})=>t).join(",")})]):null}}),ku=R({name:"ReadTimeInfo",inheritAttrs:!1,props:{readingTime:{type:Object,default:()=>null},readingTimeLocale:{type:Object,default:()=>null}},setup(i){const s=fe(),e=Qi();return()=>{var n,t,a;return(n=i.readingTimeLocale)!=null&&n.words?E("span",{class:"page-word-info","aria-label":`${s.value.words}${e.value?"":"🔠"}`,...e.value?{}:{"data-balloon-pos":"up"}},[E(to),E("span",(t=i.readingTimeLocale)==null?void 0:t.words),E("meta",{property:"wordCount",content:(a=i.readingTime)==null?void 0:a.words})]):null}}}),ao=R({name:"PageInfo",components:{AuthorInfo:hu,CategoryInfo:pu,DateInfo:ou,OriginalInfo:du,PageViewInfo:wt,ReadingTimeInfo:cu,TagInfo:Bu,WordInfo:ku},props:{items:{type:[Array,Boolean],default:()=>["Author","Original","Date","PageView","ReadingTime","Category","Tag"]},info:{type:Object,required:!0}},setup(i){const s=Qi();return()=>i.items?E("div",{class:"page-info"},i.items.map(e=>E(ms(`${e}Info`),{...i.info,isPure:s.value}))):null}}),Au=R({name:"PrintButton",setup(){const i=Ns(),s=ri();return()=>i.value.print===!1?null:E("button",{type:"button",class:"print-button",title:s.value.metaLocales.print,onClick:()=>{window.print()}},E(so))}}),lo=R({name:"TOC",props:{items:{type:Array,default:()=>[]},headerDepth:{type:Number,default:2}},slots:Object,setup(i,{slots:s}){const e=$s(),n=bi(),t=fe(),[a,l]=rl(),r=Pi(),h=G("-1.7rem"),p=d=>{var c;(c=r.value)==null||c.scrollTo({top:d,behavior:"smooth"})},o=()=>{if(r.value){const d=document.querySelector(".vp-toc-item.active");d?h.value=`${d.getBoundingClientRect().top-r.value.getBoundingClientRect().top+r.value.scrollTop}px`:h.value="-1.7rem"}else h.value="-1.7rem"};return pi(()=>{ti(()=>e.hash,d=>{if(r.value){const c=document.querySelector(`#toc a.vp-toc-link[href$="${d}"]`);if(!c)return;const{top:k,height:f}=r.value.getBoundingClientRect(),{top:u,height:y}=c.getBoundingClientRect();u<k?p(r.value.scrollTop+u-k):u+y>k+f&&p(r.value.scrollTop+u+y-k-f)}}),ti(()=>e.fullPath,o,{flush:"post",immediate:!0})}),()=>{var f,u;const d=({title:y,level:v,slug:D})=>E(Ii,{to:`#${D}`,class:["vp-toc-link",`level${v}`],onClick:()=>{l()}},()=>y),c=(y,v)=>y.length&&v>0?E("ul",{class:"vp-toc-list"},y.map(D=>{const g=c(D.children,v-1);return[E("li",{class:["vp-toc-item",{active:e.hash===`#${D.slug}`}]},d(D)),g?E("li",g):null]})):null,k=i.items.length?c(i.items,i.headerDepth):n.value.headers?c(n.value.headers,i.headerDepth):null;return k?E("div",{class:"vp-toc-placeholder"},[E("aside",{id:"toc"},[(f=s.before)==null?void 0:f.call(s),E("div",{class:"vp-toc-header",onClick:()=>{l()}},[t.value.toc,E(Au),E("div",{class:["arrow",a.value?"down":"end"]})]),E("div",{class:["vp-toc-wrapper",a.value?"open":""],ref:r},[k,E("div",{class:"vp-toc-marker",style:{top:h.value}})]),(u=s.after)==null?void 0:u.call(s)])]):null}}}),pr=R({name:"SkipLink",props:{content:{type:String,default:"main-content"}},setup(i){const s=bi(),e=ri(),n=Pi(),t=({target:a})=>{const l=document.querySelector(a.hash);if(l){const r=()=>{l.removeAttribute("tabindex"),l.removeEventListener("blur",r)};l.setAttribute("tabindex","-1"),l.addEventListener("blur",r),l.focus(),window.scrollTo(0,0)}};return pi(()=>{ti(()=>s.value.path,()=>n.value.focus())}),()=>[E("span",{ref:n,tabindex:"-1"}),E("a",{href:`#${i.content}`,class:"vp-skip-link sr-only",onClick:t},e.value.routeLocales.skipToContent)]}});let Pa=null,mn=null;const cl={wait:()=>Pa,pending:()=>{Pa=new Promise(i=>{mn=i})},resolve:()=>{mn==null||mn(),Pa=null,mn=null}},or=(i,{slots:s})=>E(Se,{name:"fade-slide-y",mode:"out-in",onBeforeEnter:cl.resolve,onBeforeLeave:cl.pending},()=>s.default());or.displayName="FadeSlideY";const uu=(i,s)=>{const e=i.replace(s,"/").split("/"),n=[];let t=Gl(s);return e.forEach((a,l)=>{l!==e.length-1?(t+=`${a}/`,n.push({link:t,name:a||"Home"})):a!==""&&(t+=a,n.push({link:t,name:a}))}),n},jE=(i,s)=>i===!1?i:it(i)?{...i,link:Vt(i.link,!0,s).link}:wi(i)?Vt(i,!0,s):null,Bl=(i,s,e)=>{const n=i.findIndex(a=>a.link===s);if(n!==-1){const a=i[n+e];return a?a.link?a:"prefix"in a&&!vs(a.prefix).notFound?{...a,link:a.prefix}:null:null}for(const a of i)if("children"in a){const l=Bl(a.children,s,e);if(l)return l}const t=i.findIndex(a=>"prefix"in a&&a.prefix===s);if(t!==-1){const a=i[t+e];return a?a.link?a:"prefix"in a&&!vs(a.prefix).notFound?{...a,link:a.prefix}:null:null}return null},gu=()=>{const i=Bi(),s=ri(),e=Er(),n=$s(),t=F(()=>{const l=jE(i.value.prev,n.path);return l===!1?null:l??(s.value.prevLink===!1?null:Bl(e.value,n.path,-1))}),a=F(()=>{const l=jE(i.value.next,n.path);return l===!1?null:l??(s.value.nextLink===!1?null:Bl(e.value,n.path,1))});return{prevLink:t,nextLink:a}},kl=(i,{slots:s})=>{var d,c;const{bgImage:e,bgImageDark:n,bgImageStyle:t,color:a,description:l,image:r,imageDark:h,header:p,features:o=[]}=i;return E("div",{class:"vp-feature-wrapper"},[e?E("div",{class:["vp-feature-bg",{light:n}],style:[{"background-image":`url(${e})`},t]}):null,n?E("div",{class:"vp-feature-bg dark",style:[{"background-image":`url(${n})`},t]}):null,E("div",{class:"vp-feature",style:a?{color:a}:{}},[((d=s.image)==null?void 0:d.call(s,i))??[r?E("img",{class:["vp-feature-image",{light:h}],src:yi(r),alt:""}):null,h?E("img",{class:"vp-feature-image dark",src:yi(h),alt:""}):null],((c=s.info)==null?void 0:c.call(s,i))??[p?E("h2",{class:"vp-feature-header"},p):null,l?E("p",{class:"vp-feature-description",innerHTML:l}):null],o.length?E("div",{class:"vp-features"},o.map(({icon:k,title:f,details:u,link:y})=>{const v=[E("h3",{class:"vp-feature-title"},[E(zi,{icon:k}),E("span",{innerHTML:f})]),E("p",{class:"vp-feature-details",innerHTML:u})];return y?jl(y)?E("a",{class:"vp-feature-item link",href:y,"aria-label":f,target:"_blank"},v):E(Ii,{class:"vp-feature-item link",to:y,"aria-label":f},()=>v):E("div",{class:"vp-feature-item"},v)})):null])])};kl.displayName="FeaturePanel";var mu=R({name:"HeroInfo",slots:Object,setup(i,{slots:s}){const e=Bi(),n=hn(),t=F(()=>e.value.heroFullScreen??!1),a=F(()=>{const{heroText:p,tagline:o}=e.value;return{text:p??n.value.title??"Hello",tagline:o??n.value.description??"",isFullScreen:t.value}}),l=F(()=>{const{heroText:p,heroImage:o,heroImageDark:d,heroAlt:c,heroImageStyle:k}=e.value;return{image:o?yi(o):null,imageDark:d?yi(d):null,imageStyle:k,alt:c??p??"",isFullScreen:t.value}}),r=F(()=>{const{bgImage:p,bgImageDark:o,bgImageStyle:d}=e.value;return{image:wi(p)?yi(p):null,imageDark:wi(o)?yi(o):null,bgStyle:d,isFullScreen:t.value}}),h=F(()=>e.value.actions??[]);return()=>{var p,o,d;return E("header",{class:["vp-hero-info-wrapper",{fullscreen:t.value}]},[((p=s.bg)==null?void 0:p.call(s,r.value))??[r.value.image?E("div",{class:["vp-hero-mask",{light:r.value.imageDark}],style:[{"background-image":`url(${r.value.image})`},r.value.bgStyle]}):null,r.value.imageDark?E("div",{class:"vp-hero-mask dark",style:[{"background-image":`url(${r.value.imageDark})`},r.value.bgStyle]}):null],E("div",{class:"vp-hero-info"},[((o=s.logo)==null?void 0:o.call(s,l.value))??E(ai,{appear:!0,type:"group"},()=>{const{image:c,imageDark:k,imageStyle:f,alt:u}=l.value;return[c?E("img",{key:"light",class:["vp-hero-image",{light:k}],style:f,src:c,alt:u}):null,k?E("img",{key:"dark",class:"vp-hero-image dark",style:f,src:k,alt:u}):null]}),((d=s.info)==null?void 0:d.call(s,a.value))??E("div",{class:"vp-hero-infos"},[a.value.text?E(ai,{appear:!0,delay:.04},()=>E("h1",{id:"main-title",class:"vp-hero-title"},a.value.text)):null,a.value.tagline?E(ai,{appear:!0,delay:.08},()=>E("p",{id:"main-description",innerHTML:a.value.tagline})):null,h.value.length?E(ai,{appear:!0,delay:.12},()=>E("p",{class:"vp-hero-actions"},h.value.map(c=>E(ss,{class:["vp-hero-action",c.type??"default","no-external-link-icon"],config:c},c.icon?{before:()=>E(zi,{icon:c.icon})}:{})))):null])])])}}});const ro=(i,{slots:s})=>{var c,k,f;const{bgImage:e,bgImageDark:n,bgImageStyle:t,color:a,description:l,image:r,imageDark:h,header:p,highlights:o=[],type:d="un-order"}=i;return E("div",{class:"vp-highlight-wrapper",style:a?{color:a}:{}},[e?E("div",{class:["vp-highlight-bg",{light:n}],style:[{"background-image":`url(${e})`},t]}):null,n?E("div",{class:"vp-highlight-bg dark",style:[{"background-image":`url(${n})`},t]}):null,E("div",{class:"vp-highlight"},[((c=s.image)==null?void 0:c.call(s,i))??[r?E("img",{class:["vp-highlight-image",{light:h}],src:yi(r),alt:""}):null,h?E("img",{class:"vp-highlight-image dark",src:yi(h),alt:""}):null],((k=s.info)==null?void 0:k.call(s,i))??[E("div",{class:"vp-highlight-info-wrapper"},E("div",{class:"vp-highlight-info"},[p?E("h2",{class:"vp-highlight-header",innerHTML:p}):null,l?E("p",{class:"vp-highlight-description",innerHTML:l}):null,((f=s.highlights)==null?void 0:f.call(s,o))??E(d==="order"?"ol":d==="no-order"?"dl":"ul",{class:"vp-highlights"},o.map(({icon:u,title:y,details:v,link:D})=>{const g=[E(d==="no-order"?"dt":"h3",{class:"vp-highlight-title"},[u?E(zi,{class:"vp-highlight-icon",icon:u}):null,E("span",{innerHTML:y})]),v?E(d==="no-order"?"dd":"p",{class:"vp-highlight-details",innerHTML:v}):null];return E(d==="no-order"?"div":"li",{class:["vp-highlight-item-wrapper",{link:D}]},D?jl(D)?E("a",{class:"vp-highlight-item link",href:D,"aria-label":y,target:"_blank"},g):E(Ii,{class:"vp-highlight-item link",to:D,"aria-label":y},()=>g):E("div",{class:"vp-highlight-item"},g))}))]))]])])};ro.displayName="HighlightPanel";var fu=R({name:"HomePage",slots:Object,setup(i,{slots:s}){const e=Bi(),n=F(()=>{const{features:a}=e.value;return al(a)?a:null}),t=F(()=>{const{highlights:a}=e.value;return al(a)?a:null});return()=>{var a,l,r,h;return E("main",{id:"main-content",class:"vp-page vp-project-home","aria-labelledby":e.value.heroText===null?"":"main-title"},[(a=s.top)==null?void 0:a.call(s),E(mu),((l=t.value)==null?void 0:l.map(p=>"features"in p?E(kl,p):E(ro,p)))??(n.value?E(ai,{appear:!0,delay:.24},()=>E(kl,{features:n.value})):null),(r=s.center)==null?void 0:r.call(s),E(ai,{appear:!0,delay:.32},()=>E(an)),(h=s.bottom)==null?void 0:h.call(s)])}}}),vu=R({name:"BreadCrumb",setup(){const i=bi(),s=Fs(),e=Bi(),n=ri(),t=Pi([]),a=F(()=>(e.value.breadcrumb??n.value.breadcrumb??!0)&&t.value.length>1),l=F(()=>e.value.breadcrumbIcon??n.value.breadcrumbIcon??!0),r=()=>{const h=uu(i.value.path,s.value).map(({link:p,name:o})=>{const{path:d,meta:c,notFound:k}=vs(p);return k||c[Xi.breadcrumbExclude]?null:{title:c[Xi.shortTitle]||c[Xi.title]||o,icon:c[Xi.icon],path:d}}).filter(p=>p!==null);h.length>1&&(t.value=h)};return pi(()=>{ti(()=>i.value.path,r,{immediate:!0})}),()=>E("nav",{class:["vp-breadcrumb",{disable:!a.value}]},a.value?E("ol",{vocab:"https://schema.org/",typeof:"BreadcrumbList"},t.value.map((h,p)=>E("li",{class:{"is-active":t.value.length-1===p},property:"itemListElement",typeof:"ListItem"},[E(Ii,{to:h.path,property:"item",typeof:"WebPage"},()=>[l.value?E(zi,{icon:h.icon}):null,E("span",{property:"name"},h.title||"Unknown")]),E("meta",{property:"position",content:p+1})]))):[])}}),yu=R({name:"PageNav",setup(){const i=ri(),s=Me(),{prevLink:e,nextLink:n}=gu();return Si("keydown",t=>{t.altKey&&(t.key==="ArrowRight"?n.value&&(s(n.value.link),t.preventDefault()):t.key==="ArrowLeft"&&e.value&&(s(e.value.link),t.preventDefault()))}),()=>e.value||n.value?E("nav",{class:"vp-page-nav"},[e.value?E(ss,{class:"prev",config:e.value},()=>{var t,a;return[E("div",{class:"hint"},[E("span",{class:"arrow start"}),i.value.metaLocales.prev]),E("div",{class:"link"},[E(zi,{icon:(t=e.value)==null?void 0:t.icon}),(a=e.value)==null?void 0:a.text])]}):null,n.value?E(ss,{class:"next",config:n.value},()=>{var t,a;return[E("div",{class:"hint"},[i.value.metaLocales.next,E("span",{class:"arrow end"})]),E("div",{class:"link"},[(t=n.value)==null?void 0:t.text,E(zi,{icon:(a=n.value)==null?void 0:a.icon})])]}):null]):null}});const Fu=()=>{const i=ri(),s=bi(),e=Bi();return F(()=>{var n;return e.value.contributors??i.value.contributors??!0?((n=s.value.git)==null?void 0:n.contributors)??null:null})},Cu={GitHub:":repo/edit/:branch/:path",GitLab:":repo/-/edit/:branch/:path",Gitee:":repo/edit/:branch/:path",Bitbucket:":repo/src/:branch/:path?mode=edit&spa=0&at=:branch&fileviewer=file-view-default"},Du=({docsRepo:i,docsBranch:s,docsDir:e,filePathRelative:n,editLinkPattern:t})=>{if(!n)return null;const a=tr(i);let l;return t?l=t:a!==null&&(l=Cu[a]),l?l.replace(/:repo/u,Ie(i)?i:`https://github.com/${i}`).replace(/:branch/u,s).replace(/:path/u,mp(`${Gl(e)}/${n}`)):null},bu=()=>{const i=ri(),s=bi(),e=Bi();return F(()=>{const{repo:n,docsRepo:t=n,docsBranch:a="main",docsDir:l="",editLink:r,editLinkPattern:h=""}=i.value;if(!(e.value.editLink??r??!0)||!t)return null;const p=Du({docsRepo:t,docsBranch:a,docsDir:l,editLinkPattern:h,filePathRelative:s.value.filePathRelative});return p?{text:i.value.metaLocales.editLink,link:p}:null})},_u=()=>{const i=hn(),s=ri(),e=bi(),n=Bi();return F(()=>{var t,a;return!(n.value.lastUpdated??s.value.lastUpdated??!0)||!((t=e.value.git)!=null&&t.updatedTime)?null:new Date((a=e.value.git)==null?void 0:a.updatedTime).toLocaleString(i.value.lang)})};var wu=R({name:"PageTitle",setup(){const i=bi(),s=Bi(),e=ri(),{info:n,items:t}=NA();return()=>E("div",{class:"vp-page-title"},[E("h1",[e.value.titleIcon===!1?null:E(zi,{icon:s.value.icon}),i.value.title]),E(ao,{info:n.value,...t.value===null?{}:{items:t.value}}),E("hr")])}});const Eo=()=>E(ci,{name:"edit"},()=>[E("path",{d:"M430.818 653.65a60.46 60.46 0 0 1-50.96-93.281l71.69-114.012 7.773-10.365L816.038 80.138A60.46 60.46 0 0 1 859.225 62a60.46 60.46 0 0 1 43.186 18.138l43.186 43.186a60.46 60.46 0 0 1 0 86.373L588.879 565.55l-8.637 8.637-117.466 68.234a60.46 60.46 0 0 1-31.958 11.229z"}),E("path",{d:"M728.802 962H252.891A190.883 190.883 0 0 1 62.008 771.98V296.934a190.883 190.883 0 0 1 190.883-192.61h267.754a60.46 60.46 0 0 1 0 120.92H252.891a69.962 69.962 0 0 0-69.098 69.099V771.98a69.962 69.962 0 0 0 69.098 69.098h475.911A69.962 69.962 0 0 0 797.9 771.98V503.363a60.46 60.46 0 1 1 120.922 0V771.98A190.883 190.883 0 0 1 728.802 962z"})]);Eo.displayName="EditIcon";var xu=R({name:"PageMeta",setup(){const i=ri(),s=bu(),e=_u(),n=Fu();return()=>{var a;const{metaLocales:t}=i.value;return E("footer",{class:"vp-page-meta"},[s.value?E("div",{class:"vp-meta-item edit-link"},E(ss,{class:"vp-meta-label",config:s.value},{before:()=>E(Eo)})):null,E("div",{class:"vp-meta-item git-info"},[e.value?E("div",{class:"update-time"},[E("span",{class:"vp-meta-label"},`${t.lastUpdated}: `),E(Qt,()=>E("span",{class:"vp-meta-info"},e.value))]):null,(a=n.value)!=null&&a.length?E("div",{class:"contributors"},[E("span",{class:"vp-meta-label"},`${t.contributors}: `),n.value.map(({email:l,name:r},h)=>[E("span",{class:"vp-meta-info",title:`email: ${l}`},r),h!==n.value.length-1?",":""])]):null])])}}}),Tu=R({name:"NormalPage",slots:Object,setup(i,{slots:s}){const e=Bi(),{isDarkmode:n}=rt(),t=ri(),a=F(()=>e.value.toc??t.value.toc??!0),l=F(()=>e.value.headerDepth??t.value.headerDepth??2);return()=>E("main",{id:"main-content",class:"vp-page"},E(fs("LocalEncrypt")?ms("LocalEncrypt"):Zt,()=>{var r,h,p,o;return[(r=s.top)==null?void 0:r.call(s),e.value.cover?E("div",{class:"page-cover"},E("img",{src:yi(e.value.cover),alt:"","no-view":""})):null,E(vu),E(wu),a.value?E(lo,{headerDepth:l.value},{before:s.tocBefore?()=>s.tocBefore():null,after:s.tocAfter?()=>s.tocAfter():null}):null,(h=s.contentBefore)==null?void 0:h.call(s),E(an),(p=s.contentAfter)==null?void 0:p.call(s),E(xu),E(yu),fs("CommentService")?E(ms("CommentService"),{darkmode:n.value}):null,(o=s.bottom)==null?void 0:o.call(s)]}))}}),Pu=R({name:"PortfolioHero",slots:Object,setup(i,{slots:s}){const e=S8(),n=Bi(),t=G(0),a=F(()=>{var c;return((c=n.value.titles)==null?void 0:c[t.value])??""}),l=G(""),r=F(()=>{const{name:c,avatar:k,avatarDark:f,avatarAlt:u,avatarStyle:y}=n.value;return{name:c??e.value.name,avatar:k?yi(k):null,avatarDark:f?yi(f):null,avatarStyle:y,alt:(u||c)??""}}),h=F(()=>{const{bgImage:c,bgImageDark:k,bgImageStyle:f}=n.value;return{image:wi(c)?yi(c):null,imageDark:wi(k)?yi(k):null,bgStyle:f}}),p=F(()=>{const{welcome:c,name:k,titles:f,medias:u}=n.value;return{name:k??e.value.name,welcome:c??"👋 Hi There, I'm",title:l.value,titles:f??[],medias:u??[]}}),o=()=>{l.value="";let c=0,k=!1;const f=async()=>{if(!k)if(l.value+=a.value[c],c+=1,await ys(),c<a.value.length)setTimeout(()=>{f()},150);else{const u=p.value.titles.length;setTimeout(()=>{t.value=u<=1||t.value===p.value.titles.length-1?0:t.value+1},1e3)}};return f(),()=>{k=!0}};let d;return pi(()=>{ti(a,()=>{d==null||d(),d=o()},{immediate:!0})}),()=>{var c,k,f;return E("section",{id:"portfolio",class:["vp-portfolio",{bg:h.value.image}]},[((c=s.bg)==null?void 0:c.call(s,h.value))??[h.value.image?E("div",{class:["vp-portfolio-mask",{light:h.value.imageDark}],style:[{background:`url(${h.value.image}) center/cover no-repeat`},h.value.bgStyle]}):null,h.value.imageDark?E("div",{class:"vp-portfolio-mask dark",style:[{background:`url(${h.value.imageDark}) center/cover no-repeat`},h.value.bgStyle]}):null],((k=s.avatar)==null?void 0:k.call(s,r.value))??E("div",{class:"vp-portfolio-avatar"},[E(ai,{delay:.04},()=>{const{avatarDark:u,name:y,alt:v,avatarStyle:D}=r.value;return[E("img",{key:"light",class:{light:u},src:r.value.avatar,title:y,alt:v,style:D}),u?E("img",{key:"dark",class:"dark",src:u,title:y,alt:v,style:D}):null]})]),E("div",{class:"vp-portfolio-container"},((f=s.info)==null?void 0:f.call(s,p.value))??E("div",{class:"vp-portfolio-info"},[E(ai,{appear:!0,delay:.08},()=>E("h6",{class:"vp-portfolio-welcome"},p.value.welcome)),E(ai,{appear:!0,delay:.12},()=>E("h1",{class:"vp-portfolio-name",id:"main-title"},p.value.name)),E(ai,{appear:!0,delay:.16},()=>E("h2",{class:"vp-portfolio-title"},l.value)),E(ai,{appear:!0,delay:.2},()=>p.value.medias.length?E("div",{class:"vp-portfolio-medias"},p.value.medias.map(({name:u,url:y,icon:v})=>E("a",{class:"vp-portfolio-media",href:y,rel:"noopener noreferrer",target:"_blank",title:u},E(zi,{icon:v})))):fs("SocialMedias")?E(ms("SocialMedias")):null)]))])}}}),Lu=R({name:"PortfolioHome",setup(){const i=Bi(),s=F(()=>i.value.content??"portfolio");return()=>E("main",{id:"main-content",class:"vp-page vp-portfolio-home","aria-labelledby":"main-title"},[E(Pu),s.value==="none"?null:E("div",{},E(ai,{appear:!0,delay:.24},()=>E(an,{class:{"vp-portfolio-content":s.value==="portfolio"}})))])}}),Su=R({name:"Layout",slots:Object,setup(i,{slots:s}){const e=Ns(),n=ri(),t=bi(),a=Bi(),l=Qi(),{isMobile:r}=lt(),h=F(()=>{var p,o;return((p=n.value.blog)==null?void 0:p.sidebarDisplay)??((o=e.value.blog)==null?void 0:o.sidebarDisplay)??"mobile"});return()=>[E(pr),E(hr,{},{default:()=>{var p;return((p=s.default)==null?void 0:p.call(s))??(a.value.portfolio?E(Lu):a.value.home?E(fu):E(l.value?Zt:or,()=>E(Tu,{key:t.value.path},{top:s.top?()=>s.top():null,bottom:s.bottom?()=>s.bottom():null,contentBefore:s.contentBefore?()=>s.contentBefore():null,contentAfter:s.contentAfter?()=>s.contentAfter():null,tocBefore:s.tocBefore?()=>s.tocBefore():null,tocAfter:s.tocAfter?()=>s.tocAfter():null})))},navScreenBottom:h.value==="none"&&fs("BloggerInfo")?()=>E(ms("BloggerInfo")):null,sidebar:!r.value&&h.value==="always"&&fs("BloggerInfo")?()=>E(ms("BloggerInfo")):null})]}}),Ou=R({name:"NotFoundHint",setup(){const i=ri(),s=()=>{const e=i.value.routeLocales.notFoundMsg;return e[Math.floor(Math.random()*e.length)]};return()=>E("div",{class:"not-found-hint"},[E("p",{class:"error-code"},"404"),E("h1",{class:"error-title"},i.value.routeLocales.notFoundTitle),E("p",{class:"error-hint"},s())])}}),Iu=R({name:"NotFound",slots:Object,setup(i,{slots:s}){const e=me(),n=Fs(),t=ri();return()=>[E(pr),E(hr,{noSidebar:!0},()=>{var a;return E("main",{id:"main-content",class:"vp-page not-found"},((a=s.default)==null?void 0:a.call(s))??[E(Ou),E("div",{class:"actions"},[E("button",{type:"button",class:"action-button",onClick:()=>{window.history.go(-1)}},t.value.routeLocales.back),E("button",{type:"button",class:"action-button",onClick:()=>{e.push(t.value.home??n.value)}},t.value.routeLocales.home)])])})]}});const Ru={Zhihu:'<svg xmlns="http://www.w3.org/2000/svg" class="icon zhihu-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#006CE2"/><path fill="#fff" d="M513.65 491.261H411.551c1.615-16.154 5.815-60.095 5.815-84.973 0-24.88-.323-60.742-.323-60.742h102.744V329.39c0-21.647-9.37-31.34-17.124-31.34h-178.67s5.169-17.77 10.015-36.186c4.846-18.417 15.832-44.264 15.832-44.264-63.003 4.2-67.958 50.941-81.743 92.729-13.787 41.785-24.556 62.356-44.586 107.912 27.786 0 55.249-13.57 66.879-32.309 11.631-18.74 16.908-40.71 16.908-40.71h62.035v59.019c0 21.107-3.878 87.45-3.878 87.45H254.742c-19.386 0-29.724 48.894-29.724 48.894h133.76c-8.4 75.82-26.493 106.191-51.91 152.716-25.418 46.525-92.728 99.406-92.728 99.406 41.033 11.63 86.589-3.555 105.974-21.972 19.386-18.417 35.863-49.756 47.817-72.838 11.954-23.081 21.972-65.124 21.972-65.124L498.462 766.86s4.846-24.233 6.461-39.418c1.616-15.186-.755-26.385-4.63-35.433-3.878-9.046-15.509-21.54-31.018-39.634-15.507-18.094-48.034-52.879-48.034-52.879s-15.832 11.63-28.108 21.001c9.046-21.97 16.262-79.695 16.262-79.695h122.343v-20.249c.003-17.66-7.319-29.29-18.089-29.29zm287.337-200.747h-234.35a4.308 4.308 0 0 0-4.309 4.308v435.099a4.308 4.308 0 0 0 4.308 4.308h40.226l14.7 50.402 81.096-50.402h98.328a4.308 4.308 0 0 0 4.308-4.308v-435.1a4.308 4.308 0 0 0-4.308-4.308zM755.97 684.47h-52.343l-61.548 39.095-10.823-39.095h-18.738V338.116H755.97v346.355z"/></svg>',Github:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>',Gitee:'<svg xmlns="http://www.w3.org/2000/svg" class="icon gitee-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#C71D23"/><path fill="#fff" d="M772.953 454.723H480.17v.006a25.46 25.46 0 0 0-25.46 25.453l-.025 63.649a25.46 25.46 0 0 0 25.46 25.466l178.242-.007a25.46 25.46 0 0 1 25.459 25.46v12.73c0 42.18-34.198 76.378-76.378 76.378H365.583a25.46 25.46 0 0 1-25.46-25.46V416.533h-.006c0-42.18 34.192-76.378 76.378-76.378h356.388v-.013a25.46 25.46 0 0 0 25.46-25.446l.057-63.65h.013a25.46 25.46 0 0 0-25.46-25.471l-356.432.012c-105.453 0-190.946 85.493-190.946 190.946v356.433a25.46 25.46 0 0 0 25.46 25.46H626.56c94.913 0 171.852-76.94 171.852-171.852V480.182a25.46 25.46 0 0 0-25.46-25.46z"/></svg>'},Mu={category:{"/":{path:"/category/",map:{编程语言:{path:"/category/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/",indexes:[0,1,2,3,4,5,6,7,8,9]}}}},tag:{"/":{path:"/tag/",map:{hook:{path:"/tag/hook/",indexes:[10,11,12]},linux:{path:"/tag/linux/",indexes:[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126]},并发编程:{path:"/tag/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/",indexes:[127]},线程:{path:"/tag/%E7%BA%BF%E7%A8%8B/",indexes:[128]},环境变量:{path:"/tag/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/",indexes:[129]},文件锁:{path:"/tag/%E6%96%87%E4%BB%B6%E9%94%81/",indexes:[130]},syslog日志服务:{path:"/tag/syslog%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1/",indexes:[131]},进程丢失:{path:"/tag/%E8%BF%9B%E7%A8%8B%E4%B8%A2%E5%A4%B1/",indexes:[132]},"段错误 core":{path:"/tag/%E6%AE%B5%E9%94%99%E8%AF%AF-core/",indexes:[133]},load:{path:"/tag/load/",indexes:[134]},"c++链接":{path:"/tag/c__%E9%93%BE%E6%8E%A5/",indexes:[135]},iptables:{path:"/tag/iptables/",indexes:[136]},内存管理:{path:"/tag/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",indexes:[137]},"linux 日志":{path:"/tag/linux-%E6%97%A5%E5%BF%97/",indexes:[138]},umask:{path:"/tag/umask/",indexes:[139]},"tempfs /dev/shm":{path:"/tag/tempfs-devshm/",indexes:[140]},进程状态:{path:"/tag/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81/",indexes:[141]},"c++":{path:"/tag/c__/",indexes:[142,5,9]},stl:{path:"/tag/stl/",indexes:[2]},scanf:{path:"/tag/scanf/",indexes:[4]},go:{path:"/tag/go/",indexes:[143,144,145,146,147,148,149,150,151,152,153,154,155,156,0,1,3,6,7,8]},端口:{path:"/tag/%E7%AB%AF%E5%8F%A3/",indexes:[157]}}}}},ho=["/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/2.go%E8%AF%AD%E8%A8%80defer%E5%85%B3%E9%94%AE%E5%AD%97%E6%B5%85%E6%9E%90.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/2.go%E8%AF%AD%E8%A8%80%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%8E%B7%E5%8F%96%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/6.STL%E5%AE%B9%E5%99%A8%E5%AD%98%E6%94%BE%E5%AF%B9%E8%B1%A1%E8%BF%98%E6%98%AF%E6%8C%87%E9%92%88.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/5.go%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/7.scanf%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/9.string%E4%B8%8Ememset%E7%9A%84%E9%97%AE%E9%A2%98.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/3.go%E8%AF%AD%E8%A8%80%E4%B8%89%E4%B8%AA%E7%82%B9%E7%9A%84%E6%84%8F%E4%B9%89.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/4.go%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/9.%E6%97%B6%E9%97%B4%E6%88%B3%E5%92%8C%E6%97%B6%E9%97%B4%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/8.c__%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/1.%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAhook%E5%BA%93.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/3.%E5%A6%82%E4%BD%95hook%E5%87%BD%E6%95%B0calloc.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/xhook.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/2.preload%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/ELF%E6%96%87%E4%BB%B6.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/hook%E5%8A%A8%E6%80%81%E5%BA%93.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/malloc%E7%9A%84hook%E6%96%B9%E6%B3%95.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/preload.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/%E5%95%8A%E6%9C%AA%E6%80%BB%E7%BB%93.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/%E5%BA%93%E5%87%BD%E6%95%B0%E6%89%93%E6%A1%A9.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/%E6%8F%92%E6%A1%A9.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/%E9%87%8D%E8%BD%BDnew%E5%92%8Cdelete.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%98%9F%E5%88%97/1.%E6%B5%85%E8%B0%88%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%98%9F%E5%88%97.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3.%E5%9F%BA%E7%A1%80%E5%8F%98%E9%87%8F%E7%9A%84%E5%90%8C%E6%AD%A5%E9%9C%80%E8%A6%81%E5%8A%A0%E9%94%81%E5%90%97.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/2.system%E5%92%8Cpopen%E5%87%BD%E6%95%B0.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/sysconf.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/1.%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%92%8C%E6%94%B6%E5%8F%91%E7%BD%91%E7%BB%9C%E5%8C%85%E6%B5%81%E7%A8%8B.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/2.C10K%E5%92%8CC000K%E5%92%8CC10M%E9%97%AE%E9%A2%98.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/3.DNS%E8%AE%A4%E8%AF%86.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/DDos%E6%94%BB%E5%87%BB.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/1.%E8%A1%A1%E9%87%8F%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%E5%92%8C%E5%B7%A5%E5%85%B7.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/3.%E8%AF%84%E4%BC%B0%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/%E6%9C%AA%E6%80%BB%E7%BB%93---%E4%BD%BF%E7%94%A8wireshark%E6%8A%93%E5%8F%96TLS%E5%8C%85.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/%E7%BD%91%E7%BB%9C%E4%B8%A2%E5%8C%85%E6%80%BB%E7%BB%93.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/1.CPU%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/2.%E5%B9%B3%E5%9D%87%E8%B4%9F%E8%BD%BD.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/4.%E4%B8%AD%E6%96%AD.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/1.pidstat%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E5%8D%A0%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E6%83%85%E5%86%B5.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/2.mpstat%E6%9F%A5%E7%9C%8BCPU%E6%80%A7%E8%83%BD.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/3.vmstat%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/4.stress%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/perf%E5%91%BD%E4%BB%A4.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/1.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/10.mmap%E6%8A%80%E6%9C%AF.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/3.%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%9A%84%E5%88%86%E6%AE%B5%E5%92%8C%E5%88%86%E9%A1%B5.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/6.buff%E5%92%8Ccache.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/8.%E7%BC%93%E5%AD%98%E5%91%BD%E4%B8%AD%E7%8E%87.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/swap%E5%8E%9F%E7%90%86.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/2.%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/3.%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E6%8E%92%E6%9F%A5%E4%B8%8E%E5%AE%9A%E4%BD%8D.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/%E5%86%85%E5%AD%98%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E9%87%8A%E6%94%BE.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/1.%E7%A3%81%E7%9B%98%E5%92%8C%E6%9F%A5%E7%9C%8B%E6%80%A7%E8%83%BD.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/3.IO%E5%A4%8D%E7%94%A8.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/5.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%92%8C%E6%9F%A5%E7%9C%8B%E6%80%A7%E8%83%BD.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/6.DMA%E5%92%8C%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/8.%E6%83%8A%E7%BE%A4%E6%95%88%E5%BA%94.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/1.%E8%BF%9B%E7%A8%8B%E6%A0%88%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%A0%88%E5%92%8C%E5%86%85%E6%A0%B8%E6%A0%88%E5%92%8C%E4%B8%AD%E6%96%AD%E6%A0%88.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/4.fork%E5%AE%9E%E7%8E%B0.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%89%B9%E6%AE%8A%E7%9A%84IP%E5%9C%B0%E5%9D%80.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/1.%E5%8F%AF%E6%89%A9%E5%B1%95%E6%9E%B6%E6%9E%84%E7%9A%84%E6%80%9D%E6%83%B3.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/2.%E5%BE%AE%E5%86%85%E6%A0%B8.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/3.%E5%BE%AE%E6%9C%8D%E5%8A%A1.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/1.%E5%AD%98%E5%82%A8%E6%9E%B6%E6%9E%84-%E9%9B%86%E7%BE%A4%E5%92%8C%E5%88%86%E5%8C%BA.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/2.%E5%AD%98%E5%82%A8%E6%9E%B6%E6%9E%84-%E5%8F%8C%E6%9C%BA%E6%9E%B6%E6%9E%84.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/3.%E8%AE%A1%E7%AE%97%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/4.%E5%BC%82%E5%9C%B0%E5%A4%9A%E6%B4%BB.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/5.%E6%8E%A5%E5%8F%A3%E7%BA%A7%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/6.CAP%E7%90%86%E8%AE%BA.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/7.%E5%A6%82%E4%BD%95%E6%8E%92%E9%99%A4%E5%8F%AF%E7%94%A8%E6%80%A7%E9%9A%90%E6%82%A3.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/1.%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9B%86%E7%BE%A4%E4%B9%8B%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/2.%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9B%86%E7%BE%A4%E4%B9%8B%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/3.%E9%AB%98%E6%80%A7%E8%83%BDNoSQL.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/4.%E9%AB%98%E6%80%A7%E8%83%BD%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/5.%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%93%E5%AD%98%E6%9E%B6%E6%9E%84-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E9%9B%AA%E5%B4%A9%E7%83%AD%E7%82%B9.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/6.%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%AB%98%E6%80%A7%E8%83%BD-Reactor%E4%B8%8EProactor.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/7.%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%AB%98%E6%80%A7%E8%83%BD%E6%A8%A1%E5%BC%8F-PPC%E5%92%8CTPC.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/1.%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/11.%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/13.POD%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/14.extern%E7%9A%84%E8%AF%A6%E8%A7%A3.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/15.explicit%E5%85%B3%E9%94%AE%E5%AD%97.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/16.emplace_back%E5%92%8Cpush_back%E5%8C%BA%E5%88%AB.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/17.cout%E4%BD%BF%E7%94%A8.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/18.c__11%E4%B9%8Benable_shared_from_this.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/19.c__%E8%BE%93%E5%85%A5.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/2.%E5%B7%A6%E5%80%BC%E5%92%8C%E5%8F%B3%E5%80%BC.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/3.const%E5%92%8Cconstexpr%E4%BD%BF%E7%94%A8.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/4.STL%E5%AE%B9%E5%99%A8.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/5.%E9%97%AD%E5%8C%85%E5%92%8C%E4%BB%BF%E5%87%BD%E6%95%B0%E5%92%8C%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/6.%E5%AE%8F%E4%B8%8E%E5%86%85%E8%81%94.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/1.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/10.%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/11.%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E4%BC%98%E5%8C%96.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/12.%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E6%B3%A8%E6%84%8F%E7%82%B9.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/13.%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/14.%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/15.%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%B5%AE%E7%82%B9%E6%95%B0.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/16.%E6%97%B6%E9%97%B4%E7%BC%96%E7%A8%8B.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/17.%E5%BC%95%E7%94%A8%E5%92%8C%E6%8C%87%E9%92%88.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/18.%E5%BC%BA%E5%88%B6%E4%BF%AE%E6%94%B9const%20char%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/19.%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%88%A0%E9%99%A4%E7%A9%BA%E6%A0%BC.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/2.%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/20.%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%95%88%E7%8E%87%E5%AF%B9%E6%AF%94.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/3.%E5%85%B3%E4%BA%8E%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%97%AE%E9%A2%98.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/4.%E5%BC%82%E5%B8%B8.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/1.coredump%E8%B0%83%E8%AF%95.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/2.gdb%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/6.%E4%B8%8B%E5%88%92%E7%BA%BF%E7%9A%84%E8%AF%AD%E4%B9%89.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/3.go%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%AD%A3%E7%A1%AE%E5%85%B3%E9%97%ADTCP%E8%BF%9E%E6%8E%A5%E4%BB%A5%E5%8F%8A%E7%AE%A1%E7%90%86%E5%AE%83%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/6.ticket%E4%BD%BF%E7%94%A8.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/7.http%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E5%AE%9E%E7%8E%B0.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/8.%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AE%E7%89%88%E6%9C%AC%E5%8F%B7.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%BC%96%E7%A8%8B%E8%B0%83%E8%AF%95/tcp%E5%92%8Cudp.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/3.TLS1.2%E5%8D%8F%E8%AE%AE.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/4.TLS1.3%E5%8D%8F%E8%AE%AE.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/CSRF%E6%94%BB%E5%87%BB.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/%E5%9F%BA%E7%A1%80%E5%90%8D%E8%AF%8D%E8%AF%A6%E8%A7%A3.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/1.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E5%92%8C%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/2.http2%E7%9A%84%E7%89%B9%E6%80%A7.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/3.get%E5%92%8Cpost%E7%9A%84%E5%8C%BA%E5%88%AB.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/4.%E9%AA%8C%E8%AF%81HTTPS%E8%AF%81%E4%B9%A6%E5%90%88%E6%B3%95%E6%80%A7.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/http%E5%8D%8F%E8%AE%AE.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/http%E5%92%8Chttps%E7%9A%84%E5%8C%BA%E5%88%AB.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/%E6%B6%88%E6%81%AF%E5%A4%B4.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/%E8%AF%B7%E6%B1%82%E5%A4%B4Proxy-Connection.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/Linux%E4%B9%8Bproc%E4%B8%8Bkcore%E6%96%87%E4%BB%B6%E8%A7%A3%E9%87%8A.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1.%E5%AF%B9%E4%BA%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E7%90%86%E8%A7%A3.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2.%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%90%8C%E6%AD%A5.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/1.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/8.%E6%96%87%E4%BB%B6%E9%94%81.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/Linux%E4%B9%8Bsyslog%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E8%AF%A6%E8%A7%A3.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/2.%E6%8E%92%E6%9F%A5%E8%BF%9B%E7%A8%8B%E7%BB%88%E6%AD%A2%E7%9A%84%E5%8E%9F%E5%9B%A0.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/3.linux%E4%B8%8B%E6%AE%B5%E9%94%99%E8%AF%AF%E7%9A%84%E4%BA%A7%E7%94%9F%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/4.load%E4%B8%8D%E5%88%B0%E5%85%B1%E4%BA%AB%E5%BA%93.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/cc__%E9%94%99%E8%AF%AF%E4%B9%8B%20Undefined%20reference%20%E6%9C%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E9%97%AE%E9%A2%98.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/2.iptables%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/12.%E9%80%9A%E8%BF%87free%E5%91%BD%E4%BB%A4%E7%90%86%E8%A7%A3linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/10.linux%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/9.linux%E6%9D%83%E9%99%90%E5%92%8Cumask%E5%80%BC.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/Linux%E7%B3%BB%E7%BB%9Ftempfs%E5%92%8Cshm%E8%AF%A6%E8%A7%A3.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/3.Linux%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E8%A7%A3%E6%9E%90.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/12.typename%E7%94%A8%E6%B3%95.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/1.panic%E5%92%8Crecover.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/2.make%E5%92%8Cnew.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/4.for%E5%92%8Crange.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/1.%E6%95%B0%E7%BB%84%E5%88%87%E7%89%87%E5%AD%97%E7%AC%A6%E4%B8%B2.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/10.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/11.GMP%E8%B0%83%E5%BA%A6.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/3.sync.mutex%E8%AF%A6%E8%A7%A3.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/4.%E5%93%88%E5%B8%8C%E8%A1%A8.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/5.chan%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/6.select.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/7.%E6%A0%88%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/8.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/9.%E5%86%85%E5%AD%98%E9%80%83%E9%80%B8.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/1.%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA%E6%97%B6ldflags%E5%8F%98%E9%87%8F%E6%B3%A8%E5%85%A5.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/6.TCP%E5%92%8CUDP%E5%8D%A0%E7%94%A8%E5%90%8C%E4%B8%80%E7%AB%AF%E5%8F%A3.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/1.%E5%AF%B9%E4%BA%8E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E7%90%86%E8%A7%A3.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/2.%E5%AF%B9%E4%BA%8E%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%9A%84%E7%90%86%E8%A7%A3.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/3.%E5%AF%B9%E4%BA%8E%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%90%86%E8%A7%A3.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/4.%E5%AF%B9%E4%BA%8E%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C%E5%92%8CABA%E9%97%AE%E9%A2%98%E7%9A%84%E7%90%86%E8%A7%A3.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/5.%E7%A0%94%E8%AF%BBC__%E8%AF%AD%E8%A8%80boost%E5%BA%93%E4%B8%AD%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/6.%E7%A0%94%E8%AF%BBGo%E8%AF%AD%E8%A8%80channel%E7%9A%84%E5%AE%9E%E7%8E%B0.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/7.%E7%A0%94%E8%AF%BBJava%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/8.%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%97%A0%E9%94%81%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%98%9F%E5%88%97.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/9%E5%A4%A9%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9B%E6%97%A0%E9%94%81%E5%8C%96%E7%BC%96%E7%A8%8B/9.%E6%80%9D%E8%80%83%E4%B8%8E%E5%B1%95%E6%9C%9B.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/1.%E8%87%AA%E7%A0%94%E7%A6%BB%E6%95%A3%E5%9E%8B%E6%A7%BD%E4%BD%8D%E5%93%88%E5%B8%8C.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/1.fork%E5%8E%9F%E7%90%86.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/2.%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E4%B9%8BCFS%E7%AE%97%E6%B3%95.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/3.%E5%86%85%E6%A0%B8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%93%BE%E8%A1%A8.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/4.%E5%86%85%E6%A0%B8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%98%9F%E5%88%97.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/CFS%E7%AE%97%E6%B3%95%E5%9C%A8%E5%86%85%E6%A0%B8%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/%E5%86%85%E6%A0%B8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%98%A0%E5%B0%84.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/Linux%E7%A0%94%E7%A9%B6/%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E4%B9%8BO1%E7%AE%97%E6%B3%95.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/hook%E6%96%87%E4%BB%B6IO%E5%87%BD%E6%95%B0%E9%97%AE%E9%A2%98.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%8D%E8%BD%AC.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/5.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E8%BF%90%E8%A1%8C%E5%BA%93/1.%E6%A0%88%E4%B8%8E%E8%B0%83%E7%94%A8%E6%83%AF%E4%BE%8B.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%94%81%E7%AB%9E%E4%BA%89%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/1.%E9%94%81%E7%AB%9E%E4%BA%89%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/1.%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E3%80%81%E9%93%BE%E6%8E%A5%E8%BF%87%E7%A8%8B.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/2.%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9A%84%E8%A3%85%E8%BD%BD%E4%B8%8E%E6%89%A7%E8%A1%8C.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/3.%E8%AE%A4%E8%AF%86ELF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%B8%80.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/4.%E8%AE%A4%E8%AF%86ELF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%BA%8C.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/5.%E8%AE%A4%E8%AF%86ELF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%B8%89.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/6.%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/7.%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/8.PLT%20hook%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/3.pthread_cancel%E5%92%8Cpthread_kill%E5%8C%BA%E5%88%AB.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/4.mlock%E5%87%BD%E6%95%B0.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/5.exit%E5%87%BD%E6%95%B0.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/6.eventfd%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E8%B7%B5.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/7.backtrace%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/9.pthread_cond_timedwait%E5%87%BD%E6%95%B0.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/netlink.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/pselect%E5%87%BD%E6%95%B0.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/1.%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98.html","/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1.%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%8F%E4%BA%8B%E5%8A%A1ACID%E7%89%B9%E6%80%A7.html","/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/2.%E5%8E%9F%E5%AD%90%E6%80%A7%E4%BF%9D%E8%AF%81-%E5%8E%9F%E5%AD%90%E6%8F%90%E4%BA%A4.html","/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/3.%E5%8E%9F%E5%AD%90%E6%80%A7%E4%BF%9D%E8%AF%81-%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4.html","/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/4.%E5%8E%9F%E5%AD%90%E6%80%A7%E4%BF%9D%E8%AF%81-%E4%B8%89%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4.html","/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/1.paxos%E7%AE%97%E6%B3%95.html","/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/2.raft%E7%AE%97%E6%B3%95.html","/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%9E%8B/1.%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B.html","/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%9E%8B/2.%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F.html","/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%9E%8B/3.CAP%E5%AE%9A%E7%90%86.html","/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%9E%8B/4.%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B.html","/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1.%E6%B5%85%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html","/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/2.%E5%9F%BA%E4%BA%8Eredis%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%82%B9.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E7%BC%93%E5%AD%98/1.%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E7%9A%84%E6%96%B9%E5%BC%8F.html","/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E7%BC%93%E5%AD%98/2.%E7%BC%93%E5%AD%98%E4%B8%8E%E9%98%9F%E5%88%97.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.boot-loader/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%90%AF%E5%8A%A8.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.boot-loader/2.%E5%86%99%E4%B8%80%E4%B8%AAMBR%E7%A8%8B%E5%BA%8F.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.boot-loader/3.%E5%8A%A0%E8%BD%BD%E5%86%85%E6%A0%B8.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.boot-loader/4.Linux%E4%BB%8E%E5%BC%80%E6%9C%BA%E5%8A%A0%E7%94%B5%E5%88%B0%E6%89%A7%E8%A1%8Cmain%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%87%E7%A8%8B.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98/1.%E8%8E%B7%E5%8F%96%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E5%AE%B9%E9%87%8F.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98/2.%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98/3.%E5%AE%9E%E7%8E%B0%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98/4.%E7%94%A8%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E8%AE%BF%E9%97%AE%E9%A1%B5%E8%A1%A8.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98/5.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98/6.%E5%BF%AB%E8%A1%A8TLB.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.%E4%B8%AD%E6%96%AD/1.%E4%B8%AD%E6%96%AD.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.%E4%B8%AD%E6%96%AD/2.%E5%8F%AF%E7%BC%96%E7%A8%8B%E4%B8%AD%E6%96%AD%E6%8E%A7%E5%88%B6%E5%99%A88259A.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.%E4%B8%AD%E6%96%AD/3.%E5%AE%9A%E6%97%B6%E5%99%A88253.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.%E4%B8%AD%E6%96%AD/4.8259A%E7%9A%84%E7%BC%96%E7%A8%8B.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/1.%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/2.%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F2.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/1.%E6%A6%82%E5%BF%B5.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/2.%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E5%BC%8F.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/3.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/4.%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/5.%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/6.%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/9.%E5%85%B6%E4%BB%96/%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6%E4%B9%8B%E9%94%81.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/9.%E5%85%B6%E4%BB%96/%E7%AC%94%E8%AE%B0.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/8.%E5%B1%8F%E5%B9%95%E5%92%8C%E6%98%BE%E5%8D%A1/1.%E6%93%8D%E4%BD%9C%E6%98%BE%E7%A4%BA%E5%99%A8.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E7%A1%AC%E7%9B%98/1.%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%8E%9F%E7%90%86.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E7%A1%AC%E7%9B%98/2.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E7%A1%AC%E7%9B%98/3.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%862.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E7%A1%AC%E7%9B%98/4.%E7%A1%AC%E7%9B%98%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E7%A1%AC%E7%9B%98/5.%E6%93%8D%E4%BD%9C%E7%A1%AC%E7%9B%98.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E7%A1%AC%E7%9B%98/6.%E6%89%93%E5%8D%B0%E5%87%BD%E6%95%B0.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/3.%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E7%B3%BB%E7%BB%9F%E4%BA%A4%E4%BA%92/1.%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%A6%82%E5%BF%B5.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E7%B3%BB%E7%BB%9F%E4%BA%A4%E4%BA%92/2.fork%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E7%B3%BB%E7%BB%9F%E4%BA%A4%E4%BA%92/3.wait%E5%92%8Cexit%E7%9A%84%E5%8E%9F%E7%90%86.html","/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E7%B3%BB%E7%BB%9F%E4%BA%A4%E4%BA%92/4.%E7%AE%A1%E9%81%93.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/strace%20%E5%91%BD%E4%BB%A4.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/11.coredump.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/13.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/2.%E5%B8%B8%E8%A7%81%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E7%AE%97%E6%B3%95.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/4.%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/5.%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%9A%84%E5%8E%9F%E7%90%86.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/7.%E7%BC%93%E5%AD%98%E7%9A%84%E5%8E%9F%E7%90%86.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/9.%E5%A4%9A%E6%A0%B8CPU%E5%90%8C%E6%AD%A5%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E5%8D%81%E4%B9%9D%E7%A7%8D%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E6%9C%AA%E6%80%BB%E7%BB%93.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E7%A8%8B%E5%BA%8F%E5%B1%80%E9%83%A8%E6%80%A7.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/1.%E5%86%85%E5%AD%98%E6%9A%B4%E5%A2%9E%E9%97%AE%E9%A2%98%E5%89%96%E6%9E%90%E8%A7%A3%E5%86%B3%E8%BF%87%E7%A8%8B.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/4.%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/1.IO%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/%E5%B7%A5%E5%85%B7.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E7%BC%96%E7%A8%8B%E8%B0%83%E8%AF%95/1.%E5%86%85%E5%AD%98%E7%94%B3%E8%AF%B7%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E7%BC%96%E7%A8%8B%E8%B0%83%E8%AF%95/%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E6%B3%A8%E6%84%8F.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/2.iowait%E7%9A%84%E7%90%86%E8%A7%A3.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/4.epoll%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/7.Inotify%E8%AF%A6%E8%A7%A3.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/9.netlink%E4%BC%98%E7%BC%BA%E7%82%B9.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/netlink%E7%9B%B8%E5%85%B3.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E4%B8%9A%E4%BD%99%E7%A0%94%E7%A9%B6.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html","/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/2.%E7%BA%BF%E7%A8%8B%E5%B1%80%E9%83%A8%E5%AD%98%E5%82%A8%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/10.%E5%AE%9A%E4%BD%8Dnew%E8%AF%A6%E8%A7%A3.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/7.%E8%99%9A%E7%BB%A7%E6%89%BF%E5%92%8C%E8%99%9A%E5%9F%BA%E7%B1%BB.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/8.%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/9.c__11%E4%B8%ADfunction%E5%92%8Cbind%E7%9A%84%E4%BD%BF%E7%94%A8.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/5.%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%92%8Cstatic%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/1.%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/2.%E5%85%B3%E4%BA%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/3.%E5%85%B3%E4%BA%8E%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/4.%E6%95%B0%E6%8D%AE%E8%AF%AD%E6%84%8F.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/3.gcc%E4%BD%BF%E7%94%A8.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%86%85%E6%A0%B8/1.C__%E7%AC%A6%E5%8F%B7%E7%9A%84%E7%BC%96%E8%A7%A3%E7%A0%81.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%86%85%E6%A0%B8/2.c__%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html","/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/5.cgo%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/1.TCP%E7%9A%84%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/2.TCP%E7%9A%84%E4%BF%9D%E6%B4%BB%E6%9C%BA%E5%88%B6.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/3.socket%E4%B8%8E%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/4.TCP%E5%BC%82%E5%B8%B8%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/5.%E6%8B%94%E6%8E%89%E7%BD%91%E7%BA%BF%E5%90%8E%E7%9A%84TCP%E8%BF%9E%E6%8E%A5.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/%E4%BC%A0%E8%BE%93%E5%B1%82.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%BC%96%E7%A8%8B%E8%B0%83%E8%AF%95/1.%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E5%85%B3%E9%97%ADTCP%E8%BF%9E%E6%8E%A5.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/1.https%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%AE%89%E5%85%A8.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/2.HTTPS%E4%BC%98%E5%8C%96%E6%89%8B%E6%AE%B5.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/1.%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88.html","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%BA%94%E7%94%A8%E5%B1%82/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/%E5%BA%94%E7%94%A8%E5%B1%82.html"],Al=Pi(Mu);Zs(Al);const po=i=>{const s=bi(),e=Bi(),n=Fs();return F(()=>{var r;const t=i??((r=e.value.blog)==null?void 0:r.key)??"";if(!t)return console.warn("useBlogCategory: key not found"),{path:"/",map:{}};if(!Al.value[t])throw new Error(`useBlogCategory: key ${t} is invalid`);const a=Al.value[t][n.value],l={path:a.path,map:{}};for(const h in a.map){const p=a.map[h];l.map[h]={path:p.path,items:[]};for(const o of p.indexes){const{path:d,meta:c}=vs(ho[o]);l.map[h].items.push({path:d,info:c})}s.value.path===p.path&&(l.currentItems=l.map[h].items)}return l})},Vu={article:{"/":{path:"/article/",indexes:[10,13,11,14,15,16,17,12,18,19,20,21,22,127,128,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,142,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,143,144,145,108,146,147,148,149,150,151,152,153,154,155,156,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,0,1,2,130,129,3,4,157,134,5,6,7,8,141,140,131,132,133,126,138,135,9,137,136,139,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298]}},star:{"/":{path:"/star/",indexes:[]}},timeline:{"/":{path:"/timeline/",indexes:[10,13,11,14,15,16,17,12,18,19,20,21,22,127,128,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,142,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,143,144,145,108,146,147,148,149,150,151,152,153,154,155,156,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,0,1,2,130,129,3,4,157,134,5,6,7,8,141,140,131,132,133,126,138,135,9,137,136,139]}}},ul=Pi(Vu);Zs(ul);const ia=i=>{const s=Bi(),e=Fs();return F(()=>{var l;const n=i??((l=s.value.blog)==null?void 0:l.key)??"";if(!n)return console.warn("useBlogType: key not found"),{path:"/",items:[]};if(!ul.value[n])throw new Error(`useBlogType: key ${i} is invalid`);const t=ul.value[n][e.value],a={path:t.path,items:[]};for(const r of t.indexes){const{path:h,meta:p}=vs(ho[r]);a.items.push({path:h,info:p})}return a})},dr=()=>E(ci,{name:"lock"},()=>E("path",{d:"M787.168 952.268H236.832c-30.395 0-55.033-24.638-55.033-55.033V429.45c0-30.395 24.638-55.034 55.033-55.034h82.55V264.35c0-106.38 86.238-192.618 192.618-192.618S704.618 157.97 704.618 264.35v110.066h82.55c30.395 0 55.033 24.639 55.033 55.034v467.785c0 30.395-24.639 55.033-55.033 55.033zM484.483 672.046v115.122h55.034V672.046c31.99-11.373 55.033-41.605 55.033-77.496 0-45.592-36.958-82.55-82.55-82.55s-82.55 36.958-82.55 82.55c0 35.89 23.042 66.123 55.033 77.496zM622.067 264.35c0-60.788-49.28-110.067-110.067-110.067s-110.067 49.28-110.067 110.067v110.066h220.135V264.35z"}));dr.displayName="LockIcon";var $u=[];const oo=Symbol(""),cr=()=>{const i=ui(oo);if(!i)throw new Error("useTimeline() is called without provider.");return i},Nu=()=>{const i=ia("timeline"),s=F(()=>{const e=[];return i.value.items.forEach(({info:n,path:t})=>{const a=Ql(n[Ui.date]);if(a){const l=a.getFullYear(),r=a.getMonth()+1,h=a.getDate();(!e[0]||e[0].year!==l)&&e.unshift({year:l,items:[]}),e[0].items.push({date:`${r}/${h}`,info:n,path:t})}}),{...i.value,config:e.reverse()}});ps(oo,s)},co=Symbol(""),Et=()=>{const i=ui(co);if(!i)throw new Error("useArticles() is called without provider.");return i},Hu=()=>{const i=ia("article");ps(co,i)},Bo=Symbol.for("categoryMap"),ht=()=>{const i=ui(Bo);if(!i)throw new Error("useCategoryMap() is called without provider.");return i},Uu=()=>{const i=po("category");ps(Bo,i)},ko=Symbol(""),Br=()=>{const i=ui(ko);if(!i)throw new Error("useStars() is called without provider.");return i},zu=()=>{const i=ia("star");ps(ko,i)},Ao=Symbol.for("tagMap"),pt=()=>{const i=ui(Ao);if(!i)throw new Error("useTagMap() is called without provider.");return i},ju=()=>{const i=po("tag");ps(Ao,i)},Gu=()=>{Hu(),Uu(),zu(),ju(),Nu()},ot=()=>{const i=Ns(),s=ri();return F(()=>({...i.value.blog,...s.value.blog}))},Wu=i=>{const s=ri();return F(()=>{const{[Ui.author]:e}=i.value;return e?jn(e):e===!1?[]:jn(s.value.author,!1)})},qu=i=>{const s=ht();return F(()=>f8(i.value[Ui.category]).map(e=>({name:e,path:s.value.map[e].path})))},Ku=i=>{const s=pt();return F(()=>v8(i.value[Ui.tag]).map(e=>({name:e,path:s.value.map[e].path})))},Xu=i=>F(()=>{const{[Ui.date]:s}=i.value;return Ql(s)}),Yu=i=>{const s=Oe(i,"info"),e=ot(),n=Wu(s),t=qu(s),a=Ku(s),l=Xu(s),r=P8(),h=F(()=>({author:n.value,category:t.value,date:l.value,localizedDate:s.value[Ui.localizedDate]??"",tag:a.value,isOriginal:s.value[Ui.isOriginal]??!1,readingTime:s.value[Ui.readingTime]??null,readingTimeLocale:s.value[Ui.readingTime]&&r.value?T8(s.value[Ui.readingTime],r.value):null,pageview:i.path})),p=F(()=>e.value.articleInfo);return{info:h,items:p}};var uo=R({name:"SocialMedias",setup(){const i=ot(),s=Qi(),e=F(()=>et(i.value.medias??{}).map(([n,t])=>typeof t=="string"?{name:n,icon:Ru[n],link:t}:{name:n,...t}));return()=>e.value.length?E("div",{class:"vp-social-medias"},e.value.map(({name:n,icon:t,link:a})=>E("a",{class:"vp-social-media",href:a,rel:"noopener noreferrer",target:"_blank","aria-label":n||"",...s.value?{}:{"data-balloon-pos":"up"},innerHTML:Ie(t)?`<img class="icon ${n}-icon" src="${t}">`:t}))):null}}),kr=R({name:"BloggerInfo",setup(){const i=ot(),s=hn(),e=ri(),n=Et(),t=ht(),a=pt(),l=cr(),r=Me(),h=F(()=>{var c;return i.value.name??((c=jn(e.value.author)[0])==null?void 0:c.name)??s.value.title}),p=F(()=>i.value.avatar??e.value.logo),o=F(()=>e.value.blogLocales),d=F(()=>i.value.intro);return()=>{const{article:c,category:k,tag:f,timeline:u}=o.value,y=[[n.value.path,n.value.items.length,c],[t.value.path,Ys(t.value.map).length,k],[a.value.path,Ys(a.value.map).length,f],[l.value.path,l.value.items.length,u]];return E("div",{class:"vp-blogger-info",vocab:"https://schema.org/",typeof:"Person"},[E("div",{class:"vp-blogger",...d.value?{"aria-label":o.value.intro,"data-balloon-pos":"down",role:"link",onClick:()=>r(d.value)}:{}},[p.value?E("img",{class:"vp-blogger-avatar",src:yi(p.value),property:"image",alt:"Blogger Avatar",loading:"lazy"}):null,h.value?E("div",{class:"vp-blogger-name",property:"name"},h.value):null,i.value.description?E("div",{class:"vp-blogger-description",innerHTML:i.value.description}):null,d.value?E("meta",{property:"url",content:yi(d.value)}):null]),E("div",{class:"vp-blog-counts"},y.map(([v,D,g])=>E(Ii,{class:"vp-blog-count",to:v},()=>[E("div",{class:"count"},D),E("div",g)]))),E(uo)])}}});const Ar=()=>E(ci,{name:"category"},()=>E("path",{d:"M148.41 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H148.41c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.311-40.31zM147.556 553.478H429.73c22.263 0 40.311 18.048 40.311 40.31v282.176c0 22.263-18.048 40.312-40.31 40.312H147.555c-22.263 0-40.311-18.049-40.311-40.312V593.79c0-22.263 18.048-40.311 40.31-40.311zM593.927 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H593.927c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.31-40.31zM730.22 920.502H623.926c-40.925 0-74.22-33.388-74.22-74.425V623.992c0-41.038 33.387-74.424 74.425-74.424h222.085c41.038 0 74.424 33.226 74.424 74.067v114.233c0 10.244-8.304 18.548-18.547 18.548s-18.548-8.304-18.548-18.548V623.635c0-20.388-16.746-36.974-37.33-36.974H624.13c-20.585 0-37.331 16.747-37.331 37.33v222.086c0 20.585 16.654 37.331 37.126 37.331H730.22c10.243 0 18.547 8.304 18.547 18.547 0 10.244-8.304 18.547-18.547 18.547z"}));Ar.displayName="CategoryIcon";const ur=()=>E(ci,{name:"tag"},()=>E("path",{d:"M939.902 458.563L910.17 144.567c-1.507-16.272-14.465-29.13-30.737-30.737L565.438 84.098h-.402c-3.215 0-5.726 1.005-7.634 2.913l-470.39 470.39a10.004 10.004 0 000 14.164l365.423 365.424c1.909 1.908 4.42 2.913 7.132 2.913s5.223-1.005 7.132-2.913l470.39-470.39c2.01-2.11 3.014-5.023 2.813-8.036zm-240.067-72.121c-35.458 0-64.286-28.828-64.286-64.286s28.828-64.285 64.286-64.285 64.286 28.828 64.286 64.285-28.829 64.286-64.286 64.286z"}));ur.displayName="TagIcon";const gr=()=>E(ci,{name:"timeline"},()=>E("path",{d:"M511.997 70.568c-243.797 0-441.429 197.633-441.429 441.435 0 243.797 197.632 441.429 441.43 441.429S953.431 755.8 953.431 512.002c0-243.796-197.637-441.434-441.435-441.434zm150.158 609.093-15.605 15.61c-8.621 8.615-22.596 8.615-31.215 0L472.197 552.126c-4.95-4.944-4.34-14.888-4.34-24.677V247.14c0-12.19 9.882-22.07 22.07-22.07h22.07c12.19 0 22.07 9.882 22.07 22.07v273.218l128.088 128.088c8.62 8.62 8.62 22.595 0 31.215zm0 0"}));gr.displayName="TimelineIcon";const go=()=>E(ci,{name:"slides"},()=>E("path",{d:"M896 170.667v426.666a85.333 85.333 0 0 1-85.333 85.334h-256v61.184l192.597 115.584-43.861 73.13-148.736-89.173v95.275h-85.334v-95.318l-148.736 89.216-43.861-73.13 192.597-115.627v-61.141h-256A85.333 85.333 0 0 1 128 597.333V170.667H85.333V85.333h853.334v85.334H896zm-682.667 0v426.666h597.334V170.667H213.333zM426.667 512h-85.334V341.333h85.334V512zm128 0h-85.334V256h85.334v256zm128 0h-85.334V384h85.334v128z"}));go.displayName="SlideIcon";const mo=()=>E(ci,{name:"sticky"},()=>[E("path",{d:"m381.3 733.8l-161.9 118c-5.9 4.5-13.2 6.6-20.1 6.6-8.7 0-17.7-3.4-24.3-10-12.2-12.2-13.9-31.3-3.5-45.2l144.5-195.5-113.6-112.9c-11.1-11.1-13.2-28.4-5.5-42 5.5-8.7 52.1-76.4 155.5-51 1.8 0.3 3.5 0.3 5.6 0.7 4.2 0.3 9 0.7 14.2 1.7 21.9 3.5 60.8-13.9 94.5-42.7 32.3-27.5 53.1-59.4 53.1-81.6 0-5.2 0-10.8-0.3-16-0.7-20.8-2.1-52.8 21.5-76.4 28.1-28.1 72.9-30.6 103.9-5.2 0.6 0.3 1 1 1.7 1.7 16.7 16.3 187.5 187.2 189.3 188.9 14.5 14.6 22.9 34.4 22.9 55.3 0 20.8-8 40.2-22.9 54.8-23.7 23.6-56 22.6-77.1 21.6-4.9 0-10.5-0.4-15.7-0.4-20.8 0-45.8 14.6-70.5 41.3-34.3 37.5-55.5 85.8-53.8 107.7 0.7 6.9 2.1 19.1 2.4 20.8 25 101.4-42.7 147.6-50.7 152.8-13.9 8.4-31.6 6.3-42.7-4.8l-112.1-112.2z"})]);mo.displayName="StickyIcon";const sa=()=>E(ci,{name:"article"},()=>E("path",{d:"M853.333 938.667H170.667A42.667 42.667 0 0 1 128 896V128a42.667 42.667 0 0 1 42.667-42.667h682.666A42.667 42.667 0 0 1 896 128v768a42.667 42.667 0 0 1-42.667 42.667zm-42.666-85.334V170.667H213.333v682.666h597.334zM298.667 256h170.666v170.667H298.667V256zm0 256h426.666v85.333H298.667V512zm0 170.667h426.666V768H298.667v-85.333zm256-384h170.666V384H554.667v-85.333z"}));sa.displayName="ArticleIcon";const fo=()=>E(ci,{name:"book"},()=>E("path",{d:"M256 853.333h426.667A85.333 85.333 0 0 0 768 768V256a85.333 85.333 0 0 0-85.333-85.333H469.333a42.667 42.667 0 0 1 0-85.334h213.334A170.667 170.667 0 0 1 853.333 256v512a170.667 170.667 0 0 1-170.666 170.667H213.333A42.667 42.667 0 0 1 170.667 896V128a42.667 42.667 0 0 1 42.666-42.667h128A42.667 42.667 0 0 1 384 128v304.256l61.653-41.088a42.667 42.667 0 0 1 47.36 0l61.654 41.045V256A42.667 42.667 0 0 1 640 256v256a42.667 42.667 0 0 1-66.347 35.499l-104.32-69.547-104.32 69.547A42.667 42.667 0 0 1 298.667 512V170.667H256v682.666z"}));fo.displayName="BookIcon";const vo=()=>E(ci,{name:"link"},()=>E("path",{d:"M460.8 584.533c17.067 17.067 17.067 42.667 0 59.734-17.067 17.066-42.667 17.066-59.733 0-85.334-85.334-85.334-217.6 0-302.934L554.667 192C640 110.933 776.533 110.933 857.6 196.267c81.067 81.066 81.067 213.333 0 294.4l-68.267 64c0-34.134-4.266-68.267-17.066-102.4l21.333-21.334c51.2-46.933 55.467-128 4.267-179.2s-128-55.466-179.2-4.266c-4.267 0-4.267 4.266-4.267 4.266L465.067 401.067c-51.2 51.2-51.2 132.266-4.267 183.466m123.733-183.466C601.6 384 627.2 384 644.267 401.067c85.333 85.333 85.333 217.6 0 302.933l-153.6 149.333C405.333 934.4 268.8 934.4 187.733 849.067c-81.066-81.067-81.066-213.334 0-294.4l68.267-64c0 34.133 4.267 72.533 17.067 102.4L251.733 614.4C204.8 665.6 204.8 746.667 256 793.6c51.2 46.933 123.733 46.933 174.933 0l149.334-149.333c51.2-51.2 51.2-128 0-179.2-12.8-17.067-17.067-46.934 4.266-64z"}));vo.displayName="LinkIcon";const yo=()=>E(ci,{name:"project"},()=>E("path",{d:"M987.456 425.152H864V295.296a36.48 36.48 0 0 0-36.544-36.544h-360l-134.08-128.256A9.344 9.344 0 0 0 327.04 128H36.48A36.48 36.48 0 0 0 0 164.544v676.608a36.48 36.48 0 0 0 36.544 36.544h797.76a36.672 36.672 0 0 0 33.92-22.848L1021.44 475.52a36.48 36.48 0 0 0-33.92-50.304zM82.304 210.304h215.424l136.64 130.752h347.328v84.096H198.848A36.672 36.672 0 0 0 164.928 448L82.304 652.8V210.304zM808.32 795.456H108.544l118.08-292.608h699.904L808.32 795.52z"}));yo.displayName="ProjectIcon";const Fo=()=>E(ci,{name:"friend"},()=>E("path",{d:"M860.16 213.333A268.373 268.373 0 0 0 512 186.027a267.52 267.52 0 0 0-348.16 404.48L428.8 855.893a118.613 118.613 0 0 0 166.4 0l264.96-265.386a267.52 267.52 0 0 0 0-377.174zM800 531.627l-264.96 264.96a32.427 32.427 0 0 1-46.08 0L224 530.347a183.04 183.04 0 0 1 0-256 182.187 182.187 0 0 1 256 0 42.667 42.667 0 0 0 60.587 0 182.187 182.187 0 0 1 256 0 183.04 183.04 0 0 1 3.413 256z"}));Fo.displayName="FriendIcon";const gl=()=>E(ci,{name:"slide-down"},()=>E("path",{d:"M108.775 312.23c13.553 0 27.106 3.734 39.153 11.806l375.205 250.338 363.641-252.808c32.587-21.624 76.499-12.83 98.123 19.757 21.685 32.467 12.95 76.56-19.576 98.184l-402.854 278.89c-23.733 15.901-54.694 15.962-78.547.12L69.501 442.097c-32.647-21.685-41.441-65.777-19.817-98.304 13.734-20.54 36.201-31.563 59.09-31.563Z"}));gl.displayName="SlideDownIcon";const Co=()=>E("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",class:"empty-icon",viewBox:"0 0 1024 1024",innerHTML:'<defs><linearGradient id="f" x1="512.342" y1="2266.13" x2="512.342" y2="666.063" gradientUnits="userSpaceOnUse"><stop offset=".919" stop-color="#e6e6e6" stop-opacity="0"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="g" x1="528.912" y1="774" x2="388.088" y2="612" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#e6e6e6" stop-opacity="0"/></linearGradient><linearGradient id="h" x1="213.219" y1="721.704" x2="251.313" y2="683.61" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#d7d7d7"/><stop offset=".485" stop-color="#fafafa"/><stop offset="1" stop-color="#fafafa"/></linearGradient><linearGradient id="i" x1="724.813" y1="821.718" x2="768.656" y2="777.876" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fafafa"/></linearGradient><linearGradient id="a" x1="513.493" y1="714.594" x2="471.007" y2="544.188" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#999"/><stop offset="1" stop-color="#ccc"/></linearGradient><linearGradient id="b" x1="440.156" y1="564.031" x2="508.594" y2="495.594" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="l" x1="660.988" y1="754.156" x2="608.637" y2="544.188" xlink:href="#a"/><linearGradient id="m" x1="479.188" y1="774.219" x2="649.782" y2="603.625" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#b3b3b3"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="n" x1="447.121" y1="774.219" x2="394.661" y2="563.813" xlink:href="#a"/><linearGradient id="o" x1="494" y1="597" x2="628" y2="463" xlink:href="#b"/><linearGradient id="d" x1="610.485" y1="604.938" x2="697.298" y2="518.125" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fff"/></linearGradient><linearGradient id="p" x1="457.438" y1="619.25" x2="353.469" y2="619.25" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e6e6e6" stop-opacity="0"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="q" x1="542.734" y1="674.25" x2="615.672" y2="601.313" xlink:href="#b"/><linearGradient id="c" x1="627.933" y1="358.938" x2="685.192" y2="422.531" gradientUnits="userSpaceOnUse"><stop offset=".4" stop-color="#e6e6e6" stop-opacity=".4"/><stop offset=".443" stop-color="#fff"/><stop offset=".6" stop-color="#ccc"/></linearGradient><linearGradient id="r" x1="618.547" y1="422.531" x2="681.547" y2="359.531" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e6e6e6"/><stop offset=".761" stop-color="#fff"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="s" x1="625" y1="441.5" x2="697" y2="369.5" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset=".761" stop-color="#fff"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="t" x1="627.681" y1="361.438" x2="692.257" y2="433.156" xlink:href="#c"/><linearGradient id="u" x1="561.414" y1="735.438" x2="573.149" y2="688.375" xlink:href="#d"/><linearGradient id="v" x1="405" y1="485.875" x2="440" y2="450.875" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fff" stop-opacity=".702"/></linearGradient><linearGradient id="w" x1="404.61" y1="486.906" x2="441.86" y2="449.656" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset=".495" stop-color="#ccc" stop-opacity=".702"/><stop offset=".498" stop-color="#ccc"/><stop offset="1" stop-color="#fff" stop-opacity=".302"/></linearGradient><radialGradient id="e" cx="329.297" cy="647.578" r="8.172" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#fafafa"/><stop offset="1.2" stop-color="#e6e6e6"/></radialGradient><radialGradient id="j" cx="802.297" cy="673.578" r="8.172" xlink:href="#e"/><radialGradient id="k" cx="774.844" cy="642.75" r="5.531" xlink:href="#e"/></defs><path d="M512.33 666.07c441.828 0 800 358.18 800 800.03s-358.172 800.02-800 800.02-800-358.18-800-800.02 358.17-800.03 800-800.03z" style="fill:url(#f);fill-rule:evenodd"/><path d="m272 694 242-82 131 119-188 43z" style="fill:url(#g);fill-rule:evenodd"/><path fill="#b3b3b3" fill-rule="evenodd" d="M232.391 723.534a2.4 2.4 0 0 1 2.4 2.4v17.725a2.4 2.4 0 0 1-4.8 0v-17.725a2.4 2.4 0 0 1 2.4-2.4z"/><path d="M232.255 676.559c10.33 0 17.067 15.408 18.7 28.493 1.619 12.942-2.372 23.694-18.7 23.694-16.878 0-20.213-10.733-18.7-23.694 1.633-14.061 8.37-28.493 18.7-28.493z" style="fill:url(#h);fill-rule:evenodd"/><path fill="#b3b3b3" fill-rule="evenodd" d="M745.853 826h.938a2.4 2.4 0 0 1 2.4 2.4v22.238a2.4 2.4 0 0 1-2.4 2.4h-.938a2.4 2.4 0 0 1-2.4-2.4V828.4a2.4 2.4 0 0 1 2.4-2.4z"/><path d="M746.727 830.3c-19.438 0-23.278-9.326-21.541-20.59a34.467 34.467 0 0 1 3.289-10.369 16.628 16.628 0 0 1 0-9.112c2.889-12.327 12.059-20.911 18.356-20.911 6.56 0 15.468 9.1 18.356 20.911a14.589 14.589 0 0 1-.335 9.217 34.36 34.36 0 0 1 3.419 10.264c1.861 11.243-2.735 20.59-21.544 20.59z" style="fill:url(#i);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M328.841 654.562a6.571 6.571 0 0 0-5.2-5.027q-4.107-.952-.034-2.045a6.571 6.571 0 0 0 5.027-5.2q.952-4.109 2.045-.035a6.569 6.569 0 0 0 5.2 5.027q4.109.954.035 2.045a6.569 6.569 0 0 0-5.027 5.2q-.955 4.108-2.046.035z"/><path d="M328.383 653.73a6.567 6.567 0 0 0-5.2-5.027q-4.109-.954-.035-2.045a6.568 6.568 0 0 0 5.027-5.2q.954-4.107 2.046-.034a6.568 6.568 0 0 0 5.2 5.027q4.107.952.035 2.045a6.568 6.568 0 0 0-5.027 5.2q-.954 4.104-2.046.034z" style="fill:url(#e);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M801.841 680.562a6.571 6.571 0 0 0-5.2-5.027q-4.107-.952-.034-2.045a6.571 6.571 0 0 0 5.027-5.2q.952-4.109 2.045-.035a6.569 6.569 0 0 0 5.2 5.027q4.108.954.035 2.045a6.569 6.569 0 0 0-5.027 5.2q-.955 4.108-2.046.035z"/><path d="M801.383 679.73a6.567 6.567 0 0 0-5.2-5.027q-4.108-.954-.035-2.045a6.568 6.568 0 0 0 5.027-5.2q.954-4.107 2.046-.034a6.568 6.568 0 0 0 5.2 5.027q4.107.952.035 2.045a6.568 6.568 0 0 0-5.027 5.2q-.954 4.104-2.046.034z" style="fill:url(#j);fill-rule:evenodd"/><path d="M774.21 646.9a4.446 4.446 0 0 0-3.517-3.4q-2.778-.643-.023-1.383a4.443 4.443 0 0 0 3.4-3.517q.645-2.778 1.383-.023a4.443 4.443 0 0 0 3.517 3.4q2.778.645.023 1.383a4.446 4.446 0 0 0-3.4 3.517q-.645 2.78-1.383.023z" style="fill:url(#k);fill-rule:evenodd"/><path d="m385.6 714.6.158-150.658L598.9 544.174l-.158 150.658z" style="fill:url(#a);fill-rule:evenodd"/><path d="m385.474 564.031 214.763-19.383-36.171-49.067-215.559 17.634z" style="fill:url(#b);fill-rule:evenodd"/><path d="m598.744 694.832.156-150.658 71.975 59.319-.158 150.658z" style="fill:url(#l);fill-rule:evenodd"/><path d="m457.064 774.209.158-150.658 214.691-19.914-.158 150.663z" style="fill:url(#m);fill-rule:evenodd"/><path d="m384.566 714.459.158-150.659 72.5 59.75-.158 150.658z" style="fill:url(#n);fill-rule:evenodd"/><path d="M494 640s75.357-58.4 42-83-38.887 1.663-37 14 53.847 12.465 54-26c.2-49.979 75-125 75-125" style="fill:none;stroke-width:3px;stroke-dasharray:12 6;stroke:url(#o);fill-rule:evenodd"/><path d="m670.275 604.939-72.041-59.9 38.476-26.909 72.86 58.159z" style="fill:url(#d);fill-rule:evenodd"/><path d="m425.5 674.383-72.042-59.9 31.109-50.347 72.86 58.16z" style="fill:url(#p);fill-rule:evenodd"/><path d="m487.918 674.235 214.482-22.57-31.1-50.346-215.309 20.833z" style="fill:url(#q);fill-rule:evenodd"/><path style="fill:#fff;fill-rule:evenodd" d="m697.363 358.927-69.58 62.511-12.035 1.082z"/><path d="m697.363 358.927-69.58 62.511-12.035 1.082z" style="fill:url(#c);fill-rule:evenodd"/><path d="M615.748 422.52 604 413l92.089-53.46" style="fill:url(#r);fill-rule:evenodd"/><path d="m625 432 12 18 60-89" style="fill:url(#s);fill-rule:evenodd"/><path d="m626.98 421.335-2.471 11.828 70.918-71.735" style="fill:#fff;fill-rule:evenodd"/><path d="m626.98 421.335-2.471 11.828 70.918-71.735" style="fill:url(#t);fill-rule:evenodd"/><path d="m494.814 735.44 21.293-2.1v-6.613l-13.4 1.319v-6.965l10.977-1.08v-6.613l-10.977 1.08v-6.084l12.917-1.27v-6.525l-20.808 2.047v32.8zM521 732.863l7.054-.694v-11.241a106.361 106.361 0 0 0-1.014-11.274l.176-.017 2.645 7.586 4.453 11.553 4.32-.425 4.408-12.424 2.733-8.116.177-.018a111.811 111.811 0 0 0-1.014 11.474v11.241l7.185-.707V697l-8.552.841-5.025 14.646c-.618 1.956-1.147 4.08-1.808 6.173l-.22.022c-.617-1.968-1.146-3.987-1.808-5.818l-5.2-13.639-8.508.837v32.8zm37.213-3.661 7.891-.776v-10.889l3.835-.377c6.922-.681 12.961-4.714 12.961-12.517 0-8.111-5.951-10.082-13.181-9.371l-11.504 1.128v32.8zm7.891-17.881v-9.478l3.218-.316c3.792-.373 5.908.565 5.908 3.871 0 3.218-1.852 5.208-5.687 5.585zM594 725.682l7.891-.777v-26.274l8.905-.876v-6.524l-25.657 2.524v6.524l8.861-.871v26.274zm27.991-2.754 7.847-.772v-11.594l9.919-22.18-8.244.811-2.733 7.542c-.925 2.56-1.807 4.939-2.733 7.587l-.176.018c-.926-2.466-1.764-4.676-2.645-7.058l-2.734-7-8.375.824 9.874 20.233v11.594z" style="fill:url(#u);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M408.938 457.309a17.5 17.5 0 0 0 21.374 26.725 17.5 17.5 0 1 1-16.306-30.955 17.442 17.442 0 0 0-5.068 4.23z"/><circle cx="422.5" cy="468.375" r="17.5" style="fill:url(#v)"/><path fill="#ccc" fill-rule="evenodd" d="M391.76 451.5c-2.358 4.419 9.827 15.52 27.215 24.8 15.131 8.071 29.212 12.1 34.166 10.093-4.191 2.772-18.943-1.24-34.86-9.73-17.388-9.275-29.573-20.376-27.215-24.8a2.96 2.96 0 0 1 1.585-1.3 2.606 2.606 0 0 0-.891.937z"/><path d="M418.975 476.29c-17.388-9.275-29.573-20.376-27.215-24.8s18.363-.484 35.751 8.791 29.572 20.376 27.215 24.8-18.364.483-35.751-8.791zm31.634 5.732c1.824-3.42-8.789-12.642-23.7-20.6s-28.486-11.633-30.31-8.213 8.789 12.642 23.7 20.6 28.486 11.633 30.31 8.213zm-36.645-29.008-2.775 1.452.032 1.751 28.637 14.183.266-4.559z" style="fill:url(#w);fill-rule:evenodd"/><g class="people"><path style="fill:#f8cfad;fill-rule:evenodd" d="m612.131 676.5 1.362 3.532 3.255-2.324-1.361-3.532zM629.131 665.5l1.362 3.532 3.255-2.324-1.361-3.532z"/><path style="fill:#141a33;fill-rule:evenodd" d="m617.764 678.184-3.162-.078a11.028 11.028 0 0 0-1.034 3.454c-.258 2.006-1.177 5-.449 5.367 1.5 2.659 4.118-.215 4.118-.215s2.187-2.848 1.925-5.265c-.106-.973-1.181-1.869-1.398-3.263zM633.781 665.855l3.019.945a11.008 11.008 0 0 1-.137 3.6c-.4 1.981-.179 4.166-.986 4.277-2.283 2.03-3.827-1.533-3.827-1.533s-1.473-2.456-.444-4.659c.412-.88 1.718-1.385 2.375-2.63z"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M599.935 592.534s10.293 9.761 11.95 7.564 3.536-3.463-6.758-13.65z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M611.3 596.361c1.674-1.105 11.5 7.048 14.5 11.774s-12.705-4.36-14.632-6.776-1.54-3.893.132-4.998z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M621.815 607.988s1.809 2.549 2.433 1.756 2.475-1.064 2.449-1.138.1-.819 1.288-2.331-3.8-3.632-5.81-.494a2.556 2.556 0 0 0-.36 2.207z"/><path fill="#232c57" fill-rule="evenodd" d="M598 617s14.968-5.618 17 7a150.235 150.235 0 0 1 2 22s12.666 11.836 16 19c0 0-4.753-1.629-4 2 0 0-18.132-14.647-19-19s-9.148-18.716-12-31z"/><path d="M589 622s14.968-5.618 17 7a150.235 150.235 0 0 1 2 22s4.666 17.836 8 25c0 0-4.753-1.629-4 2 0 0-10.132-20.647-11-25s-9.148-18.716-12-31z" style="fill:#292966;fill-rule:evenodd"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M585.626 597.7s-10.292 9.761-11.95 7.563-3.536-3.463 6.758-13.65z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M574.259 601.529c-1.675-1.105-11.5 7.049-14.5 11.774s12.7-4.36 14.631-6.775 1.543-3.894-.131-4.999z"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M591.715 577.752s-.606 1.681 1.48 3.716-3.615 5.307-4.645 2.85-.48-2.716-.48-2.716z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M583.527 574.123c-.839 1.043.491 3.873 1.453 5.449s2.749 2.833 3.364 2.428 4.088-2.657 4-4-.228-3.4-.228-3.4 2.562-1.641 2.154-2.916-2.916-.154-2.916-.154a15.853 15.853 0 0 0-.227-2.224c-.189-.929-6.887-1.445-7.827 2.6s.558 1.805.227 2.217z"/><path fill="#232c57" fill-rule="evenodd" d="M584.227 567.758c2.1-.885 7.2-3.684 10.125.318s.842 4.385.989 5.294-1.894 5.69-1.341 6.63-3.865.8-4.657-1.179-2.844-.539-2.227-1.224-1.3-4.456-2.916-2.154a9.252 9.252 0 0 0 .309-1.38c-.115.192.259-3.257-.673-1.32s-2.1 1.037-3.069.762-1.8-1.118-1.071-1.689c.023-.016 2.436-3.172 4.531-4.058z"/><path d="M589 585c-2.584-.47-10.055.362-13 13 0 0 1.9 3.349 5 4s6 21 6 21 24.016 11.06 27-3c-.07-13.826-8-21-8-21s5.829-3.2 5-6-8.016-10.153-11-10-6 0-6 0-2.416 2.47-5 2z" style="fill:#f6bb07;fill-rule:evenodd"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M563.284 612.581s-.986 2.965-1.814 2.389-2.678-.3-2.675-.374-.333-.755-1.912-1.854 2.577-4.583 5.414-2.167a2.551 2.551 0 0 1 .987 2.006z"/></g>'});Co.displayName="EmptyIcon";var Qu=R({name:"ArticleItem",props:{info:{type:Object,required:!0},path:{type:String,required:!0}},slots:Object,setup(i,{slots:s}){const e=Oe(i,"info"),{info:n,items:t}=Yu(i);return()=>{var c,k,f;const{[Xi.title]:a,[Ui.type]:l,[Ui.isEncrypted]:r=!1,[Ui.cover]:h,[Ui.excerpt]:p,[Ui.sticky]:o}=e.value,d=n.value;return E("div",{class:"vp-article-wrapper"},E("article",{class:"vp-article-item",vocab:"https://schema.org/",typeof:"Article"},[((c=s.cover)==null?void 0:c.call(s,{cover:h}))??(h?[E("img",{class:"vp-article-cover",src:yi(h),alt:"",loading:"lazy"}),E("meta",{property:"image",content:yi(h)})]:[]),o?E(mo):null,E(Ii,{to:i.path},()=>{var u;return((u=s.title)==null?void 0:u.call(s,{title:a,isEncrypted:r,type:l}))??E("header",{class:"vp-article-title"},[r?E(dr):null,l===I8.slide?E(go):null,E("span",{property:"headline"},a)])}),((k=s.excerpt)==null?void 0:k.call(s,{excerpt:p}))??(p?E("div",{class:"vp-article-excerpt",innerHTML:p}):null),E("hr",{class:"vp-article-hr"}),((f=s.info)==null?void 0:f.call(s,{info:d}))??E(ao,{info:d,...t.value?{items:t.value}:{}})]))}}}),Ju=R({name:"Pagination",props:{total:{type:Number,default:10},perPage:{type:Number,default:10},current:{type:Number,default:1}},emits:["updateCurrentPage"],setup(i,{emit:s}){let e;const n=ri(),t=G(""),a=F(()=>n.value.paginationLocales),l=F(()=>Math.ceil(i.total/i.perPage)),r=F(()=>!!l.value&&l.value!==1),h=F(()=>l.value<7?!1:i.current>4),p=F(()=>l.value<7?!1:i.current<l.value-3),o=F(()=>{const{current:k}=i;let f=1,u=l.value;const y=[];l.value>=7&&(k<=4&&k<l.value-3?(f=1,u=5):k>4&&k>=l.value-3?(u=l.value,f=l.value-4):l.value>7&&(f=k-2,u=k+2));for(let v=f;v<=u;v++)y.push(v);return y}),d=k=>s("updateCurrentPage",k),c=k=>{const f=parseInt(k,10);f<=l.value&&f>0?d(f):e.pop(`<svg viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" width="16" height="16"><path d="M64 512a448 448 0 1 0 896 0 448 448 0 1 0-896 0Z" fill="#FA5151"/><path d="m557.3 512 113.1-113.1c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L512 466.7 398.9 353.6c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L466.7 512 353.6 625.1c-12.5 12.5-12.5 32.8 0 45.3 6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4L512 557.3l113.1 113.1c6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4c12.5-12.5 12.5-32.8 0-45.3L557.3 512z" fill="#FFF"/></svg>${a.value.errorText.replace(/\$page/gu,l.value.toString())}`)};return pi(()=>{e=new $6}),()=>E("div",{class:"vp-pagination"},r.value?E("nav",{class:"vp-pagination-list"},[E("div",{class:"vp-pagination-number "},[i.current>1?E("div",{class:"prev",role:"navigation",unselectable:"on",onClick:()=>d(i.current-1)},a.value.prev):null,h.value?[E("div",{role:"navigation",onClick:()=>d(1)},1),E("div",{class:"ellipsis"},"...")]:null,o.value.map(k=>E("div",{key:k,class:{active:i.current===k},role:"navigation",onClick:()=>d(k)},k)),p.value?[E("div",{class:"ellipsis"},"..."),E("div",{role:"navigation",onClick:()=>d(l.value)},l.value)]:null,i.current<l.value?E("div",{class:"next",role:"navigation",unselectable:"on",onClick:()=>d(i.current+1)},a.value.next):null]),E("div",{class:"vp-pagination-nav"},[E("label",{for:"navigation-text"},`${a.value.navigate}: `),E("input",{id:"navigation-text",value:t.value,onInput:({target:k})=>{t.value=k.value},onKeydown:k=>{k.key==="Enter"&&(k.preventDefault(),c(t.value))}}),E("button",{class:"vp-pagination-button",type:"button",role:"navigation",title:a.value.action,onClick:()=>c(t.value)},a.value.action)])]):[])}}),mr=R({name:"ArticleList",props:{items:{type:Array,default:()=>[]}},setup(i){const s=$s(),e=me(),n=ot(),t=G(1),a=F(()=>n.value.articlePerPage??10),l=F(()=>i.items.slice((t.value-1)*a.value,t.value*a.value)),r=async h=>{t.value=h;const p={...s.query};!(p.page===h.toString()||h===1&&!p.page)&&(h===1?delete p.page:p.page=h.toString(),await e.push({path:s.path,query:p}))};return pi(()=>{const{page:h}=s.query;r(h?Number(h):1),ti(t,()=>{const p=document.querySelector("#article-list").getBoundingClientRect().top+window.scrollY;setTimeout(()=>{window.scrollTo(0,p)},100)})}),()=>E("div",{id:"article-list",class:"vp-article-list",role:"feed"},l.value.length?[...l.value.map(({info:h,path:p},o)=>E(ai,{appear:!0,delay:o*.04},()=>E(Qu,{key:p,info:h,path:p}))),E(Ju,{current:t.value,perPage:a.value,total:i.items.length,onUpdateCurrentPage:r})]:E(Co))}}),Do=R({name:"CategoryList",setup(){const i=bi(),s=ht();return()=>E("ul",{class:"vp-category-list"},et(s.value.map).sort(([,e],[,n])=>n.items.length-e.items.length).map(([e,{path:n,items:t}])=>E("li",{class:["vp-category",`color${at(e,Number(dn.colorNumber))}`,{active:n===i.value.path}]},E(Ii,{to:n},()=>[e,E("span",{class:"count"},t.length)]))))}}),bo=R({name:"TagList",setup(){const i=Bi(),s=pt(),e=n=>{var t;return n===((t=i.value.blog)==null?void 0:t.name)};return()=>E("ul",{class:"tag-list-wrapper"},et(s.value.map).sort(([,n],[,t])=>t.items.length-n.items.length).map(([n,{path:t,items:a}])=>E("li",{class:["tag",`color${at(n,Number(dn.colorNumber))}`,{active:e(n)}]},E(Ii,{to:t},()=>[n,E("span",{class:"tag-num"},a.length)]))))}}),Zu=R({name:"TimelineList",setup(){const i=ri(),s=cr(),e=Me(),n=F(()=>i.value.blogLocales.timeline);return()=>E("div",{class:"timeline-list-wrapper"},[E("div",{class:"timeline-list-title",onClick:()=>e(s.value.path)},[E(gr),E("span",{class:"num"},s.value.items.length),n.value]),E("hr"),E("div",{class:"timeline-content"},E("ul",{class:"timeline-list"},s.value.config.map(({year:t,items:a},l)=>E(ai,{appear:!0,delay:.08*(l+1)},()=>E("li",[E("h3",{class:"timeline-year"},t),E("ul",{class:"timeline-year-wrapper"},a.map(({date:r,info:h,path:p})=>E("li",{class:"timeline-item"},[E("span",{class:"timeline-date"},r),E(Ii,{class:"timeline-title",to:p},()=>h[Xi.title])])))])))))])}});const i7={article:sa,category:Ar,tag:ur,timeline:gr};var _o=R({name:"InfoList",setup(){const i=ri(),s=Et(),e=ht(),n=F(()=>Ys(e.value.map).length),t=Br(),a=pt(),l=F(()=>Ys(a.value.map).length),r=Me(),h=G("article"),p=F(()=>i.value.blogLocales);return()=>E("div",{class:"vp-blog-infos"},[E("div",{class:"vp-blog-type-switcher"},et(i7).map(([o,d])=>E("button",{type:"button",class:"vp-blog-type-button",onClick:()=>{h.value=o}},E("div",{class:["icon-wrapper",{active:h.value===o}],"aria-label":p.value[o],"data-balloon-pos":"up"},E(d))))),E(ai,()=>h.value==="article"?E("div",{class:"vp-star-article-wrapper"},[E("div",{class:"title",onClick:()=>r(s.value.path)},[E(sa),E("span",{class:"num"},s.value.items.length),p.value.article]),E("hr"),t.value.items.length?E("ul",{class:"vp-star-articles"},t.value.items.map(({info:o,path:d},c)=>E(ai,{appear:!0,delay:.08*(c+1)},()=>E("li",{class:"vp-star-article"},E(Ii,{to:d},()=>o[Xi.title]))))):E("div",{class:"vp-star-article-empty"},p.value.empty.replace("$text",p.value.star))]):h.value==="category"?E("div",{class:"vp-category-wrapper"},[n.value?[E("div",{class:"title",onClick:()=>r(e.value.path)},[E(Ar),E("span",{class:"num"},n.value),p.value.category]),E("hr"),E(ai,{delay:.04},()=>E(Do))]:E("div",{class:"vp-category-empty"},p.value.empty.replace("$text",p.value.category))]):h.value==="tag"?E("div",{class:"vp-tag-wrapper"},[l.value?[E("div",{class:"title",onClick:()=>r(a.value.path)},[E(ur),E("span",{class:"num"},l.value),p.value.tag]),E("hr"),E(ai,{delay:.04},()=>E(bo))]:E("div",{class:"vp-tag-empty"},p.value.empty.replace("$text",p.value.tag))]):E(ai,()=>E(Zu)))])}}),ea=R({name:"BlogWrapper",slots:Object,setup(i,{slots:s}){const{isMobile:e}=lt();return()=>[E(pr),E(hr,{noSidebar:!0,noToc:!0},{default:()=>s.default(),navScreenBottom:()=>E(kr),sidebar:e.value?()=>E(_o):null})]}});const dt=()=>E("aside",{class:"vp-blog-info-wrapper"},[E(ai,()=>E(kr)),E(ai,{delay:.04},()=>E(_o))]);dt.displayName="InfoPanel";var s7=R({name:"BlogPage",setup(){const i=bi(),s=Bi(),e=ht(),n=pt();return()=>{const{key:t="",name:a=""}=s.value.blog||{},l=a?t==="category"?e.value.map[a].items:t==="tag"?n.value.map[a].items:[]:[];return E(ea,()=>E("div",{class:"vp-page vp-blog"},E("div",{class:"blog-page-wrapper"},[E("main",{id:"main-content",class:"vp-blog-main"},[E(ai,()=>t==="category"?E(Do):t==="tag"?E(bo):null),a?E(ai,{appear:!0,delay:.24},()=>E(mr,{key:i.value.path,items:l})):null]),E(ai,{delay:.16},()=>E(dt,{key:"blog"}))])))}}});const e7="//theme-hope-assets.vuejs.press/hero/default.jpg";var n7=R({name:"BlogHero",slots:Object,setup(i,{slots:s}){const e=Bi(),n=hn(),t=Pi(),a=F(()=>e.value.heroFullScreen??!1),l=F(()=>{const{heroText:h,heroImage:p,heroImageDark:o,heroAlt:d,heroImageStyle:c,tagline:k}=e.value;return{text:h??n.value.title??"Hello",tagline:k??"",image:p?yi(p):null,imageDark:o?yi(o):null,alt:d??h??"",imageStyle:c,isFullScreen:a.value}}),r=F(()=>{const{bgImage:h,bgImageDark:p,bgImageStyle:o}=e.value;return{image:wi(h)?yi(h):h===!1?null:e7,imageDark:wi(p)?yi(p):null,bgStyle:o,isFullScreen:a.value}});return()=>{var h,p;return e.value.hero===!1?null:E("div",{ref:t,class:["vp-blog-hero",{fullscreen:a.value,"no-bg":!r.value.image}]},[((h=s.bg)==null?void 0:h.call(s,r.value))??[r.value.image?E("div",{class:["vp-blog-mask",{light:r.value.imageDark}],style:[{background:`url(${r.value.image}) center/cover no-repeat`},r.value.bgStyle]}):null,r.value.imageDark?E("div",{class:"vp-blog-mask dark",style:[{background:`url(${r.value.imageDark}) center/cover no-repeat`},r.value.bgStyle]}):null],((p=s.info)==null?void 0:p.call(s,l.value))??[E(ai,{appear:!0,type:"group",delay:.04},()=>{const{image:o,imageDark:d,imageStyle:c,alt:k}=l.value;return[o?E("img",{key:"light",class:["vp-blog-hero-image",{light:d}],style:c,src:o,alt:k}):null,d?E("img",{key:"dark",class:"vp-blog-hero-image dark",style:c,src:d,alt:k}):null]}),E(ai,{appear:!0,delay:.08},()=>l.value.text?E("h1",{class:"vp-blog-hero-title"},l.value.text):null),E(ai,{appear:!0,delay:.12},()=>l.value.tagline?E("p",{class:"vp-blog-hero-description",innerHTML:l.value.tagline}):null)],l.value.isFullScreen?E("button",{type:"button",class:"slide-down-button",onClick:()=>{window.scrollTo({top:t.value.clientHeight,behavior:"smooth"})}},[E(gl),E(gl)]):null])}}});const t7=["link","article","book","project","friend"];var a7=R({name:"ProjectPanel",components:{ArticleIcon:sa,BookIcon:fo,FriendIcon:Fo,LinkIcon:vo,ProjectIcon:yo},props:{items:{type:Array,required:!0}},setup(i){const s=Qi(),e=Me(),n=(t="",a="icon")=>t7.includes(t)?E(ms(`${t}-icon`)):Ie(t)?E("img",{class:"vp-project-image",src:t,alt:a}):Jt(t)?E("img",{class:"vp-project-image",src:yi(t),alt:a}):E(zi,{icon:t});return()=>E("div",{class:"vp-project-panel"},i.items.map(({icon:t,link:a,name:l,desc:r,background:h})=>E("div",{class:["vp-project-card",{[`color${at(l,Number(dn.colorNumber))}`]:!s.value&&!h}],...h?{style:h}:{},onClick:()=>e(a)},[n(t,l),E("div",{class:"vp-project-name"},l),E("div",{class:"vp-project-desc"},r)])))}}),l7=R({name:"BlogHomePage",setup(){const i=Et(),s=Bi(),e=F(()=>s.value.projects??[]);return()=>E("div",{class:"vp-page vp-blog-home"},[E(n7),E("div",{class:"blog-page-wrapper"},[E("main",{id:"main-content",class:"vp-blog-main"},[e.value.length?E(ai,{appear:!0,delay:.16},()=>E(a7,{items:e.value})):null,E(ai,{appear:!0,delay:.24},()=>E(mr,{items:i.value.items}))]),E(ai,{appear:!0,delay:.16},()=>E(dt,{key:"blog"}))]),E(ai,{appear:!0,delay:.28},()=>E(an))])}});const wo=()=>E(ea,()=>E(l7));wo.displayName="BlogHome";var r7=wo,E7=R({name:"ArticleType",setup(){const i=bi(),s=Fs(),e=ri(),n=Et(),t=Br(),a=F(()=>{const l=e.value.blogLocales;return[{text:l.all,path:n.value.path},{text:l.star,path:t.value.path},...$u.map(({key:r,path:h})=>{const p=h.replace(/^\//,s.value);return{text:l[r]??vs(p).meta[Xi.title]??r,path:p}})]});return()=>E("ul",{class:"vp-article-type-wrapper"},a.value.map(l=>E("li",{class:["vp-article-type",{active:l.path===i.value.path}]},E(Ii,{to:l.path},()=>l.text))))}}),h7=R({name:"BlogPage",setup(){const i=ia(),s=Bi(),e=bi(),n=Et(),t=Br(),a=F(()=>{const{key:l="",type:r}=s.value.blog||{};return l==="star"?t.value.items:r==="type"&&l?i.value.items:n.value.items});return()=>E(ea,()=>E("div",{class:"vp-page vp-blog"},E("div",{class:"blog-page-wrapper"},[E("main",{id:"main-content",class:"vp-blog-main"},[E(ai,()=>E(E7)),E(ai,{appear:!0,delay:.24},()=>E(mr,{key:e.value.path,items:a.value}))]),E(ai,{delay:.16},()=>E(dt,{key:"blog"}))])))}}),p7=R({name:"TimelineItems",setup(){const i=ot(),s=ri(),e=cr(),n=F(()=>i.value.timeline??s.value.blogLocales.timelineTitle),t=F(()=>e.value.config.map(({year:a})=>({title:a.toString(),level:2,slug:a.toString(),children:[]})));return()=>E("div",{class:"timeline-wrapper"},E("ul",{class:"timeline-content"},[E(ai,()=>E("li",{class:"motto"},n.value)),E(lo,{items:t.value}),e.value.config.map(({year:a,items:l},r)=>E(ai,{appear:!0,delay:.08*(r+1),type:"group"},()=>[E("h3",{key:"title",id:a,class:"timeline-year-title"},E("span",a)),E("li",{key:"content",class:"timeline-year-list"},[E("ul",{class:"timeline-year-wrapper"},l.map(({date:h,info:p,path:o})=>E("li",{class:"timeline-item"},[E("span",{class:"timeline-date"},h),E(Ii,{class:"timeline-title",to:o},()=>p[Xi.title])])))])]))]))}});const xo=()=>E(ea,()=>E("div",{class:"vp-page vp-blog"},E("div",{class:"blog-page-wrapper"},[E("main",{id:"main-content",class:"vp-blog-main"},[E(ai,{appear:!0,delay:.24},()=>E(p7))]),E(ai,{delay:.16},()=>E(dt,{key:"blog"}))])));xo.displayName="Timeline";var o7=xo,d7={};const Ue="./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),La=Array.from({length:64},(i,s)=>s),yt=i=>Array(i).fill(-1),ne=[...yt(46),0,1,...La.slice(54,64),...yt(7),...La.slice(2,28),...yt(6),...La.slice(28,54),...yt(5)],GE=[608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731],WE=[3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113,2757295779,4103290238,227898511,1921955416,1904987480,2182433518,2069144605,3260701109,2620446009,720527379,3318853667,677414384,3393288472,3101374703,2390351024,1614419982,1822297739,2954791486,3608508353,3174124327,2024746970,1432378464,3864339955,2857741204,1464375394,1676153920,1439316330,715854006,3033291828,289532110,2706671279,2087905683,3018724369,1668267050,732546397,1947742710,3462151702,2609353502,2950085171,1814351708,2050118529,680887927,999245976,1800124847,3300911131,1713906067,1641548236,4213287313,1216130144,1575780402,4018429277,3917837745,3693486850,3949271944,596196993,3549867205,258830323,2213823033,772490370,2760122372,1774776394,2652871518,566650946,4142492826,1728879713,2882767088,1783734482,3629395816,2517608232,2874225571,1861159788,326777828,3124490320,2130389656,2716951837,967770486,1724537150,2185432712,2364442137,1164943284,2105845187,998989502,3765401048,2244026483,1075463327,1455516326,1322494562,910128902,469688178,1117454909,936433444,3490320968,3675253459,1240580251,122909385,2157517691,634681816,4142456567,3825094682,3061402683,2540495037,79693498,3249098678,1084186820,1583128258,426386531,1761308591,1047286709,322548459,995290223,1845252383,2603652396,3431023940,2942221577,3202600964,3727903485,1712269319,422464435,3234572375,1170764815,3523960633,3117677531,1434042557,442511882,3600875718,1076654713,1738483198,4213154764,2393238008,3677496056,1014306527,4251020053,793779912,2902807211,842905082,4246964064,1395751752,1040244610,2656851899,3396308128,445077038,3742853595,3577915638,679411651,2892444358,2354009459,1767581616,3150600392,3791627101,3102740896,284835224,4246832056,1258075500,768725851,2589189241,3069724005,3532540348,1274779536,3789419226,2764799539,1660621633,3471099624,4011903706,913787905,3497959166,737222580,2514213453,2928710040,3937242737,1804850592,3499020752,2949064160,2386320175,2390070455,2415321851,4061277028,2290661394,2416832540,1336762016,1754252060,3520065937,3014181293,791618072,3188594551,3933548030,2332172193,3852520463,3043980520,413987798,3465142937,3030929376,4245938359,2093235073,3534596313,375366246,2157278981,2479649556,555357303,3870105701,2008414854,3344188149,4221384143,3956125452,2067696032,3594591187,2921233993,2428461,544322398,577241275,1471733935,610547355,4027169054,1432588573,1507829418,2025931657,3646575487,545086370,48609733,2200306550,1653985193,298326376,1316178497,3007786442,2064951626,458293330,2589141269,3591329599,3164325604,727753846,2179363840,146436021,1461446943,4069977195,705550613,3059967265,3887724982,4281599278,3313849956,1404054877,2845806497,146425753,1854211946,1266315497,3048417604,3681880366,3289982499,290971e4,1235738493,2632868024,2414719590,3970600049,1771706367,1449415276,3266420449,422970021,1963543593,2690192192,3826793022,1062508698,1531092325,1804592342,2583117782,2714934279,4024971509,1294809318,4028980673,1289560198,2221992742,1669523910,35572830,157838143,1052438473,1016535060,1802137761,1753167236,1386275462,3080475397,2857371447,1040679964,2145300060,2390574316,1461121720,2956646967,4031777805,4028374788,33600511,2920084762,1018524850,629373528,3691585981,3515945977,2091462646,2486323059,586499841,988145025,935516892,3367335476,2599673255,2839830854,265290510,3972581182,2759138881,3795373465,1005194799,847297441,406762289,1314163512,1332590856,1866599683,4127851711,750260880,613907577,1450815602,3165620655,3734664991,3650291728,3012275730,3704569646,1427272223,778793252,1343938022,2676280711,2052605720,1946737175,3164576444,3914038668,3967478842,3682934266,1661551462,3294938066,4011595847,840292616,3712170807,616741398,312560963,711312465,1351876610,322626781,1910503582,271666773,2175563734,1594956187,70604529,3617834859,1007753275,1495573769,4069517037,2549218298,2663038764,504708206,2263041392,3941167025,2249088522,1514023603,1998579484,1312622330,694541497,2582060303,2151582166,1382467621,776784248,2618340202,3323268794,2497899128,2784771155,503983604,4076293799,907881277,423175695,432175456,1378068232,4145222326,3954048622,3938656102,3820766613,2793130115,2977904593,26017576,3274890735,3194772133,1700274565,1756076034,4006520079,3677328699,720338349,1533947780,354530856,688349552,3973924725,1637815568,332179504,3949051286,53804574,2852348879,3044236432,1282449977,3583942155,3416972820,4006381244,1617046695,2628476075,3002303598,1686838959,431878346,2686675385,1700445008,1080580658,1009431731,832498133,3223435511,2605976345,2271191193,2516031870,1648197032,4164389018,2548247927,300782431,375919233,238389289,3353747414,2531188641,2019080857,1475708069,455242339,2609103871,448939670,3451063019,1395535956,2413381860,1841049896,1491858159,885456874,4264095073,4001119347,1565136089,3898914787,1108368660,540939232,1173283510,2745871338,3681308437,4207628240,3343053890,4016749493,1699691293,1103962373,3625875870,2256883143,3830138730,1031889488,3479347698,1535977030,4236805024,3251091107,2132092099,1774941330,1199868427,1452454533,157007616,2904115357,342012276,595725824,1480756522,206960106,497939518,591360097,863170706,2375253569,3596610801,1814182875,2094937945,3421402208,1082520231,3463918190,2785509508,435703966,3908032597,1641649973,2842273706,3305899714,1510255612,2148256476,2655287854,3276092548,4258621189,236887753,3681803219,274041037,1734335097,3815195456,3317970021,1899903192,1026095262,4050517792,356393447,2410691914,3873677099,3682840055,3913112168,2491498743,4132185628,2489919796,1091903735,1979897079,3170134830,3567386728,3557303409,857797738,1136121015,1342202287,507115054,2535736646,337727348,3213592640,1301675037,2528481711,1895095763,1721773893,3216771564,62756741,2142006736,835421444,2531993523,1442658625,3659876326,2882144922,676362277,1392781812,170690266,3921047035,1759253602,3611846912,1745797284,664899054,1329594018,3901205900,3045908486,2062866102,2865634940,3543621612,3464012697,1080764994,553557557,3656615353,3996768171,991055499,499776247,1265440854,648242737,3940784050,980351604,3713745714,1749149687,3396870395,4211799374,3640570775,1161844396,3125318951,1431517754,545492359,4268468663,3499529547,1437099964,2702547544,3433638243,2581715763,2787789398,1060185593,1593081372,2418618748,4260947970,69676912,2159744348,86519011,2512459080,3838209314,1220612927,3339683548,133810670,1090789135,1078426020,1569222167,845107691,3583754449,4072456591,1091646820,628848692,1613405280,3757631651,526609435,236106946,48312990,2942717905,3402727701,1797494240,859738849,992217954,4005476642,2243076622,3870952857,3732016268,765654824,3490871365,2511836413,1685915746,3888969200,1414112111,2273134842,3281911079,4080962846,172450625,2569994100,980381355,4109958455,2819808352,2716589560,2568741196,3681446669,3329971472,1835478071,660984891,3704678404,4045999559,3422617507,3040415634,1762651403,1719377915,3470491036,2693910283,3642056355,3138596744,1364962596,2073328063,1983633131,926494387,3423689081,2150032023,4096667949,1749200295,3328846651,309677260,2016342300,1779581495,3079819751,111262694,1274766160,443224088,298511866,1025883608,3806446537,1145181785,168956806,3641502830,3584813610,1689216846,3666258015,3200248200,1692713982,2646376535,4042768518,1618508792,1610833997,3523052358,4130873264,2001055236,3610705100,2202168115,4028541809,2961195399,1006657119,2006996926,3186142756,1430667929,3210227297,1314452623,4074634658,4101304120,2273951170,1399257539,3367210612,3027628629,1190975929,2062231137,2333990788,2221543033,2438960610,1181637006,548689776,2362791313,3372408396,3104550113,3145860560,296247880,1970579870,3078560182,3769228297,1714227617,3291629107,3898220290,166772364,1251581989,493813264,448347421,195405023,2709975567,677966185,3703036547,1463355134,2715995803,1338867538,1343315457,2802222074,2684532164,233230375,2599980071,2000651841,3277868038,1638401717,4028070440,3237316320,6314154,819756386,300326615,590932579,1405279636,3267499572,3150704214,2428286686,3959192993,3461946742,1862657033,1266418056,963775037,2089974820,2263052895,1917689273,448879540,3550394620,3981727096,150775221,3627908307,1303187396,508620638,2975983352,2726630617,1817252668,1876281319,1457606340,908771278,3720792119,3617206836,2455994898,1729034894,1080033504,976866871,3556439503,2881648439,1522871579,1555064734,1336096578,3548522304,2579274686,3574697629,3205460757,3593280638,3338716283,3079412587,564236357,2993598910,1781952180,1464380207,3163844217,3332601554,1699332808,1393555694,1183702653,3581086237,1288719814,691649499,2847557200,2895455976,3193889540,2717570544,1781354906,1676643554,2592534050,3230253752,1126444790,2770207658,2633158820,2210423226,2615765581,2414155088,3127139286,673620729,2805611233,1269405062,4015350505,3341807571,4149409754,1057255273,2012875353,2162469141,2276492801,2601117357,993977747,3918593370,2654263191,753973209,36408145,2530585658,25011837,3520020182,2088578344,530523599,2918365339,1524020338,1518925132,3760827505,3759777254,1202760957,3985898139,3906192525,674977740,4174734889,2031300136,2019492241,3983892565,4153806404,3822280332,352677332,2297720250,60907813,90501309,3286998549,1016092578,2535922412,2839152426,457141659,509813237,4120667899,652014361,1966332200,2975202805,55981186,2327461051,676427537,3255491064,2882294119,3433927263,1307055953,942726286,933058658,2468411793,3933900994,4215176142,1361170020,2001714738,2830558078,3274259782,1222529897,1679025792,2729314320,3714953764,1770335741,151462246,3013232138,1682292957,1483529935,471910574,1539241949,458788160,3436315007,1807016891,3718408830,978976581,1043663428,3165965781,1927990952,4200891579,2372276910,3208408903,3533431907,1412390302,2931980059,4132332400,1947078029,3881505623,4168226417,2941484381,1077988104,1320477388,886195818,18198404,3786409e3,2509781533,112762804,3463356488,1866414978,891333506,18488651,661792760,1628790961,3885187036,3141171499,876946877,2693282273,1372485963,791857591,2686433993,3759982718,3167212022,3472953795,2716379847,445679433,3561995674,3504004811,3574258232,54117162,3331405415,2381918588,3769707343,4154350007,1140177722,4074052095,668550556,3214352940,367459370,261225585,2610173221,4209349473,3468074219,3265815641,314222801,3066103646,3808782860,282218597,3406013506,3773591054,379116347,1285071038,846784868,2669647154,3771962079,3550491691,2305946142,453669953,1268987020,3317592352,3279303384,3744833421,2610507566,3859509063,266596637,3847019092,517658769,3462560207,3443424879,370717030,4247526661,2224018117,4143653529,4112773975,2788324899,2477274417,1456262402,2901442914,1517677493,1846949527,2295493580,3734397586,2176403920,1280348187,1908823572,3871786941,846861322,1172426758,3287448474,3383383037,1655181056,3139813346,901632758,1897031941,2986607138,3066810236,3447102507,1393639104,373351379,950779232,625454576,3124240540,4148612726,2007998917,544563296,2244738638,2330496472,2058025392,1291430526,424198748,50039436,29584100,3605783033,2429876329,2791104160,1057563949,3255363231,3075367218,3463963227,1469046755,985887462],To=[1332899944,1700884034,1701343084,1684370003,1668446532,1869963892],ml=(i,s)=>{if(s<=0||s>i.length)throw Error(`Illegal len: ${s}`);let e=0,n,t;const a=[];for(;e<s;){if(n=i[e++]&255,a.push(Ue[n>>2&63]),n=(n&3)<<4,e>=s){a.push(Ue[n&63]);break}if(t=i[e++]&255,n|=t>>4&15,a.push(Ue[n&63]),n=(t&15)<<2,e>=s){a.push(Ue[n&63]);break}t=i[e++]&255,n|=t>>6&3,a.push(Ue[n&63]),a.push(Ue[t&63])}return a.join("")},c7=(i,s)=>{const e=i.length;let n=0,t=0,a,l,r,h,p,o;const d=[];for(;n<e-1&&t<s&&(o=i.charCodeAt(n++),a=o<ne.length?ne[o]:-1,o=i.charCodeAt(n++),l=o<ne.length?ne[o]:-1,!(a==-1||l==-1||(p=a<<2>>>0,p|=(l&48)>>4,d.push(String.fromCharCode(p)),++t>=s||n>=e)||(o=i.charCodeAt(n++),r=o<ne.length?ne[o]:-1,r==-1)||(p=(l&15)<<4>>>0,p|=(r&60)>>2,d.push(String.fromCharCode(p)),++t>=s||n>=e)));)o=i.charCodeAt(n++),h=o<ne.length?ne[o]:-1,p=(r&3)<<6>>>0,p|=h,d.push(String.fromCharCode(p)),++t;return d.map(c=>c.charCodeAt(0))},B7=(i,s)=>{let e=null;for(typeof i=="number"&&(e=i,i=()=>null);e!==null||(e=i())!==null;)e<128?s(e&127):e<2048?(s(e>>6&31|192),s(e&63|128)):e<65536?(s(e>>12&15|224),s(e>>6&63|128),s(e&63|128)):(s(e>>18&7|240),s(e>>12&63|128),s(e>>6&63|128),s(e&63|128)),e=null},k7=(i,s)=>{let e,n=null;for(;(e=n!==null?n:i())!==null;){if(e>=55296&&e<=57343&&(n=i())!==null&&n>=56320&&n<=57343){s((e-55296)*1024+n-56320+65536),n=null;continue}s(e)}n!==null&&s(n)},A7=(i,s)=>{k7(i,function(e){B7(e,s)})};typeof process=="object"&&d7.NEXT_RUNTIME==="edge"||(typeof setImmediate=="function"?setImmediate:typeof process=="object"&&typeof process.nextTick=="function"&&process.nextTick);const u7=i=>{const s=[];let e=0;return A7(()=>e>=i.length?null:i.charCodeAt(e++),n=>{s.push(n)}),s},Gn=(i,s,e,n)=>{let t,a=i[s],l=i[s+1];return a^=e[0],t=n[a>>>24],t+=n[256|a>>16&255],t^=n[512|a>>8&255],t+=n[768|a&255],l^=t^e[1],t=n[l>>>24],t+=n[256|l>>16&255],t^=n[512|l>>8&255],t+=n[768|l&255],a^=t^e[2],t=n[a>>>24],t+=n[256|a>>16&255],t^=n[512|a>>8&255],t+=n[768|a&255],l^=t^e[3],t=n[l>>>24],t+=n[256|l>>16&255],t^=n[512|l>>8&255],t+=n[768|l&255],a^=t^e[4],t=n[a>>>24],t+=n[256|a>>16&255],t^=n[512|a>>8&255],t+=n[768|a&255],l^=t^e[5],t=n[l>>>24],t+=n[256|l>>16&255],t^=n[512|l>>8&255],t+=n[768|l&255],a^=t^e[6],t=n[a>>>24],t+=n[256|a>>16&255],t^=n[512|a>>8&255],t+=n[768|a&255],l^=t^e[7],t=n[l>>>24],t+=n[256|l>>16&255],t^=n[512|l>>8&255],t+=n[768|l&255],a^=t^e[8],t=n[a>>>24],t+=n[256|a>>16&255],t^=n[512|a>>8&255],t+=n[768|a&255],l^=t^e[9],t=n[l>>>24],t+=n[256|l>>16&255],t^=n[512|l>>8&255],t+=n[768|l&255],a^=t^e[10],t=n[a>>>24],t+=n[256|a>>16&255],t^=n[512|a>>8&255],t+=n[768|a&255],l^=t^e[11],t=n[l>>>24],t+=n[256|l>>16&255],t^=n[512|l>>8&255],t+=n[768|l&255],a^=t^e[12],t=n[a>>>24],t+=n[256|a>>16&255],t^=n[512|a>>8&255],t+=n[768|a&255],l^=t^e[13],t=n[l>>>24],t+=n[256|l>>16&255],t^=n[512|l>>8&255],t+=n[768|l&255],a^=t^e[14],t=n[a>>>24],t+=n[256|a>>16&255],t^=n[512|a>>8&255],t+=n[768|a&255],l^=t^e[15],t=n[l>>>24],t+=n[256|l>>16&255],t^=n[512|l>>8&255],t+=n[768|l&255],a^=t^e[16],i[s]=l^e[17],i[s+1]=a,i},je=(i,s)=>{let e=0;for(let n=0;n<4;++n)e=e<<8|i[s]&255,s=(s+1)%i.length;return{key:e,offp:s}},qE=(i,s,e)=>{const n=s.length,t=e.length;let a=0,l=[0,0],r;for(let h=0;h<n;h++)r=je(i,a),a=r.offp,s[h]=s[h]^r.key;for(let h=0;h<n;h+=2)l=Gn(l,0,s,e),s[h]=l[0],s[h+1]=l[1];for(let h=0;h<t;h+=2)l=Gn(l,0,s,e),e[h]=l[0],e[h+1]=l[1]},g7=(i,s,e,n)=>{const t=e.length,a=n.length;let l=0,r=[0,0],h;for(let p=0;p<t;p++)h=je(s,l),l=h.offp,e[p]=e[p]^h.key;l=0;for(let p=0;p<t;p+=2)h=je(i,l),l=h.offp,r[0]^=h.key,h=je(i,l),l=h.offp,r[1]^=h.key,r=Gn(r,0,e,n),e[p]=r[0],e[p+1]=r[1];for(let p=0;p<a;p+=2)h=je(i,l),l=h.offp,r[0]^=h.key,h=je(i,l),l=h.offp,r[1]^=h.key,r=Gn(r,0,e,n),n[p]=r[0],n[p+1]=r[1]},m7=(i,s,e,n,t)=>{const a=To.slice(),l=a.length;if(e<4||e>31)throw new Error(`Illegal number of rounds (4-31): ${e}`);if(s.length!==16)throw new Error(`Illegal salt length: ${s.length} != 16`);e=1<<e>>>0;let r,h,p=0,o;Int32Array?(r=new Int32Array(GE),h=new Int32Array(WE)):(r=GE.slice(),h=WE.slice()),g7(s,i,r,h);const d=()=>{if(p<e){const c=Date.now();for(;p<e&&(p=p+1,qE(i,r,h),qE(s,r,h),!(Date.now()-c>100)););}else{for(p=0;p<64;p++)for(o=0;o<l>>1;o++)Gn(a,o<<1,r,h);const c=[];for(p=0;p<l;p++)c.push((a[p]>>24&255)>>>0),c.push((a[p]>>16&255)>>>0),c.push((a[p]>>8&255)>>>0),c.push((a[p]&255)>>>0);return c}};{let c;for(;;)if(typeof(c=d())<"u")return c||[]}},f7=i=>{try{let s;typeof window<"u"?s=window.crypto??window.msCrypto:s=globalThis.crypto;const e=new Uint32Array(i);return s==null||s.getRandomValues(e),Array.from(e)}catch{throw Error("WebCryptoAPI is not available")}},v7=(i=10)=>{if(typeof i!="number")throw Error("Illegal arguments: "+typeof i);i<4?i=4:i>31&&(i=31);const s=[];return s.push("$2a$"),i<10&&s.push("0"),s.push(i.toString()),s.push("$"),s.push(ml(f7(16),16)),s.join("")};function y7(i,s,e,n){if(typeof i!="string"||typeof s!="string")throw new Error("Invalid string / salt: Not a string");let t,a;if(s.charAt(0)!=="$"||s.charAt(1)!=="2")throw new Error("Invalid salt version: "+s.substring(0,2));if(s.charAt(2)==="$")t="\0",a=3;else{if(t=s.charAt(2),t!=="a"&&t!=="b"&&t!=="y"||s.charAt(3)!=="$")throw Error("Invalid salt revision: "+s.substring(2,4));a=4}if(s.charAt(a+2)>"$")throw new Error("Missing salt rounds");const l=parseInt(s.substring(a,a+1),10)*10,r=parseInt(s.substring(a+1,a+2),10),h=l+r,p=s.substring(a+3,a+25);i+=t>="a"?"\0":"";const o=u7(i),d=c7(p,16);return(k=>{const f=[];return f.push("$2"),t>="a"&&f.push(t),f.push("$"),h<10&&f.push("0"),f.push(h.toString()),f.push("$"),f.push(ml(d,d.length)),f.push(ml(k,To.length*4-1)),f.join("")})(m7(o,d,h))}const F7=(i,s=10)=>{if(typeof s=="number"&&(s=v7(s)),typeof i!="string"||typeof s!="string")throw Error("Illegal arguments: "+typeof i+", "+typeof s);return y7(i,s)},fl=(i,s)=>{if(typeof i!="string"||typeof s!="string")throw Error("Illegal arguments: "+typeof i+", "+typeof s);return s.length!==60?!1:F7(i,s.substring(0,s.length-31))===s};var Po=R({name:"PasswordModal",props:{full:Boolean},emits:["verify"],setup(i,{emit:s}){const e=Bi(),n=ri(),t=G(""),a=G(!1),l=G(!1),r=F(()=>n.value.encryptLocales);let h=null;const p=()=>{h&&clearTimeout(h),a.value=!1,s("verify",t.value,l.value),ys().then(()=>{a.value=!0,h=setTimeout(()=>{a.value=!1},1e3)})};return()=>E("div",{class:["vp-decrypt-layer",{expand:i.full||e.value.home}]},E("div",{class:"vp-decrypt-modal"},[E("div",{class:["vp-decrypt-hint",{tried:a.value}]},a.value?r.value.errorHint:E(dr,{"aria-label":r.value.iconLabel})),E("div",{class:"vp-decrypt-input"},[E("input",{type:"password",value:t.value,placeholder:r.value.placeholder,onInput:({target:o})=>{t.value=o.value},onKeydown:({key:o})=>{o==="Enter"&&p()}})]),E("div",{class:"vp-remember-password"},[E("input",{type:"checkbox",value:l.value,onChange:()=>l.value=!l.value}),r.value.remember]),E("button",{type:"button",class:"vp-decrypt-submit",onClick:()=>p()},"OK")]))}});const Lo=()=>{const i=Ns();return F(()=>i.value.encrypt||{})},KE="VUEPRESS_HOPE_GLOBAL_TOKEN",C7=()=>{const i=Lo(),s=tt(KE,""),e=e8(KE,""),n=F(()=>{const{global:a=!1,admin:l=[]}=i.value;return a&&l.length>0}),t=F(()=>{if(n.value){if(s.value)return i.value.admin.some(a=>fl(s.value,a));if(e.value)return i.value.admin.some(a=>fl(e.value,a))}return!1});return{isEncrypted:n,isDecrypted:t,validate:(a,l=!1)=>{(l?s:e).value=a}}},Sa=(i="",s)=>!!i&&fl(i,s),XE="VUEPRESS_HOPE_PATH_TOKEN",D7=()=>{const i=bi(),s=Lo(),e=tt(XE,{}),n=e8(XE,{}),t=l=>it(s.value.config)?Ys(s.value.config).filter(r=>Un(decodeURI(l),r)).sort((r,h)=>h.length-r.length):[],a=l=>{const r=t(l);if(r.length>0){const{config:h={}}=s.value;return{isEncrypted:!0,isDecrypted:r.some(p=>e.value[p]&&h[p].some(o=>Sa(e.value[p],o))||n.value[p]&&h[p].some(o=>Sa(n.value[p],o)))}}return{isDecrypted:!1,isEncrypted:!1}};return{status:F(()=>a(i.value.path)),getStatus:a,validate:(l,r=!1)=>{const{config:h={}}=s.value,p=t(i.value.path);for(const o of p)if(h[o].filter(d=>Sa(l,d))){(r?e:n).value[o]=l;break}}}};var b7=R({name:"GlobalEncrypt",slots:Object,setup(i,{slots:s}){const{isDecrypted:e,isEncrypted:n,validate:t}=C7(),a=Qi(),l=G(!1);return pi(()=>{l.value=!0}),()=>E(a.value?Zt:or,()=>n.value?l.value?e.value?s.default():E(Po,{full:!0,onVerify:t}):null:s.default())}}),_7=R({name:"LocalEncrypt",slots:Object,setup(i,{slots:s}){const{status:e,validate:n}=D7(),t=G(!1);return pi(()=>{t.value=!0}),()=>{const{isEncrypted:a,isDecrypted:l}=e.value;return a?t.value?l?s.default():E(Po,{full:!0,onVerify:n}):null:s.default()}}});const w7=()=>E(ci,{name:"back"},()=>E("path",{d:"M1014.749 449.156v125.688H260.626l345.64 345.64-89.239 89.237L19.307 512l497.72-497.721 89.238 89.238-345.64 345.64h754.124z"})),x7=()=>E(ci,{name:"home"},()=>E("path",{d:"M780.106 420.978L506.994 147.866 233.882 420.978h.045v455.11H780.06v-455.11h.046zm90.977 90.976V876.09a91.022 91.022 0 01-91.023 91.022H233.927a91.022 91.022 0 01-91.022-91.022V511.954l-67.22 67.175-64.307-64.307 431.309-431.31c35.498-35.498 93.115-35.498 128.614 0l431.309 431.31-64.307 64.307L871.083 512z"}));var T7=R({name:"SlidePage",setup(){const i=me(),s=Fs(),e=G(!1),n=Pi(),t=()=>{e.value=!e.value},a=()=>{e.value=!1},l=()=>{a(),window.history.go(-1)},r=()=>{a(),i.push(s.value)};return yk(n,a),()=>E("div",{class:"vp-reveal-page"},[E(Yl),E("div",{ref:n,class:["vp-reveal-menu",{active:e.value}]},[E("button",{type:"button",class:"menu-button",onClick:()=>t()},E("span",{class:"icon"})),E("button",{type:"button",class:"back-button",onClick:()=>l()},E(w7)),E("button",{type:"button",class:"home-button",onClick:()=>r()},E(x7))])])}});jk(i=>{const s=i.t,e=i.I!==!1,n=i.i;return e?{title:s,content:n?()=>[E(zi,{icon:n}),s]:null,order:i.O,index:i.I}:null});const P7=ds({enhance:({app:i,router:s})=>{const{scrollBehavior:e}=s.options;s.options.scrollBehavior=async(...n)=>(await cl.wait(),e(...n)),WA(i),i.component("HopeIcon",zi),i.component("BloggerInfo",kr),i.component("SocialMedias",uo),i.component("GlobalEncrypt",b7),i.component("LocalEncrypt",_7)},setup:()=>{qA(),zA(),Gu()},layouts:{Layout:Su,NotFound:Iu,BlogCategory:s7,BlogHome:r7,BlogType:h7,Timeline:o7,Slide:T7}}),L7=Object.freeze(Object.defineProperty({__proto__:null,default:P7},Symbol.toStringTag,{value:"Module"}));function So(i){return bl()?(ih(i),!0):!1}function ws(i){return typeof i=="function"?i():Ks(i)}const Oo=typeof window<"u"&&typeof document<"u";typeof WorkerGlobalScope<"u"&&globalThis instanceof WorkerGlobalScope;const S7=Object.prototype.toString,O7=i=>S7.call(i)==="[object Object]",Te=()=>{},vl=I7();function I7(){var i,s;return Oo&&((i=window==null?void 0:window.navigator)==null?void 0:i.userAgent)&&(/iP(?:ad|hone|od)/.test(window.navigator.userAgent)||((s=window==null?void 0:window.navigator)==null?void 0:s.maxTouchPoints)>2&&/iPad|Macintosh/.test(window==null?void 0:window.navigator.userAgent))}function Io(i,s){function e(...n){return new Promise((t,a)=>{Promise.resolve(i(()=>s.apply(this,n),{fn:s,thisArg:this,args:n})).then(t).catch(a)})}return e}const Ro=i=>i();function R7(i,s={}){let e,n,t=Te;const a=r=>{clearTimeout(r),t(),t=Te};return r=>{const h=ws(i),p=ws(s.maxWait);return e&&a(e),h<=0||p!==void 0&&p<=0?(n&&(a(n),n=null),Promise.resolve(r())):new Promise((o,d)=>{t=s.rejectOnCancel?d:o,p&&!n&&(n=setTimeout(()=>{e&&a(e),n=null,o(r())},p)),e=setTimeout(()=>{n&&a(n),n=null,o(r())},h)})}}function M7(i=Ro){const s=G(!0);function e(){s.value=!1}function n(){s.value=!0}const t=(...a)=>{s.value&&i(...a)};return{isActive:Zs(s),pause:e,resume:n,eventFilter:t}}function V7(i){return ge()}function $7(...i){if(i.length!==1)return Oe(...i);const s=i[0];return typeof s=="function"?Zs(Ol(()=>({get:s,set:Te}))):G(s)}function N7(i,s=200,e={}){return Io(R7(s,e),i)}function H7(i,s,e={}){const{eventFilter:n=Ro,...t}=e;return ti(i,Io(n,s),t)}function U7(i,s,e={}){const{eventFilter:n,...t}=e,{eventFilter:a,pause:l,resume:r,isActive:h}=M7(n);return{stop:H7(i,s,{...t,eventFilter:a}),pause:l,resume:r,isActive:h}}function z7(i,s=!0,e){V7()?pi(i,e):s?i():ys(i)}const Wn=Oo?window:void 0;function Fn(i){var s;const e=ws(i);return(s=e==null?void 0:e.$el)!=null?s:e}function ce(...i){let s,e,n,t;if(typeof i[0]=="string"||Array.isArray(i[0])?([e,n,t]=i,s=Wn):[s,e,n,t]=i,!s)return Te;Array.isArray(e)||(e=[e]),Array.isArray(n)||(n=[n]);const a=[],l=()=>{a.forEach(o=>o()),a.length=0},r=(o,d,c,k)=>(o.addEventListener(d,c,k),()=>o.removeEventListener(d,c,k)),h=ti(()=>[Fn(s),ws(t)],([o,d])=>{if(l(),!o)return;const c=O7(d)?{...d}:d;a.push(...e.flatMap(k=>n.map(f=>r(o,k,f,c))))},{immediate:!0,flush:"post"}),p=()=>{h(),l()};return So(p),p}let YE=!1;function j7(i,s,e={}){const{window:n=Wn,ignore:t=[],capture:a=!0,detectIframe:l=!1}=e;if(!n)return Te;vl&&!YE&&(YE=!0,Array.from(n.document.body.children).forEach(u=>u.addEventListener("click",Te)),n.document.documentElement.addEventListener("click",Te));let r=!0;const h=u=>ws(t).some(y=>{if(typeof y=="string")return Array.from(n.document.querySelectorAll(y)).some(v=>v===u.target||u.composedPath().includes(v));{const v=Fn(y);return v&&(u.target===v||u.composedPath().includes(v))}});function p(u){const y=ws(u);return y&&y.$.subTree.shapeFlag===16}function o(u,y){const v=ws(u),D=v.$.subTree&&v.$.subTree.children;return D==null||!Array.isArray(D)?!1:D.some(g=>g.el===y.target||y.composedPath().includes(g.el))}const d=u=>{const y=Fn(i);if(u.target!=null&&!(!(y instanceof Element)&&p(i)&&o(i,u))&&!(!y||y===u.target||u.composedPath().includes(y))){if(u.detail===0&&(r=!h(u)),!r){r=!0;return}s(u)}};let c=!1;const k=[ce(n,"click",u=>{c||(c=!0,setTimeout(()=>{c=!1},0),d(u))},{passive:!0,capture:a}),ce(n,"pointerdown",u=>{const y=Fn(i);r=!h(u)&&!!(y&&!u.composedPath().includes(y))},{passive:!0}),l&&ce(n,"blur",u=>{setTimeout(()=>{var y;const v=Fn(i);((y=n.document.activeElement)==null?void 0:y.tagName)==="IFRAME"&&!(v!=null&&v.contains(n.document.activeElement))&&s(u)},0)})].filter(Boolean);return()=>k.forEach(u=>u())}function G7(){const i=G(!1),s=ge();return s&&pi(()=>{i.value=!0},s),i}function W7(i){const s=G7();return F(()=>(s.value,!!i()))}const Ft=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},Ct="__vueuse_ssr_handlers__",q7=K7();function K7(){return Ct in Ft||(Ft[Ct]=Ft[Ct]||{}),Ft[Ct]}function X7(i,s){return q7[i]||s}function Y7(i){return i==null?"any":i instanceof Set?"set":i instanceof Map?"map":i instanceof Date?"date":typeof i=="boolean"?"boolean":typeof i=="string"?"string":typeof i=="object"?"object":Number.isNaN(i)?"any":"number"}const Q7={boolean:{read:i=>i==="true",write:i=>String(i)},object:{read:i=>JSON.parse(i),write:i=>JSON.stringify(i)},number:{read:i=>Number.parseFloat(i),write:i=>String(i)},any:{read:i=>i,write:i=>String(i)},string:{read:i=>i,write:i=>String(i)},map:{read:i=>new Map(JSON.parse(i)),write:i=>JSON.stringify(Array.from(i.entries()))},set:{read:i=>new Set(JSON.parse(i)),write:i=>JSON.stringify(Array.from(i))},date:{read:i=>new Date(i),write:i=>i.toISOString()}},QE="vueuse-storage";function J7(i,s,e,n={}){var t;const{flush:a="pre",deep:l=!0,listenToStorageChanges:r=!0,writeDefaults:h=!0,mergeDefaults:p=!1,shallow:o,window:d=Wn,eventFilter:c,onError:k=_=>{console.error(_)},initOnMounted:f}=n,u=(o?Pi:G)(typeof s=="function"?s():s);if(!e)try{e=X7("getDefaultStorage",()=>{var _;return(_=Wn)==null?void 0:_.localStorage})()}catch(_){k(_)}if(!e)return u;const y=ws(s),v=Y7(y),D=(t=n.serializer)!=null?t:Q7[v],{pause:g,resume:C}=U7(u,()=>W(u.value),{flush:a,deep:l,eventFilter:c});d&&r&&z7(()=>{e instanceof Storage?ce(d,"storage",X):ce(d,QE,$),f&&X()}),f||X();function L(_,I){if(d){const T={key:i,oldValue:_,newValue:I,storageArea:e};d.dispatchEvent(e instanceof Storage?new StorageEvent("storage",T):new CustomEvent(QE,{detail:T}))}}function W(_){try{const I=e.getItem(i);if(_==null)L(I,null),e.removeItem(i);else{const T=D.write(_);I!==T&&(e.setItem(i,T),L(I,T))}}catch(I){k(I)}}function V(_){const I=_?_.newValue:e.getItem(i);if(I==null)return h&&y!=null&&e.setItem(i,D.write(y)),y;if(!_&&p){const T=D.read(I);return typeof p=="function"?p(T,y):v==="object"&&!Array.isArray(T)?{...y,...T}:T}else return typeof I!="string"?I:D.read(I)}function X(_){if(!(_&&_.storageArea!==e)){if(_&&_.key==null){u.value=y;return}if(!(_&&_.key!==i)){g();try{(_==null?void 0:_.newValue)!==D.write(u.value)&&(u.value=V(_))}catch(I){k(I)}finally{_?ys(C):C()}}}}function $(_){X(_.detail)}return u}function Oa(i){return typeof Window<"u"&&i instanceof Window?i.document.documentElement:typeof Document<"u"&&i instanceof Document?i.documentElement:i}function X0(i,s,e={}){const{window:n=Wn}=e;return J7(i,s,n==null?void 0:n.localStorage,e)}function Mo(i){const s=window.getComputedStyle(i);if(s.overflowX==="scroll"||s.overflowY==="scroll"||s.overflowX==="auto"&&i.clientWidth<i.scrollWidth||s.overflowY==="auto"&&i.clientHeight<i.scrollHeight)return!0;{const e=i.parentNode;return!e||e.tagName==="BODY"?!1:Mo(e)}}function Z7(i){const s=i||window.event,e=s.target;return Mo(e)?!1:s.touches.length>1?!0:(s.preventDefault&&s.preventDefault(),!1)}const Ia=new WeakMap;function i0(i,s=!1){const e=G(s);let n=null,t="";ti($7(i),r=>{const h=Oa(ws(r));if(h){const p=h;if(Ia.get(p)||Ia.set(p,p.style.overflow),p.style.overflow!=="hidden"&&(t=p.style.overflow),p.style.overflow==="hidden")return e.value=!0;if(e.value)return p.style.overflow="hidden"}},{immediate:!0});const a=()=>{const r=Oa(ws(i));!r||e.value||(vl&&(n=ce(r,"touchmove",h=>{Z7(h)},{passive:!1})),r.style.overflow="hidden",e.value=!0)},l=()=>{const r=Oa(ws(i));!r||!e.value||(vl&&(n==null||n()),r.style.overflow=t,Ia.delete(r),e.value=!1)};return So(l),F({get(){return e.value},set(r){r?a():l()}})}const s0=i=>[/\((ipad);[-\w),; ]+apple/i,/applecoremedia\/[\w.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i].some(s=>s.test(i)),e0=i=>[/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,/cfnetwork\/.+darwin/i].some(s=>s.test(i)),n0=i=>[/(mac os x) ?([\w. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i].some(s=>s.test(i)),na=i=>{const s=Fs();return F(()=>i[s.value]??{})},t0=(i,s)=>wi(i)&&i.startsWith(s),{values:a0}=Object;var l0={},r0={"/":{cancel:"取消",placeholder:"搜索",search:"搜索",searching:"搜索中",defaultTitle:"文档",select:"选择",navigate:"切换",autocomplete:"自动补全",exit:"关闭",queryHistory:"搜索历史",resultHistory:"历史结果",emptyHistory:"无搜索历史",emptyResult:"没有找到结果",loading:"正在加载搜索索引..."}},E0={searchDelay:150,suggestDelay:0,queryHistoryCount:5,resultHistoryCount:5,hotKeys:[{key:"k",ctrl:!0},{key:"/",ctrl:!0}],worker:"slimsearch.worker.js"};const Y0=l0,$t=E0,Vo=$t.hotKeys,ta=r0,Ra="Canceled because of new search request.",h0=()=>{const i=new Worker(`/${$t.worker}`,{}),s={suggest:null,search:null,all:null};return i.addEventListener("message",({data:e})=>{const[n,t,a]=e,l=s[n];(l==null?void 0:l.id)===t&&l.resolve(a)}),i.addEventListener("error",e=>{console.warn("Search Worker error:",e)}),{suggest:(e,n,t)=>new Promise((a,l)=>{var h;(h=s.suggest)==null||h.reject(new Error(Ra));const r=Date.now();i.postMessage({type:"suggest",id:r,query:e,locale:n,options:t}),s.suggest={id:r,resolve:a,reject:l}}),search:(e,n,t)=>new Promise((a,l)=>{var h;(h=s.search)==null||h.reject(new Error(Ra));const r=Date.now();i.postMessage({type:"search",id:r,query:e,locale:n,options:t}),s.search={id:r,resolve:a,reject:l}}),all:(e,n,t)=>new Promise((a,l)=>{var h;(h=s.all)==null||h.reject(new Error(Ra));const r=Date.now();i.postMessage({type:"all",id:r,query:e,locale:n,options:t}),s.all={id:r,resolve:a,reject:l}}),terminate:()=>{i.terminate(),a0(s).forEach(e=>{e==null||e.reject(new Error("Worker has been terminated."))})}}};let p0={};const $o=Symbol(""),No=()=>{const i=Fs(),{locales:s={},...e}=ui($o);return F(()=>({...e,...s[i.value]}))},o0=i=>{i.provide($o,p0)},d0='<svg width="20" height="20" viewBox="0 0 20 20"><path d="M10 10l5.09-5.09L10 10l5.09 5.09L10 10zm0 0L4.91 4.91 10 10l-5.09 5.09L10 10z" stroke="currentColor" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"></path></svg>',Ho=({class:i,hint:s})=>E("div",{class:[i,"loading"]},[E("svg",{xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32",preserveAspectRatio:"xMidYMid",viewBox:"0 0 100 100"},[E("circle",{cx:"28",cy:"75",r:"11",fill:"currentColor"},E("animate",{attributeName:"fill-opacity",begin:"0s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"})),E("path",{fill:"none",stroke:"#88baf0","stroke-width":"10",d:"M28 47a28 28 0 0 1 28 28"},E("animate",{attributeName:"stroke-opacity",begin:"0.1s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"})),E("path",{fill:"none",stroke:"#88baf0","stroke-width":"10",d:"M28 25a50 50 0 0 1 50 50"},E("animate",{attributeName:"stroke-opacity",begin:"0.2s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"}))]),s]);Ho.displayName="SearchLoading";const cn=({name:i="",color:s="currentColor"},{slots:e})=>E("svg",{xmlns:"http://www.w3.org/2000/svg",class:["icon",`${i}-icon`],viewBox:"0 0 1024 1024",fill:s,"aria-label":`${i} icon`},e.default());cn.displayName="SVGWrapper";const c0=()=>E(cn,{name:"heading"},()=>E("path",{d:"M250.4 704.6H64V595.4h202.4l26.2-166.6H94V319.6h214.4L352 64h127.8l-43.6 255.4h211.2L691 64h126.2l-43.6 255.4H960v109.2H756.2l-24.6 166.6H930v109.2H717L672 960H545.8l43.6-255.4H376.6L333 960H206.8l43.6-255.4zm168.4-276L394 595.4h211.2l24.6-166.6h-211z"}));c0.displayName="HeadingIcon";const B0=()=>E(cn,{name:"heart"},()=>E("path",{d:"M1024 358.156C1024 195.698 892.3 64 729.844 64c-86.362 0-164.03 37.218-217.844 96.49C458.186 101.218 380.518 64 294.156 64 131.698 64 0 195.698 0 358.156 0 444.518 37.218 522.186 96.49 576H96l320 320c32 32 64 64 96 64s64-32 96-64l320-320h-.49c59.272-53.814 96.49-131.482 96.49-217.844zM841.468 481.232 517.49 805.49a2981.962 2981.962 0 0 1-5.49 5.48c-1.96-1.95-3.814-3.802-5.49-5.48L182.532 481.234C147.366 449.306 128 405.596 128 358.156 128 266.538 202.538 192 294.156 192c47.44 0 91.15 19.366 123.076 54.532L512 350.912l94.768-104.378C638.696 211.366 682.404 192 729.844 192 821.462 192 896 266.538 896 358.156c0 47.44-19.368 91.15-54.532 123.076z"}));B0.displayName="HeartIcon";const k0=()=>E(cn,{name:"history"},()=>E("path",{d:"M512 1024a512 512 0 1 1 512-512 512 512 0 0 1-512 512zm0-896a384 384 0 1 0 384 384 384 384 0 0 0-384-384zm192 448H512a64 64 0 0 1-64-64V320a64 64 0 0 1 128 0v128h128a64 64 0 0 1 0 128z"}));k0.displayName="HistoryIcon";const A0=()=>E(cn,{name:"title"},()=>E("path",{d:"M512 256c70.656 0 134.656 28.672 180.992 75.008A254.933 254.933 0 0 1 768 512c0 83.968-41.024 157.888-103.488 204.48C688.96 748.736 704 788.48 704 832c0 105.984-86.016 192-192 192-106.048 0-192-86.016-192-192h128a64 64 0 1 0 128 0 64 64 0 0 0-64-64 255.19 255.19 0 0 1-181.056-75.008A255.403 255.403 0 0 1 256 512c0-83.968 41.024-157.824 103.488-204.544C335.04 275.264 320 235.584 320 192A192 192 0 0 1 512 0c105.984 0 192 85.952 192 192H576a64.021 64.021 0 0 0-128 0c0 35.328 28.672 64 64 64zM384 512c0 70.656 57.344 128 128 128s128-57.344 128-128-57.344-128-128-128-128 57.344-128 128z"}));A0.displayName="TitleIcon";const fr=()=>E(cn,{name:"search"},()=>E("path",{d:"M192 480a256 256 0 1 1 512 0 256 256 0 0 1-512 0m631.776 362.496-143.2-143.168A318.464 318.464 0 0 0 768 480c0-176.736-143.264-320-320-320S128 303.264 128 480s143.264 320 320 320a318.016 318.016 0 0 0 184.16-58.592l146.336 146.368c12.512 12.48 32.768 12.48 45.28 0 12.48-12.512 12.48-32.768 0-45.28"}));fr.displayName="SearchIcon";const vr=Symbol(""),u0=()=>{const i=G(!1);ps(vr,i)},g0=(i,s=!1)=>{const e=G(0),n=F(()=>i.value[e.value]),t=()=>{e.value=e.value>0?e.value-1:i.value.length-1},a=()=>{e.value=e.value<i.value.length-1?e.value+1:0};return ti(i,()=>{s||(e.value=0)}),{index:e,item:n,prev:t,next:a}},m0=()=>{const i=W7(()=>typeof window<"u"&&"userAgent"in window.navigator);return F(()=>i.value&&/\b(?:Android|iPhone)/i.test(navigator.userAgent))},f0=i=>i instanceof Element?document.activeElement===i&&(["TEXTAREA","SELECT","INPUT"].includes(i.tagName)||i.hasAttribute("contenteditable")):!1,v0=i=>Vo.some(s=>{const{key:e,ctrl:n=!1,shift:t=!1,alt:a=!1,meta:l=!1}=s;return e===i.key&&n===i.ctrlKey&&t===i.shiftKey&&a===i.altKey&&l===i.metaKey}),y0=i=>{const s=G([]);{const e=No(),n=bi(),t=Fs();pi(()=>{const{suggest:a,terminate:l}=h0(),r=h=>{const{resultsFilter:p,querySplitter:o,suggestionsFilter:d=k=>k,...c}=e.value;h?a(h,t.value,c).then(k=>d(k,h,t.value,n.value)).then(k=>{s.value=k.length?t0(k[0],h)&&!k[0].slice(h.length).includes(" ")?k:[h,...k]:[]}).catch(k=>{console.error(k)}):s.value=[]};ti([i,t],([h])=>{r(h.join(" "))},{immediate:!0}),ue(()=>{l()})})}return{suggestions:s}},F0='<svg width="15" height="15" aria-label="Enter key" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M12 3.53088v3c0 1-1 2-2 2H4M7 11.53088l-3-3 3-3"></path></g></svg>',C0='<svg width="15" height="15" aria-label="Arrow down" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M7.5 3.5v8M10.5 8.5l-3 3-3-3"></path></g></svg>',D0='<svg width="15" height="15" aria-label="Arrow up" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M7.5 11.5v-8M10.5 6.5l-3-3-3 3"></path></g></svg>',b0='<svg width="15" height="15" aria-label="Escape key" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M13.6167 8.936c-.1065.3583-.6883.962-1.4875.962-.7993 0-1.653-.9165-1.653-2.1258v-.5678c0-1.2548.7896-2.1016 1.653-2.1016.8634 0 1.3601.4778 1.4875 1.0724M9 6c-.1352-.4735-.7506-.9219-1.46-.8972-.7092.0246-1.344.57-1.344 1.2166s.4198.8812 1.3445.9805C8.465 7.3992 8.968 7.9337 9 8.5c.032.5663-.454 1.398-1.4595 1.398C6.6593 9.898 6 9 5.963 8.4851m-1.4748.5368c-.2635.5941-.8099.876-1.5443.876s-1.7073-.6248-1.7073-2.204v-.4603c0-1.0416.721-2.131 1.7073-2.131.9864 0 1.6425 1.031 1.5443 2.2492h-2.956"></path></g></svg>',Ma=Vo[0];var _0=R({name:"SearchBox",setup(){const i=na(ta),s=ui(vr),e=G(!1),n=F(()=>Ma?[...(e.value?["⌃","⇧","⌥","⌘"]:["Ctrl","Shift","Alt","Win"]).filter((t,a)=>Ma[["ctrl","shift","alt","meta"][a]]),Ma.key.toUpperCase()]:null);return ce("keydown",t=>{!s.value&&v0(t)&&!f0(t.target)&&(t.preventDefault(),s.value=!0)}),pi(()=>{const{userAgent:t}=navigator;e.value=n0(t)||e0(t)||s0(t)}),()=>[E("button",{type:"button",class:"slimsearch-button","aria-label":i.value.search,onClick:()=>{s.value=!0}},[E(fr),E("div",{class:"slimsearch-placeholder"},i.value.search),n.value?E("div",{class:"slimsearch-key-hints"},n.value.map(t=>E("kbd",{class:"slimsearch-key"},t))):null])]}}),w0=R({name:"SearchKeyHints",setup(){const i=na(ta),s=m0();return()=>s.value?null:E("div",{class:"slimsearch-hints"},[E("span",{class:"slimsearch-hint"},[E("kbd",{innerHTML:F0}),i.value.select]),E("span",{class:"slimsearch-hint"},[E("kbd",{innerHTML:D0}),E("kbd",{innerHTML:C0}),i.value.navigate]),E("span",{class:"slimsearch-hint"},[E("kbd",{innerHTML:b0}),i.value.exit])])}});const x0=Sh({loader:()=>B(()=>import("./SearchResult-zAACvTK_.js"),[]),loadingComponent:()=>{const i=na(ta);return E(Ho,{class:"slimsearch-result-wrapper",hint:i.value.loading})}});var T0=R({name:"SearchModal",setup(){const i=ui(vr),s=hn(),e=na(ta),n=No(),t=G(""),a=G([]),{suggestions:l}=y0(a),r=G(!1),{index:h,prev:p,next:o}=g0(l),d=Pi(),c=Pi(),k=(u=h.value)=>{t.value=l.value[u],r.value=!1};ce("keydown",u=>{r.value?u.key==="ArrowUp"?p():u.key==="ArrowDown"?o():u.key==="Enter"?k():u.key==="Escape"&&(r.value=!1):u.key==="Escape"&&(i.value=!1)});const f=N7(()=>{var u,y;(((y=(u=n.value).querySplitter)==null?void 0:y.call(u,t.value))??Promise.resolve(t.value.split(" "))).then(v=>{a.value=v})},Math.min($t.searchDelay,$t.suggestDelay));return ti(t,f,{immediate:!0}),pi(()=>{const u=i0(document.body);ti(i,async y=>{var v;u.value=y,y&&(await ys(),(v=d.value)==null||v.focus())}),j7(c,()=>{r.value=!1}),ue(()=>{u.value=!1})}),()=>i.value?E("div",{class:"slimsearch-modal-wrapper"},[E("div",{class:"slimsearch-mask",onClick:()=>{i.value=!1,t.value=""}}),E("div",{class:"slimsearch-modal"},[E("div",{class:"slimsearch-box"},[E("form",[E("label",{for:"search-pro","aria-label":e.value.search},E(fr)),E("input",{ref:d,type:"search",class:"slimsearch-input",id:"search-pro",placeholder:e.value.placeholder,spellcheck:"false",autocapitalize:"off",autocomplete:"off",autocorrect:"off",name:`${s.value.title}-search`,value:t.value,"aria-controls":"slimsearch-results",onKeydown:u=>{const{key:y}=u;l.value.length&&(y==="Tab"?(k(),u.preventDefault()):(y==="ArrowDown"||y==="ArrowUp"||y==="Escape")&&u.preventDefault())},onInput:({target:u})=>{t.value=u.value,r.value=!0,h.value=0}}),t.value?E("button",{type:"reset",class:"slimsearch-clear-button",innerHTML:d0,onClick:()=>{t.value=""}}):null,r.value&&l.value.length?E("ul",{class:"slimsearch-suggestions",ref:c},l.value.map((u,y)=>E("li",{class:["slimsearch-suggestion",{active:y===h.value}],onClick:()=>{k(y)}},[E("kbd",{class:"slimsearch-auto-complete",title:`Tab ${e.value.autocomplete}`},"Tab"),u]))):null]),E("button",{type:"button",class:"slimsearch-close-button",onClick:()=>{i.value=!1,t.value=""}},e.value.cancel)]),E(x0,{queries:a.value,isFocusing:!r.value,onClose:()=>{i.value=!1},onUpdateQuery:u=>{t.value=u}}),E(w0)])]):null}}),P0=ds({enhance({app:i}){o0(i),i.component("SearchBox",_0)},setup(){u0()},rootComponents:[T0]});const L0=Object.freeze(Object.defineProperty({__proto__:null,default:P0},Symbol.toStringTag,{value:"Module"})),Dt=[MB,ak,zk,Yk,i6,a6,m6,w6,O6,iA,uA,PA,L7,L0].map(i=>i.default).filter(Boolean),S0=JSON.parse('{"base":"/","lang":"zh-CN","title":"noahyz的博客","description":"noahyz的博客","head":[["meta",{"name":"robots","content":"all"}],["meta",{"name":"author","content":"noahyz"}],["meta",{"http-equiv":"Cache-Control","content":"no-cache, no-store, must-revalidate"}],["meta",{"http-equiv":"Pragma","content":"no-cache"}],["meta",{"http-equiv":"Expires","content":"0"}],["meta",{"name":"keywords","content":"Java, Java基础, 并发编程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, SpringBoot, IDEA, 求职面试, 面渣逆袭, 学习路线"}],["meta",{"name":"apple-mobile-web-app-capable","content":"yes"}],["script",{},"\\n        var _hmt = _hmt || [];\\n        (function() {\\n          var hm = document.createElement(\\"script\\");\\n          hm.src = \\"https://hm.baidu.com/hm.js?5230ac143650bf5eb3c14f3fb9b1d3ec\\";\\n          var s = document.getElementsByTagName(\\"script\\")[0];\\n          s.parentNode.insertBefore(hm, s);\\n        })();\\n      "],["script",{},"\\n        var _hmt = _hmt || [];\\n        (function() {\\n          var hm = document.createElement(\\"script\\");\\n          hm.src = \\"https://hm.baidu.com/hm.js?59aa453e7e706422c636c079fc1cb031\\";\\n          var s = document.getElementsByTagName(\\"script\\")[0];\\n          s.parentNode.insertBefore(hm, s);\\n        })();\\n      "],["link",{"rel":"stylesheet","href":"//at.alicdn.com/t/font_3180624_7cy10l7jqqh.css"}],["link",{"rel":"icon","href":"/logo2.ico"}],["link",{"rel":"manifest","href":"/manifest.webmanifest","crossorigin":"use-credentials"}],["meta",{"name":"theme-color","content":"#096dd9"}]],"locales":{}}');var Cn=Pi(S0),O0=zc,I0=()=>{const i=CB({history:O0(Gl("/")),routes:[{name:"vuepress-route",path:"/:catchAll(.*)",components:{}}],scrollBehavior:(s,e,n)=>n||(s.hash?{el:s.hash}:{top:0})});return i.beforeResolve(async(s,e)=>{if(s.path!==e.path||e===js){const n=vs(s.fullPath);if(n.path!==s.fullPath)return n.path;const t=await n.loader();s.meta={...n.meta,_pageChunk:t}}else s.path===e.path&&(s.meta=e.meta)}),i},R0=i=>{i.component("ClientOnly",Qt),i.component("Content",Yl),i.component("RouteLink",Ii)},M0=(i,s,e)=>{const n=F(()=>s.currentRoute.value.path),t=Ol((y,v)=>({get(){return y(),s.currentRoute.value.meta._pageChunk},set(D){s.currentRoute.value.meta._pageChunk=D,v()}})),a=F(()=>Ce.resolveLayouts(e)),l=F(()=>Ce.resolveRouteLocale(Cn.value.locales,n.value)),r=F(()=>Ce.resolveSiteLocaleData(Cn.value,l.value)),h=F(()=>t.value.comp),p=F(()=>t.value.data),o=F(()=>p.value.frontmatter),d=F(()=>Ce.resolvePageHeadTitle(p.value,r.value)),c=F(()=>Ce.resolvePageHead(d.value,o.value,r.value)),k=F(()=>Ce.resolvePageLang(p.value,r.value)),f=F(()=>Ce.resolvePageLayout(p.value,a.value)),u={layouts:a,pageData:p,pageComponent:h,pageFrontmatter:o,pageHead:c,pageHeadTitle:d,pageLang:k,pageLayout:f,redirects:sl,routeLocale:l,routePath:n,routes:Je,siteData:Cn,siteLocaleData:r};return i.provide(Kl,u),Object.defineProperties(i.config.globalProperties,{$frontmatter:{get:()=>o.value},$head:{get:()=>c.value},$headTitle:{get:()=>d.value},$lang:{get:()=>k.value},$page:{get:()=>p.value},$routeLocale:{get:()=>l.value},$site:{get:()=>Cn.value},$siteLocale:{get:()=>r.value},$withBase:{get:()=>yi}}),u},V0=([i,s,e=""])=>{const n=Object.entries(s).map(([r,h])=>wi(h)?`[${r}=${JSON.stringify(h)}]`:h?`[${r}]`:"").join(""),t=`head > ${i}${n}`;return Array.from(document.querySelectorAll(t)).find(r=>r.innerText===e)??null},$0=([i,s,e])=>{if(!wi(i))return null;const n=document.createElement(i);return it(s)&&Object.entries(s).forEach(([t,a])=>{wi(a)?n.setAttribute(t,a):a&&n.setAttribute(t,"")}),wi(e)&&n.appendChild(document.createTextNode(e)),n},N0=()=>{const i=_B(),s=Xl();let e=[];const n=()=>{i.value.forEach(l=>{const r=V0(l);r&&e.push(r)})},t=()=>{const l=[];return i.value.forEach(r=>{const h=$0(r);h&&l.push(h)}),l},a=()=>{document.documentElement.lang=s.value;const l=t();e.forEach((r,h)=>{const p=l.findIndex(o=>r.isEqualNode(o));p===-1?(r.remove(),delete e[h]):l.splice(p,1)}),l.forEach(r=>document.head.appendChild(r)),e=[...e.filter(r=>!!r),...l]};ps(PB,a),pi(()=>{n(),ti(i,a,{immediate:!1})})},H0=z9,U0=async()=>{var n;const i=H0({name:"Vuepress",setup(){var l;N0();for(const r of Dt)(l=r.setup)==null||l.call(r);const t=Dt.flatMap(({rootComponents:r=[]})=>r.map(h=>E(h))),a=wB();return()=>[E(a.value),t]}}),s=I0();R0(i);const e=M0(i,s,Dt);{const{setupDevtools:t}=await B(async()=>{const{setupDevtools:a}=await import("./setupDevtools-7MC2TMWH-DAMmtXgk.js");return{setupDevtools:a}},[]);t(i,e)}for(const t of Dt)await((n=t.enhance)==null?void 0:n.call(t,{app:i,router:s,siteData:Cn}));return i.use(s),{app:i,router:s}};U0().then(({app:i,router:s})=>{s.isReady().then(()=>{i.mount("#app")})});export{d0 as A,No as B,bi as C,Pi as D,pi as E,h0 as F,ue as G,X0 as H,wi as I,$t as J,N7 as K,Ii as R,B as _,W0 as a,tp as b,G0 as c,U0 as createVueApp,ap as d,Oi as e,R as f,na as g,ta as h,Xn as i,G as j,F as k,E as l,ce as m,me as n,j0 as o,A0 as p,c0 as q,ms as r,Ho as s,Oe as t,Fs as u,B0 as v,ti as w,Y0 as x,it as y,k0 as z};
