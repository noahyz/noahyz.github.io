import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as n,o as i}from"./app-D1zlwylF.js";const t={};function l(p,e){return i(),s("div",null,e[0]||(e[0]=[n(`<h2 id="c-关于-typename-的用法" tabindex="-1"><a class="header-anchor" href="#c-关于-typename-的用法"><span>c++ 关于 typename 的用法</span></a></h2><h3 id="一、问题的由来" tabindex="-1"><a class="header-anchor" href="#一、问题的由来"><span>一、问题的由来</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>template &lt;typename T&gt;</span></span>
<span class="line"><span>DataRes BuildData(const T&amp; val);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>template &lt;class T&gt;</span></span>
<span class="line"><span>DataRes BuildData(const T&amp; val);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两种用法在 C++ 中有什么区别呢？</p><h3 id="二、分析" tabindex="-1"><a class="header-anchor" href="#二、分析"><span>二、分析</span></a></h3><p>最早使用 class 来声明模板参数列表的类型是为了避免增加不必要的关键字；后来委员会认为 class 既定义类，又定义泛型模板的类型。这样混用会造成概念上的混淆加上了 typename 关键字。</p><p>因此在模板定义语法中关键字 class 和 typename 的作用完全一样。而 typename 还有另外一个作用是：使用嵌套依赖类型。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>class MyArray </span></span>
<span class="line"><span>{ </span></span>
<span class="line"><span>public：</span></span>
<span class="line"><span>    typedef int LengthType;</span></span>
<span class="line"><span>    .....</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>template&lt;class T&gt;</span></span>
<span class="line"><span>void MyMethod( T myarr ) </span></span>
<span class="line"><span>{ </span></span>
<span class="line"><span>    typedef typename T::LengthType LengthType; </span></span>
<span class="line"><span>    LengthType length = myarr.GetLength; </span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候 typename 的作用就是告诉 c++ 编译器，typename 后面的字符串 <code>T::LengthType</code> 为一个类型名称，而不是成员函数或者成员变量。</p>`,10)]))}const d=a(t,[["render",l],["__file","12.typename用法.html.vue"]]),h=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/12.typename%E7%94%A8%E6%B3%95.html","title":"12.typename用法","lang":"zh-CN","frontmatter":{"title":"12.typename用法","date":"2023-01-19T11:11:41.000Z","tags":["c++"],"description":"c++ 关于 typename 的用法 一、问题的由来 这两种用法在 C++ 中有什么区别呢？ 二、分析 最早使用 class 来声明模板参数列表的类型是为了避免增加不必要的关键字；后来委员会认为 class 既定义类，又定义泛型模板的类型。这样混用会造成概念上的混淆加上了 typename 关键字。 因此在模板定义语法中关键字 class 和 typ...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/12.typename%E7%94%A8%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"12.typename用法"}],["meta",{"property":"og:description","content":"c++ 关于 typename 的用法 一、问题的由来 这两种用法在 C++ 中有什么区别呢？ 二、分析 最早使用 class 来声明模板参数列表的类型是为了避免增加不必要的关键字；后来委员会认为 class 既定义类，又定义泛型模板的类型。这样混用会造成概念上的混淆加上了 typename 关键字。 因此在模板定义语法中关键字 class 和 typ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"c++"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"12.typename用法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"c++ 关于 typename 的用法","slug":"c-关于-typename-的用法","link":"#c-关于-typename-的用法","children":[{"level":3,"title":"一、问题的由来","slug":"一、问题的由来","link":"#一、问题的由来","children":[]},{"level":3,"title":"二、分析","slug":"二、分析","link":"#二、分析","children":[]}]}],"git":{},"readingTime":{"minutes":0.8,"words":241},"filePathRelative":"编程语言/c++语言/基础语法/12.typename用法.md","localizedDate":"2023年1月19日","excerpt":"<h2>c++ 关于 typename 的用法</h2>\\n<h3>一、问题的由来</h3>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>template &lt;typename T&gt;</span></span>\\n<span class=\\"line\\"><span>DataRes BuildData(const T&amp; val);</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,h as data};
