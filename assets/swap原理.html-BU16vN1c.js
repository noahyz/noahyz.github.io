import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-D1zlwylF.js";const e="/assets/%E5%86%85%E5%AD%98%E6%83%85%E5%86%B5-DcfHwe0s.jpg",p="/assets/NUMA-C4p4idbO.jpg",h={};function t(k,i){return l(),a("div",null,i[0]||(i[0]=[n('<h2 id="一、系统内存资源回收方式" tabindex="-1"><a class="header-anchor" href="#一、系统内存资源回收方式"><span>一、系统内存资源回收方式</span></a></h2><h3 id="_1-系统的内存资源紧张时-系统可能会进行-内存回收、oom杀死进程" tabindex="-1"><a class="header-anchor" href="#_1-系统的内存资源紧张时-系统可能会进行-内存回收、oom杀死进程"><span>1. 系统的内存资源紧张时，系统可能会进行 内存回收、OOM杀死进程</span></a></h3><ul><li>OOM（Out Of Memory）系统杀死占用大量内存的进程，释放这些内存，再分配给其他更需要的进程</li><li>内存回收：系统释放掉可以回收的内存。 <ul><li>比如缓存和缓冲区属于可回收内存。他们在内存管理中，通常被叫做文件页。大部分文件页，都可以直接回收，以后有需要时，再从磁盘重新读取就可以了。而那些被应用程序修改过，并且暂时还没写入磁盘的数据（也就是脏页），就得先写入磁盘，然后才能进行内存释放。</li><li>比如内存映射的文件映射页，也是一种常见的文件页。它也可以被释放掉，下次再访问的时候，从文件重新读取</li><li>应用程序动态分配的堆内存，也称为 匿名页，这类内存不能直接释放回收。但是如果这些内存在分配后很少被访问，系统可能会把他们暂时存在磁盘中，释放内存给其他更需要的进程。这也是 Linux 的 Swap 机制。Swap 会把这些不常访问的内存先写到磁盘中，然后释放这些内存，给其他更需要的进程使用。再次访问这些内存时，重新从磁盘读入内存就可以了。</li></ul></li></ul><h3 id="_2-脏页可以通过两种方式写入磁盘" tabindex="-1"><a class="header-anchor" href="#_2-脏页可以通过两种方式写入磁盘"><span>2. 脏页可以通过两种方式写入磁盘：</span></a></h3><ul><li>可以在应用程序中，通过系统调用 fsync，把脏页同步到磁盘中</li><li>可以交给系统，由内核线程 pdflush 负责这些脏页的刷新</li></ul><h3 id="_3-linux-在什么时候需要回收内存呢" tabindex="-1"><a class="header-anchor" href="#_3-linux-在什么时候需要回收内存呢"><span>3. Linux 在什么时候需要回收内存呢？</span></a></h3><ul><li>有新的大块内存分配请求，但剩余内存不足。这个时候系统就需要回收一部分内存。进而尽可能满足新内存请求。这个过程通常称为<strong>直接内存回收</strong></li><li>专门的内核线程 <strong>kswapd0</strong> 定期回收内存</li></ul><h3 id="_4-linux-如何衡量内存是不是紧张呢" tabindex="-1"><a class="header-anchor" href="#_4-linux-如何衡量内存是不是紧张呢"><span>4. Linux 如何衡量内存是不是紧张呢？</span></a></h3><ul><li><p>为了衡量内存的使用情况。<strong>kswapd0</strong> 定义了三个内存阈值（watermark，也称为水位），分别是 页最小阈值（pages_min）、页低阈值（pages_low）和页高阈值（pages_high）。其余内存使用 pages_free 表示</p><figure><img src="'+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><strong>kswapd0</strong> 定期扫描内存的使用情况，并根据剩余内存落在这个三个阈值的空间位置，进行内存的回收操作</p><ul><li>剩余内存小于页最小阈值，说明进程可用内存都耗尽了，只有内核才可以分配内存</li><li>剩余内存落在页最小阈值和页低阈值中间，说明内存压力比较大，剩余内存不多了。这时 kswapd0 会执行内存回收，直到剩余内存大于高阈值为止</li><li>剩余内存落在页低阈值和页高阈值中间，说明内存有一定压力，但还可以满足新内存请求</li><li>剩余内存大于页高阈值，说明剩余内存比较多，没有内存压力</li></ul></li><li><p>一旦剩余内存小于页低阈值，就会触发内存的回收。这个页低阈值，其实可以通过内核选项 <code>/proc/sys/vm/min_free_kbytes</code> 来间接设置。min_free_kbytes 设置了页最小阈值，而其他两个阈值，都是根据页最小阈值计算生成的</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>pages_low = pages_min*5/4</span></span>
<span class="line"><span>pages_high = pages_min*3/2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="二、swap-原理" tabindex="-1"><a class="header-anchor" href="#二、swap-原理"><span>二、Swap 原理</span></a></h2><p>把一块磁盘空间或者一个本地文件当做内存来使用，包括换出、换入两个过程</p><ul><li>换出：把进程暂时不用的内存数据存储到磁盘中，并释放这些数据占用的内存</li><li>换入：在进程再次访问这些内存的时候，把他们从磁盘读到内存中来</li></ul><p>场景：</p><ul><li>即使内存不足时，有些应用程序也并不想被 OOM 杀死，而是希望能缓一段时间，等待人工介入。或者系统自动释放其他进程的内存，再分配给他</li><li>笔记本电脑的休眠和快速开机功能，也是基于 Swap 机制，休眠时，把系统的内存存入磁盘，这样等到再次开机时，只要从磁盘中加载内存即可。这样就省去了很多应用程序的初始化功能，加快开机速度</li></ul><h3 id="_1-numa-与-swap" tabindex="-1"><a class="header-anchor" href="#_1-numa-与-swap"><span>1. NUMA 与 Swap</span></a></h3><p>有时会发现，系统内存还多的情况下，Swap 升高。和处理器的 NUMA（Non-Uniform Memory Access）架构导致的。</p><p>在 NUMA 架构下，多个处理器被划分到不同 Node 上，且每个 Node 都拥有自己的本地内存空间。而同一个 Node 内部的内存空间，实际上又可以进一步划分为不同的内存域（Zone），比如直接内存访问区（DMA）、普通内存区（NORMAL）、伪内存区（MOVABLE）等</p><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用 <code>numactl</code> 命令来查看处理器在 Node 的分布情况，以及每个 Node 的内存使用情况。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">➜</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [/tmp] numactl --hardware</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">available:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nodes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (0)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cpus:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 7</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> size:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 16383</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> MB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> free:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 7255</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> MB</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，显示我的系统只有一个 Node，也就是 Node 0。编号 0 - 7 的 CPU 都位于 Node 0 上。另外，Node 0 的内存大小为 16383 MB，剩余内存为 7255 MB。</p><p>三个内存阈值（页最小阈值、页低阈值和页高阈值），都可以通过内存域在 proc 文件系统中的接口 <code>/proc/zoneinfo</code> 来查看。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /proc/zoneinfo</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Node</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 0,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> zone</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   Normal</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> pages</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> free</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     227894</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       min</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">      14896</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       low</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">      18620</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">       high</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     22344</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">     nr_free_pages</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 227894</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">     nr_zone_inactive_anon</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 11082</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">     nr_zone_active_anon</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 14024</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">     nr_zone_inactive_file</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 539024</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">     nr_zone_active_file</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 923986</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>pages 处的 min、low、high，就是三个内存阈值，而 free 是剩余内存页数，它跟后面的 nr_free_pages 相同</li><li>nr_zone_active_anon 和 nr_zone_inactive_anon，分别是活跃和非活跃的匿名页数</li><li>nr_zone_active_file 和 nr_zone_inactive_file，分别是活跃和非活跃的文件页数</li></ul><p>当然，某个 Node 内存不足时，系统可以从其他 Node 寻找空闲内存，也可以从本地内存中回收内存。具体选哪种模式，你可以通过 /proc/sys/vm/zone_reclaim_mode 来调整。它支持以下几个选项</p><ul><li>默认的 0 ，也就是刚刚提到的模式，表示既可以从其他 Node 寻找空闲内存，也可以从本地回收内存</li><li>1、2、4 都表示只回收本地内存，2 表示可以回写脏数据回收内存，4 表示可以用 Swap 方式回收内存</li></ul><h3 id="_2-swappiness" tabindex="-1"><a class="header-anchor" href="#_2-swappiness"><span>2. swappiness</span></a></h3><p>内存回收机制，这些回收的内存既包括 文件页，又包括 匿名页</p><ul><li>对文件页的回收，当然就是直接回收缓存，或者把脏页写回磁盘后再回收</li><li>而对匿名页的回收，其实就是通过 Swap 机制，把它们写入磁盘后再释放内存</li></ul><p>既然有两种不同的内存回收机制，那么在实际回收内存时，Linux 会提供一个 <code>/proc/sys/vm/swappiness</code> 选项，用来调整使用 swap 的积极程度。</p><ul><li>swappiness 的范围是 0 -100，数值越大，越积极使用 swap，也就是更倾向于回收匿名页；数值越小，越消极使用 Swap，也就是更倾向于回收文件页</li><li>swappiness 的值是调整 Swap 积极程度的权重，即使设置为 0，当 剩余内存+文件页小于页高阈值 时，还是会发生 Swap</li></ul><h3 id="_3-一些组件要求关闭-swap" tabindex="-1"><a class="header-anchor" href="#_3-一些组件要求关闭-swap"><span>3. 一些组件要求关闭 Swap</span></a></h3><p>比如 k8s、hadoop集群、ES 之类组件都要关闭 Swap ，因为：</p><ul><li>性能问题，开启 Swap 会严重影响性能（包括内存和 IO）</li><li>管理问题，开启 Swap 后通过 cgroup 设置的内存上限就会失效</li></ul><p>如何通过降低 Swap 的使用，提高系统的整体性能，以下为几点常见的降低方法：</p><ul><li>禁止 Swap，现在服务器的内存足够大，所以除非有必要，禁用 Swap 就可以了。随着云计算的普及，大部分云平台中的虚拟机都默认禁止 Swap</li><li>如果实在需要用到 Swap，可以尝试降低 swappiness 的值，减少内存回收时 Swap 的使用倾向</li><li>响应延迟敏感的应用，如果它们可能在开启 Swap 的服务器中运行，你还可以用库函数 mlock() 或者 mlockall() 锁定内存，阻止它们的内存换出</li></ul><h2 id="三、案例场景" tabindex="-1"><a class="header-anchor" href="#三、案例场景"><span>三、案例场景</span></a></h2><h3 id="_1-开启-swap" tabindex="-1"><a class="header-anchor" href="#_1-开启-swap"><span>1. 开启 Swap</span></a></h3><p>Linux 本身支持两种类型的 Swap，即 Swap 分区和 Swap 文件。以 Swap 文件为例，如下配置 Swap 文件的大小为 8GB</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 创建 Swap 文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">➜</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [/tmp] fallocate -l 8G /mnt/swapfile </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 修改权限只有根用户可以访问</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">➜</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [/tmp] chmod 600 /mnt/swapfile </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">➜</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [/tmp] ll /mnt/swapfile </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">-rw-------</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> root</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> user_00</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 8589934592</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Jan</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 13</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 15:56</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /mnt/swapfile</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 配置 Swap 文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">➜</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [/tmp] mkswap /mnt/swapfile </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mkswap:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /mnt/swapfile:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> warning:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> wiping</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> old</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> swap</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> signature.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Setting</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> up</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> swapspace</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> version</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 1,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> size</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 8388604</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> KiB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">no</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> label,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> UUID=c0d61a19-fe26-46b2-b167-3d4a98802a35</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 开启 Swap 文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">➜</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [/tmp] swapon /mnt/swapfile </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 确认 Swap 配置成功</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">➜</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [/tmp] free</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">              total</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">        used</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">        free</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">      shared</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  buff/cache</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   available</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Mem:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       16092188</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     4520284</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     7061160</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     2443016</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     4510744</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     9068784</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Swap:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">       8388604</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     8388604</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关闭 Swap： <code>swapoff -a</code></p><p>实际上，关闭 Swap 后再重新打开，也是一种常用的 Swap 空间清理方法：<code>swapoff -a &amp;&amp; swapon -a</code> 这条命令有风险，使用了 Swap 说明内存有压力，那么强制换入有可能导致内存问题</p><h3 id="_2-实操" tabindex="-1"><a class="header-anchor" href="#_2-实操"><span>2. 实操</span></a></h3><p>TODO</p>`,44)]))}const c=s(h,[["render",t],["__file","swap原理.html.vue"]]),g=JSON.parse('{"path":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/swap%E5%8E%9F%E7%90%86.html","title":"undefined","lang":"zh-CN","frontmatter":{"title":"undefined","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"一、系统内存资源回收方式 1. 系统的内存资源紧张时，系统可能会进行 内存回收、OOM杀死进程 OOM（Out Of Memory）系统杀死占用大量内存的进程，释放这些内存，再分配给其他更需要的进程 内存回收：系统释放掉可以回收的内存。 比如缓存和缓冲区属于可回收内存。他们在内存管理中，通常被叫做文件页。大部分文件页，都可以直接回收，以后有需要时，再从...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/swap%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"undefined"}],["meta",{"property":"og:description","content":"一、系统内存资源回收方式 1. 系统的内存资源紧张时，系统可能会进行 内存回收、OOM杀死进程 OOM（Out Of Memory）系统杀死占用大量内存的进程，释放这些内存，再分配给其他更需要的进程 内存回收：系统释放掉可以回收的内存。 比如缓存和缓冲区属于可回收内存。他们在内存管理中，通常被叫做文件页。大部分文件页，都可以直接回收，以后有需要时，再从..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"undefined\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"一、系统内存资源回收方式","slug":"一、系统内存资源回收方式","link":"#一、系统内存资源回收方式","children":[{"level":3,"title":"1. 系统的内存资源紧张时，系统可能会进行 内存回收、OOM杀死进程","slug":"_1-系统的内存资源紧张时-系统可能会进行-内存回收、oom杀死进程","link":"#_1-系统的内存资源紧张时-系统可能会进行-内存回收、oom杀死进程","children":[]},{"level":3,"title":"2. 脏页可以通过两种方式写入磁盘：","slug":"_2-脏页可以通过两种方式写入磁盘","link":"#_2-脏页可以通过两种方式写入磁盘","children":[]},{"level":3,"title":"3. Linux 在什么时候需要回收内存呢？","slug":"_3-linux-在什么时候需要回收内存呢","link":"#_3-linux-在什么时候需要回收内存呢","children":[]},{"level":3,"title":"4. Linux 如何衡量内存是不是紧张呢？","slug":"_4-linux-如何衡量内存是不是紧张呢","link":"#_4-linux-如何衡量内存是不是紧张呢","children":[]}]},{"level":2,"title":"二、Swap 原理","slug":"二、swap-原理","link":"#二、swap-原理","children":[{"level":3,"title":"1. NUMA 与 Swap","slug":"_1-numa-与-swap","link":"#_1-numa-与-swap","children":[]},{"level":3,"title":"2. swappiness","slug":"_2-swappiness","link":"#_2-swappiness","children":[]},{"level":3,"title":"3. 一些组件要求关闭 Swap","slug":"_3-一些组件要求关闭-swap","link":"#_3-一些组件要求关闭-swap","children":[]}]},{"level":2,"title":"三、案例场景","slug":"三、案例场景","link":"#三、案例场景","children":[{"level":3,"title":"1. 开启 Swap","slug":"_1-开启-swap","link":"#_1-开启-swap","children":[]},{"level":3,"title":"2. 实操","slug":"_2-实操","link":"#_2-实操","children":[]}]}],"git":{},"readingTime":{"minutes":7.74,"words":2322},"filePathRelative":"操作系统/内存管理/内核原理/swap原理.md","localizedDate":"2023年1月19日","excerpt":"<h2>一、系统内存资源回收方式</h2>\\n<h3>1. 系统的内存资源紧张时，系统可能会进行 内存回收、OOM杀死进程</h3>\\n<ul>\\n<li>OOM（Out Of Memory）系统杀死占用大量内存的进程，释放这些内存，再分配给其他更需要的进程</li>\\n<li>内存回收：系统释放掉可以回收的内存。\\n<ul>\\n<li>比如缓存和缓冲区属于可回收内存。他们在内存管理中，通常被叫做文件页。大部分文件页，都可以直接回收，以后有需要时，再从磁盘重新读取就可以了。而那些被应用程序修改过，并且暂时还没写入磁盘的数据（也就是脏页），就得先写入磁盘，然后才能进行内存释放。</li>\\n<li>比如内存映射的文件映射页，也是一种常见的文件页。它也可以被释放掉，下次再访问的时候，从文件重新读取</li>\\n<li>应用程序动态分配的堆内存，也称为 匿名页，这类内存不能直接释放回收。但是如果这些内存在分配后很少被访问，系统可能会把他们暂时存在磁盘中，释放内存给其他更需要的进程。这也是 Linux 的 Swap 机制。Swap 会把这些不常访问的内存先写到磁盘中，然后释放这些内存，给其他更需要的进程使用。再次访问这些内存时，重新从磁盘读入内存就可以了。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,g as data};
