import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as p,o as i}from"./app-D1zlwylF.js";const n={};function a(o,e){return i(),l("div",null,e[0]||(e[0]=[p('<h2 id="单服务器高性能模式-ppc和tpc" tabindex="-1"><a class="header-anchor" href="#单服务器高性能模式-ppc和tpc"><span>单服务器高性能模式：PPC和TPC</span></a></h2><p>架构设计决定了系统性能的上限，代码实现细节决定了系统性能的下限</p><p>单服务器高性能的关键之一就是服务器采取的并发模型，并发模型有如下两个关键设计点：</p><ul><li>服务器如何管理链接</li><li>服务器如何处理请求</li></ul><p>这两个设计点最终都和操作系统的 I/O 模型以及进行模型相关</p><ul><li>I/O 模型：阻塞、非阻塞、同步、异步</li><li>进程模型：单进程、多进程、多线程</li></ul><h3 id="一、ppc" tabindex="-1"><a class="header-anchor" href="#一、ppc"><span>一、PPC</span></a></h3><p>PPC 是 Process Per Connection 的缩写，其含义是指每次有新的连接就新建一个进程去专门处理这个连接的请求。基本的流程为：</p><ol><li>父进程接受连接</li><li>父进程 fork 子进程</li><li>子进程处理连接的读写请求</li><li>子进程关闭连接</li></ol><p>对于现代的互联网，这种模式的缺点很明显</p><ul><li>fork 代码高，创建一个进程需要分配很多内核资源，需要将内存映像从父进程复制到子进程，即使现代的操作系统用 Copy on write（写时复制）计数，总体来说创建进程的代码非常高</li><li>父子进程通信复杂，需要采用 IPC（Interprocess Communication）之类的进程通信方案。比如：子进程需要在 close 之前告诉父进程自己处理了多少请求以支撑父进程进行全局的统计</li><li>支持的并发连接数量有限，如果每个连接存活时间较长，而且新的连接不断进来，则进程数量增多，操作系统调度和切换的频率越来越高，系统压力增大。一般情况下，PPC 方案的并发连接数量最大也就几百</li></ul><p>更好一点的方案：</p><p>系统在启动的时候就预先创建好进程，然后才开始接受用户的请求，当有新连接进来，就可以省去 fork 进程的操作。当父进程 listen 完之后，去 fork 多个子进程，这些子进程去 accept 同一个 socket，这里有一个“惊群”现象，就是虽然只有一个子进程能 accept 成功，但是阻塞在 accept 上的子进程都会被唤醒，这样就导致了不必要的调度和上下文切换。但是 linux 2.6 以上版本内核已经解决了 accept 惊群问题了。</p><h3 id="二、tpc" tabindex="-1"><a class="header-anchor" href="#二、tpc"><span>二、TPC</span></a></h3><p>TPC 是 Thread Per Connection 的缩写，其含义是指每次有新的连接就新建一个线程去专门处理这个连接的请求。线程比进程更轻量化；多线程是共享进程内存空间的，线程间通信也比较简单。</p><p>TPC 虽然解决了 fork 代价高和进程间通信复杂的问题，但是也引入了新的问题，具体如：</p><ul><li>创建线程依然有代码，高并发（每秒上万连接）还是有性能问题</li><li>线程间互斥和共享引入了复杂度，可能会导致死锁</li><li>多线程之间互相影响，某个线程出现异常，可能导致整个进程退出（内存越界）</li></ul><p>更好一点的方案：提前创建线程</p>',18)]))}const P=t(n,[["render",a],["__file","7.单服务器高性能模式-PPC和TPC.html.vue"]]),E=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/7.%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%AB%98%E6%80%A7%E8%83%BD%E6%A8%A1%E5%BC%8F-PPC%E5%92%8CTPC.html","title":"7.单服务器高性能模式-PPC和TPC","lang":"zh-CN","frontmatter":{"title":"7.单服务器高性能模式-PPC和TPC","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"单服务器高性能模式：PPC和TPC 架构设计决定了系统性能的上限，代码实现细节决定了系统性能的下限 单服务器高性能的关键之一就是服务器采取的并发模型，并发模型有如下两个关键设计点： 服务器如何管理链接 服务器如何处理请求 这两个设计点最终都和操作系统的 I/O 模型以及进行模型相关 I/O 模型：阻塞、非阻塞、同步、异步 进程模型：单进程、多进程、多线...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/7.%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%AB%98%E6%80%A7%E8%83%BD%E6%A8%A1%E5%BC%8F-PPC%E5%92%8CTPC.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"7.单服务器高性能模式-PPC和TPC"}],["meta",{"property":"og:description","content":"单服务器高性能模式：PPC和TPC 架构设计决定了系统性能的上限，代码实现细节决定了系统性能的下限 单服务器高性能的关键之一就是服务器采取的并发模型，并发模型有如下两个关键设计点： 服务器如何管理链接 服务器如何处理请求 这两个设计点最终都和操作系统的 I/O 模型以及进行模型相关 I/O 模型：阻塞、非阻塞、同步、异步 进程模型：单进程、多进程、多线..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"7.单服务器高性能模式-PPC和TPC\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"单服务器高性能模式：PPC和TPC","slug":"单服务器高性能模式-ppc和tpc","link":"#单服务器高性能模式-ppc和tpc","children":[{"level":3,"title":"一、PPC","slug":"一、ppc","link":"#一、ppc","children":[]},{"level":3,"title":"二、TPC","slug":"二、tpc","link":"#二、tpc","children":[]}]}],"git":{},"readingTime":{"minutes":2.81,"words":844},"filePathRelative":"架构框架/架构模式/高性能架构模式/7.单服务器高性能模式-PPC和TPC.md","localizedDate":"2023年1月19日","excerpt":"<h2>单服务器高性能模式：PPC和TPC</h2>\\n<p>架构设计决定了系统性能的上限，代码实现细节决定了系统性能的下限</p>\\n<p>单服务器高性能的关键之一就是服务器采取的并发模型，并发模型有如下两个关键设计点：</p>\\n<ul>\\n<li>服务器如何管理链接</li>\\n<li>服务器如何处理请求</li>\\n</ul>\\n<p>这两个设计点最终都和操作系统的 I/O 模型以及进行模型相关</p>\\n<ul>\\n<li>I/O 模型：阻塞、非阻塞、同步、异步</li>\\n<li>进程模型：单进程、多进程、多线程</li>\\n</ul>\\n<h3>一、PPC</h3>\\n<p>PPC 是 Process Per Connection 的缩写，其含义是指每次有新的连接就新建一个进程去专门处理这个连接的请求。基本的流程为：</p>","autoDesc":true}');export{P as comp,E as data};
