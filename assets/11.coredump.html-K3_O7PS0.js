import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-D1zlwylF.js";const l="/assets/%E4%BE%8B%E5%AD%901-TBqYnBDM.png",t={};function h(p,i){return e(),a("div",null,i[0]||(i[0]=[n(`<p>​ core dump又叫核心转储。在程序运行过程中发生异常时，将其内存数据保存到文件中，这个过程叫做core dump。core是指记忆体也就是现场的内存。</p><p>​ 在开发过程中，难免会遇到程序运行过程中异常退出的情况，这时候想要定位哪里出了问题，仅仅依靠程序自身的信息打印（日志记录）往往是不够的，这个时候就需要 Core Dump 文件来帮忙定位。一个完整的 Core Dump 文件实际上相当于恢复了异常现场，利用 Core Dump 文件，可以查看到程序异常时的所有信息，变量值、栈信息、内存数据，程序异常时的运行位置（甚至记录代码行号）等等，定位所需要的一切信息都可以从 Core Dump文件获取到，能够非常有效的提高定位效率。</p><h2 id="linux下配置core文件生成" tabindex="-1"><a class="header-anchor" href="#linux下配置core文件生成"><span>Linux下配置core文件生成</span></a></h2><hr><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"># 查看core文件限制大小，</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">：程序出错时不会产生core文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">ulimit </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">l</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"># 设置core文件限制为1024k，不过通过对于idg业务等高内存业务来看，基本都是不够的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">ulimit </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">c </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1024</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"># 移除core文件的限制</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">ulimit </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">c unlimited</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"># 关闭core文件生成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">ulimit </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">c </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"># 查看core文件生成路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">cat </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">proc</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">sys</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">kernel</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">core_pattern</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">sysctl </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">w </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">kernel</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">core_pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">\${YOUR_PATH}</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">core</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">t</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">or</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">echo </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/corefile/core-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%e</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%p</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">-%t&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">proc</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">sys</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">kernel</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">core_pattern</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(CMAKE_CXX_FLAGS </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;\${CMAKE_CXX_FLAGS} -g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">Naming of core dump files</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       By </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, a core dump file is named core, but the</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">       /</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">proc</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">sys</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">kernel</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">core_pattern </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (since Linux </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2.6</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> and</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> 2.4.21</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       can be set to define a </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> that is used to name core dump</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">       files</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.  </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">The</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> template</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> can contain </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> specifiers which are</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       substituted by the following values when a core file is created:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">           %%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  A single </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> character.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">           %</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">c  Core file size soft resource limit of crashing process</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">               (since Linux </span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">2.6.24</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">           %</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">d  Dump mode—same as value returned by </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">prctl</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">               PR_GET_DUMPABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (since Linux </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3.7</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">           %</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">e  The process </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">or</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> thread&#39;s comm value, which typically is</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">               the same as the executable </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (without path prefix,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">               and</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> truncated to a maximum of </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> characters), but may</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">               have been modified to be something different; see the</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">               discussion of </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">proc</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">pid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]/comm and</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">               /proc/[pid]/task/[tid]/comm in proc(5).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">           %E  Pathname of executable, with slashes (&#39;/&#39;) replaced by</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">               exclamation marks (&#39;!&#39;) (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">since</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Linux</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> 3.0).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">           %g  Numeric real GID of dumped process.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">           %h  Hostname (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">same</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> nodename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> returned</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> uname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(2)).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">           %i  TID of thread that triggered core dump, as seen in the</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">               PID namespace in which the thread resides (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">since</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Linux</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">               3.18).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">           %I  TID of thread that triggered core dump, as seen in the</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">               initial PID namespace (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">since</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Linux</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> 3.18).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">           %p  PID of dumped process, as seen in the PID namespace in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">               which the process resides.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">           %P  PID of dumped process, as seen in the initial PID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">               namespace (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">since</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Linux</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> 3.12).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">           %s  Number of signal causing dump.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">           %t  Time of dump, expressed as seconds since the Epoch,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">               1970-01-01 00:00:00 +0000 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">UTC</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">           %u  Numeric real UID of dumped process.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用core文件进行问题定位" tabindex="-1"><a class="header-anchor" href="#使用core文件进行问题定位"><span>使用Core文件进行问题定位</span></a></h2><hr><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">gdb </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">c \${core_filename} \${my_programe_name}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">set solib</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">search</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">path </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">library_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ <strong>查看栈信息：</strong> 当程序被停住了，你需要做的第一件事就是查看程序是在哪里停住的。当你的程序调用了一个函数，函数的地址，函数参数，函数内的局部变量都会被压入“栈”（Stack）中。你可以用GDB命令来查看当前的栈中的信息。可以先通过gdb filename core进入gdb命令行再输入 bt 打印当前的函数调用栈的所有信息：从n-&gt;0为调用顺序。</p><p>​ <strong>显示源代码：</strong> GDB 可以打印出所调试程序的源代码，当然，在程序编译时一定要加上-g的参数，把源程序信息编译到执行文件中。当程序停下来以后，GDB会报告程序停在了那个文件的第几行上。可以用list命令来打印程序的源代码。</p><p>​ **源代码的内存：**使用info line命令来查看源代码在内存中的地址。info line后面可以跟“行号”，“函数名”，“文件名:行号”，“文件名:函数名”，打印出指定的源码运行时的内存地址，如：(gdb) info line tst.c:func。</p><p>常用命令：</p><ul><li>bt: 打印程序崩溃时的堆栈信息，包括导致crash的对应的frame number，文件名和行数</li><li>where 查看程序出问题的地方</li><li>frame [frame number]: 打印出该行代码</li><li>info locals: 打印局部变量信息</li><li>print [local variable]: 打印某个局部变量</li><li>list: 打印相关代码</li><li>quit: 退出gdb命令行</li></ul><h2 id="常见导致coredumpe的信号" tabindex="-1"><a class="header-anchor" href="#常见导致coredumpe的信号"><span>常见导致coredumpe的信号</span></a></h2><hr><table><thead><tr><th>名字</th><th>说明</th></tr></thead><tbody><tr><td>SIGABRT</td><td>异常终止(abort)</td></tr><tr><td>SIGBUS</td><td>硬件故障</td></tr><tr><td>SIGEMT</td><td>硬件故障</td></tr><tr><td>SIGFPE</td><td>算术异常</td></tr><tr><td>SIGILL</td><td>非法硬件指令</td></tr><tr><td>SIGIOT</td><td>硬件故障</td></tr><tr><td>SIGQUIT</td><td>终端退出符</td></tr><tr><td>SIGSEGV</td><td>无效存储访问</td></tr><tr><td>SIGSYS</td><td>无效系统调用</td></tr><tr><td>SIGTRAP</td><td>硬件故障</td></tr><tr><td>SIGXCPU</td><td>超过CPU限制(setrlimit)</td></tr><tr><td>SIGXFSZ</td><td>超过文件长度限制(setrlimit)</td></tr></tbody></table><h2 id="一些内部搜集到的gdb的技巧和经验" tabindex="-1"><a class="header-anchor" href="#一些内部搜集到的gdb的技巧和经验"><span>一些内部搜集到的GDB的技巧和经验</span></a></h2><hr><p>先看一下 coredump 的类型，是 abort 导致的，还是 segmentfault 导致的。如果是 abort 类型的错误，往往是程序某个位置抛了异常，这种 core 通常比较好查，栈顶的函数通常都是 abort 相关的函数，如果顺着栈帧就能找到 core 出的具体位置。如果是基础库或者第三方库导致的抛异常，建议先查一下抛异常的原因。修复后在调用处 catch 异常，视情况打出相应级别的日志并监控。</p><p>另一类是 segmentfault 错误，这一类错误通常都比较难定位。因为 segmentfault 的原因非常多，直接原因都是访问了非法内存导致的。程序为什么会访问非法内存呢？通常有以下几种间接原因：</p><ul><li>未初始化导致访问了非法内存。</li><li>直接越界访问。</li><li>由于某种原因越界写，破坏了其它变量的数据。再次读取被破坏的数据时，可能会访问非法内存。</li><li>由于线程竞争的问题，你写的内存，可能已经不是你看到的那个内存了。当另一个线程在读取此内存数据时，可能会访问非法内存。</li></ul><p>以下都是常见的段错误，当你遇到了 coredump 时，先自查一下，是不是有以下的情况发生：</p><ul><li><p>a. 某个声明了返回值的函数，漏写了 return 语句（这种开了优化就会 coredump）。</p></li><li><p>b. 头文件和编译的库文件不匹配，也就是二进制兼容性导致的问题。又或是同一个工具库同时存在几个不同版本。</p></li><li><p>c. 程序中使用了消亡值。比如返回局部变量的地址，又或是引用了某个子作用域变量的地址（这类错误通常都比较隐蔽，不易发现，但是 AddressSantizer 都能帮你找到）。</p></li><li><p>d. 无符号数的减法问题。比如 size_t index = a; index -= 10; if (index &gt;=0) read a[index]; 再比如以下一个真实案例，导致线上死循环。</p></li><li></li></ul><figure><img src="`+l+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li><p>e. vector 的 erase 和 insert 问题。如果你引用了 vector 的某个成员后，就对其进行 insert 或 erase，那么之前引用的元素，又或是取到的迭代器，都可能会失效。</p></li><li><p>f. 多线程程序里，使用了共享的变量。这类错误往往不易发现，因为有时候，你甚至都不知道你的实例是否是在多线程环境中执行，甚至都没有意识到。所以可以先思考以下几个问题：</p></li><li><p>当前对象的 method 是否是在多线程环境中执行的？</p></li><li><p>如果是，当前对象是否有自己的成员？</p></li><li><p>如果有成员，这些成员是否在 method 的中有做修改？</p></li></ul><p>如果上面的问题都回答是，说明你这个 class 设计上存在问题。在任何时候，method 都需要优先被修饰为 const，除非你觉得你这个方法确实需要修改成员，比如 set 类的方法。</p><ul><li>当前的函数是否在多线程中执行？</li><li>当前函数的参数是否是可修改的引用或是指针？</li><li>传递的参数是否是共享的变量？</li></ul><p>这种通常比较隐蔽，难以发现。</p><p>使用了线程不安全的系统函数，比如 gethostbyname, getenv 等。</p><ul><li>g. 信号处理函数。信号处理函数往往也会存在竞争的问题，但是危害没有多线程程序那么严重，导致 coredump 的机率比较低。但是它可能会导致程序死锁发生，比如在信号处理函数中使用了加锁的函数，如果不是递归锁，则会导致程序死锁，比如 malloc 函数。</li><li>h. 栈溢出。典型的现象是，你只能看到栈顶少数几个函数，再往深了看，都是问号。比如越界写就会导致此种问题发生，这种通常比较容易复现，前提是你要能找到导致问题的 case。</li><li>i. 爆栈。Linux 64bit 系统线程栈默认大小是 8MB，如果你有某个类型的变量，占用的内存非常大，就有可能导致栈内存不够用而 coredump。比如在栈上使用二维数组，又或是声明了一个超长的数组。</li></ul><p>还有一类错误，连堆栈都看不到，比如栈溢出导致的问题。著名的 stackoverflow 网站，它的中文名就是栈溢出。栈溢出会导致诡异的问题，甚至让你的程序陷入奇妙的死循环而不会 coredump。也可能会导致最终爆栈。</p><p>如果你的遇到了栈溢出的问题，你就需要有一定的二进制分析能力，人肉去分析栈栈帧，来挖掘调用链。关于栈帧分析，需要再做单独的文章去讲解。即使你学会分析了栈帧，但是有些问题，你可能仍然无法定位。</p><p>coredump 最困难的地方是，通常越界读写，不会导致直接的 coredump。比如你在时间 t0 修改变量 A，但是由于越界写，导致与 A 紧临的内存上的某个变量 Z 被修改，写入了垃圾数据。当未来在 t1 时刻使用变量 Z 时，程序才会 coredump。此时你能看到的是，变量 Z 数据被写坏了，然而，你却无法知道是在 t0 时刻早已被写坏。</p><p>此种越界行为，靠人肉去分析 coredump 几乎不可能找出问题，除非出问题的地方与 coredump 的地方非常接近。如果确实你的修改导致 coredump，你可通过代码 diff 一行一行去分析。这种情况，建议直接上 AddressSanitizer 来辅助定位。</p><p>线程竞争导致的 coredump 也令人头疼，甚至你无法确定他就是线程竞争导致的问题。假如你的代码有多线程相关的逻辑，那么一定要检查是否使用了线程共享的对象。如果无法发现问题，使用 ThreadSanitizer 工具来辅助定位。</p><p><a href="https://ku.baidu-int.com/knowledge/HFVrC7hq1Q/pKzJfZczuc/-x7_7zL7yX/a_MxB4Ke0i31Do" target="_blank" rel="noopener noreferrer">GDB调试原理与技巧</a></p>',36)]))}const d=s(t,[["render",h],["__file","11.coredump.html.vue"]]),B=JSON.parse('{"path":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/11.coredump.html","title":"11.coredump","lang":"zh-CN","frontmatter":{"title":"11.coredump","description":"​ core dump又叫核心转储。在程序运行过程中发生异常时，将其内存数据保存到文件中，这个过程叫做core dump。core是指记忆体也就是现场的内存。 ​ 在开发过程中，难免会遇到程序运行过程中异常退出的情况，这时候想要定位哪里出了问题，仅仅依靠程序自身的信息打印（日志记录）往往是不够的，这个时候就需要 Core Dump 文件来帮忙定位。一个...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/11.coredump.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"11.coredump"}],["meta",{"property":"og:description","content":"​ core dump又叫核心转储。在程序运行过程中发生异常时，将其内存数据保存到文件中，这个过程叫做core dump。core是指记忆体也就是现场的内存。 ​ 在开发过程中，难免会遇到程序运行过程中异常退出的情况，这时候想要定位哪里出了问题，仅仅依靠程序自身的信息打印（日志记录）往往是不够的，这个时候就需要 Core Dump 文件来帮忙定位。一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"11.coredump\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"Linux下配置core文件生成","slug":"linux下配置core文件生成","link":"#linux下配置core文件生成","children":[]},{"level":2,"title":"使用Core文件进行问题定位","slug":"使用core文件进行问题定位","link":"#使用core文件进行问题定位","children":[]},{"level":2,"title":"常见导致coredumpe的信号","slug":"常见导致coredumpe的信号","link":"#常见导致coredumpe的信号","children":[]},{"level":2,"title":"一些内部搜集到的GDB的技巧和经验","slug":"一些内部搜集到的gdb的技巧和经验","link":"#一些内部搜集到的gdb的技巧和经验","children":[]}],"git":{},"readingTime":{"minutes":9.01,"words":2704},"filePathRelative":"操作系统/内存管理/内核原理/11.coredump.md","excerpt":"<p>​      core dump又叫核心转储。在程序运行过程中发生异常时，将其内存数据保存到文件中，这个过程叫做core dump。core是指记忆体也就是现场的内存。</p>\\n<p>​      在开发过程中，难免会遇到程序运行过程中异常退出的情况，这时候想要定位哪里出了问题，仅仅依靠程序自身的信息打印（日志记录）往往是不够的，这个时候就需要 Core Dump 文件来帮忙定位。一个完整的 Core Dump 文件实际上相当于恢复了异常现场，利用 Core Dump 文件，可以查看到程序异常时的所有信息，变量值、栈信息、内存数据，程序异常时的运行位置（甚至记录代码行号）等等，定位所需要的一切信息都可以从 Core Dump文件获取到，能够非常有效的提高定位效率。</p>","autoDesc":true}');export{d as comp,B as data};
