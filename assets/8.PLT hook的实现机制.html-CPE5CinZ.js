import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-D1zlwylF.js";const e={};function t(p,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="一、从案例说起" tabindex="-1"><a class="header-anchor" href="#一、从案例说起"><span>一、从案例说起</span></a></h2><p>文件：a.h</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#ifdef __cplusplus</span></span>
<span class="line"><span>extern &quot;C&quot; {</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void say_hello();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#ifdef __cplusplus</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>#endif</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件：a.c</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#include &lt;stdio.h&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void say_hello() {</span></span>
<span class="line"><span>    printf(&quot;hello world!\\n&quot;);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件：main.c</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#include &quot;a.h&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main() {</span></span>
<span class="line"><span>    say_hello();</span></span>
<span class="line"><span>    return 0;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通过如下编译，生成二进制执行，会输出 <code>hello world!</code> 字符串。增加 <code>-fno-builtin</code> 是为了防止编译器将 printf 优化成 puts 调用。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>gcc a.c -shared -fPIC -fno-builtin -o liba.so</span></span>
<span class="line"><span>gcc main.c liba.so -o main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们现在要 hook printf，使其完成一些业务逻辑。</p><h2 id="二、跟踪分析" tabindex="-1"><a class="header-anchor" href="#二、跟踪分析"><span>二、跟踪分析</span></a></h2><p>在 Linux 下，我们的动态库、二进制文件都是 ELF 格式的。并且一般的动态库都是 PIC 方法编译的，产生的是地址无关代码。有了这个前提，我们来看下我们的动态库 <code>liba.so</code> 是如何引用 printf 的。</p><p>我们先来静态分析下 <a href="http://liba.so" target="_blank" rel="noopener noreferrer">liba.so</a> 这个文件。通过 <code>objdump -D liba.so -M intel &gt; o_d.txt</code> 反汇编代码</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>000000000000112a &lt;say_hello&gt;:</span></span>
<span class="line"><span>    112a:	55                   	push   rbp</span></span>
<span class="line"><span>    112b:	48 89 e5             	mov    rbp,rsp</span></span>
<span class="line"><span>    112e:	48 8d 3d cb 0e 00 00 	lea    rdi,[rip+0xecb]        # 2000 &lt;_fini+0xebc&gt;</span></span>
<span class="line"><span>    1135:	b8 00 00 00 00       	mov    eax,0x0</span></span>
<span class="line"><span>    113a:	e8 f1 fe ff ff       	call   1030 &lt;printf@plt&gt;</span></span>
<span class="line"><span>    113f:	90                   	nop</span></span>
<span class="line"><span>    1140:	5d                   	pop    rbp</span></span>
<span class="line"><span>    1141:	c3                   	ret</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的 say_hello 函数中调用了 printf 函数，是通过 <code>call 1030</code> 指令实现的，也就是跳转到 1030 位置执行。我们再来看看此位置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Disassembly of section .plt:</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>0000000000001030 &lt;printf@plt&gt;:</span></span>
<span class="line"><span>    1030:	ff 25 e2 2f 00 00    	jmp    QWORD PTR [rip+0x2fe2]        # 4018 &lt;printf@GLIBC_2.2.5&gt;</span></span>
<span class="line"><span>    1036:	68 00 00 00 00       	push   0x0</span></span>
<span class="line"><span>    103b:	e9 e0 ff ff ff       	jmp    1020 &lt;_init+0x20&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>&lt;printf@plt&gt;</code> 位于 <code>.plt</code> 节，而他的实现中第一行便是跳转到 <code>rip+0x2fe2</code> 处。rip 是指令指针寄存器，用来存储 CPU 即将要执行的指令地址，也就是下一条指令地址。在这里 rip 的值为 1036。相当于跳到 <code>0x1036 + 0x2fe2 = 0x4018</code> 位置处。我们再来跟踪。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Disassembly of section .got.plt:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>0000000000004000 &lt;_GLOBAL_OFFSET_TABLE_&gt;:</span></span>
<span class="line"><span>    4000:	20 3e                	and    BYTE PTR [rsi],bh</span></span>
<span class="line"><span>	...</span></span>
<span class="line"><span>    4016:	00 00                	add    BYTE PTR [rax],al</span></span>
<span class="line"><span>    4018:	36 10 00             	ss adc BYTE PTR [rax],al</span></span>
<span class="line"><span>    401b:	00 00                	add    BYTE PTR [rax],al</span></span>
<span class="line"><span>    401d:	00 00                	add    BYTE PTR [rax],al</span></span>
<span class="line"><span>	...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>地址 4018 处是在 &quot;.got.plt&quot; 节中。不用看他的反汇编，这个节中存储的是数据，而不是指令。</p><blockquote><p>“.got.plt” 节用来保存函数引用的地址，也就是说，所有对于外部函数的引用全部被分离出来放到了此节中了。另外 &quot;.got.plt&quot; 节，他的前三项分别保存的是：&quot;.dynamic&quot; 段的地址、本模块的ID、_dl_runtime_resolve() 的地址。从第四项开始才是外部函数的引用。在 64 位系统下，一项是 8 字节。</p></blockquote><p>那么地址 4018 处的存储的是 <code>0x1036</code> 这个值（注意是小端）。那也就是说在 <code>printf@plt</code> 中的 jmp 会跳到这个地址去执行代码。我们一看，<code>0x1036</code> 不就是 <code>printf@plt</code> 的第二行指令嘛。链接器的确是这样做的，我们继续往下看，<code>printf@plt</code> 紧接着，向栈中压入一个 0 值，然后跳到了 1020 的位置。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Disassembly of section .plt:</span></span>
<span class="line"><span>0000000000001020 &lt;printf@plt-0x10&gt;:</span></span>
<span class="line"><span>    1020:	ff 35 e2 2f 00 00    	push   QWORD PTR [rip+0x2fe2]        # 4008 &lt;_GLOBAL_OFFSET_TABLE_+0x8&gt;</span></span>
<span class="line"><span>    1026:	ff 25 e4 2f 00 00    	jmp    QWORD PTR [rip+0x2fe4]        # 4010 &lt;_GLOBAL_OFFSET_TABLE_+0x10&gt;</span></span>
<span class="line"><span>    102c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来分析这个函数，他先是向栈中压入 <code>0x4008</code> 地址，此地址就是 &quot;.got.plt&quot; 节中的第二项，计算过程是一样的。然后跳到 <code>0x4010</code> 地址处，这个地址是 &quot;.got.plt&quot; 节中第三项。而第三项存储的是 <code>_dl_runtime_resolve()</code> 的地址，也就是去执行 <code>_dl_runtime_resolve()</code> 这个函数了。这个函数会在装载期间完成符号解析和重定位工作，最终会修改 &quot;.got.plt&quot; 节中的函数引用的地址。</p><p>好了，到这里我们发现只要我们将 &quot;.got.plt&quot; 中的第 4 项，也就是 <code>0x4018</code> 地址处的值给修改了，那么也就完成了 hook。</p><h2 id="三、实践" tabindex="-1"><a class="header-anchor" href="#三、实践"><span>三、实践</span></a></h2><p>在修改前，需要注意三个问题：</p><ul><li><code>0x4018</code> 是个相对地址，我们如果直接修改此地址的话，要注意换算成绝对地址</li><li>第一步得到的地址，很可能没有写入权限，直接对这个地址赋值会引入段错误</li><li>上两步即使成功了，可能 CPU 有指令缓存，我们在内存中的修改不能被 CPU 运行到</li></ul><h3 id="_1-换算地址" tabindex="-1"><a class="header-anchor" href="#_1-换算地址"><span>1. 换算地址</span></a></h3><p>在进程的内存空间，各种共享库的加载地址是随机的，只有在运行时才能拿到其加载的地址，也就是基地址。我们可以通过解析进程的 <code>/proc/xxx/maps</code> 来拿到进程的内存空间中 mmap 的映射信息，包括各种动态库、可执行文件（如：动态链接器）、栈空间、堆空间等等。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># cat /proc/34982/maps</span></span>
<span class="line"><span>address                   perms offset  dev   inode                      pathname</span></span>
<span class="line"><span>7faa5444d000-7faa5444e000 r--p 00000000 fd:00 395457                     /data/tmp/liba.so</span></span>
<span class="line"><span>7faa5444e000-7faa5444f000 r-xp 00001000 fd:00 395457                     /data/tmp/liba.so</span></span>
<span class="line"><span>7faa5444f000-7faa54450000 r--p 00002000 fd:00 395457                     /data/tmp/liba.so</span></span>
<span class="line"><span>..</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的 <a href="http://liba.so" target="_blank" rel="noopener noreferrer">liba.so</a> 在 maps 中有多行记录，一般 offset 为 0 的第一行的起始地址 <code>7faa5444d000</code> 在绝大多数情况下就是共享库的基地址。</p><h3 id="_2-内存访问权限" tabindex="-1"><a class="header-anchor" href="#_2-内存访问权限"><span>2. 内存访问权限</span></a></h3><p>maps 返回的信息中，我们也能发现没有写权限。可以使用 mprotect 来完成，注意只能以 “页” 为单位修改。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#include &lt;sys/mman.h&gt;</span></span>
<span class="line"><span>int mprotect(void *addr, size_t len, int prot);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-指令缓存" tabindex="-1"><a class="header-anchor" href="#_3-指令缓存"><span>3. 指令缓存</span></a></h3><p>处理器可能会对数据或者代码进行缓存。修改内存地址后，我们需要清除处理器的指令缓存，让处理器重新从内存中读取这部分指令。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>void __builtin___clear_cache (char *begin, char *end);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>清除缓存时只能以 “页” 为单位。</p><h3 id="_4-验证" tabindex="-1"><a class="header-anchor" href="#_4-验证"><span>4. 验证</span></a></h3><p>于是我们进行修改代码，进行验证</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;inttypes.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;stdlib.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;sys/mman.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;errno.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;string.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;a.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> PAGE_SHIFT</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">      12</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> PAGE_SIZE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       (</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;">UL</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> PAGE_SHIFT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> PAGE_MASK</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(PAGE_SIZE</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> PAGE_START</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) ((addr) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> PAGE_MASK)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> PAGE_END</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">PAGE_START</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(addr)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> PAGE_SIZE)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> my_printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> ...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    write</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;hook printf</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int64_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> get_base_addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> fp </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> fopen</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/proc/self/maps&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;r&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (fp </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        fprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(stdout, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;fopen maps failed, err: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">strerror</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(errno));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;"> line</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">512</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    int64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> base_addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">fgets</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(line, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(line), fp)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">strstr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(line, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;liba.so&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sscanf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(line, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;%&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">PRIxPTR</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%*lx</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> %</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">*4s 00000000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">base_addr) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    fclose</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fp);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (base_addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        fprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(stdout, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;no found liba.so</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> base_addr;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> hook</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 获取 liba.so 的基地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    int64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> base_addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> get_base_addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 获取到需要修改的地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    int64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> base_addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4018</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 添加写权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    mprotect</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">PAGE_START</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(addr), PAGE_SIZE, PROT_READ </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> PROT_WRITE);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 替换函数地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void**</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> my_printf;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 清理处理器缓存</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    __builtin___clear_cache</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">PAGE_START</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(addr), (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">PAGE_END</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(addr));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    hook</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    say_hello</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过编译后执行：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># gcc main.c liba.so -g -o main</span></span>
<span class="line"><span># ./main</span></span>
<span class="line"><span>hook printf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们成功的 hook 了 printf 函数。我们并没有修改 <a href="http://liba.so" target="_blank" rel="noopener noreferrer">liba.so</a> 的代码，也没有重新编译他，我们仅仅修改了 main 程序。</p><h2 id="四、理论详解" tabindex="-1"><a class="header-anchor" href="#四、理论详解"><span>四、理论详解</span></a></h2><p>我们已经实践成功了，那么我们再来剖析一下他的理论知识。总结一下 PLT hook 的流程：</p><ul><li>读取进程的 maps 信息，获取到 ELF 文件在进程的 maps 中的内存基地址</li><li>验证 ELF 文件的头信息</li><li>从 PHT（<code>program header table</code>） 中找到类型为 <code>PT_LOAD</code> 且 offset 为 <code>0</code> 的 segment。计算 ELF 基地址。</li><li>从 PHT 中找到类型为 <code>PT_DYNAMIC</code> 的 segment，从中获取到 <code>.dynamic</code> section，从 <code>.dynamic</code> section中获取其他各项 section 对应的内存地址。</li><li>在 <code>.dynstr</code> section 中找到需要 hook 的 symbol 对应的 index 值。</li><li>遍历所有的 <code>.relxxx</code> section（重定位 section），查找 symbol index 和 symbol type 都匹配的项，对于这项重定位项，执行 hook 操作。</li><li>hook 的流程如下： <ul><li>读取 maps，确认当前 hook 地址的内存访问权限</li><li>如果权限不是可读可写，则使用 <code>mprotect</code> 修改访问权限为可读可写</li><li>将 hook 地址的值替换为新的值</li><li>如果之前用 <code>mprotect</code> 修改过内存访问权限，现在还原到之前的权限</li><li>清除 hook 地址所在内存页的处理器指令缓存</li></ul></li></ul><blockquote><p>名词解析：</p><ol><li>PHT：program header table，ELF 被加载到内存时，是以 segment 为单位的。一个 segment 包含了一个或多个 section。ELF 通过 PHT 来记录所有 segment 的基本信息。主要包括：segment 的类型、在文件中的偏移量、大小、加载到内存后的虚拟内存相对地址、内存中字节的对齐方式等等</li><li>所有类型为 <code>PT_LOAD</code> 的 segment 都会被动态链接器（linker）映射（mmap）到内存中</li><li><code>.dynamic</code> 节包括了 ELF 中各个节的内存位置等信息。在装载时，总是会有一个类型为 <code>PT_DYNAMIC</code> 的 segment，这个 segment 就包含了 <code>.dynamic</code> 节的内容。</li><li><code>.dynstr</code> 节中保存了所有的字符串常量信息</li><li>&quot;.rel.dyn&quot; 是对数据引用的修正，他所修正的位置位于 &quot;.got&quot; 以及数据段。 &quot;.rel.plt&quot; 是对函数引用的修正，他所修正的位置位于 &quot;.got.plt&quot;。</li></ol></blockquote>`,48)]))}const k=i(e,[["render",t],["__file","8.PLT hook的实现机制.html.vue"]]),r=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/8.PLT%20hook%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.html","title":"8.PLT hook的实现机制","lang":"zh-CN","frontmatter":{"title":"8.PLT hook的实现机制","description":"一、从案例说起 文件：a.h 文件：a.c 文件：main.c 我们通过如下编译，生成二进制执行，会输出 hello world! 字符串。增加 -fno-builtin 是为了防止编译器将 printf 优化成 puts 调用。 我们现在要 hook printf，使其完成一些业务逻辑。 二、跟踪分析 在 Linux 下，我们的动态库、二进制文件都是...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD/8.PLT%20hook%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"8.PLT hook的实现机制"}],["meta",{"property":"og:description","content":"一、从案例说起 文件：a.h 文件：a.c 文件：main.c 我们通过如下编译，生成二进制执行，会输出 hello world! 字符串。增加 -fno-builtin 是为了防止编译器将 printf 优化成 puts 调用。 我们现在要 hook printf，使其完成一些业务逻辑。 二、跟踪分析 在 Linux 下，我们的动态库、二进制文件都是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8.PLT hook的实现机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"一、从案例说起","slug":"一、从案例说起","link":"#一、从案例说起","children":[]},{"level":2,"title":"二、跟踪分析","slug":"二、跟踪分析","link":"#二、跟踪分析","children":[]},{"level":2,"title":"三、实践","slug":"三、实践","link":"#三、实践","children":[{"level":3,"title":"1. 换算地址","slug":"_1-换算地址","link":"#_1-换算地址","children":[]},{"level":3,"title":"2. 内存访问权限","slug":"_2-内存访问权限","link":"#_2-内存访问权限","children":[]},{"level":3,"title":"3. 指令缓存","slug":"_3-指令缓存","link":"#_3-指令缓存","children":[]},{"level":3,"title":"4. 验证","slug":"_4-验证","link":"#_4-验证","children":[]}]},{"level":2,"title":"四、理论详解","slug":"四、理论详解","link":"#四、理论详解","children":[]}],"git":{},"readingTime":{"minutes":7.13,"words":2138},"filePathRelative":"技术专题/链接与装载/8.PLT hook的实现机制.md","excerpt":"<h2>一、从案例说起</h2>\\n<p>文件：a.h</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>#ifdef __cplusplus</span></span>\\n<span class=\\"line\\"><span>extern \\"C\\" {</span></span>\\n<span class=\\"line\\"><span>#endif</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>void say_hello();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>#ifdef __cplusplus</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span>#endif</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{k as comp,r as data};
