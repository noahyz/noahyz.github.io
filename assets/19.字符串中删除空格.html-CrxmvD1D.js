import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as n,o as a}from"./app-D1zlwylF.js";const l={};function t(d,s){return a(),i("div",null,s[0]||(s[0]=[n(`<h3 id="c-中的字符串中删除空格" tabindex="-1"><a class="header-anchor" href="#c-中的字符串中删除空格"><span>c++中的字符串中删除空格</span></a></h3><p>默认情况下，下面的字符被视为空白字符：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>1. 空格 &#39; &#39;</span></span>
<span class="line"><span>2. 换行 &#39;\\n&#39;</span></span>
<span class="line"><span>3. 回车 &#39;\\r&#39;</span></span>
<span class="line"><span>4. 水平制表符 &#39;\\t&#39;</span></span>
<span class="line"><span>5. 换页 &#39;\\f&#39;</span></span>
<span class="line"><span>6. 垂直制表符 &#39;\\v&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>std::remove_if</code> 算法实际上并不从字符串中删除字符，而是移动所有“给定谓词”字符到前面，并返回一个指向结束位置的迭代器。然后我们可以通过调用 <code>std::erase</code> 来删除给定的谓词</p><ol><li><p>使用 <code>std::isspace</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>std::string str = &quot;Hello \\n\\n world\\n&quot;;</span></span>
<span class="line"><span>s.erase(std::remove_if(s.begin(), s.end(), ::isspace), s.end());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>自己实现</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>bool isSpace(unsigned char c) {</span></span>
<span class="line"><span>    return (c == &#39; &#39; || c == &#39;\\n&#39; || c == &#39;\\r&#39; ||</span></span>
<span class="line"><span>        c == &#39;\\t&#39; || c == &#39;\\v&#39; || c == &#39;\\f&#39;);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>std::string s = &quot;Hello \\n\\nWorld&quot;;</span></span>
<span class="line"><span>s.erase(std::remove_if(s.begin(), s.end(), isSpace), s.end());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>lambda</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>s.erase(std::remove_if(s.begin(), s.end(),</span></span>
<span class="line"><span>      [](char c) {</span></span>
<span class="line"><span>      return (c == &#39; &#39; || c == &#39;\\n&#39; || c == &#39;\\r&#39; ||</span></span>
<span class="line"><span>      c == &#39;\\t&#39; || c == &#39;\\v&#39; || c == &#39;\\f&#39;);</span></span>
<span class="line"><span>      }),</span></span>
<span class="line"><span>      s.end());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 <code>std::regex_replace</code> 功能</p><p>正则表达式中，<code>\\s</code> 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>std::string s = &quot;hello \\n World \\r&quot;;</span></span>
<span class="line"><span>std::regex r(&quot;\\\\s+&quot;);</span></span>
<span class="line"><span>s = std::regex_replace(s, r, &quot;&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>boost 库功能</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>std::string s = &quot;hello world&quot;;</span></span>
<span class="line"><span>boost::algorithm::erase_all(s, &quot; &quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,5)]))}const c=e(l,[["render",t],["__file","19.字符串中删除空格.html.vue"]]),o=JSON.parse(`{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/19.%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%88%A0%E9%99%A4%E7%A9%BA%E6%A0%BC.html","title":"19.字符串中删除空格","lang":"zh-CN","frontmatter":{"title":"19.字符串中删除空格","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"c++中的字符串中删除空格 默认情况下，下面的字符被视为空白字符： std::remove_if 算法实际上并不从字符串中删除字符，而是移动所有“给定谓词”字符到前面，并返回一个指向结束位置的迭代器。然后我们可以通过调用 std::erase 来删除给定的谓词 使用 std::isspace 自己实现 lambda 使用 std::regex_repl...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/19.%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%88%A0%E9%99%A4%E7%A9%BA%E6%A0%BC.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"19.字符串中删除空格"}],["meta",{"property":"og:description","content":"c++中的字符串中删除空格 默认情况下，下面的字符被视为空白字符： std::remove_if 算法实际上并不从字符串中删除字符，而是移动所有“给定谓词”字符到前面，并返回一个指向结束位置的迭代器。然后我们可以通过调用 std::erase 来删除给定的谓词 使用 std::isspace 自己实现 lambda 使用 std::regex_repl..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"19.字符串中删除空格\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"c++中的字符串中删除空格","slug":"c-中的字符串中删除空格","link":"#c-中的字符串中删除空格","children":[]}],"git":{},"readingTime":{"minutes":0.98,"words":293},"filePathRelative":"编程语言/c++语言/编码技巧/19.字符串中删除空格.md","localizedDate":"2023年1月19日","excerpt":"<h3>c++中的字符串中删除空格</h3>\\n<p>默认情况下，下面的字符被视为空白字符：</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>1. 空格 ' '</span></span>\\n<span class=\\"line\\"><span>2. 换行 '\\\\n'</span></span>\\n<span class=\\"line\\"><span>3. 回车 '\\\\r'</span></span>\\n<span class=\\"line\\"><span>4. 水平制表符 '\\\\t'</span></span>\\n<span class=\\"line\\"><span>5. 换页 '\\\\f'</span></span>\\n<span class=\\"line\\"><span>6. 垂直制表符 '\\\\v'</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{c as comp,o as data};
