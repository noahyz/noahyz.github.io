import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as l,o as i}from"./app-D1zlwylF.js";const o={};function a(r,t){return i(),n("div",null,t[0]||(t[0]=[l('<h3 id="二、高性能数据库集群-分库分表" tabindex="-1"><a class="header-anchor" href="#二、高性能数据库集群-分库分表"><span>二、高性能数据库集群：分库分表</span></a></h3><p>读写分离分散了数据库的读写操作的压力，但没有分散存储压力，体现在几个方面</p><ul><li>数据量大，读写性能下降，即使有索引，索引也会很大</li><li>数据文件很大，数据库备份和恢复需要耗费很长时间</li><li>数据文件越大，极端情况下丢失数据的风险越高（例如机房火灾导致的主备机都故障）</li></ul><h4 id="_1-业务分库" tabindex="-1"><a class="header-anchor" href="#_1-业务分库"><span>1. 业务分库</span></a></h4><p>按照业务模块将数据分散到不同的数据库服务器。例如电商网站，将用户数据、商品数据、订单数据分开到三台不同的数据库服务器<br> 引入问题：</p><ul><li>无法使用 join 操作，原本在同一个数据库中的表分散到不同数据库中</li><li>事务问题，业务分库后，表分散到不同数据库，无法通过事务统一修改，虽然有分布式事务的解决方案（MySQL的XA），但性能太低</li><li>成本问题，原来需要 1 台数据库现在需要 3 台，考虑备份，需要 6 台</li></ul><h4 id="_2-业务分表" tabindex="-1"><a class="header-anchor" href="#_2-业务分表"><span>2. 业务分表</span></a></h4><p>同一业务的单表数据会达到单台数据库服务器的处理瓶颈。比如微信的几亿用户数据，如果全部存储到一张表中，无法满足性能要求，此时需要对单表数据进行拆分。单表数据拆分有两种方式：<strong>垂直分表</strong>和<strong>水平分表</strong></p><ul><li><p>垂直分表，适合将表中某些不常用且占用了大量空间的列拆分出去。缺点：导致表操作的次数要增加，原本一次查询可能需要多次查询。</p></li><li><p>水平分表，比如单表行数超过 5000万就分表，这不是标准，有个比较复杂的表，可能超过 1000万就要分表。<br> 缺点：</p><ol><li><p>某条数据具体属于那个切分后的表，需要增加路由算法进行计算，这个算法有一定复杂度</p><p>路由算法：<br> (1). 范围路由：以用户ID为例，1-100w 存储在数据库1的表中，100w-200w存储到数据库2的表中。优点：可以随着数据的增加平滑的扩充新的表。缺点：分布不均匀，可能表 1 存储 1000条数据，表 2 存储 100w 条数据<br> (2). hash 路由：选取某个列（或者几个列的组合）的值进行 hash 运算，将数据分散到不同数据库表中。<strong>难点</strong>：初始表数量的选取，表数据太多维护比较麻烦，表数量太少会导致单表性能存在问题。且增加子表数量非常麻烦，所有数据需要重分布。<strong>优点</strong>：表分布比较均匀。<strong>缺点</strong>：扩充新表比较麻烦，所有数据都要重分布</p><p>(3). 配置路由：用一张独立的表来记录路由信息，设计简单，扩充表的时候，只需要迁移指定数据，然后修改路由表即可。<strong>缺点</strong>：多查询一次影响性能，且路由表如果太大，性能瓶颈。</p></li><li><p>join 操作，水平分表后，数据分散在多个表，如果需要与其他表进行 join 查询，需要在业务代码或者数据库中间件 进行多次 join 查询，然后合并</p></li><li><p>count() 操作，可能某些业务逻辑还是会将这些表当作一个表来处理，比如获取记录总数 count() 操作就需要多次，然后合并返回，性能低。不过可以记录业务数据，即新建一张表然后记录</p></li></ol></li></ul>',9)]))}const s=e(o,[["render",a],["__file","1.数据库集群之分库分表.html.vue"]]),h=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/1.%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9B%86%E7%BE%A4%E4%B9%8B%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.html","title":"1.数据库集群之分库分表","lang":"zh-CN","frontmatter":{"title":"1.数据库集群之分库分表","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"二、高性能数据库集群：分库分表 读写分离分散了数据库的读写操作的压力，但没有分散存储压力，体现在几个方面 数据量大，读写性能下降，即使有索引，索引也会很大 数据文件很大，数据库备份和恢复需要耗费很长时间 数据文件越大，极端情况下丢失数据的风险越高（例如机房火灾导致的主备机都故障） 1. 业务分库 按照业务模块将数据分散到不同的数据库服务器。例如电商网站...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/1.%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9B%86%E7%BE%A4%E4%B9%8B%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"1.数据库集群之分库分表"}],["meta",{"property":"og:description","content":"二、高性能数据库集群：分库分表 读写分离分散了数据库的读写操作的压力，但没有分散存储压力，体现在几个方面 数据量大，读写性能下降，即使有索引，索引也会很大 数据文件很大，数据库备份和恢复需要耗费很长时间 数据文件越大，极端情况下丢失数据的风险越高（例如机房火灾导致的主备机都故障） 1. 业务分库 按照业务模块将数据分散到不同的数据库服务器。例如电商网站..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.数据库集群之分库分表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"二、高性能数据库集群：分库分表","slug":"二、高性能数据库集群-分库分表","link":"#二、高性能数据库集群-分库分表","children":[]}],"git":{},"readingTime":{"minutes":3.16,"words":947},"filePathRelative":"架构框架/架构模式/高性能架构模式/1.数据库集群之分库分表.md","localizedDate":"2023年1月19日","excerpt":"<h3>二、高性能数据库集群：分库分表</h3>\\n<p>读写分离分散了数据库的读写操作的压力，但没有分散存储压力，体现在几个方面</p>\\n<ul>\\n<li>数据量大，读写性能下降，即使有索引，索引也会很大</li>\\n<li>数据文件很大，数据库备份和恢复需要耗费很长时间</li>\\n<li>数据文件越大，极端情况下丢失数据的风险越高（例如机房火灾导致的主备机都故障）</li>\\n</ul>\\n<h4>1. 业务分库</h4>\\n<p>按照业务模块将数据分散到不同的数据库服务器。例如电商网站，将用户数据、商品数据、订单数据分开到三台不同的数据库服务器<br>\\n引入问题：</p>\\n<ul>\\n<li>无法使用 join 操作，原本在同一个数据库中的表分散到不同数据库中</li>\\n<li>事务问题，业务分库后，表分散到不同数据库，无法通过事务统一修改，虽然有分布式事务的解决方案（MySQL的XA），但性能太低</li>\\n<li>成本问题，原来需要 1 台数据库现在需要 3 台，考虑备份，需要 6 台</li>\\n</ul>","autoDesc":true}');export{s as comp,h as data};
