import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as i}from"./app-D1zlwylF.js";const l={};function p(t,s){return i(),e("div",null,s[0]||(s[0]=[a(`<p>本文主要说一下共享内存的原理</p><p>本文源码来自于 <code>glibc 2.27</code></p><h3 id="一、共享内存的底层实现" tabindex="-1"><a class="header-anchor" href="#一、共享内存的底层实现"><span>一、共享内存的底层实现</span></a></h3><p>我们看一下 <code>shm_open</code> 的源码实现。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int shm_open (const char *name, int oflag, mode_t mode) {</span></span>
<span class="line"><span>  SHM_GET_NAME (EINVAL, -1, &quot;&quot;);</span></span>
<span class="line"><span>  oflag |= O_NOFOLLOW | O_CLOEXEC;</span></span>
<span class="line"><span>  /* Disable asynchronous cancellation.  */</span></span>
<span class="line"><span>  int state;</span></span>
<span class="line"><span>  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &amp;state);</span></span>
<span class="line"><span>  int fd = open (shm_name, oflag, mode);</span></span>
<span class="line"><span>  if (fd == -1 &amp;&amp; __glibc_unlikely (errno == EISDIR))</span></span>
<span class="line"><span>    /* It might be better to fold this error with EINVAL since</span></span>
<span class="line"><span>       directory names are just another example for unsuitable shared</span></span>
<span class="line"><span>       object names and the standard does not mention EISDIR.  */</span></span>
<span class="line"><span>    __set_errno (EINVAL);</span></span>
<span class="line"><span>  pthread_setcancelstate (state, NULL);</span></span>
<span class="line"><span>  return fd;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 shm_open 的底层其实也是调用的 open 函数，打开的一个文件描述符。其中 shm_name 由宏定义 <code>SHM_GET_NAME</code> 来获取。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#define	_PATH_DEV	&quot;/dev/&quot;</span></span>
<span class="line"><span># define SHMDIR (_PATH_DEV &quot;shm/&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const char * __shm_directory (size_t *len) {</span></span>
<span class="line"><span>  *len = sizeof SHMDIR - 1;</span></span>
<span class="line"><span>  return SHMDIR;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#define SHM_GET_NAME(errno_for_invalid, retval_for_invalid, prefix)           \\</span></span>
<span class="line"><span>  size_t shm_dirlen;							      \\</span></span>
<span class="line"><span>  const char *shm_dir = __shm_directory (&amp;shm_dirlen);			      \\</span></span>
<span class="line"><span>  /* If we don&#39;t know what directory to use, there is nothing we can do.  */  \\</span></span>
<span class="line"><span>  if (__glibc_unlikely (shm_dir == NULL))				      \\</span></span>
<span class="line"><span>    {									      \\</span></span>
<span class="line"><span>      __set_errno (ENOSYS);						      \\</span></span>
<span class="line"><span>      return retval_for_invalid;					      \\</span></span>
<span class="line"><span>    }									      \\</span></span>
<span class="line"><span>  /* Construct the filename.  */					      \\</span></span>
<span class="line"><span>  while (name[0] == &#39;/&#39;)						      \\</span></span>
<span class="line"><span>    ++name;								      \\</span></span>
<span class="line"><span>  size_t namelen = strlen (name) + 1;					      \\</span></span>
<span class="line"><span>  /* Validate the filename.  */						      \\</span></span>
<span class="line"><span>  if (namelen == 1 || namelen &gt;= NAME_MAX || strchr (name, &#39;/&#39;) != NULL)      \\</span></span>
<span class="line"><span>    {									      \\</span></span>
<span class="line"><span>      __set_errno (errno_for_invalid);					      \\</span></span>
<span class="line"><span>      return retval_for_invalid;					      \\</span></span>
<span class="line"><span>    }									      \\</span></span>
<span class="line"><span>  char *shm_name = __alloca (shm_dirlen + sizeof prefix - 1 + namelen);	      \\</span></span>
<span class="line"><span>  __mempcpy (__mempcpy (__mempcpy (shm_name, shm_dir, shm_dirlen),	      \\</span></span>
<span class="line"><span>                        prefix, sizeof prefix - 1),			      \\</span></span>
<span class="line"><span>             name, namelen)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从以上的代码，我们可以清晰的看出，shm_name 的组成，一部分是 <code>/dev/shm/</code>，另外一部分是用户传入的 name。最终一起组成文件的地址 <code>/dev/shm/user_name</code>。</p><h3 id="二、为什么共享内存要放在-dev-shm-下呢" tabindex="-1"><a class="header-anchor" href="#二、为什么共享内存要放在-dev-shm-下呢"><span>二、为什么共享内存要放在 <code>/dev/shm</code> 下呢？</span></a></h3><p><code>/dev/shm</code> 一般是一种特殊的文件系统 <code>tmpfs</code>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># df -h</span></span>
<span class="line"><span>Filesystem                 Size  Used Avail Use% Mounted on</span></span>
<span class="line"><span>tmpfs                      1.9G     0  1.9G   0% /dev/shm</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tmpfs 的解释：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Tmpfs is a file system which keeps all files in virtual memory. </span></span>
<span class="line"><span>Everything in tmpfs is temporary in the sense that no files will </span></span>
<span class="line"><span>be created on your hard drive. If you unmount a tmpfs instance, </span></span>
<span class="line"><span>everything stored therein is lost.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意思是说，tmpfs 是一个文件系统，所有的文件都存在于虚拟内存中。如果说卸载了 tmpfs 实例，那么存储的内容将全部丢失。</p><p>那么<strong>如果机器重启，共享内存会丢失，毕竟是内存嘛</strong>。</p><p>那么创建共享内存的进程要是重启呢？共享内存还会在吗？那么现在产生了一个问题：虚拟内存必须要映射到物理内存，才可以使用，tmpfs 的虚拟内存会映射到哪里呢？</p><h3 id="三、-共享内存-位于哪里" tabindex="-1"><a class="header-anchor" href="#三、-共享内存-位于哪里"><span>三、“共享内存” 位于哪里？</span></a></h3><p>先来看第一个问题：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Since tmpfs lives completely in the page cache and on swap, all tmpfs</span></span>
<span class="line"><span>pages currently in memory will show up as cached. It will not show up</span></span>
<span class="line"><span>as shared or something like that. Further on you can check the actual </span></span>
<span class="line"><span>RAM+swap use of a tmpfs instance with df(1) and du(1).</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tmpfs 完全存在于 page cache 和 swap 中，当前在内存中的 tmpfs 会显示为 cached，不会显示为 shared 或其他。可以通过 df 和 du 命令查看 tmpfs 真实使用的物理内存和 swap 的大小。</p><p>我们来做实验论证一下。我的机器是 <code>ubuntu22.04</code>。</p><ul><li><p>我们首先通过 <code>df、free</code> 来查看当前的 <code>/dev/shm</code> 占有空间和 <code>buffer/Cache</code> 的占用</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># df -h</span></span>
<span class="line"><span>Filesystem                 Size  Used Avail Use% Mounted on</span></span>
<span class="line"><span>tmpfs                      1.9G     0  1.9G   0% /dev/shm</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span></span></span>
<span class="line"><span># free -h</span></span>
<span class="line"><span>               total        used        free      shared  buff/cache   available</span></span>
<span class="line"><span>Mem:           3.8Gi       998Mi       773Mi        43Mi       2.0Gi       2.5Gi</span></span>
<span class="line"><span>Swap:          3.6Gi       9.0Mi       3.6Gi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到此时 <code>/dev/shm</code> 中没有空间占用，<code>buff/cache</code> 为 2G</p></li><li><p>然后我们在 <code>/dev/shm</code> 中创建一个 100MB 的文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># dd if=/dev/zero of=/dev/shm/hello bs=1M count=100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>再来查看占用情况</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>df -h</span></span>
<span class="line"><span>Filesystem                 Size  Used Avail Use% Mounted on</span></span>
<span class="line"><span>tmpfs                      1.9G  100M  1.8G   6% /dev/shm</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span></span></span>
<span class="line"><span># free -h</span></span>
<span class="line"><span>               total        used        free      shared  buff/cache   available</span></span>
<span class="line"><span>Mem:           3.8Gi       992Mi       678Mi       143Mi       2.1Gi       2.4Gi</span></span>
<span class="line"><span>Swap:          3.6Gi       9.0Mi       3.6Gi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现 <code>/dev/shm</code> 此时占用 100M，而 <code>buff/cache</code> 增加了 100M。验证了的确 <code>/dev/shm</code> 是被创建在 <code>buff/cache</code> 中的</p></li><li><p>我们再来测试删除情况</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># free -m</span></span>
<span class="line"><span>               total        used        free      shared  buff/cache   available</span></span>
<span class="line"><span>Mem:            3871         996         668         143        2205        2449</span></span>
<span class="line"><span>Swap:           3715           9        3706</span></span>
<span class="line"><span># rm /dev/shm/hello</span></span>
<span class="line"><span># free -m</span></span>
<span class="line"><span>               total        used        free      shared  buff/cache   available</span></span>
<span class="line"><span>Mem:            3871        1013         751          43        2105        2532</span></span>
<span class="line"><span>Swap:           3715           9        3706</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>至此，我们通过实验论证了 <strong>tmpfs 文件系统中内存空间占用，位于 <code>buff/cache</code> 中。</strong></p><p>也回答了创建共享内存的进程即使 crash 掉，也不会影响共享内存，因为共享内存存在于操作系统内核的 <code>buff/cache</code> 中。</p><h3 id="四、注意" tabindex="-1"><a class="header-anchor" href="#四、注意"><span>四、注意</span></a></h3><p>在使用共享内存时，注意要挂载</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>glibc 2.2 and above expects tmpfs to be mounted at /dev/shm for </span></span>
<span class="line"><span>POSIX shared memory (shm_open, shm_unlink). Adding the following </span></span>
<span class="line"><span>line to /etc/fstab should take care of this: </span></span>
<span class="line"><span>tmpfs /dev/shm tmpfs defaults 0 0 </span></span>
<span class="line"><span>Remember to create the directory that you intend to mount tmpfs on </span></span>
<span class="line"><span>if necessary.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序员在使用 POSIX 的时候，记得在 <code>/etc/fstab</code> 中编辑一下，把 tmpfs 分区进行挂载。</p>`,28)]))}const r=n(l,[["render",p],["__file","5.共享内存的原理.html.vue"]]),h=JSON.parse('{"path":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/5.%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%9A%84%E5%8E%9F%E7%90%86.html","title":"5.共享内存的原理","lang":"zh-CN","frontmatter":{"title":"5.共享内存的原理","description":"本文主要说一下共享内存的原理 本文源码来自于 glibc 2.27 一、共享内存的底层实现 我们看一下 shm_open 的源码实现。 可以看到 shm_open 的底层其实也是调用的 open 函数，打开的一个文件描述符。其中 shm_name 由宏定义 SHM_GET_NAME 来获取。 从以上的代码，我们可以清晰的看出，shm_name 的组成，...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/5.%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%9A%84%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"5.共享内存的原理"}],["meta",{"property":"og:description","content":"本文主要说一下共享内存的原理 本文源码来自于 glibc 2.27 一、共享内存的底层实现 我们看一下 shm_open 的源码实现。 可以看到 shm_open 的底层其实也是调用的 open 函数，打开的一个文件描述符。其中 shm_name 由宏定义 SHM_GET_NAME 来获取。 从以上的代码，我们可以清晰的看出，shm_name 的组成，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5.共享内存的原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"一、共享内存的底层实现","slug":"一、共享内存的底层实现","link":"#一、共享内存的底层实现","children":[]},{"level":3,"title":"二、为什么共享内存要放在 /dev/shm 下呢？","slug":"二、为什么共享内存要放在-dev-shm-下呢","link":"#二、为什么共享内存要放在-dev-shm-下呢","children":[]},{"level":3,"title":"三、“共享内存” 位于哪里？","slug":"三、-共享内存-位于哪里","link":"#三、-共享内存-位于哪里","children":[]},{"level":3,"title":"四、注意","slug":"四、注意","link":"#四、注意","children":[]}],"git":{},"readingTime":{"minutes":3.6,"words":1079},"filePathRelative":"操作系统/内存管理/内核原理/5.共享内存的原理.md","excerpt":"<p>本文主要说一下共享内存的原理</p>\\n<p>本文源码来自于 <code>glibc 2.27</code></p>\\n<h3>一、共享内存的底层实现</h3>\\n<p>我们看一下 <code>shm_open</code> 的源码实现。</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>int shm_open (const char *name, int oflag, mode_t mode) {</span></span>\\n<span class=\\"line\\"><span>  SHM_GET_NAME (EINVAL, -1, \\"\\");</span></span>\\n<span class=\\"line\\"><span>  oflag |= O_NOFOLLOW | O_CLOEXEC;</span></span>\\n<span class=\\"line\\"><span>  /* Disable asynchronous cancellation.  */</span></span>\\n<span class=\\"line\\"><span>  int state;</span></span>\\n<span class=\\"line\\"><span>  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &amp;state);</span></span>\\n<span class=\\"line\\"><span>  int fd = open (shm_name, oflag, mode);</span></span>\\n<span class=\\"line\\"><span>  if (fd == -1 &amp;&amp; __glibc_unlikely (errno == EISDIR))</span></span>\\n<span class=\\"line\\"><span>    /* It might be better to fold this error with EINVAL since</span></span>\\n<span class=\\"line\\"><span>       directory names are just another example for unsuitable shared</span></span>\\n<span class=\\"line\\"><span>       object names and the standard does not mention EISDIR.  */</span></span>\\n<span class=\\"line\\"><span>    __set_errno (EINVAL);</span></span>\\n<span class=\\"line\\"><span>  pthread_setcancelstate (state, NULL);</span></span>\\n<span class=\\"line\\"><span>  return fd;</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,h as data};
