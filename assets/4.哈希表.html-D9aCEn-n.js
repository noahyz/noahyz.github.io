import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-D1zlwylF.js";const l="/assets/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9A%84%E7%BB%93%E6%9E%84-Z_ltl7b-.png",t="/assets/%E8%AE%BF%E9%97%AE%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9A%84%E6%95%B0%E6%8D%AE-Bc1sqVRy.png",h={};function p(k,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h2 id="哈希表" tabindex="-1"><a class="header-anchor" href="#哈希表"><span>哈希表</span></a></h2><p>两个关键点：哈希函数和哈希冲突。解决哈希冲突的常见方法有开放寻址法、拉链法</p><h4 id="_1-开发寻址法" tabindex="-1"><a class="header-anchor" href="#_1-开发寻址法"><span>1. 开发寻址法</span></a></h4><p>底层数据结构是数组，依次探测和比较数组中的元素以判断目标键值对是否存在于哈希表中；如果发生冲突，就会将键值对写入写一个索引不为空的位置。</p><p>装载因子：数组中元素数量与数组大小的比值。当装载率超过 70% 之后，哈希表的性能就会急剧下降，而一旦装载率达到 100%，整个哈希表就会完全失效。</p><h4 id="_2-拉链法" tabindex="-1"><a class="header-anchor" href="#_2-拉链法"><span>2. 拉链法</span></a></h4><p>数组+链表。如果发生冲突，则在链表末尾追加新的键值对即可。</p><p>装载因子：元素数量 / 桶数量。一般情况下，使用拉链法的哈希表装载因子不会超过 1。当哈希表的装载因子较大时会触发哈希表扩容，创建更多桶来存储哈希表中的元素。</p><h3 id="一、底层结构" tabindex="-1"><a class="header-anchor" href="#一、底层结构"><span>一、底层结构</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// A header for a Go map.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> hmap</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// Note: the format of the hmap is also encoded in cmd/compile/internal/gc/reflect.go.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// Make sure this stays in sync with the compiler&#39;s definition.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	count</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">     int</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // # live cells == size of map.  Must be first (used by len() builtin)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	flags</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">     uint8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	B</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">         uint8</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	noverflow</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> uint16</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // approximate number of overflow buckets; see incrnoverflow for details</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	hash0</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">     uint32</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // hash seed</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	buckets</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    unsafe</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Pointer</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // array of 2^B Buckets. may be nil if count==0.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	oldbuckets</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> unsafe</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Pointer</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // previous bucket array of half the size, non-nil only when growing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	nevacuate</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  uintptr</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // progress counter for evacuation (buckets less than this have been evacuated)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	extra</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">mapextra</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // optional fields</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> mapextra</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	overflow</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">bmap</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	oldoverflow</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">bmap</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	nextOverflow</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">bmap</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>count 表示当前哈希表中的元素数量</li><li>B 表示当前哈希表持有的 buckets 数量。因为哈希表中桶的数量都是 2 的倍数，所以该字段会存储对数，即 <code>len(buckets) == 2^B</code></li><li>hash0 时哈希表的种子，他能为哈希函数的结果引入随机性，这个值在创建哈希表时确定，并在调用哈希函数时作为参数传入</li><li>buckets 是指针，指向 <code>[]bmap</code> 结构，每个 bmap 可以存储 8 个键值对。</li><li>oldbuckets 是哈希表在扩容时用于保存之前 buckets 的字段，它的大小是当前 buckets 的一半</li><li>noverflow 是溢出桶的计数</li></ul><img src="`+l+`" alt="s" style="zoom:50%;"><ul><li>extra.nextOverflow 表示溢出桶，当哈希表中存储的数据过多，单个桶已经装满时会存储溢出的数据（图中有误，应该是 nextOverflow 指向蓝色的溢出桶）</li><li>buckets 指向的正常桶和 <code>extra.nextOverflow</code> 指向的溢出桶在内存汇中是连续的</li></ul><p>如上，黄色的 <code>runtime.bmap</code> 是正常桶，绿色的 <code>runtime.bmap</code> 是溢出桶。这两种桶在内存中是连续的</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>type bmap struct {</span></span>
<span class="line"><span>	tophash [bucketCnt]uint8  </span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上是编译期间的 bamp，tophash 字段存储了键的哈希的高 8 位，通过比较不同键的哈希的高 8 位可以减少访问键值对次数以提高性能。</p><p>在运行期间，运行时会重建 bmap 结构，如下：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> bmap</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	topbits</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">uint8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	keys</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    [</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">keytype</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	values</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  [</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">valuetype</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	pad</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">     uintptr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	overflow</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> uintptr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结，Go 语言的 map 底层主要是由 bmap 数组构成，而 bmap 结构是一个结构体，这个结构体中会最多存储 8 个键值对。溢出的元素存储在 extra.nextOverflow 的 bmap 结构中。随着哈希表存储的数据逐渐增多，会对哈希表扩容或者使用额外的桶存储溢出的数据，不会让单个桶中的数据超过 8 个。其中溢出桶也只是临时方案，创建过多溢出桶最终也会导致哈希表扩容。</p><h3 id="二、访问" tabindex="-1"><a class="header-anchor" href="#二、访问"><span>二、访问</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>v := hash[key] </span></span>
<span class="line"><span>v, ok := hash[key]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>访问一个 map 时，有如上两种操作。</p><ul><li>会先通过哈希表设置的哈希函数、种子获取当前键对应的哈希，再拿到该键值对所在的桶序号和哈希的高8位数字。</li><li>接下来会依次遍历正常桶和溢出桶中的数据，先比较哈希的高 8 位和桶中存储的 tophash，后比较传入的值和桶中的值以加速数据的读写。用于选择桶序号的是哈希的最低几位，而用于加速访问的是哈希的高 8 位，这种设计能够降低同一个桶中有大量相等 tophash 的概率以免影响性能。</li></ul><img src="`+t+'" style="zoom:50%;"><ul><li>每一个桶都是一整块内存空间，当发现桶中的 tophash 与传入键的 tophash 匹配之后，我们会通过指针和偏移量获取哈希表中存储的键 <code>keys[0]</code> 并与 key 比较，如果两者相同，就会获取目标值的指针 <code>values[0]</code> 并返回。</li><li>哈希表可能会在装载因子过高或者溢出桶过多时进行扩容。哈希表扩容并不是原子操作，在扩容时谈访问操作</li></ul><h3 id="三、写入" tabindex="-1"><a class="header-anchor" href="#三、写入"><span>三、写入</span></a></h3><ul><li>首先会根据传入的键拿到对应的哈希和桶</li><li>然后通过遍历比较桶中存储的 tophash 和键的哈希。如果找到了相同结果，就会返回目标位置的地址。获得目标地址后会通过算术计算寻址获得键值对 k 和 val 。这个过程会依次遍历正常桶和溢出桶中存储的数据，整个过程会分别判断 tophash 是否相等、key 是否相等。</li><li>如果当前桶已满，哈希表会创建新桶或者使用 hmap 预先在 <code>noverflow</code> 中创建好的桶来保存数据，新创建的桶不仅会追加到已有桶的末尾，还会增加哈希表的 noverflow 计数。</li><li>如果当前键值对在哈希表中不存在，哈希表会为新键值对规划存储的内存地址，通过 <code>runtime.typedmemmove</code> 将键移动到对应的内存空间中，并返回键对应值的地址。如果当前键值在哈希表中存在，就会直接返回目标区域的内存地址。拿到地址后将值插入即可</li></ul><h3 id="四、扩容" tabindex="-1"><a class="header-anchor" href="#四、扩容"><span>四、扩容</span></a></h3><p>触发扩容哈希表扩容的情况：</p><ul><li>装载因子超过 6.5</li><li>哈希表使用了太多溢出桶</li></ul><p>哈希表在存储元素过多时会触发扩容操作，每次都会将桶的数量翻倍，扩容过程不是原子的，而是通过运行时增量触发的。在扩容期间访问哈希表时会使用旧桶，向哈希表写入数据时会触发旧桶元素的分流，也就是会分流到新创建的桶中。</p><p>除这种正常的扩容外，为了解决大量写入、删除造成的内存泄露问题（当我们持续向哈希中插入数据并将他们全部删除时，如果哈希表中的数据量没有超过阈值，就会不断积累溢出桶造成缓慢的内存泄露），哈希表会在出现较多溢出桶时整理哈希表的内存来减少空间占用（复用已有的哈希扩容解决该问题，一旦哈希中出现了过多溢出桶，他会创建新桶保存数据，垃圾回收后清理老的溢出桶并释放内存）。</p>',32)]))}const o=s(h,[["render",p],["__file","4.哈希表.html.vue"]]),c=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/4.%E5%93%88%E5%B8%8C%E8%A1%A8.html","title":"4.哈希表的实现","lang":"zh-CN","frontmatter":{"title":"4.哈希表的实现","date":"2023-01-19T11:11:41.000Z","tags":["go"],"description":"哈希表 两个关键点：哈希函数和哈希冲突。解决哈希冲突的常见方法有开放寻址法、拉链法 1. 开发寻址法 底层数据结构是数组，依次探测和比较数组中的元素以判断目标键值对是否存在于哈希表中；如果发生冲突，就会将键值对写入写一个索引不为空的位置。 装载因子：数组中元素数量与数组大小的比值。当装载率超过 70% 之后，哈希表的性能就会急剧下降，而一旦装载率达到 ...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/4.%E5%93%88%E5%B8%8C%E8%A1%A8.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"4.哈希表的实现"}],["meta",{"property":"og:description","content":"哈希表 两个关键点：哈希函数和哈希冲突。解决哈希冲突的常见方法有开放寻址法、拉链法 1. 开发寻址法 底层数据结构是数组，依次探测和比较数组中的元素以判断目标键值对是否存在于哈希表中；如果发生冲突，就会将键值对写入写一个索引不为空的位置。 装载因子：数组中元素数量与数组大小的比值。当装载率超过 70% 之后，哈希表的性能就会急剧下降，而一旦装载率达到 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.哈希表的实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"哈希表","slug":"哈希表","link":"#哈希表","children":[{"level":3,"title":"一、底层结构","slug":"一、底层结构","link":"#一、底层结构","children":[]},{"level":3,"title":"二、访问","slug":"二、访问","link":"#二、访问","children":[]},{"level":3,"title":"三、写入","slug":"三、写入","link":"#三、写入","children":[]},{"level":3,"title":"四、扩容","slug":"四、扩容","link":"#四、扩容","children":[]}]}],"git":{},"readingTime":{"minutes":6.19,"words":1856},"filePathRelative":"编程语言/go语言/底层实现/4.哈希表.md","localizedDate":"2023年1月19日","excerpt":"<h2>哈希表</h2>\\n<p>两个关键点：哈希函数和哈希冲突。解决哈希冲突的常见方法有开放寻址法、拉链法</p>\\n<h4>1. 开发寻址法</h4>\\n<p>底层数据结构是数组，依次探测和比较数组中的元素以判断目标键值对是否存在于哈希表中；如果发生冲突，就会将键值对写入写一个索引不为空的位置。</p>\\n<p>装载因子：数组中元素数量与数组大小的比值。当装载率超过 70% 之后，哈希表的性能就会急剧下降，而一旦装载率达到 100%，整个哈希表就会完全失效。</p>\\n<h4>2. 拉链法</h4>\\n<p>数组+链表。如果发生冲突，则在链表末尾追加新的键值对即可。</p>\\n<p>装载因子：元素数量 / 桶数量。一般情况下，使用拉链法的哈希表装载因子不会超过 1。当哈希表的装载因子较大时会触发哈希表扩容，创建更多桶来存储哈希表中的元素。</p>","autoDesc":true}');export{o as comp,c as data};
