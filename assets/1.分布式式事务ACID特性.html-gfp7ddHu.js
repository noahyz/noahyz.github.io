import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as i,o as n}from"./app-D1zlwylF.js";const l={};function a(c,e){return n(),o("div",null,e[0]||(e[0]=[i('<p>一般认为事务必需遵从 ACID 特性。</p><ul><li>原子性（<code>Atomicity</code>）：一个事务所包含的所有操作，要么全部完成，要么全部不完成，不会在中间某个环节结束。即使事务在执行过程中发生错误，也会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，即事务中的操作不可分隔。</li><li>一致性（<code>Consistency</code>）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。事务必需保证数据库可以从一个一致的状态转移到另一个一致的状态。这种一致性要求不仅指常见的数据库完整性约束（例如主键、外键、触发器等约束），还需要由用户来保证。比如：A像B转100块，A是工商，B是招商，分属两个数据库，用户需要保证两个数据库中A+B=100，两个数据库的数据需要是一致的。</li><li>隔离性（<code>Isolation</code>）：数据库允许多个并发事务同时对其数据进行读写和修改，隔离性可以防止在多个事务并发执行时，由于交叉执行而导致数据出现异常的情况。不同的隔离级别有着不同的保证。</li><li>持久性（<code>Durability</code>）：事务结束后，对数据的修改就是永久的，即便系统出现故障也不会丢失数据。即会将数据写入非易失性存储设备。</li></ul><p>分布式事务可以理解为单机事务的两种变体。</p><ul><li>第一种变体是：同一份数据需要在多个副本上更新，即一个分布式事务需要更新所有的副本。一般可以通过单主复制来解决。</li><li>第二种变体是：数据进行了分区，比如A向B转账，A和B的账户分属不同的银行。这样的事务跨越多个节点，还要同时保证整体数据一致性和事务的ACID属性。是分布式事务的需要重点解决的问题。</li></ul><p>重点讨论第二种变体，分别从 ACID 四大特性进行切入。</p><h3 id="一、持久性" tabindex="-1"><a class="header-anchor" href="#一、持久性"><span>一、持久性</span></a></h3><p>只需要在客户端返回响应之前，确保将数据存储在非易失性存储设备中即可。通常还会包含一些 WAL(<code>Write-ahead Logging</code>，预写日志)或者其他日志文件。</p><p>虽然非易失性存储设备可能会损坏，但不考虑极端的情况（数据和备份全部损坏），通过备份就可以解决此问题。分布式事务的持久性的解决思路和单机事务没有太大差别。</p><h3 id="二、一致性" tabindex="-1"><a class="header-anchor" href="#二、一致性"><span>二、一致性</span></a></h3><p>事务的一致性不仅取决于数据库，还取决于用户(应用程序)的业务逻辑。一致性是一个需要应用程序和数据库一起控制的属性。因此通常不讨论分布式事务的一致性。</p><h3 id="三、原子性" tabindex="-1"><a class="header-anchor" href="#三、原子性"><span>三、原子性</span></a></h3><p>为了实现原子性，分布式事务提出了“原子提交”(<code>Atomic Commit</code>)。</p><p>如果出现分布式系统部分失效，事务需要具备回滚的能力。比如：A向B转账，A扣除了钱之后，B故障，此时需要回滚事务，将A的钱退回去。</p><h3 id="四、隔离性" tabindex="-1"><a class="header-anchor" href="#四、隔离性"><span>四、隔离性</span></a></h3><p>为了实现隔离性，分布式事务提出了“并发控制”（<code>Concurrency Control</code>）。</p><p>主要通过隔离其他尝试使用相同数据的并发事务以实现隔离性，并发控制通常设计锁和多版本并发控制。</p>',16)]))}const d=t(l,[["render",a],["__file","1.分布式式事务ACID特性.html.vue"]]),s=JSON.parse('{"path":"/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1.%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%8F%E4%BA%8B%E5%8A%A1ACID%E7%89%B9%E6%80%A7.html","title":"1.分布式式事务ACID特性","lang":"zh-CN","frontmatter":{"title":"1.分布式式事务ACID特性","description":"一般认为事务必需遵从 ACID 特性。 原子性（Atomicity）：一个事务所包含的所有操作，要么全部完成，要么全部不完成，不会在中间某个环节结束。即使事务在执行过程中发生错误，也会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，即事务中的操作不可分隔。 一致性（Consistency）：在事务开始之前和事务结束以后，数据库的完整性没有被破...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/1.%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%8F%E4%BA%8B%E5%8A%A1ACID%E7%89%B9%E6%80%A7.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"1.分布式式事务ACID特性"}],["meta",{"property":"og:description","content":"一般认为事务必需遵从 ACID 特性。 原子性（Atomicity）：一个事务所包含的所有操作，要么全部完成，要么全部不完成，不会在中间某个环节结束。即使事务在执行过程中发生错误，也会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，即事务中的操作不可分隔。 一致性（Consistency）：在事务开始之前和事务结束以后，数据库的完整性没有被破..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.分布式式事务ACID特性\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"一、持久性","slug":"一、持久性","link":"#一、持久性","children":[]},{"level":3,"title":"二、一致性","slug":"二、一致性","link":"#二、一致性","children":[]},{"level":3,"title":"三、原子性","slug":"三、原子性","link":"#三、原子性","children":[]},{"level":3,"title":"四、隔离性","slug":"四、隔离性","link":"#四、隔离性","children":[]}],"git":{},"readingTime":{"minutes":3.07,"words":922},"filePathRelative":"分布式/分布式事务/1.分布式式事务ACID特性.md","excerpt":"<p>一般认为事务必需遵从 ACID 特性。</p>\\n<ul>\\n<li>原子性（<code>Atomicity</code>）：一个事务所包含的所有操作，要么全部完成，要么全部不完成，不会在中间某个环节结束。即使事务在执行过程中发生错误，也会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，即事务中的操作不可分隔。</li>\\n<li>一致性（<code>Consistency</code>）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。事务必需保证数据库可以从一个一致的状态转移到另一个一致的状态。这种一致性要求不仅指常见的数据库完整性约束（例如主键、外键、触发器等约束），还需要由用户来保证。比如：A像B转100块，A是工商，B是招商，分属两个数据库，用户需要保证两个数据库中A+B=100，两个数据库的数据需要是一致的。</li>\\n<li>隔离性（<code>Isolation</code>）：数据库允许多个并发事务同时对其数据进行读写和修改，隔离性可以防止在多个事务并发执行时，由于交叉执行而导致数据出现异常的情况。不同的隔离级别有着不同的保证。</li>\\n<li>持久性（<code>Durability</code>）：事务结束后，对数据的修改就是永久的，即便系统出现故障也不会丢失数据。即会将数据写入非易失性存储设备。</li>\\n</ul>","autoDesc":true}');export{d as comp,s as data};
