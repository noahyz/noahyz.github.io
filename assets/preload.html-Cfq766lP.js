import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o}from"./app-D1zlwylF.js";const r={};function p(l,e){return o(),n("div",null,e[0]||(e[0]=[a('<p>hook 问题记录。（inline）</p><p><a href="https://zhuanlan.zhihu.com/p/44132805" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/44132805</a></p><p>dlsym 注意事项：</p><p><a href="https://blog.csdn.net/Cxinsect/article/details/100761916" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/Cxinsect/article/details/100761916</a></p><p><a href="https://blog.csdn.net/caspiansea/article/details/51337727" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/caspiansea/article/details/51337727</a></p><p>LD_PRELOAD 详解：<a href="https://blog.fesnel.com/blog/2009/08/25/preloading-with-multiple-symbol-versions/" target="_blank" rel="noopener noreferrer">https://blog.fesnel.com/blog/2009/08/25/preloading-with-multiple-symbol-versions/</a></p><h3 id="问题记录" tabindex="-1"><a class="header-anchor" href="#问题记录"><span>问题记录</span></a></h3><h4 id="_1-hook-系统调用注意" tabindex="-1"><a class="header-anchor" href="#_1-hook-系统调用注意"><span>1. hook 系统调用注意</span></a></h4><p>在 hook 重写 malloc 类调用时，注意不要在函数内部使用 printf 等会分配内存的函数，可能会陷入无限递归的风险。也就是说，hook 函数时尽量不要调用其他系统函数。</p><p>尽量不要直接设置全局环境变量，而是将环境变量添加到要运行/调试的命令之前。</p><p>在 hook malloc 内部，必须要输出日志时，可以使用 write 来代替 printf 方法。</p><h4 id="_2-ld-preload-为何不能-hook-printf" tabindex="-1"><a class="header-anchor" href="#_2-ld-preload-为何不能-hook-printf"><span>2. LD_PRELOAD 为何不能 hook printf</span></a></h4><p>简单来说，就是 gcc 可能会优化 printf 为 puts。</p><p>实践证明，对于printf的参数如果是以’\\n’结束的纯字符串，printf会被优化为puts函数，而字符串的结尾’\\n’符号被消除。除此之外，都会正常生成call printf指令。</p><p>详见：<a href="https://wanghenshui.github.io/2019/01/02/ld-printf-puts.html" target="_blank" rel="noopener noreferrer">https://wanghenshui.github.io/2019/01/02/ld-printf-puts.html</a></p>',15)]))}const h=t(r,[["render",p],["__file","preload.html.vue"]]),c=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/preload.html","title":"undefined","lang":"zh-CN","frontmatter":{"title":"undefined","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"hook 问题记录。（inline） https://zhuanlan.zhihu.com/p/44132805 dlsym 注意事项： https://blog.csdn.net/Cxinsect/article/details/100761916 https://blog.csdn.net/caspiansea/article/details/51...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/hook/preload.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"undefined"}],["meta",{"property":"og:description","content":"hook 问题记录。（inline） https://zhuanlan.zhihu.com/p/44132805 dlsym 注意事项： https://blog.csdn.net/Cxinsect/article/details/100761916 https://blog.csdn.net/caspiansea/article/details/51..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"undefined\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"问题记录","slug":"问题记录","link":"#问题记录","children":[]}],"git":{},"readingTime":{"minutes":0.86,"words":257},"filePathRelative":"技术专题/hook/preload.md","localizedDate":"2023年1月19日","excerpt":"<p>hook 问题记录。（inline）</p>\\n<p><a href=\\"https://zhuanlan.zhihu.com/p/44132805\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://zhuanlan.zhihu.com/p/44132805</a></p>\\n<p>dlsym 注意事项：</p>\\n<p><a href=\\"https://blog.csdn.net/Cxinsect/article/details/100761916\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://blog.csdn.net/Cxinsect/article/details/100761916</a></p>","autoDesc":true}');export{h as comp,c as data};
