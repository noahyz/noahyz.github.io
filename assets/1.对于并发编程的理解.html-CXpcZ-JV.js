import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-D1zlwylF.js";const h={};function e(t,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h2 id="对于并发编程的理解" tabindex="-1"><a class="header-anchor" href="#对于并发编程的理解"><span>对于并发编程的理解</span></a></h2><h4 id="_1-为什么使用并发" tabindex="-1"><a class="header-anchor" href="#_1-为什么使用并发"><span>1. 为什么使用并发</span></a></h4><ul><li>功能需求，比如我们的用户界面，既要同时处理用户请求；又要在后台做一些工作。</li><li>性能需求，比如讲单个任务分成几部分且各自并行运行，从而降低总运行时间</li></ul><h4 id="_2-并发可能导致的问题" tabindex="-1"><a class="header-anchor" href="#_2-并发可能导致的问题"><span>2. 并发可能导致的问题</span></a></h4><ul><li>并发编程的难度较高，可能会存在潜在的 bug，如果并发带来的收益足够大，可以尝试</li><li>线程会在系统中存在固有的开销，操作系统必须分配相关的内核资源和堆栈空间，然后将其加入调度器中，这个过程有一定的时间开销。如果任务实际运行时间远远小于启动线程的开销时间，使用多线程反而会降低效率</li><li>多线程之间需要操作系统做上下文切换，每个上下文切换都需要耗费CPU时间。因此需要参考硬件（CPU数量）调整运行线程的数量</li></ul><h3 id="一、c-的并发编程" tabindex="-1"><a class="header-anchor" href="#一、c-的并发编程"><span>一、C++的并发编程</span></a></h3><p>使用 c++11 的语法进行说明，使用 <code>#include &lt;thread&gt;</code> 包含 thread 头文件</p><h4 id="_1-启动与释放线程" tabindex="-1"><a class="header-anchor" href="#_1-启动与释放线程"><span>1. 启动与释放线程</span></a></h4><p>启动线程只需要构造 <code>std::thread</code> 对象即可。</p><ul><li>创建出来的线程可以调用 <code>detach()</code> 来分离线程，也就是显式的决定不等待这个线程</li><li>或者可以调用 <code>join()</code> 显式等待线程的结束，且只能对一个线程调用一次 <code>join()</code> d</li></ul><p>注意：需要确保 <code>std::thread</code> 对象被销毁前已调用 <code>join()</code> 或者 <code>detach()</code> 函数。如果要分离线程，通常在线程启动后就可以立即调用 <code>detach()</code>，但是如果要等待线程，那就要注意异常情况，比如在 <code>try/catch</code> 块中也要调用 <code>join()</code>，如下</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">thread</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">my_func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(...) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">	t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐“资源获取即初始化“（RAII）的语法，在析构函数中进行 <code>join()</code>。同时注意要 <code>delete</code> 掉拷贝构造函数和拷贝赋值函数。</p><h4 id="_2-后台运行线程" tabindex="-1"><a class="header-anchor" href="#_2-后台运行线程"><span>2. 后台运行线程</span></a></h4><p>在 <code>std::thread</code> 对象上调用 <code>detach()</code> 会把线程丢在后台运行，此时没有直接的方法与之通信，也不再可能等待该线程结束。所有权和控制权交给 C++ 运行时库，以确保与线程相关联的资源在线程退出后能够被正确的回收。</p><p>对于那种即用即忘的任务，使用分离线程是有意义的</p><h4 id="_3-传递参数给线程函数" tabindex="-1"><a class="header-anchor" href="#_3-传递参数给线程函数"><span>3. 传递参数给线程函数</span></a></h4><p>如果参数是指针，注意此指针的生命周期，如果指针指向的是局部变量，可能会导致未定义问题。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> const&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> s</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> use_thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> some_param</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	char</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">	sprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(buffer, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%i</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, some_param);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">	std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::thread </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">t1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(f, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, buffer);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">	std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::thread </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">t2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(f, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(buffer));</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">	t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">detach</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，执行 <code>use_thread</code> 的线程可能会在 t1 线程转换 buffer 到 string 之前退出，导致 buffer 空间被释放，出现未定义行为。线程 t2 则解决了这个问题，将 buffer 传递给 <code>std::string</code> 的构造函数之前转换为 <code>std::string</code></p><p>第二种情况，需要对象的引用，来改变这个对象。多线程的 <code>std::thread</code> 必须显式通过 <code>std::ref</code> 来绑定引用进行传参，否则，形参的引用声明是无效的。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> threadFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    str </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;change by threadFunc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    a </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 13</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::string </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 9</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::thread </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">th</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(threadFunc, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(str), a);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    th</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然也有类似传指针、或者 <code>std::move</code> 等编程技巧。</p><h4 id="_4-其他" tabindex="-1"><a class="header-anchor" href="#_4-其他"><span>4. 其他</span></a></h4><ul><li><code>std::thread::hardware_concurrency()</code> 这个函数返回一个对于给定程序执行时能够真正并发运行的线程数量的指示。在多核系统上，可能是 CPU 核心的数量，仅仅是一个提示，如果该信息不可用则函数会返回 0 。</li><li><code>std::thread</code> 对象的 <code>get_id()</code> 方法可以获取 thread 的 tid。</li></ul><h3 id="二、线程间竞争数据" tabindex="-1"><a class="header-anchor" href="#二、线程间竞争数据"><span>二、线程间竞争数据</span></a></h3><p>常用互斥锁来保护共享数据。调用 <code>lock()</code> 来加锁，同时意味着需要在离开的所有路径上都调用 <code>unlock()</code> 来解锁，包括异常情况，比较难把握。C++ 库 <code>std::lock_guard()</code> 类模板实现了 RAII 的互斥元，构造时加锁，析构时解锁。</p><h4 id="_1-死锁" tabindex="-1"><a class="header-anchor" href="#_1-死锁"><span>1. 死锁</span></a></h4><p>产生死锁的四个必要条件</p><ul><li>互斥条件：一个资源每次只能被一个进程使用</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放</li><li>不可剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系</li></ul><p>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。</p><p>如何避免死锁</p><ul><li>避免嵌套锁。如果已经持有一个锁，就别再获取锁。在持有锁的时候，尽量避免调用用户提供的代码，因为用户提供的代码中可能有锁。但是在写泛型时，参数类型上的每一个操作都是用户提供的代码，比较难避免，因此需要其他准则</li><li>以固定顺序获取锁。如果必须要获取两个或更多的锁，那么保证在每个线程中以相同的顺序获取这些锁。</li><li>使用 <code>try_lock()</code> 也可以一定程度上避免死锁</li></ul><h4 id="_2-unique-lock" tabindex="-1"><a class="header-anchor" href="#_2-unique-lock"><span>2. unique_lock</span></a></h4><p><code>std::unique_lock</code> 的功能比 <code>std::lock_guard</code> 强大，构造时支持延迟加锁、尝试加锁、马上加锁三种加锁模式，且支持移动；但性能开销较大。</p><h4 id="_3-锁粒度" tabindex="-1"><a class="header-anchor" href="#_3-锁粒度"><span>3. 锁粒度</span></a></h4><p>关注锁范围内的耗时，尽量让锁粒度降低。</p><h4 id="_4-初始化时保护共享数据" tabindex="-1"><a class="header-anchor" href="#_4-初始化时保护共享数据"><span>4. 初始化时保护共享数据</span></a></h4><p>我们经常会遇到这种场景，某个对象只需要初始化一次，但是可能有多个线程同时初始化。这也就谈到了 <code>double-checked locking</code> 模式</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> undefined_behaviour_with_double_checked_locking</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">resource_ptr) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">		std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::lock_guard</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::mutex</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> lk</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(resource_mutex);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">resource_ptr) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">			resource_ptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">reset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> some_resource);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">	resource_ptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">do_something</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，因为所外部的读取（注释 1）与锁内部由另一线程完成的写入（注释 3）不同步。一个对象的创建包含三个部分：分配对象的内存空间、初始化对象、设置指针指向刚分配的内存地址。在第二步和第三步之间，编译器可能会重排序。就会导致可能其他线程拿到的对象并没有初始化完成。</p><p>C++ 标准库提供了 <code>std::once_flag</code> 和 <code>std::call_once</code> 来处理这种情况。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::once_flag flag;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">	std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;init&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">call_once</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(flag, Initialize);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 static 关键字，将局部变量声明为 static 的。对于多个调用该函数的线程，这意味着可能会有针对“首次”的竞争条件</p><ul><li>在许多 C++11 之前的编译器上，这个竞争条件在实践中是有问题的，因为多个线程可能都认为他们是第一个，并试图去初始化该变量；又或者会出现一个线程未初始化完，另一个线程去使用它了。</li><li>在 C++11 中，static 的初始化被定义为只发生在一个线程上，并且其他线程不可以使用它直到它初始化完成。</li></ul><h4 id="_5-多读少写" tabindex="-1"><a class="header-anchor" href="#_5-多读少写"><span>5. 多读少写</span></a></h4><p>多读少写的场景使用互斥锁性能偏低，可以使用读写锁。比如 boost 库提供的 <code>boost::shared_lock</code></p>`,47)]))}const d=s(h,[["render",e],["__file","1.对于并发编程的理解.html.vue"]]),r=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1.%E5%AF%B9%E4%BA%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E7%90%86%E8%A7%A3.html","title":"1. 对于并发编程的理解","lang":"zh-CN","frontmatter":{"title":"1. 对于并发编程的理解","date":"2023-01-19T11:11:41.000Z","tags":["并发编程"],"description":"对于并发编程的理解 1. 为什么使用并发 功能需求，比如我们的用户界面，既要同时处理用户请求；又要在后台做一些工作。 性能需求，比如讲单个任务分成几部分且各自并行运行，从而降低总运行时间 2. 并发可能导致的问题 并发编程的难度较高，可能会存在潜在的 bug，如果并发带来的收益足够大，可以尝试 线程会在系统中存在固有的开销，操作系统必须分配相关的内核资...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1.%E5%AF%B9%E4%BA%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E7%90%86%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"1. 对于并发编程的理解"}],["meta",{"property":"og:description","content":"对于并发编程的理解 1. 为什么使用并发 功能需求，比如我们的用户界面，既要同时处理用户请求；又要在后台做一些工作。 性能需求，比如讲单个任务分成几部分且各自并行运行，从而降低总运行时间 2. 并发可能导致的问题 并发编程的难度较高，可能会存在潜在的 bug，如果并发带来的收益足够大，可以尝试 线程会在系统中存在固有的开销，操作系统必须分配相关的内核资..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"并发编程"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1. 对于并发编程的理解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"对于并发编程的理解","slug":"对于并发编程的理解","link":"#对于并发编程的理解","children":[{"level":3,"title":"一、C++的并发编程","slug":"一、c-的并发编程","link":"#一、c-的并发编程","children":[]},{"level":3,"title":"二、线程间竞争数据","slug":"二、线程间竞争数据","link":"#二、线程间竞争数据","children":[]}]}],"git":{},"readingTime":{"minutes":6.38,"words":1914},"filePathRelative":"技术专题/并发编程/1.对于并发编程的理解.md","localizedDate":"2023年1月19日","excerpt":"<h2>对于并发编程的理解</h2>\\n<h4>1. 为什么使用并发</h4>\\n<ul>\\n<li>功能需求，比如我们的用户界面，既要同时处理用户请求；又要在后台做一些工作。</li>\\n<li>性能需求，比如讲单个任务分成几部分且各自并行运行，从而降低总运行时间</li>\\n</ul>\\n<h4>2. 并发可能导致的问题</h4>\\n<ul>\\n<li>并发编程的难度较高，可能会存在潜在的 bug，如果并发带来的收益足够大，可以尝试</li>\\n<li>线程会在系统中存在固有的开销，操作系统必须分配相关的内核资源和堆栈空间，然后将其加入调度器中，这个过程有一定的时间开销。如果任务实际运行时间远远小于启动线程的开销时间，使用多线程反而会降低效率</li>\\n<li>多线程之间需要操作系统做上下文切换，每个上下文切换都需要耗费CPU时间。因此需要参考硬件（CPU数量）调整运行线程的数量</li>\\n</ul>","autoDesc":true}');export{d as comp,r as data};
