import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as t,o as s}from"./app-D1zlwylF.js";const i={};function a(p,n){return s(),l("div",null,n[0]||(n[0]=[t(`<h2 id="linux-下文件锁" tabindex="-1"><a class="header-anchor" href="#linux-下文件锁"><span>linux 下文件锁</span></a></h2><p>功能：使多个进程之间同步协调一致的访问文件的某个区域。</p><h3 id="一、fcntl" tabindex="-1"><a class="header-anchor" href="#一、fcntl"><span>一、fcntl</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int fcntl(int fd, int cmd, struct flock* flockptr);</span></span>
<span class="line"><span>struct flock {</span></span>
<span class="line"><span>	short l_type;</span></span>
<span class="line"><span>	short l_whence;</span></span>
<span class="line"><span>	off_t l_start;</span></span>
<span class="line"><span>	off_t l_len;</span></span>
<span class="line"><span>	pid_t l_pid;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，</p><ul><li>l_type是锁的类型：共享读锁（F_RDLCK），独占性写锁（F_WRLCK），解锁一个区域（F_UNLCK）</li><li>通常，对文件的操作都是从当前文件偏移处开始的，并使偏移量增加所读写的字节数。 <ul><li>如果l_whence为SEEK_SET，则将该文件的偏移量设置为距文件开始处 l_start 个字节</li><li>如果 l_whence 为 SEEK_CUR，则将该文件的偏移量设置为当前值加 l_start</li><li>如果 l_whence 为 SEEK_END，则将该文件的偏移量设置为文件长度加 l_start</li></ul></li><li>若 l_len 为0，则表示锁的范围可以扩展到最大可能偏移量。这意味着不管向该文件追加写了多少数据，他们都可以处于锁的范围内，而且起始位置可以是文件中任何一个位置</li><li>如果对整个文件加锁，则可以设置 l_start 和 l_whence 指向文件的起始位置，并且指定长度 l_len 为0</li></ul><p>fcntl 函数的cmd 参数</p><ul><li>F_GETLK：判断由 flockptr 所描述的锁是否会被另外一把锁所排斥（阻塞）。如果存在一把锁，它阻止创建由 flockptr 所描述的锁，则该现有锁的信息将重写 flockptr 指向的信息。如果不存在这个情况，则除了l_type设置为 F_UNLCK 之外，flockptr 所指向结构中的其他信息保持不变</li><li>F_SETLK：设置由 flockptr 所描述的锁。如果获取不到则 fcntl 出错返回，此时 errno 被设置为 EACCES 或 EAGAIN。也可以清除由 flockptr 指定的锁</li><li>F_SETLKW：这个cmd 是F_SETLK 的阻塞版本。如果加锁不能被授予则调用进程会休眠，如果请求创建的锁已经可用，或者休眠由信号中断，则该进程会被唤醒</li></ul><p>注意：fcntl 对于写饥饿的问题没有明确规定（就是文件有了读锁，然后来了写锁，之后又来了读锁，那是否允许加这个读锁，写锁是否有可能一直阻塞）</p><p>后面补上例子代码</p>`,10)]))}const d=e(i,[["render",a],["__file","8.文件锁.html.vue"]]),o=JSON.parse('{"path":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/8.%E6%96%87%E4%BB%B6%E9%94%81.html","title":"8.文件锁","lang":"zh-CN","frontmatter":{"title":"8.文件锁","date":"2021-05-04T16:11:41.000Z","tags":["文件锁"],"description":"linux 下文件锁 功能：使多个进程之间同步协调一致的访问文件的某个区域。 一、fcntl 如上， l_type是锁的类型：共享读锁（F_RDLCK），独占性写锁（F_WRLCK），解锁一个区域（F_UNLCK） 通常，对文件的操作都是从当前文件偏移处开始的，并使偏移量增加所读写的字节数。 如果l_whence为SEEK_SET，则将该文件的偏移量设...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/8.%E6%96%87%E4%BB%B6%E9%94%81.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"8.文件锁"}],["meta",{"property":"og:description","content":"linux 下文件锁 功能：使多个进程之间同步协调一致的访问文件的某个区域。 一、fcntl 如上， l_type是锁的类型：共享读锁（F_RDLCK），独占性写锁（F_WRLCK），解锁一个区域（F_UNLCK） 通常，对文件的操作都是从当前文件偏移处开始的，并使偏移量增加所读写的字节数。 如果l_whence为SEEK_SET，则将该文件的偏移量设..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"文件锁"}],["meta",{"property":"article:published_time","content":"2021-05-04T16:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8.文件锁\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-05-04T16:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"linux 下文件锁","slug":"linux-下文件锁","link":"#linux-下文件锁","children":[{"level":3,"title":"一、fcntl","slug":"一、fcntl","link":"#一、fcntl","children":[]}]}],"git":{},"readingTime":{"minutes":1.92,"words":577},"filePathRelative":"操作系统/系统编程/8.文件锁.md","localizedDate":"2021年5月5日","excerpt":"<h2>linux 下文件锁</h2>\\n<p>功能：使多个进程之间同步协调一致的访问文件的某个区域。</p>\\n<h3>一、fcntl</h3>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>int fcntl(int fd, int cmd, struct flock* flockptr);</span></span>\\n<span class=\\"line\\"><span>struct flock {</span></span>\\n<span class=\\"line\\"><span>\\tshort l_type;</span></span>\\n<span class=\\"line\\"><span>\\tshort l_whence;</span></span>\\n<span class=\\"line\\"><span>\\toff_t l_start;</span></span>\\n<span class=\\"line\\"><span>\\toff_t l_len;</span></span>\\n<span class=\\"line\\"><span>\\tpid_t l_pid;</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,o as data};
