import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as i,o as t}from"./app-D1zlwylF.js";const n={};function p(r,a){return t(),l("div",null,a[0]||(a[0]=[i('<h2 id="fmea-方法-排除架构可用性隐患" tabindex="-1"><a class="header-anchor" href="#fmea-方法-排除架构可用性隐患"><span>FMEA 方法-排除架构可用性隐患</span></a></h2><p>FMEA（Failure mode and effects analysis，故障模式与影响分析）FMEA 是一种在各行各业都有广泛应用的可用性分析方法，通过对系统范围内潜在的故障模式加以分析，并按照严重程度进行分类，以确定失效对于系统的最终影响</p><p>在架构设计领域，FMEA 的具体分析方法是：</p><ul><li>给出初始的架构设计图</li><li>假设架构中某个部件发生故障</li><li>分析此故障对系统功能造成的影响</li><li>根据分析结果，判断架构是否需要进行优化</li></ul><p>FMEA 分析的方法其实很简单，就是一个 FMEA 分析表，常见的 FMEA 分析表格包含下面部分</p><h4 id="_1-功能点" tabindex="-1"><a class="header-anchor" href="#_1-功能点"><span>1. 功能点</span></a></h4><p>从用户角度来看，而不是从系统各个模块功能点划分来看。比如，对于一个用户管理系统，使用 FMEA 分析时，登录/注册就是功能点</p><h4 id="_2-故障模式" tabindex="-1"><a class="header-anchor" href="#_2-故障模式"><span>2. 故障模式</span></a></h4><p>故障模式指的是系统会出现什么样的故障，包括故障点和故障形式。需要特别注意的是，这里的故障模式并不需要给出真正的故障原因，我们只需要假设出现某种故障现象即可，比如：MySQL 的响应时间达到 3 秒。此外，故障模式的描述要尽量精确，多使用量化描述，避免使用泛化的描述。不应该是 MySQL 响应慢</p><h4 id="_3-故障影响" tabindex="-1"><a class="header-anchor" href="#_3-故障影响"><span>3. 故障影响</span></a></h4><p>当发生故障模式中描述的故障时，功能点具体会受到什么影响。常见的影响有：功能点偶尔不可用、功能点完全不可用、部分用户功能点不可用、功能点响应缓慢、功能点出错等。</p><p>故障影响也需要尽量准确描述。例如，推荐使用“20% 的用户无法登录”，而不是“大部分用户无法登录”。</p><h4 id="_4-严重程度" tabindex="-1"><a class="header-anchor" href="#_4-严重程度"><span>4. 严重程度</span></a></h4><p>严重程度指站在业务的角度故障的影响程度，一般分为“致命 / 高 / 中 / 低 / 无”五个档次。严重程度按照这个公式进行评估：严重程度 = 功能点重要程度 × 故障影响范围 × 功能点受损程度。</p><h4 id="_5-故障原因" tabindex="-1"><a class="header-anchor" href="#_5-故障原因"><span>5. 故障原因</span></a></h4><p>“故障模式”中只描述了故障的现象，并没有单独列出故障原因。主要原因在于不管什么故障原因，故障现象相同，对功能点的影响就相同。将故障原因单独列出来，是因为：</p><ul><li>不同的故障原因发生概率不相同。例如：MySQL查询慢可能是 MySQL bug，也可能是没有索引。不过出现 bug 的概率远远低于没有索引；而不同的概率又影响我们具体如何应对这个故障</li><li>不同的故障原因检测手段不一样。例如：MySQL 响应慢可能是慢查询，也可能是 MySQL的磁盘坏了。检测方法就不一样</li><li>不同的故障原因的处理措施不一样。如果是 MySQL bug，那就升级 MySQL 版本；如果是没有索引，那就增加索引</li></ul><h4 id="_6-故障概率" tabindex="-1"><a class="header-anchor" href="#_6-故障概率"><span>6. 故障概率</span></a></h4><p>这里的概率就是指某个具体故障原因发生的概率。例如，磁盘坏道的概率、MySQL bug 的概率、没有索引的概率。一般分为“高 / 中 / 低”三档即可</p><ul><li>硬件，随着时间推移，故障概率会很高，新的硬盘坏掉几率很低。</li><li>开源系统，成熟的开源系统 bug 率低，刚发布的 bug 率会高一点</li><li>自研系统，和开源系统类似</li></ul><h4 id="_7-风险程度" tabindex="-1"><a class="header-anchor" href="#_7-风险程度"><span>7. 风险程度</span></a></h4><p>风险程度就是综合严重程度和故障概率来一起判断某个故障的最终等级，风险程度 = 严重程度 × 故障概率。因此可能出现某个故障影响非常严重，但其概率很低，最终来看风险程度就低。</p><p>“某个机房业务瘫痪”对业务影响是致命的，但如果故障原因是“地震”，那概率就很低。如果故障的原因是“机房空调烧坏”，则概率就比地震高很多了。同样的故障影响，不同的故障原因有不同的概率，最终得到的风险级别就是不同的。</p><h4 id="_8-已有措施" tabindex="-1"><a class="header-anchor" href="#_8-已有措施"><span>8. 已有措施</span></a></h4><p>针对具体的故障原因，系统现在是否提供了某些措施来应对，包括：检测告警、容错、自恢复等。</p><ul><li>检测告警，系统自己不针对故障进行处理，需要人工干预。</li><li>容错，检测到故障后，系统能够通过备份手段应对。例如，MySQL 主备机，当业务服务器检测到主机无法连接后，自动连接备机读取数据。</li><li>自恢复，检测到故障后，系统能够自己恢复。例如，Hadoop 检测到某台机器故障后，能够将存储在这台机器的副本重新分配到其他机器。当然，这里的恢复主要还是指“业务”上的恢复，一般不太可能将真正的故障恢复。例如，Hadoop 不可能将产生了磁盘坏道的磁盘修复成没有坏道的磁盘。</li></ul><h4 id="_9-规避措施" tabindex="-1"><a class="header-anchor" href="#_9-规避措施"><span>9. 规避措施</span></a></h4><p>规避措施指为了降低故障发生概率而做的一些事情，可以是技术手段，也可以是管理手段</p><ul><li><p>技术手段：为了避免新引入的 MongoDB 丢失数据，在 MySQL 中冗余一份。</p></li><li><p>管理手段：为了降低磁盘坏道的概率，强制统一更换服务时间超过 2 年的磁盘。</p></li></ul><h4 id="_10-解决措施" tabindex="-1"><a class="header-anchor" href="#_10-解决措施"><span>10. 解决措施</span></a></h4><p>为了能够解决问题而做的一些事情，一般都是技术手段</p><ul><li>为了解决密码暴力破解，增加密码重试次数限制。</li><li>为了解决拖库导致数据泄露，将数据库中的敏感数据加密保存。</li><li>为了解决非法访问，增加白名单控制。</li></ul><p>一般来说，如果某个故障既可以采取规避措施，又可以采取解决措施，那么我们会优先选择解决措施，毕竟能解决问题当然是最好的。但很多时候有些问题是系统自己无法解决的，例如磁盘坏道、开源系统 bug，这类故障只能采取规避措施</p><h4 id="_11-后续规划" tabindex="-1"><a class="header-anchor" href="#_11-后续规划"><span>11. 后续规划</span></a></h4><p>综合前面的分析，就可以看出哪些故障我们目前还缺乏对应的措施，哪些已有措施还不够，针对这些不足的地方，再结合风险程度进行排序，给出后续的改进规划。这些规划既可以是技术手段，也可以是管理手段；可以是规避措施，也可以是解决措施。同时需要考虑资源的投入情况，优先将风险程度高的系统隐患解决。比如：</p><ul><li>地震导致机房业务中断：这个故障模式就无法解决，只能通过备份中心规避，尽量减少影响；而机柜断电导致机房业务中断：可以通过将业务机器分散在不同机柜来规避。</li><li>敏感数据泄露：这个故障模式可以通过数据库加密的技术手段来解决。</li></ul>',36)]))}const h=e(n,[["render",p],["__file","7.如何排除可用性隐患.html.vue"]]),o=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/7.%E5%A6%82%E4%BD%95%E6%8E%92%E9%99%A4%E5%8F%AF%E7%94%A8%E6%80%A7%E9%9A%90%E6%82%A3.html","title":"7.如何排除可用性隐患","lang":"zh-CN","frontmatter":{"title":"7.如何排除可用性隐患","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"FMEA 方法-排除架构可用性隐患 FMEA（Failure mode and effects analysis，故障模式与影响分析）FMEA 是一种在各行各业都有广泛应用的可用性分析方法，通过对系统范围内潜在的故障模式加以分析，并按照严重程度进行分类，以确定失效对于系统的最终影响 在架构设计领域，FMEA 的具体分析方法是： 给出初始的架构设计图 假...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/7.%E5%A6%82%E4%BD%95%E6%8E%92%E9%99%A4%E5%8F%AF%E7%94%A8%E6%80%A7%E9%9A%90%E6%82%A3.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"7.如何排除可用性隐患"}],["meta",{"property":"og:description","content":"FMEA 方法-排除架构可用性隐患 FMEA（Failure mode and effects analysis，故障模式与影响分析）FMEA 是一种在各行各业都有广泛应用的可用性分析方法，通过对系统范围内潜在的故障模式加以分析，并按照严重程度进行分类，以确定失效对于系统的最终影响 在架构设计领域，FMEA 的具体分析方法是： 给出初始的架构设计图 假..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"7.如何排除可用性隐患\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"FMEA 方法-排除架构可用性隐患","slug":"fmea-方法-排除架构可用性隐患","link":"#fmea-方法-排除架构可用性隐患","children":[]}],"git":{},"readingTime":{"minutes":6.22,"words":1865},"filePathRelative":"架构框架/架构模式/高可用架构模式/7.如何排除可用性隐患.md","localizedDate":"2023年1月19日","excerpt":"<h2>FMEA 方法-排除架构可用性隐患</h2>\\n<p>FMEA（Failure mode and effects analysis，故障模式与影响分析）FMEA 是一种在各行各业都有广泛应用的可用性分析方法，通过对系统范围内潜在的故障模式加以分析，并按照严重程度进行分类，以确定失效对于系统的最终影响</p>\\n<p>在架构设计领域，FMEA 的具体分析方法是：</p>\\n<ul>\\n<li>给出初始的架构设计图</li>\\n<li>假设架构中某个部件发生故障</li>\\n<li>分析此故障对系统功能造成的影响</li>\\n<li>根据分析结果，判断架构是否需要进行优化</li>\\n</ul>\\n<p>FMEA 分析的方法其实很简单，就是一个 FMEA 分析表，常见的 FMEA 分析表格包含下面部分</p>","autoDesc":true}');export{h as comp,o as data};
