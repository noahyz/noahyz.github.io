import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as l}from"./app-D1zlwylF.js";const e={};function t(p,s){return l(),n("div",null,s[0]||(s[0]=[a(`<h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量"><span>环境变量</span></a></h2><p>我们首先捋一下一个进程的启动步骤，拿 C 语言来举个例子吧，当内核执行 C 程序时，在调用 main 函数前先调用一个特殊的启动例程。可执行程序文件将此启动例程指定为程序的起始地址---这是由链接编辑器设置的，而链接编辑器则由C编译器调用。启动例程丛内核取得命令行参数和环境变量值，然后为按上述方式调用main函数做好安排。</p><p>一个进程的环境变量是在调用main函数之前，由启动例程帮这个进程设置好的。准确点说，一个进程的环境变量是继承其父进程的。在linux 下，进程的环境变量可根据 <code>cat /proc/1/envrion</code> 查看。而用户启动的进程一般继承自终端shell，而终端shell的环境变量又可以被设置，常用的命令 export 也是如此，会写入当前终端shell对应的进程的环境变量的文件中。而一个进程的信息如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>root@9-134-239-95:3675# pwd</span></span>
<span class="line"><span>/proc/3675</span></span>
<span class="line"><span>root@9-134-239-95:3675# ll</span></span>
<span class="line"><span>总用量 0</span></span>
<span class="line"><span>-rw-r--r-- 1 root root 0 4月  13 10:00 autogroup</span></span>
<span class="line"><span>-r-------- 1 root root 0 4月  13 10:00 auxv</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 cgroup</span></span>
<span class="line"><span>--w------- 1 root root 0 4月  13 10:00 clear_refs</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 cmdline</span></span>
<span class="line"><span>-rw-r--r-- 1 root root 0 4月  13 10:00 comm</span></span>
<span class="line"><span>-rw-r--r-- 1 root root 0 4月  13 10:00 coredump_filter</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 cpuset</span></span>
<span class="line"><span>lrwxrwxrwx 1 root root 0 4月  13 10:00 cwd -&gt; /usr/local/services/monitor_agent/bin</span></span>
<span class="line"><span>-r-------- 1 root root 0 4月  13 10:00 environ</span></span>
<span class="line"><span>lrwxrwxrwx 1 root root 0 4月  13 10:00 exe -&gt; /usr/local/services/monitor_agent/bin/monitor_agent</span></span>
<span class="line"><span>dr-x------ 2 root root 0 4月  13 10:00 fd</span></span>
<span class="line"><span>dr-x------ 2 root root 0 4月  13 10:00 fdinfo</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 hostinfo</span></span>
<span class="line"><span>-r-------- 1 root root 0 4月  13 10:00 io</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 latency</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 limits</span></span>
<span class="line"><span>-rw-r--r-- 1 root root 0 4月  13 10:00 loginuid</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 maps</span></span>
<span class="line"><span>-rw------- 1 root root 0 4月  13 10:00 mem</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 mountinfo</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 mounts</span></span>
<span class="line"><span>-r-------- 1 root root 0 4月  13 10:00 mountstats</span></span>
<span class="line"><span>dr-xr-xr-x 7 root root 0 4月  13 10:00 net</span></span>
<span class="line"><span>dr-x--x--x 2 root root 0 4月  13 10:00 ns</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 numa_maps</span></span>
<span class="line"><span>-rw-r--r-- 1 root root 0 4月  13 10:00 oom_adj</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 oom_score</span></span>
<span class="line"><span>-rw-r--r-- 1 root root 0 4月  13 10:00 oom_score_adj</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 pagemap</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 personality</span></span>
<span class="line"><span>lrwxrwxrwx 1 root root 0 4月  13 10:00 root -&gt; /</span></span>
<span class="line"><span>-rw-r--r-- 1 root root 0 4月  13 10:00 sched</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 sessionid</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 smaps</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 stack</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 stat</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 statm</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 status</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 syscall</span></span>
<span class="line"><span>dr-xr-xr-x 3 root root 0 4月  13 10:00 task</span></span>
<span class="line"><span>-r--r--r-- 1 root root 0 4月  13 10:00 wchan</span></span>
<span class="line"><span>root@9-134-239-95:1327# cat environ </span></span>
<span class="line"><span>LANG=CPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/binNOTIFY_SOCKET=/run/systemd/notifySSH_USE_STRONG_RNG=0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而文件 envrion 存的是这个进程的环境变量。这个文件是只读的。</p><h4 id="_1-环境变量表" tabindex="-1"><a class="header-anchor" href="#_1-环境变量表"><span>1. 环境变量表</span></a></h4><p>环境变量表是一个字符指针数组，其中每个指针包含一个以null结束的C字符串的地址。全局变量 environ 则包含来该指针数组的地址：<code>extern char** environ;</code> 按照惯例，环境变量是由 <code>name=value</code> 这样的字符串组成，大多数预定义名完全由大写字母组成，但这只是一个惯例。我们可以查看这个 environ 全局变量。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">extern</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> environ;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">environ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">environ </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        environ</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-操作环境变量" tabindex="-1"><a class="header-anchor" href="#_2-操作环境变量"><span>2. 操作环境变量</span></a></h4><p>linux 提供了一些操作环境变量的环境</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>char* getenv(char* name);</span></span>
<span class="line"><span>int putenv(char* str);</span></span>
<span class="line"><span>int setenv(const char* name, const char* value, int rewrite);</span></span>
<span class="line"><span>int unsetenv(const char* name);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尤其需要主要的是，**如果我们希望改变或者增加新的环境变量，我们能影响到的知识当前进程及其后生成和调用的任何子进程的环境变量，但不能影响父进程的环境变量，这通常是一个shell进程。**解释下，当我们在终端 export 了一个环境变量，对于已经运行了的进程是没有任何影响的，而会影响到将要在这个终端下启动运行的进程。另，环境变量一般存在于进程栈空间，但是如果有新增也有可能存在于进程的堆空间中。</p><p>一个进程修改自身环境变量的例子：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;stdlib.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">extern</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> environ;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> env1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> environ;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">env1) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">env1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        env1</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> newEnv </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;ENV_TEST=env_test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> putenv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(newEnv)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;new env&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> env2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> environ;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">env2) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">            std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">env2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            env2</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;putenv failed&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14)]))}const d=i(e,[["render",t],["__file","1.进程和环境变量.html.vue"]]),k=JSON.parse('{"path":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/1.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.html","title":"1.进程和环境变量","lang":"zh-CN","frontmatter":{"title":"1.进程和环境变量","date":"2021-04-17T17:11:41.000Z","tags":["环境变量"],"description":"环境变量 我们首先捋一下一个进程的启动步骤，拿 C 语言来举个例子吧，当内核执行 C 程序时，在调用 main 函数前先调用一个特殊的启动例程。可执行程序文件将此启动例程指定为程序的起始地址---这是由链接编辑器设置的，而链接编辑器则由C编译器调用。启动例程丛内核取得命令行参数和环境变量值，然后为按上述方式调用main函数做好安排。 一个进程的环境变量...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/1.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"1.进程和环境变量"}],["meta",{"property":"og:description","content":"环境变量 我们首先捋一下一个进程的启动步骤，拿 C 语言来举个例子吧，当内核执行 C 程序时，在调用 main 函数前先调用一个特殊的启动例程。可执行程序文件将此启动例程指定为程序的起始地址---这是由链接编辑器设置的，而链接编辑器则由C编译器调用。启动例程丛内核取得命令行参数和环境变量值，然后为按上述方式调用main函数做好安排。 一个进程的环境变量..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"环境变量"}],["meta",{"property":"article:published_time","content":"2021-04-17T17:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.进程和环境变量\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-04-17T17:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"环境变量","slug":"环境变量","link":"#环境变量","children":[]}],"git":{},"readingTime":{"minutes":4.41,"words":1324},"filePathRelative":"操作系统/系统编程/1.进程和环境变量.md","localizedDate":"2021年4月18日","excerpt":"<h2>环境变量</h2>\\n<p>我们首先捋一下一个进程的启动步骤，拿 C 语言来举个例子吧，当内核执行 C 程序时，在调用 main 函数前先调用一个特殊的启动例程。可执行程序文件将此启动例程指定为程序的起始地址---这是由链接编辑器设置的，而链接编辑器则由C编译器调用。启动例程丛内核取得命令行参数和环境变量值，然后为按上述方式调用main函数做好安排。</p>\\n<p>一个进程的环境变量是在调用main函数之前，由启动例程帮这个进程设置好的。准确点说，一个进程的环境变量是继承其父进程的。在linux 下，进程的环境变量可根据 <code>cat /proc/1/envrion</code> 查看。而用户启动的进程一般继承自终端shell，而终端shell的环境变量又可以被设置，常用的命令 export 也是如此，会写入当前终端shell对应的进程的环境变量的文件中。而一个进程的信息如下：</p>","autoDesc":true}');export{d as comp,k as data};
