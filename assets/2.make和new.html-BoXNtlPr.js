import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as n,o as t}from"./app-D1zlwylF.js";const c={};function r(d,e){return t(),o("div",null,e[0]||(e[0]=[n('<h2 id="make-和-new" tabindex="-1"><a class="header-anchor" href="#make-和-new"><span>make 和 new</span></a></h2><p>make 的作用是初始化内置的数据结构，也就是切片、哈希表和 channel</p><p>new 的作用是根据传入的类型分配一块内存空间，并返回指向这块内存空间的指针</p><h3 id="一、make" tabindex="-1"><a class="header-anchor" href="#一、make"><span>一、make</span></a></h3><p>在编译期间的类型检查阶段，Go 语言会将代表 <code>make</code> 关键字的 <code>OMAKE</code> 节点根据参数类型的不同转换成了 <code>OMAKESLICE</code>、<code>OMAKEMAP</code> 和 <code>OMAKECHAN</code> 三种不同类型的节点，这些节点会调用不同的运行时函数来初始化相应的数据结构。</p><h3 id="二、new" tabindex="-1"><a class="header-anchor" href="#二、new"><span>二、new</span></a></h3><p>编译器会在中间代码生成阶段通过以下两个关键字处理 new 关键字</p><ol><li><code>cmd/compile/internal/gc.callnew</code> 会将关键字转换成 <code>ONEWOBJ</code> 类型的节点<a href="https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-make-and-new/#fn:2" target="_blank" rel="noopener noreferrer">2</a>；</li><li><code>cmd/compile/internal/gc.state.expr</code> 会根据申请空间的大小分两种情况处理： <ol><li>如果申请的空间为 0，就会返回一个表示空指针的 <code>zerobase</code> 变量；</li><li>在遇到其他情况时会将关键字转换成 <a href="https://draveness.me/golang/tree/runtime.newobject" target="_blank" rel="noopener noreferrer"><code>runtime.newobject</code></a> 函数</li></ol></li></ol><p>无论是直接使用 <code>new</code>，还是使用 <code>var</code> 初始化变量，它们在编译器看来都是 <code>ONEW</code> 和 <code>ODCL</code> 节点。如果变量会逃逸到堆上，这些节点在这一阶段都会被 <code>cmd/compile/internal/gc.walkstmt</code>转换成通过 <code>runtime.newobject</code> 函数并在堆上申请内存。</p><p>不过这也不是绝对的，如果通过 <code>var</code> 或者 <code>new</code> 创建的变量不需要在当前作用域外生存，例如不用作为返回值返回给调用方，那么就不需要初始化在堆上。</p>',10)]))}const i=a(c,[["render",r],["__file","2.make和new.html.vue"]]),p=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/2.make%E5%92%8Cnew.html","title":"2.make和new的对比","lang":"zh-CN","frontmatter":{"title":"2.make和new的对比","date":"2023-01-19T11:11:41.000Z","tags":["go"],"description":"make 和 new make 的作用是初始化内置的数据结构，也就是切片、哈希表和 channel new 的作用是根据传入的类型分配一块内存空间，并返回指向这块内存空间的指针 一、make 在编译期间的类型检查阶段，Go 语言会将代表 make 关键字的 OMAKE 节点根据参数类型的不同转换成了 OMAKESLICE、OMAKEMAP 和 OMAK...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/2.make%E5%92%8Cnew.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"2.make和new的对比"}],["meta",{"property":"og:description","content":"make 和 new make 的作用是初始化内置的数据结构，也就是切片、哈希表和 channel new 的作用是根据传入的类型分配一块内存空间，并返回指向这块内存空间的指针 一、make 在编译期间的类型检查阶段，Go 语言会将代表 make 关键字的 OMAKE 节点根据参数类型的不同转换成了 OMAKESLICE、OMAKEMAP 和 OMAK..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2.make和new的对比\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"make 和 new","slug":"make-和-new","link":"#make-和-new","children":[{"level":3,"title":"一、make","slug":"一、make","link":"#一、make","children":[]},{"level":3,"title":"二、new","slug":"二、new","link":"#二、new","children":[]}]}],"git":{},"readingTime":{"minutes":1.38,"words":414},"filePathRelative":"编程语言/go语言/基础语法/2.make和new.md","localizedDate":"2023年1月19日","excerpt":"<h2>make 和 new</h2>\\n<p>make 的作用是初始化内置的数据结构，也就是切片、哈希表和 channel</p>\\n<p>new 的作用是根据传入的类型分配一块内存空间，并返回指向这块内存空间的指针</p>\\n<h3>一、make</h3>\\n<p>在编译期间的类型检查阶段，Go 语言会将代表 <code>make</code> 关键字的 <code>OMAKE</code> 节点根据参数类型的不同转换成了 <code>OMAKESLICE</code>、<code>OMAKEMAP</code> 和 <code>OMAKECHAN</code> 三种不同类型的节点，这些节点会调用不同的运行时函数来初始化相应的数据结构。</p>","autoDesc":true}');export{i as comp,p as data};
