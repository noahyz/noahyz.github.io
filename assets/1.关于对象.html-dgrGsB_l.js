import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as e,o as n}from"./app-D1zlwylF.js";const l="/assets/c__%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-CI1AnzyU.png",t={};function r(p,i){return n(),s("div",null,i[0]||(i[0]=[e(`<h2 id="关于对象" tabindex="-1"><a class="header-anchor" href="#关于对象"><span>关于对象</span></a></h2><p>C++ 在布局以及存取时间上主要的额外负担是有 virtual 引起的。包括：</p><ul><li>virtual function 机制，用以支持一个有效率的“执行期绑定”</li><li>virtual base class 机制，用以实现“多次出现在继承体系中的 base class，有一个单一而被共享的实例”</li></ul><p>C++ 的对象模型，我们主要讨论如下成员：</p><ul><li>数据成员：静态数据成员、非静态数据成员</li><li>成员函数：静态成员函数、非静态成员函数、虚函数</li></ul><h4 id="c-对象模型" tabindex="-1"><a class="header-anchor" href="#c-对象模型"><span>c++对象模型</span></a></h4><ul><li>非静态数据成员被配置于每一个类对象中</li><li>静态数据成员放置在类对象之外</li><li>静态成员函数、非静态成员函数被放置在类对象之外</li><li>虚函数有如下实现： <ul><li>一个类有一个或多个指向虚函数的指针，放在虚表中（virtual table），也称为 vtbl</li><li>一个类对象中会有一个指向虚表的指针（vptr）。虚表指针的设置由类的构造函数、析构函数、拷贝函数自动完成</li><li>一个类所关联的 <code>type_info</code> 对象（用来支持 runtime type identrification，RTTI，运行时类型识别）通常在虚表的第一个位置</li></ul></li></ul><p>如下例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>class Point {</span></span>
<span class="line"><span>public:</span></span>
<span class="line"><span>		Point(float val);</span></span>
<span class="line"><span>		virtual ~Point();</span></span>
<span class="line"><span>		</span></span>
<span class="line"><span>		float x() const;</span></span>
<span class="line"><span>		static int PointCount();</span></span>
<span class="line"><span>protected:</span></span>
<span class="line"><span>		virtual ostream&amp; print(ostream&amp; os) const;</span></span>
<span class="line"><span>		</span></span>
<span class="line"><span>		float x_;</span></span>
<span class="line"><span>		static int point_count_;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所对应的对象模型如下：</p><img src="`+l+'" alt="s" style="zoom:30%;"><h4 id="c-以下列方法支持多态" tabindex="-1"><a class="header-anchor" href="#c-以下列方法支持多态"><span>C++ 以下列方法支持多态：</span></a></h4><ul><li><p>通过一组隐式的转化操作。例如把一个 derived class 指针转化为一个指向其 public base type 的指针：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>shape* ps = new circle();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>通过 virtual function 机制：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ps-&gt;rotate();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>通过 dynamic_case 和 typeid 运算符：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>if (circle* pc = dynamic_case&lt;circle*&gt;(ps)) ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h4 id="类对象的内存占用" tabindex="-1"><a class="header-anchor" href="#类对象的内存占用"><span>类对象的内存占用</span></a></h4><ul><li>非静态数据成员的总和大小</li><li>任何由于对齐的需求而填补上去的空间（可能存在于成员之间，也可能存在于集合体边界）</li><li>为了支持 virtual 而由内部产生的任何额外占用</li></ul><p>一个指针或者引用之所以可以支持多态，是因为他们并不引发内存中任何“与类型有关的内存委托操作”；受到改变的只有他们所指向的内存的“大小和内容解释方式”而已。</p><p>当一个基类对象被直接初始化为（或是被指定为）一个子类对象时，子类对象就会被切割以塞入较小的基类类型内存中。因此也不会产生多态。</p>',17)]))}const o=a(t,[["render",r],["__file","1.关于对象.html.vue"]]),h=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/1.%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1.html","title":"1.关于对象","lang":"zh-CN","frontmatter":{"title":"1.关于对象","description":"关于对象 C++ 在布局以及存取时间上主要的额外负担是有 virtual 引起的。包括： virtual function 机制，用以支持一个有效率的“执行期绑定” virtual base class 机制，用以实现“多次出现在继承体系中的 base class，有一个单一而被共享的实例” C++ 的对象模型，我们主要讨论如下成员： 数据成员：静态数...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/1.%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"1.关于对象"}],["meta",{"property":"og:description","content":"关于对象 C++ 在布局以及存取时间上主要的额外负担是有 virtual 引起的。包括： virtual function 机制，用以支持一个有效率的“执行期绑定” virtual base class 机制，用以实现“多次出现在继承体系中的 base class，有一个单一而被共享的实例” C++ 的对象模型，我们主要讨论如下成员： 数据成员：静态数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.关于对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"关于对象","slug":"关于对象","link":"#关于对象","children":[]}],"git":{},"readingTime":{"minutes":2.15,"words":645},"filePathRelative":"编程语言/c++语言/对象模型/1.关于对象.md","excerpt":"<h2>关于对象</h2>\\n<p>C++ 在布局以及存取时间上主要的额外负担是有 virtual 引起的。包括：</p>\\n<ul>\\n<li>virtual function 机制，用以支持一个有效率的“执行期绑定”</li>\\n<li>virtual base class 机制，用以实现“多次出现在继承体系中的 base class，有一个单一而被共享的实例”</li>\\n</ul>\\n<p>C++ 的对象模型，我们主要讨论如下成员：</p>\\n<ul>\\n<li>数据成员：静态数据成员、非静态数据成员</li>\\n<li>成员函数：静态成员函数、非静态成员函数、虚函数</li>\\n</ul>\\n<h4>c++对象模型</h4>","autoDesc":true}');export{o as comp,h as data};
