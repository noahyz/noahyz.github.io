import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as n,o as a}from"./app-D1zlwylF.js";const i={};function r(l,e){return a(),o("div",null,e[0]||(e[0]=[n('<p>原子性：所有的操作要么都执行，要么都不执行。程序员可以安全的将一系列相关的、不可分隔的操作组合成一个整体，实现许多业务需求。</p><p>“原子提交” 是为了保证分布式事务的原子性的。</p><h3 id="一、难点" tabindex="-1"><a class="header-anchor" href="#一、难点"><span>一、难点</span></a></h3><p>原子性涉及了硬件和软件，两者都可能出现意外故障。</p><p>常见的机械磁盘一般可以保证 512 字节的原子写，也就是说，即使遭遇突然断电等意外情况，一般的机械磁盘也可以保证当前 512 字节的成功写入。如果写入的数据大于 512 字节，则原子写得不到保障。</p><h3 id="二、方法" tabindex="-1"><a class="header-anchor" href="#二、方法"><span>二、方法</span></a></h3><p>常见的方法是使用 日志 或 WAL 这类技术。即先将操作的元数据写入一个单独的日志文件，同时还有表示操作是否完成的标记。如果系统在写入过程中发生故障，那么基于这些数据，系统恢复后依然能够识别出哪些操作在故障发生前已完成，然后通过撤销所有的操作来回滚事务；或者通过完成剩余未执行的操作来继续提交事务。</p><p>但是在分布式系统中，原子性问题更加复杂，因为节点分布在不可靠的网络中。我们需要确保一个操作在多个节点上的原子性，也就是说，操作要么在所有节点上都生效，要么不在任何一个节点上生效，每个节点提交或中止事务的操作需要保持一致。</p><h3 id="三、原子提交协议" tabindex="-1"><a class="header-anchor" href="#三、原子提交协议"><span>三、原子提交协议</span></a></h3><p>分布式事务的原子性通过原子提交协议（<code>Atomic Commit Protocol</code>，ACP）来实现。原子提交协议必须满足三个特性：</p><ul><li>协定性（<code>Agreement</code>）：所有进程都决议出同一个值，相当于所有进程要么一起提交事务，要么一起终止事务，不存在两个进程一个提交事务，一个终止事务的情况</li><li>有效性（<code>Validity</code>）：如果所有进程都决定提交事务并且没有任何故障发生，那么最终整个系统将提交事务。只要有一个进程决定中止事务，系统最终将中止事务。</li><li>终止性（<code>Termination</code>）：又分为弱终止条件和强终止条件。 <ul><li>弱终止条件（<code>Weak Termination Condition</code>）：如果没有任何故障发生，那么所有进程最终都会做出决议（提交或终止事务）</li><li>强终止条件（<code>Strong Termination Condition</code>）：也称为非阻塞条件（<code>Non-Blocking Condition</code>），是指没有发生故障的进程最终会做出决议</li></ul></li></ul>',11)]))}const d=t(i,[["render",r],["__file","2.原子性保证-原子提交.html.vue"]]),h=JSON.parse('{"path":"/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/2.%E5%8E%9F%E5%AD%90%E6%80%A7%E4%BF%9D%E8%AF%81-%E5%8E%9F%E5%AD%90%E6%8F%90%E4%BA%A4.html","title":"2.原子性保证-原子提交","lang":"zh-CN","frontmatter":{"title":"2.原子性保证-原子提交","description":"原子性：所有的操作要么都执行，要么都不执行。程序员可以安全的将一系列相关的、不可分隔的操作组合成一个整体，实现许多业务需求。 “原子提交” 是为了保证分布式事务的原子性的。 一、难点 原子性涉及了硬件和软件，两者都可能出现意外故障。 常见的机械磁盘一般可以保证 512 字节的原子写，也就是说，即使遭遇突然断电等意外情况，一般的机械磁盘也可以保证当前 5...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/2.%E5%8E%9F%E5%AD%90%E6%80%A7%E4%BF%9D%E8%AF%81-%E5%8E%9F%E5%AD%90%E6%8F%90%E4%BA%A4.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"2.原子性保证-原子提交"}],["meta",{"property":"og:description","content":"原子性：所有的操作要么都执行，要么都不执行。程序员可以安全的将一系列相关的、不可分隔的操作组合成一个整体，实现许多业务需求。 “原子提交” 是为了保证分布式事务的原子性的。 一、难点 原子性涉及了硬件和软件，两者都可能出现意外故障。 常见的机械磁盘一般可以保证 512 字节的原子写，也就是说，即使遭遇突然断电等意外情况，一般的机械磁盘也可以保证当前 5..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2.原子性保证-原子提交\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"一、难点","slug":"一、难点","link":"#一、难点","children":[]},{"level":3,"title":"二、方法","slug":"二、方法","link":"#二、方法","children":[]},{"level":3,"title":"三、原子提交协议","slug":"三、原子提交协议","link":"#三、原子提交协议","children":[]}],"git":{},"readingTime":{"minutes":2.31,"words":693},"filePathRelative":"分布式/分布式事务/2.原子性保证-原子提交.md","excerpt":"<p>原子性：所有的操作要么都执行，要么都不执行。程序员可以安全的将一系列相关的、不可分隔的操作组合成一个整体，实现许多业务需求。</p>\\n<p>“原子提交” 是为了保证分布式事务的原子性的。</p>\\n<h3>一、难点</h3>\\n<p>原子性涉及了硬件和软件，两者都可能出现意外故障。</p>\\n<p>常见的机械磁盘一般可以保证 512 字节的原子写，也就是说，即使遭遇突然断电等意外情况，一般的机械磁盘也可以保证当前 512 字节的成功写入。如果写入的数据大于 512 字节，则原子写得不到保障。</p>\\n<h3>二、方法</h3>\\n<p>常见的方法是使用 日志 或 WAL 这类技术。即先将操作的元数据写入一个单独的日志文件，同时还有表示操作是否完成的标记。如果系统在写入过程中发生故障，那么基于这些数据，系统恢复后依然能够识别出哪些操作在故障发生前已完成，然后通过撤销所有的操作来回滚事务；或者通过完成剩余未执行的操作来继续提交事务。</p>","autoDesc":true}');export{d as comp,h as data};
