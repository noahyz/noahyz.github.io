import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as a}from"./app-D1zlwylF.js";const l={};function t(r,s){return a(),e("div",null,s[0]||(s[0]=[n(`<h2 id="stress-压力测试工具" tabindex="-1"><a class="header-anchor" href="#stress-压力测试工具"><span>stress 压力测试工具</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[root@localhost </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]# stress </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">stress&#39; imposes certain types of compute stress on your system</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Usage: stress [OPTION [ARG]] ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> -?, --help         show this help statement</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">     --version      show version statement</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> -v, --verbose      be verbose</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> -q, --quiet        be quiet</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> -n, --dry-run      show what would have been done</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> -t, --timeout N    timeout after N seconds</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">     --backoff N    wait factor of N microseconds before work starts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> -c, --cpu N        spawn N workers spinning on sqrt()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> -i, --io N         spawn N workers spinning on sync()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> -m, --vm N         spawn N workers spinning on malloc()/free()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">     --vm-bytes B   malloc B bytes per vm worker (default is 256MB)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">     --vm-stride B  touch a byte every B bytes (default is 4096)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">     --vm-hang N    sleep N secs before free (default none, 0 is inf)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">     --vm-keep      redirty memory instead of freeing and reallocating</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> -d, --hdd N        spawn N workers spinning on write()/unlink()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">     --hdd-bytes B  write B bytes per hdd worker (default is 1GB)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Example: stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 10s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Note: Numbers may be suffixed with s,m,h,d,y (time) or B,K,M,G (size).</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>-t, --timeout N 指定运行N秒后结束 <ul><li>--backoff N 等待N微妙后开始运行</li></ul></li><li>-c, --cpu N 产生 N 个进程都反复计算随机数的平方根</li><li>-i, --io N 产生 N 个进程，每个进程反复调用 sync(),sync() 用于将内存上的内容写到硬盘上</li><li>-m, --vm N 产生 N 个进程，每个进程不断调用内存分配 malloc 和 内存释放 free 函数 <ul><li>--vm-bytes B 指定每次 malloc 内存字节数(默认为 256M)</li><li>--vm-hang N 指定 free 之前等待 N 秒</li></ul></li><li>-d, --hdd N 产生 N 个执行 write/unlink 的进程 <ul><li>-hdd-bytes B 指定每次写的字节数(默认为1G)</li></ul></li></ul>`,3)]))}const h=i(l,[["render",t],["__file","4.stress压力测试工具.html.vue"]]),c=JSON.parse('{"path":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/4.stress%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7.html","title":"4.stress压力测试工具","lang":"zh-CN","frontmatter":{"title":"4.stress压力测试工具","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"stress 压力测试工具 -t, --timeout N 指定运行N秒后结束 --backoff N 等待N微妙后开始运行 -c, --cpu N 产生 N 个进程都反复计算随机数的平方根 -i, --io N 产生 N 个进程，每个进程反复调用 sync(),sync() 用于将内存上的内容写到硬盘上 -m, --vm N 产生 N 个进程，每个进...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU%E7%AE%A1%E7%90%86/%E5%B7%A5%E5%85%B7%E8%BF%90%E7%BB%B4/4.stress%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"4.stress压力测试工具"}],["meta",{"property":"og:description","content":"stress 压力测试工具 -t, --timeout N 指定运行N秒后结束 --backoff N 等待N微妙后开始运行 -c, --cpu N 产生 N 个进程都反复计算随机数的平方根 -i, --io N 产生 N 个进程，每个进程反复调用 sync(),sync() 用于将内存上的内容写到硬盘上 -m, --vm N 产生 N 个进程，每个进..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.stress压力测试工具\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"stress 压力测试工具","slug":"stress-压力测试工具","link":"#stress-压力测试工具","children":[]}],"git":{},"readingTime":{"minutes":1.26,"words":379},"filePathRelative":"操作系统/CPU管理/工具运维/4.stress压力测试工具.md","localizedDate":"2023年1月19日","excerpt":"<h2>stress 压力测试工具</h2>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">[root@localhost </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#ABB2BF\\">~</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">]# stress </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">`</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">stress\' imposes certain types of compute stress on your system</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">Usage: stress [OPTION [ARG]] ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> -?, --help         show this help statement</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">     --version      show version statement</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> -v, --verbose      be verbose</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> -q, --quiet        be quiet</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> -n, --dry-run      show what would have been done</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> -t, --timeout N    timeout after N seconds</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">     --backoff N    wait factor of N microseconds before work starts</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> -c, --cpu N        spawn N workers spinning on sqrt()</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> -i, --io N         spawn N workers spinning on sync()</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> -m, --vm N         spawn N workers spinning on malloc()/free()</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">     --vm-bytes B   malloc B bytes per vm worker (default is 256MB)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">     --vm-stride B  touch a byte every B bytes (default is 4096)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">     --vm-hang N    sleep N secs before free (default none, 0 is inf)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">     --vm-keep      redirty memory instead of freeing and reallocating</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> -d, --hdd N        spawn N workers spinning on write()/unlink()</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">     --hdd-bytes B  write B bytes per hdd worker (default is 1GB)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">Example: stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 10s</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">Note: Numbers may be suffixed with s,m,h,d,y (time) or B,K,M,G (size).</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{h as comp,c as data};
