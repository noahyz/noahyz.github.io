import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as n}from"./app-D1zlwylF.js";const t={};function s(r,l){return n(),e("div",null,l[0]||(l[0]=[a(`<h3 id="gdb调试工具" tabindex="-1"><a class="header-anchor" href="#gdb调试工具"><span>gdb调试工具</span></a></h3><p>在对C/C++ 程序的调试，需要在编译前加上 -g 选项</p><ul><li>调试core 文件：gdb program core.11127 ：调试 core 文件，program 就是执行文件</li><li>调试服务程序：gdb program PID。如果程序是一个服务程序，那么可以指定这个服务程序运行时的进程ID。gdb会自动attach 上去，并调试他，program 应该在 PATH 环境变量中搜索得到</li></ul><h2 id="_1-gdb交互命令" tabindex="-1"><a class="header-anchor" href="#_1-gdb交互命令"><span>1. gdb交互命令</span></a></h2><p>启动gdb后，进入到交互模式，通过以下命令完成对程序的调试；注意高频使用的命令一般都会有缩写，熟练使用这些缩写命令能提高调试的效率；</p><h3 id="运行" tabindex="-1"><a class="header-anchor" href="#运行"><span>运行</span></a></h3><ul><li>run：简记为 r ，其作用是运行程序，当遇到断点后，程序会在断点处停止运行，等待用户输入下一步的命令。</li><li>continue （简写c ）：继续执行，到下一个断点处（或运行结束）</li><li>next：（简写 n），单步跟踪程序，当遇到函数调用时，也不进入此函数体；此命令同 step 的主要区别是，step 遇到用户自定义的函数，将步进到函数中去运行，而 next 则直接调用函数，不会进入到函数体内。</li><li>step （简写s）：单步调试如果有函数调用，则进入函数；与命令n不同，n是不进入调用的函数的</li><li>until：当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体。</li><li>until+行号： 运行至某行，不仅仅用来跳出循环</li><li>finish： 运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息。</li><li>call 函数(参数)：调用程序中可见的函数，并传递“参数”，如：call gdb_test(55)</li><li>quit：简记为 q ，退出gdb</li></ul><h3 id="设置断点" tabindex="-1"><a class="header-anchor" href="#设置断点"><span>设置断点</span></a></h3><ul><li>（可以带上代码路径和代码名称： b OAGUPDATE.cpp:578）<br> **break n （简写b n）:在第n行处设置断点 **</li><li>b fn1 if a＞b：条件断点设置</li><li>break func（break缩写为b）：在函数func()的入口处设置断点，如：break cb_button</li><li>delete 断点号n：删除第n个断点</li><li>disable 断点号n：暂停第n个断点</li><li>enable 断点号n：开启第n个断点</li><li>clear 行号n：清除第n行的断点</li><li>info b （info breakpoints） ：显示当前程序的断点设置情况</li><li>delete breakpoints：清除所有断点：</li></ul><h3 id="查看源代码" tabindex="-1"><a class="header-anchor" href="#查看源代码"><span>查看源代码</span></a></h3><ul><li>list ：简记为 l ，其作用就是列出程序的源代码，默认每次显示10行。</li><li>list 行号：将显示当前文件以“行号”为中心的前后10行代码，如：list 12</li><li>list 函数名：将显示“函数名”所在函数的源代码，如：list main</li><li>list ：不带参数，将接着上一次 list 命令的，输出下边的内容。</li></ul><h3 id="打印表达式" tabindex="-1"><a class="header-anchor" href="#打印表达式"><span>打印表达式</span></a></h3><ul><li>print 表达式：简记为 p ，其中“表达式”可以是任何当前正在被测试程序的有效表达式，比如当前正在调试C语言的程序，那么“表达式”可以是任何C语言的有效表达式，包括数字，变量甚至是函数调用。</li><li>print a：将显示整数 a 的值</li><li>print ++a：将把 a 中的值加1,并显示出来</li><li>print name：将显示字符串 name 的值</li><li>print gdb_test(22)：将以整数22作为参数调用 gdb_test() 函数</li><li>print gdb_test(a)：将以变量 a 作为参数调用 gdb_test() 函数</li><li>display 表达式：在单步运行时将非常有用，使用display命令设置一个表达式后，它将在每次单步进行指令后，紧接着输出被设置的表达式及值。如： display a</li><li>watch 表达式：设置一个监视点，一旦被监视的“表达式”的值改变，gdb将强行终止正在被调试的程序。如： watch a</li><li>whatis ：查询变量或函数</li><li>info function： 查询函数</li><li>扩展info locals： 显示当前堆栈页的所有变量</li></ul><h3 id="查询运行信息" tabindex="-1"><a class="header-anchor" href="#查询运行信息"><span>查询运行信息</span></a></h3><ul><li>where/bt ：当前运行的堆栈列表；</li><li>bt backtrace 显示当前调用堆栈</li><li>up/down 改变堆栈显示的深度</li><li>set args 参数:指定运行时的参数</li><li>show args：查看设置好的参数</li><li>info program： 来查看程序的是否在运行，进程号，被暂停的原因。</li></ul><h3 id="分割窗口" tabindex="-1"><a class="header-anchor" href="#分割窗口"><span>分割窗口</span></a></h3><ul><li>layout：用于分割窗口，可以一边查看代码，一边测试：</li><li>layout src：显示源代码窗口</li><li>layout asm：显示反汇编窗口</li><li>layout regs：显示源代码/反汇编和CPU寄存器窗口</li><li>layout split：显示源代码和反汇编窗口</li><li>Ctrl + L：刷新窗口</li></ul><p>注释：交互模式下直接回车的作用是重复上一指令，对于单步调试非常方便。</p><h3 id="带有命令行参数的调试" tabindex="-1"><a class="header-anchor" href="#带有命令行参数的调试"><span>带有命令行参数的调试</span></a></h3><ul><li>run 命令行参数  # 如果直接运行程序</li><li>set args 命令行参数   # 后面在继续进行调试 <ul><li>show args 显示命令行参数</li></ul></li></ul><h4 id="ld-preload-的调试" tabindex="-1"><a class="header-anchor" href="#ld-preload-的调试"><span>LD_PRELOAD 的调试</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>gdb program_name</span></span>
<span class="line"><span>(gdb): set environment LD_PRELOAD ./your_so.so</span></span>
<span class="line"><span>(gdb): set args -c dag/test_resmon.dag</span></span>
<span class="line"><span>(gdb): show args</span></span>
<span class="line"><span>(gdb): run</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-参数说明" tabindex="-1"><a class="header-anchor" href="#_2-参数说明"><span>2. 参数说明</span></a></h3><p>如果想要调试一个正在运行的进程的话，可以在启动的时候指定一个进程 ID 作为第二个参数：<code> gdb program 1234</code>。此命令会将进程 1234 绑定到 GDB（除非有一个名称为 1234 的文件，此时会优先将 1234 作为一个 core 文件来看待）</p><ul><li>--quiet, -q, --silent ：禁止 gdb 打印一些前置消息，例如 gdb 版本号之类的。</li><li>--pid=PID：attach to running process PID</li><li>--batch: 在运行操作后结束进程</li><li>--readnever: Do not read symbol files</li><li>--nx: Do not read any .gdbinit files in any directory。不执行任何初始化文件中的命令。</li></ul><h3 id="更强大的工具" tabindex="-1"><a class="header-anchor" href="#更强大的工具"><span>更强大的工具</span></a></h3><h3 id="cgdb" tabindex="-1"><a class="header-anchor" href="#cgdb"><span>cgdb</span></a></h3><p>cgdb可以看作gdb的界面增强版,用来替代gdb的 gdb -tui。cgdb主要功能是在调试时进行代码的同步显示，这无疑增加了调试的方便性，提高了调试效率。界面类似vi，符合unix/linux下开发人员习惯;如果熟悉gdb和vi，几乎可以立即使用cgdb。</p><h3 id="调试coredump文件" tabindex="-1"><a class="header-anchor" href="#调试coredump文件"><span>调试coredump文件</span></a></h3><ol><li>启动 gdb，同时指定程序与core文件</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>1. gdb EXEFILE COREFILE</span></span>
<span class="line"><span>2. gdb -c | --core COREFILE EXEFILE</span></span>
<span class="line"><span>3. gdb COREFILE 然后 file EXEFILE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>在进入gdb之后，查找段错误位置，使用 where 或者 bt</li></ol>`,32)]))}const o=i(t,[["render",s],["__file","2.gdb调试工具.html.vue"]]),p=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/2.gdb%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7.html","title":"2.gdb调试工具","lang":"zh-CN","frontmatter":{"title":"2.gdb调试工具","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"gdb调试工具 在对C/C++ 程序的调试，需要在编译前加上 -g 选项 调试core 文件：gdb program core.11127 ：调试 core 文件，program 就是执行文件 调试服务程序：gdb program PID。如果程序是一个服务程序，那么可以指定这个服务程序运行时的进程ID。gdb会自动attach 上去，并调试他，pro...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/2.gdb%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"2.gdb调试工具"}],["meta",{"property":"og:description","content":"gdb调试工具 在对C/C++ 程序的调试，需要在编译前加上 -g 选项 调试core 文件：gdb program core.11127 ：调试 core 文件，program 就是执行文件 调试服务程序：gdb program PID。如果程序是一个服务程序，那么可以指定这个服务程序运行时的进程ID。gdb会自动attach 上去，并调试他，pro..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2.gdb调试工具\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"gdb调试工具","slug":"gdb调试工具","link":"#gdb调试工具","children":[]},{"level":2,"title":"1. gdb交互命令","slug":"_1-gdb交互命令","link":"#_1-gdb交互命令","children":[{"level":3,"title":"运行","slug":"运行","link":"#运行","children":[]},{"level":3,"title":"设置断点","slug":"设置断点","link":"#设置断点","children":[]},{"level":3,"title":"查看源代码","slug":"查看源代码","link":"#查看源代码","children":[]},{"level":3,"title":"打印表达式","slug":"打印表达式","link":"#打印表达式","children":[]},{"level":3,"title":"查询运行信息","slug":"查询运行信息","link":"#查询运行信息","children":[]},{"level":3,"title":"分割窗口","slug":"分割窗口","link":"#分割窗口","children":[]},{"level":3,"title":"带有命令行参数的调试","slug":"带有命令行参数的调试","link":"#带有命令行参数的调试","children":[]},{"level":3,"title":"2. 参数说明","slug":"_2-参数说明","link":"#_2-参数说明","children":[]},{"level":3,"title":"更强大的工具","slug":"更强大的工具","link":"#更强大的工具","children":[]},{"level":3,"title":"cgdb","slug":"cgdb","link":"#cgdb","children":[]},{"level":3,"title":"调试coredump文件","slug":"调试coredump文件","link":"#调试coredump文件","children":[]}]}],"git":{},"readingTime":{"minutes":5.27,"words":1581},"filePathRelative":"编程语言/c++语言/编译调试/2.gdb调试工具.md","localizedDate":"2023年1月19日","excerpt":"<h3>gdb调试工具</h3>\\n<p>在对C/C++ 程序的调试，需要在编译前加上 -g 选项</p>\\n<ul>\\n<li>调试core 文件：gdb program core.11127 ：调试 core 文件，program 就是执行文件</li>\\n<li>调试服务程序：gdb program PID。如果程序是一个服务程序，那么可以指定这个服务程序运行时的进程ID。gdb会自动attach 上去，并调试他，program 应该在 PATH 环境变量中搜索得到</li>\\n</ul>\\n<h2>1. gdb交互命令</h2>\\n<p>启动gdb后，进入到交互模式，通过以下命令完成对程序的调试；注意高频使用的命令一般都会有缩写，熟练使用这些缩写命令能提高调试的效率；</p>","autoDesc":true}');export{o as comp,p as data};
