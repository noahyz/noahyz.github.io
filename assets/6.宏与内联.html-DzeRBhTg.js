import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as t,o as n}from"./app-D1zlwylF.js";const a={};function o(r,l){return n(),i("div",null,l[0]||(l[0]=[t('<h2 id="一、宏" tabindex="-1"><a class="header-anchor" href="#一、宏"><span>一、宏</span></a></h2><h3 id="_1-为什么要有宏" tabindex="-1"><a class="header-anchor" href="#_1-为什么要有宏"><span>1. 为什么要有宏</span></a></h3><p>因为函数的调用必须要将程序执行的顺序转移到函数所存放在内存中的某个地址，将函数的程序内容执行完后，再返回到转去执行该函数前的地方。这种转移操作要求在转去执行前要保存现场并记忆执行的地址，转回后要恢复现场，并按原来保存地址继续执行。因此，函数调用要有一定的时间和空间方面的开销，于是将影响其效率。</p><p>而宏只是在预处理的地方把代码展开，不需要额外的空间和时间方面的开销，所以调用一个宏比调用一个函数更有效率</p><h3 id="_2-宏的问题" tabindex="-1"><a class="header-anchor" href="#_2-宏的问题"><span>2. 宏的问题</span></a></h3><p>缺点：</p><ul><li>宏没有类型检测，不安全</li><li>宏是在预处理时进行简单文本替换，并不是简单的参数传递（很难处理一些特定情况。例如：Add(x*x)，传入 (5+5, 10+3) 变成了 <code>5+5*10+3</code>）</li><li>使代码变长，不能进行调试</li></ul><p>优点：</p><ul><li>加快了代码的运行效率</li><li>让代码变得更加的通用</li></ul><h2 id="二、内联" tabindex="-1"><a class="header-anchor" href="#二、内联"><span>二、内联</span></a></h2><ol><li>类中的成员函数是默认的内联函数</li><li>内联函数内不准许有循环语句和开关语句</li><li>内联函数的定义必须出现在第一次调用内联函数之前</li><li>内联仅仅是对编译器的一个请求，而不是一个命令。编译器可以忽略内联请求</li></ol><p>缺点：</p><ol><li>如果使用了太多的内联函数，则最终的二进制文件会变得很大，因为里边包含了很多重复代码。代码变长，占更多内存</li><li>内联函数中增加的变量需要消耗更多的寄存器。在将函数内联后，如果它所需的寄存器数量增加了，则会给寄存器利用增加额外负担。也就是说，内联函数在展开的过程中，它所需要的变量数量也随之增长，这样变量所需的寄存器数量也会增长。因此，在函数内联后，如果变量数量增长很大，则所需要的寄存器开销随之快速增长</li><li>太多的内联函数，也会减少cache的命中率，于是会减少从cache memory取指令到primary memory的速度。</li><li>内联函数可能会增加编译时间，如果内联函数被修改了，则所有调用它的地方都需要重新编译，因为编译器需要重新在这些地方展开新的代码，来反映所做的修改，否则还是会用旧的代码</li></ol><p>优点：</p><ol><li>有类型检测，更加的安全</li><li>内联函数是在编译期展开，而且可以参数传递</li><li>编译器可以检测定义的内联函数是否满足要求，如果不满足就会当作普通函数调用（内联函数不能递归，内联函数不能太大）</li><li>不会产生函数调用开销，节约函数调用时将参数压栈的开销，并且节约函数 return call 的开销</li></ol><p>在如下情况下，编译器可以不执行内联：</p><ol><li>函数包含循环操作. (for, while, do-while)</li><li>函数包含静态变量</li><li>函数是递归的</li><li>函数返回值类型非void, 且返回主体不存在于函数体中</li><li>函数包含switch或goto主体。</li></ol><p>区别：</p><ol><li>内联函数在编译时展开，宏在预编译时展开。</li><li>在编译的时候，内联函数可以直接背镶嵌到目标代码中，而宏只是一个简单的文本替换。</li><li>内联函数可以完成诸如类型检测、语句是否正确等编译功能，宏就不具有这样的功能。</li><li>宏不是函数、inline函数是函数。</li><li>宏在定义时要小心处理宏参数（把参数用括号括起来），否则容易出现二义性。内联函数定义时不会出现二义性。</li></ol><p>inline 内联函数。在函数声明和定义的地方都要加上 inline 关键字，仅仅将 inline 放在函数声明前面不起任何作用。因此建议把 inline 函数放在头文件中直接定义。</p>',20)]))}const h=e(a,[["render",o],["__file","6.宏与内联.html.vue"]]),s=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/6.%E5%AE%8F%E4%B8%8E%E5%86%85%E8%81%94.html","title":"6.宏与内联","lang":"zh-CN","frontmatter":{"title":"6.宏与内联","date":"2023-01-19T11:11:41.000Z","tags":["linux"],"description":"一、宏 1. 为什么要有宏 因为函数的调用必须要将程序执行的顺序转移到函数所存放在内存中的某个地址，将函数的程序内容执行完后，再返回到转去执行该函数前的地方。这种转移操作要求在转去执行前要保存现场并记忆执行的地址，转回后要恢复现场，并按原来保存地址继续执行。因此，函数调用要有一定的时间和空间方面的开销，于是将影响其效率。 而宏只是在预处理的地方把代码展...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c__%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/6.%E5%AE%8F%E4%B8%8E%E5%86%85%E8%81%94.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"6.宏与内联"}],["meta",{"property":"og:description","content":"一、宏 1. 为什么要有宏 因为函数的调用必须要将程序执行的顺序转移到函数所存放在内存中的某个地址，将函数的程序内容执行完后，再返回到转去执行该函数前的地方。这种转移操作要求在转去执行前要保存现场并记忆执行的地址，转回后要恢复现场，并按原来保存地址继续执行。因此，函数调用要有一定的时间和空间方面的开销，于是将影响其效率。 而宏只是在预处理的地方把代码展..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-01-19T11:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6.宏与内联\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-19T11:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"一、宏","slug":"一、宏","link":"#一、宏","children":[{"level":3,"title":"1. 为什么要有宏","slug":"_1-为什么要有宏","link":"#_1-为什么要有宏","children":[]},{"level":3,"title":"2. 宏的问题","slug":"_2-宏的问题","link":"#_2-宏的问题","children":[]}]},{"level":2,"title":"二、内联","slug":"二、内联","link":"#二、内联","children":[]}],"git":{},"readingTime":{"minutes":3.74,"words":1121},"filePathRelative":"编程语言/c++语言/基础语法/6.宏与内联.md","localizedDate":"2023年1月19日","excerpt":"<h2>一、宏</h2>\\n<h3>1. 为什么要有宏</h3>\\n<p>因为函数的调用必须要将程序执行的顺序转移到函数所存放在内存中的某个地址，将函数的程序内容执行完后，再返回到转去执行该函数前的地方。这种转移操作要求在转去执行前要保存现场并记忆执行的地址，转回后要恢复现场，并按原来保存地址继续执行。因此，函数调用要有一定的时间和空间方面的开销，于是将影响其效率。</p>\\n<p>而宏只是在预处理的地方把代码展开，不需要额外的空间和时间方面的开销，所以调用一个宏比调用一个函数更有效率</p>\\n<h3>2. 宏的问题</h3>\\n<p>缺点：</p>\\n<ul>\\n<li>宏没有类型检测，不安全</li>\\n<li>宏是在预处理时进行简单文本替换，并不是简单的参数传递（很难处理一些特定情况。例如：Add(x*x)，传入 (5+5, 10+3) 变成了 <code>5+5*10+3</code>）</li>\\n<li>使代码变长，不能进行调试</li>\\n</ul>","autoDesc":true}');export{h as comp,s as data};
