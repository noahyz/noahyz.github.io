import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,o as t}from"./app-D1zlwylF.js";const n={};function l(r,i){return t(),s("div",null,i[0]||(i[0]=[a(`<p>最近线上遇到一个很抓狂的问题，线上跑的服务端进程突然没有了。虽然及时发现重启解决问题，但是必须要查查为什么进程没了。</p><h2 id="_1-进程终止的原因" tabindex="-1"><a class="header-anchor" href="#_1-进程终止的原因"><span>1. 进程终止的原因</span></a></h2><p>一共有 8 种方式让进程终止，其中有 5 种是正常终止</p><ol><li>从 main 函数返回</li><li>调用 exit</li><li>调用 _exit 或者 _Exit</li><li>最后一个线程从其启动例程返回</li><li>从最后一个线程调用 pthread_exit</li></ol><p>异常终止有 3 种</p><ol><li>调用 abort</li><li>接到一个信号</li><li>最后一个线程对取消请求作出响应</li></ol><p>我们跑在线上的服务进程都是不会退出的，正常情况下业务是不会让其退出的。在上面说到的异常情况中，没有业务会去主动调用 abort 函数，其实调用 abort 就是发送进程不可忽略的信号 SIGABRT 信号。最后一个线程对取消请求作出响应这种情况业务一般也不会自己设置。因此经过排查，<strong>其实线上的服务进程终止就只能是收到了一个信号，要么是这个信号进程没有处理执行了默认退出的动作，要么是进程本身不具备处理这个信号的权限。</strong></p><p>其中有两个信号比较特殊，SIGKILL、SIGSTOP。这两个信号不能被忽略，因为他们向内核和超级用户提供了使进程终止或者停止的可靠方法。这两个信号也不能捕捉。还有一类信号例如：SIGABRT、SIGBUS等，虽然可以捕捉甚至忽略，但是通常不建议这么干，由硬件异常产生的信号(如非法内存引用或者除以0，甚至硬件故障) ，进程继续运行的行为是未知的。</p><p>而重点是我们需要知道这个信号是其他进程发出的，还是自己给自己发出的退出信号。</p><p><strong>因此，我们现在很清楚，解决进程悄无声息的终止的原因，就是进程收到了一个让其退出的信号，找到谁发的这个信号，然后弄清楚它为什么要发。</strong></p><h2 id="_2-信号" tabindex="-1"><a class="header-anchor" href="#_2-信号"><span>2. 信号</span></a></h2><p>我们经常使用的 kill ，起始就是给进程发送信号 SIGKILL 。再比如写 c++ 程序最常遇到的段错误，就是内核给进程发送了例如 SIGSEGV 信号，代表无效的内存引用。</p><p>举个例子：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">		sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我写了一段代码，然后编译，放在后台运行，并且使用 strace 查看监控该进程。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>gcc -o test test.c</span></span>
<span class="line"><span>./test &amp;  //得到该进程的pid</span></span>
<span class="line"><span>strace -T -tt -e trace=all -p process_pid</span></span>
<span class="line"><span>然后另起终端，kill 掉这个进程。 kill -9 process_id</span></span>
<span class="line"><span>观察 strace 的状态</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>09:31:30.821272 +++ killed by SIGKILL +++</span></span>
<span class="line"><span>[1]+  已杀死               ./test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后显示出两行信息，收到了 SIGKILL 信号，于是进程默认退出了。好，明白了信号的简单原理。我们再来探究一个问题，此时我们虽然知道了收到了那个信号。但是不知道谁发的这个信号，还有他为什么要发这个信号。接下来我们探究一下原因。</p><h2 id="_3-谁发的信号" tabindex="-1"><a class="header-anchor" href="#_3-谁发的信号"><span>3.谁发的信号</span></a></h2><p>先来介绍一种非常常见的系统性问题引起的 kill 掉进程。</p><h4 id="_3-1-系统-oom" tabindex="-1"><a class="header-anchor" href="#_3-1-系统-oom"><span>3.1 系统 OOM</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Major distribution kernels set the default value of /proc/sys/vm/overcommit_memory to zero, which means that processes can request more memory than is currently free in the system. This is done based on the heuristics that allocated memory is not used immediately, and that processes, over their lifetime, also do not use all of the memory they allocate. Without overcommit, a system will not fully utilize its memory, thus wasting some of it. Overcommiting memory allows the system to use the memory in a more efficient way, but at the risk of OOM situations. Memory-hogging programs can deplete the system&#39;s memory, bringing the whole system to a grinding halt. This can lead to a situation, when memory is so low, that even a single page cannot be allocated to a user process, to allow the administrator to kill an appropriate task, or to the kernel to carry out important operations such as freeing memory. In such a situation, the OOM-killer kicks in and identifies the process to be the sacrificial lamb for the benefit of the rest of the system.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Users and system administrators have often asked for ways to control the behavior of the OOM killer. To facilitate control, the /proc/&lt;pid&gt;/oom_adj knob was introduced to save important processes in the system from being killed, and define an order of processes to be killed. The possible values of oom_adj range from -17 to +15. The higher the score, more likely the associated process is to be killed by OOM-killer. If oom_adj is set to -17, the process is not considered for OOM-killing.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>linux 系统为了充分利用内存，在进程启动时，系统不会立即分配给进程内存，而是等进程需要内存的时候再来分配。换句话说，如果进程在启动时系统就分配好进程需要的内存，那么好处是：我们可以实时知道系统内存被使用了多少，后面启动的进程如果系统内存不足就不能启动。但是坏处是：系统分配给进程的内存可能进程暂时没有用到，让这块内存空闲着，浪费系统资源。于是才用进程先启动，等使用内存的时候再来分配。这就导致了占用内存的进程可能会耗尽系统的内存，使整个系统陷入停顿；而且这个行为是不可预知的，当系统内存被耗尽的时候，Linux 会采用 OOM-KILL 的方法，根据 oom_adj 来 kill 掉一个或多个进程，保证整个系统的稳定。(也有书上说，发生OOM 的时候会kill 掉占用内存最大的进程，源码没看，后面看了补上)</p><p>这是一种常见的进程被系统干掉的例子，如果出现这种情况，一般会在 /var/log 下的 message、syslog 或其他文件中留下痕迹，也可以使用 dmesg 来查看</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>dmesg -T | grep -E -i -B100 &#39;killed process&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>因此，建议如果是比较重要的进程，那么就给这个进程以保护机制，就如上面提到的设置 oom_adj，oom_adj 的值为 -17---+15，值越大发生OOM 的时候更容易被 kill 掉，如果某个进程 oom_adj 设置为 -17，那么就说明这个进程就被认为是不能被 OOM-killing 的。</p><h4 id="_3-2-查看日志" tabindex="-1"><a class="header-anchor" href="#_3-2-查看日志"><span>3.2 查看日志</span></a></h4><p>last 可以看到谁登陆到了系统，history 可以看到系统的操作记录。</p><p>工具 systemtap 是一款内核调试工具，几乎可以监控任何系统调用。</p><p>工具 audit 可以详细监控用户的行为，详细到查看或修改了某个文件。这些都可以在日志中查看到。</p><p>这两个工具后续会补上其使用方法</p><h4 id="_3-3-其他思路" tabindex="-1"><a class="header-anchor" href="#_3-3-其他思路"><span>3.3 其他思路</span></a></h4><p>再执行 linux 命令或者执行脚本的时候一定要清楚脚本或者命令的作用，例如：下面</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>kill -9 \`ps aux | grep python | awk &#39;{print $2}&#39;\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>杀掉了所有的 python 进程</p><p>比如 top -c 默认按照 CPU 使用量排序，所以CPU 100% 的进程在最前面，当按下 K 键时就给进程发了信号，默认信号是 SIGTERM（15），而且history 看日志的时候也只是一个 top 命令。</p><p>还有看看定时事件 crontab，是否有定时事件在搞鬼。</p><p>参考博文：<a href="https://www.cnblogs.com/xybaby/p/8098229.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/xybaby/p/8098229.html</a></p>`,38)]))}const p=e(n,[["render",l],["__file","2.排查进程终止的原因.html.vue"]]),d=JSON.parse('{"path":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/2.%E6%8E%92%E6%9F%A5%E8%BF%9B%E7%A8%8B%E7%BB%88%E6%AD%A2%E7%9A%84%E5%8E%9F%E5%9B%A0.html","title":"2.排查进程终止的原因","lang":"zh-CN","frontmatter":{"title":"2.排查进程终止的原因","date":"2020-10-25T19:11:41.000Z","tags":["进程丢失"],"description":"最近线上遇到一个很抓狂的问题，线上跑的服务端进程突然没有了。虽然及时发现重启解决问题，但是必须要查查为什么进程没了。 1. 进程终止的原因 一共有 8 种方式让进程终止，其中有 5 种是正常终止 从 main 函数返回 调用 exit 调用 _exit 或者 _Exit 最后一个线程从其启动例程返回 从最后一个线程调用 pthread_exit 异常终...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/2.%E6%8E%92%E6%9F%A5%E8%BF%9B%E7%A8%8B%E7%BB%88%E6%AD%A2%E7%9A%84%E5%8E%9F%E5%9B%A0.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"2.排查进程终止的原因"}],["meta",{"property":"og:description","content":"最近线上遇到一个很抓狂的问题，线上跑的服务端进程突然没有了。虽然及时发现重启解决问题，但是必须要查查为什么进程没了。 1. 进程终止的原因 一共有 8 种方式让进程终止，其中有 5 种是正常终止 从 main 函数返回 调用 exit 调用 _exit 或者 _Exit 最后一个线程从其启动例程返回 从最后一个线程调用 pthread_exit 异常终..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["meta",{"property":"article:tag","content":"进程丢失"}],["meta",{"property":"article:published_time","content":"2020-10-25T19:11:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2.排查进程终止的原因\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-10-25T19:11:41.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"1. 进程终止的原因","slug":"_1-进程终止的原因","link":"#_1-进程终止的原因","children":[]},{"level":2,"title":"2. 信号","slug":"_2-信号","link":"#_2-信号","children":[]},{"level":2,"title":"3.谁发的信号","slug":"_3-谁发的信号","link":"#_3-谁发的信号","children":[]}],"git":{},"readingTime":{"minutes":6.13,"words":1840},"filePathRelative":"操作系统/问题排查/2.排查进程终止的原因.md","localizedDate":"2020年10月26日","excerpt":"<p>最近线上遇到一个很抓狂的问题，线上跑的服务端进程突然没有了。虽然及时发现重启解决问题，但是必须要查查为什么进程没了。</p>\\n<h2>1. 进程终止的原因</h2>\\n<p>一共有 8 种方式让进程终止，其中有 5 种是正常终止</p>\\n<ol>\\n<li>从 main 函数返回</li>\\n<li>调用 exit</li>\\n<li>调用 _exit 或者 _Exit</li>\\n<li>最后一个线程从其启动例程返回</li>\\n<li>从最后一个线程调用 pthread_exit</li>\\n</ol>\\n<p>异常终止有 3 种</p>\\n<ol>\\n<li>调用 abort</li>\\n<li>接到一个信号</li>\\n<li>最后一个线程对取消请求作出响应</li>\\n</ol>","autoDesc":true}');export{p as comp,d as data};
