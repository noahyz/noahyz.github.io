import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,o as t}from"./app-D1zlwylF.js";const i={};function l(p,n){return t(),s("div",null,n[0]||(n[0]=[a(`<p><a href="https://www.softwareverify.com/blog/the-nineteen-types-of-memory-leak/" target="_blank" rel="noopener noreferrer">https://www.softwareverify.com/blog/the-nineteen-types-of-memory-leak/</a></p><p>内存泄漏可能会有很多种不同的类型情况，我们总结一下内存泄漏的类型</p><h4 id="一、临时工作空间泄漏" tabindex="-1"><a class="header-anchor" href="#一、临时工作空间泄漏"><span>一、临时工作空间泄漏</span></a></h4><p>在函数或类方法内部分配的内存，函数完成前不会释放</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>HANDLE create_comms_handle() {</span></span>
<span class="line"><span>	char* name;</span></span>
<span class="line"><span>	HANDLE handle = nullptr;</span></span>
<span class="line"><span>	name = new char[10];</span></span>
<span class="line"><span>	if (name != NULL) {</span></span>
<span class="line"><span>			snprintf(name, &quot;hello&quot;, id);</span></span>
<span class="line"><span>			handle = create_handle(name);</span></span>
<span class="line"><span>			</span></span>
<span class="line"><span>			// 如果这里不进行释放内存，会造成内存泄漏</span></span>
<span class="line"><span>			// delete[] name</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>	return handle;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)]))}const d=e(i,[["render",l],["__file","十九种内存泄漏.html.vue"]]),o=JSON.parse('{"path":"/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E5%8D%81%E4%B9%9D%E7%A7%8D%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F.html","title":"十九种内存泄漏","lang":"zh-CN","frontmatter":{"title":"十九种内存泄漏","description":"https://www.softwareverify.com/blog/the-nineteen-types-of-memory-leak/ 内存泄漏可能会有很多种不同的类型情况，我们总结一下内存泄漏的类型 一、临时工作空间泄漏 在函数或类方法内部分配的内存，函数完成前不会释放","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E6%A0%B8%E5%8E%9F%E7%90%86/%E5%8D%81%E4%B9%9D%E7%A7%8D%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"十九种内存泄漏"}],["meta",{"property":"og:description","content":"https://www.softwareverify.com/blog/the-nineteen-types-of-memory-leak/ 内存泄漏可能会有很多种不同的类型情况，我们总结一下内存泄漏的类型 一、临时工作空间泄漏 在函数或类方法内部分配的内存，函数完成前不会释放"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"十九种内存泄漏\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":0.41,"words":123},"filePathRelative":"操作系统/内存管理/内核原理/十九种内存泄漏.md","excerpt":"<p><a href=\\"https://www.softwareverify.com/blog/the-nineteen-types-of-memory-leak/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.softwareverify.com/blog/the-nineteen-types-of-memory-leak/</a></p>\\n<p>内存泄漏可能会有很多种不同的类型情况，我们总结一下内存泄漏的类型</p>\\n<h4>一、临时工作空间泄漏</h4>\\n<p>在函数或类方法内部分配的内存，函数完成前不会释放</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>HANDLE create_comms_handle() {</span></span>\\n<span class=\\"line\\"><span>\\tchar* name;</span></span>\\n<span class=\\"line\\"><span>\\tHANDLE handle = nullptr;</span></span>\\n<span class=\\"line\\"><span>\\tname = new char[10];</span></span>\\n<span class=\\"line\\"><span>\\tif (name != NULL) {</span></span>\\n<span class=\\"line\\"><span>\\t\\t\\tsnprintf(name, \\"hello\\", id);</span></span>\\n<span class=\\"line\\"><span>\\t\\t\\thandle = create_handle(name);</span></span>\\n<span class=\\"line\\"><span>\\t\\t\\t</span></span>\\n<span class=\\"line\\"><span>\\t\\t\\t// 如果这里不进行释放内存，会造成内存泄漏</span></span>\\n<span class=\\"line\\"><span>\\t\\t\\t// delete[] name</span></span>\\n<span class=\\"line\\"><span>\\t}</span></span>\\n<span class=\\"line\\"><span>\\treturn handle;</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,o as data};
