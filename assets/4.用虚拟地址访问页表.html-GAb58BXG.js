import{_ as f}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as s}from"./app-D1zlwylF.js";const i={};function c(d,e){return s(),n("div",null,e[0]||(e[0]=[a(`<p>虚拟地址和物理地址是乱序映射的。</p><h3 id="一、查看分页的结果" tabindex="-1"><a class="header-anchor" href="#一、查看分页的结果"><span>一、查看分页的结果</span></a></h3><p>在开启分页后，我们可以使用 <code>info tab</code> 命令看到页表中虚拟地址到物理地址的映射关系。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>cr3: 0x000000100000</span></span>
<span class="line"><span>0x00000000-0x000fffff -&gt; 0x000000000000-0x0000000fffff</span></span>
<span class="line"><span>0xc0000000-0xc00fffff -&gt; 0x000000000000-0x0000000fffff</span></span>
<span class="line"><span>0xffc00000-0xffc00fff -&gt; 0x000000101000-0x000000101fff</span></span>
<span class="line"><span>0xfff00000-0xffffefff -&gt; 0x000000101000-0x0000001fffff</span></span>
<span class="line"><span>0xfffff000-0xffffffff -&gt; 0x000000100000-0x000000100fff</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cr3 寄存器显示的是页目录表的物理地址。左边的虚拟地址，右边的是物理地址。</p><p>第一行，虚拟地址是 <code>0x00000000-0x000fffff</code>，这是虚拟空间低端 1M 内存，其对应的物理地址是 <code>0x000000000000-0x0000000fffff</code>。这是第 0 个页表的作用。</p><p>第二行，虚拟地址是 <code>0xc0000000-0xc00fffff</code>，这是第 768 个页表的作用。由于第 0 个页目录项和第 768 个页目录项指向的是同一个页表，所以其映射的物理地址依然是 <code>0x000000000000-0x0000000fffff</code></p><p>然后下面的三行，是在创建页表的时候，最后一个页目录表项（第 1023 个目录项）中填入的是页目录表的物理地址。</p><p>先来看第三行 <code>0xffc00000-0xffc00fff -&gt; 0x000000101000-0x000000101fff</code>。</p><p>虚拟地址的高 10 位用来访问页目录表中的目录项，这里高 10 位全是 1，<code>1111_1111b = 0x3f = 1023</code> ，则访问的是最后一个目录项。该目录项的高 20 位是页目录表本身的物理地址 <code>0x100000</code>。在这里会被认定为是页表地址。线性地址的中间 10 位用来在页表中定位一个页表项，从该页表项中获取物理地址。此时 10 位是 <code>0000_0000b = 0x0</code>，检索到第 0 个页表项，这里存储的是 <code>0x101000</code>，此值被认为是最终的物理页地址。再使用剩余的 12 位，就可以得到最终被映射的物理地址：<code>0x101000+0x000 = 0x101000</code>。因此虚拟地址是 <code>0xffc00000-0xffc00fff</code>，其被映射的物理地址范围是 <code>0x000000101000-0x000000101fff</code> 没有问题。</p><p>高 10 位若位 <code>0x3ff</code>，则会访问到页目录表中最后一个页目录项，由于页表中也是 1024 个页表项，故中间 10 位若为 <code>0x3ff</code>，则会访问到页表中最后一个页表项。</p><p>来看第四行 <code>0xfff00000-0xffffefff -&gt; 0x000000101000-0x0000001fffff</code>。虚拟地址 <code>0xfff00000</code> 高 10 位是 <code>0x3ff</code>，中间 10 位是 <code>0x300</code>，这是第 768 个页目录项，该页目录项指向的页表与第 0 个页目录项指向的页表相同。所以虚拟地址 <code>0xfff00000</code> 映射为物理地址 <code>0x000000101000</code> 没有问题。</p><p>来看第五行 <code>0xfffff000-0xffffffff -&gt; 0x000000100000-0x000000100fff</code>。虚拟地址 <code>0xfffff000</code> 的高 10 位是 <code>0x3ff</code>，中间 10 位是 <code>0x3ff</code>，因此得到的物理页地址是 <code>0x100000</code>。剩余 12 位为 0，所以虚拟地址 <code>0xfffff000</code> 映射为物理地址 <code>0x000000100000</code></p><h3 id="二、总结虚拟地址获取页表中各数据类型的方法" tabindex="-1"><a class="header-anchor" href="#二、总结虚拟地址获取页表中各数据类型的方法"><span>二、总结虚拟地址获取页表中各数据类型的方法</span></a></h3><ul><li><p>获取页目录表物理地址：让虚拟地址的高 20 位为 <code>0xfffff</code>，低 12 位为 <code>0x000</code>，即 <code>0xfffff000</code>。这也是页目录表中第 0 个页目录项自身的物理地址</p></li><li><p>访问页目录中的页目录项，即获取页表物理地址：要使虚拟地址为 <code>0xfffffxxx</code>，其中 xxx 是页目录项的索引乘以 4 的积</p></li><li><p>访问页表中的页表项：要使虚拟地址高 10 位为 <code>0x3ff</code>，目的是获取页目录表物理地址。中间 10 位为页表的索引，因为是 10 位的索引值，所以这里不用乘以 4。低 12 位为页表内的偏移地址，用来定位页表项，他必须是已经乘以 4 的值</p><p>即为：<code>0x3ff &lt;&lt; 22 + 中间10位&lt;&lt;12 + 低12位</code></p></li></ul><h3 id="三、虚拟地址的转换过程" tabindex="-1"><a class="header-anchor" href="#三、虚拟地址的转换过程"><span>三、虚拟地址的转换过程</span></a></h3><ul><li>高 10 位是页目录项 pde 的索引，用于在页目录表中定位 pde，细节是处理器获取高 10 位后自动将其乘以 4，再加上页目录表的物理地址，这样便得到了 pde 索引对应的 pde 所在的物理地址，然后自动在该物理地址中，即该 pde 中，获取保存的页表物理地址</li><li>中间 10 位是页表项 pte 的索引，用于在页表中定位 pte。细节是处理器获取中间 10 位后自动将其乘以 4，再加上第一步中得到的页表的物理地址，这样便得到了 pte 索引对应的 pte 所在的物理地址，然后自动在该物理地址（该 pte）中获取保存的普通物理页的物理地址</li><li>低 12 位是物理页内的偏移量，页大小是 4KB，12 位可寻址的范围正好是 4KB，因此处理器便直接把低 12 位作为第二步中获取的物理页的偏移量，无需乘以 4。用物理页的物理地址加上这低 12 位的和便是这 32位虚拟地址最终落向的物理地址</li></ul>`,17)]))}const l=f(i,[["render",c],["__file","4.用虚拟地址访问页表.html.vue"]]),p=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98/4.%E7%94%A8%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E8%AE%BF%E9%97%AE%E9%A1%B5%E8%A1%A8.html","title":"用虚拟地址访问页表","lang":"zh-CN","frontmatter":{"title":"用虚拟地址访问页表","description":"虚拟地址和物理地址是乱序映射的。 一、查看分页的结果 在开启分页后，我们可以使用 info tab 命令看到页表中虚拟地址到物理地址的映射关系。 cr3 寄存器显示的是页目录表的物理地址。左边的虚拟地址，右边的是物理地址。 第一行，虚拟地址是 0x00000000-0x000fffff，这是虚拟空间低端 1M 内存，其对应的物理地址是 0x000000...","head":[["meta",{"property":"og:url","content":"https://noahyz.github.io/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98/4.%E7%94%A8%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E8%AE%BF%E9%97%AE%E9%A1%B5%E8%A1%A8.html"}],["meta",{"property":"og:site_name","content":"noahyz的博客"}],["meta",{"property":"og:title","content":"用虚拟地址访问页表"}],["meta",{"property":"og:description","content":"虚拟地址和物理地址是乱序映射的。 一、查看分页的结果 在开启分页后，我们可以使用 info tab 命令看到页表中虚拟地址到物理地址的映射关系。 cr3 寄存器显示的是页目录表的物理地址。左边的虚拟地址，右边的是物理地址。 第一行，虚拟地址是 0x00000000-0x000fffff，这是虚拟空间低端 1M 内存，其对应的物理地址是 0x000000..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"noahyz"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"用虚拟地址访问页表\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"noahyz\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":3,"title":"一、查看分页的结果","slug":"一、查看分页的结果","link":"#一、查看分页的结果","children":[]},{"level":3,"title":"二、总结虚拟地址获取页表中各数据类型的方法","slug":"二、总结虚拟地址获取页表中各数据类型的方法","link":"#二、总结虚拟地址获取页表中各数据类型的方法","children":[]},{"level":3,"title":"三、虚拟地址的转换过程","slug":"三、虚拟地址的转换过程","link":"#三、虚拟地址的转换过程","children":[]}],"git":{},"readingTime":{"minutes":4.03,"words":1208},"filePathRelative":"技术专题/手写操作系统/4.内存/4.用虚拟地址访问页表.md","excerpt":"<p>虚拟地址和物理地址是乱序映射的。</p>\\n<h3>一、查看分页的结果</h3>\\n<p>在开启分页后，我们可以使用 <code>info tab</code> 命令看到页表中虚拟地址到物理地址的映射关系。</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>cr3: 0x000000100000</span></span>\\n<span class=\\"line\\"><span>0x00000000-0x000fffff -&gt; 0x000000000000-0x0000000fffff</span></span>\\n<span class=\\"line\\"><span>0xc0000000-0xc00fffff -&gt; 0x000000000000-0x0000000fffff</span></span>\\n<span class=\\"line\\"><span>0xffc00000-0xffc00fff -&gt; 0x000000101000-0x000000101fff</span></span>\\n<span class=\\"line\\"><span>0xfff00000-0xffffefff -&gt; 0x000000101000-0x0000001fffff</span></span>\\n<span class=\\"line\\"><span>0xfffff000-0xffffffff -&gt; 0x000000100000-0x000000100fff</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{l as comp,p as data};
